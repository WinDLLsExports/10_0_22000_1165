                                     Callstack: %p %p %p %p %p %p %p %p %p %p %p %p
 @8}(t?L
 A^_]
 A^_^
 A^_^[]
 A^A\_^]
 A__]
 A__^
 A_A^]
 A_A^_
 A_A^_^[
 A_A^_^]
 A_A^A\
 A_A^A\_^
 A_A^A\_^[]
 A_A^A]_^
 A_A^A]A\]
 A_A^A]A\_
 A_A^A]A\_^]
 H3E H3E
 Hcy@H
 Microsoft Corporation. All rights reserved.
 Operating System
 SELECT EXISTS( SELECT 1 FROM PackageUser as pu INNER JOIN PackageExternalLocation AS pel ON pel.Package=pu.Package AND (pel.User=0 OR pel.User=pu.User) INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE pu.User=?1 AND p.PackageFullName=?2 AND (pu._WorkId=0 OR pu._WorkId=?3) AND (pel._WorkId=0 OR pel._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) UNION ALL SELECT 1 FROM DependencyGraph AS dg INNER JOIN PackageExternalLocation AS pel ON pel.Package=dg.SupplierPackage AND (pel.User=0 OR pel.User=dg.User) INNER JOIN Package AS p ON p._PackageID=dg.DependentPackage WHERE dg.User=?1 AND p.PackageFullName=?2 AND (dg._WorkId=0 OR dg._WorkId=?3) AND (pel._WorkId=0 OR pel._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) LIMIT 1);
 SELECT EXISTS( SELECT 1 FROM PackageUser as pu INNER JOIN PackageExternalLocation AS pel ON pel.Package=pu.Package AND (pel.User=0 OR pel.User=pu.User) INNER JOIN Package AS p ON p._PackageID=pu.Package WHERE pu.User=?1 AND p.PackageFullName=?2 AND pu._WorkId=0 AND pel._WorkId=0 AND p._WorkId=0 UNION ALL SELECT 1 FROM DependencyGraph AS dg INNER JOIN PackageExternalLocation AS pel ON pel.Package=dg.SupplierPackage AND (pel.User=0 OR pel.User=dg.User) INNER JOIN Package AS p ON p._PackageID=dg.DependentPackage WHERE dg.User=?1 AND p.PackageFullName=?2 AND dg._WorkId=0 AND pel._WorkId=0 AND p._WorkId=0 LIMIT 1);
 u-fD
 UPDATE Package SET Flags=Flags|0x400 WHERE _PackageID IN (SELECT toSetFlags._PackageID FROM PACKAGE AS toSetFlags INNER JOIN (SELECT p._PackageID, p.SourceBundle, MAX(Version) AS MaxVersion FROM Package AS p WHERE p.PackageType&0x21!=0 AND (p._WorkId=0 OR p._WorkId=?1) AND EXISTS (SELECT 1 FROM PackageUser AS puser WHERE p._PackageID=puser.Package AND puser._WorkId=?1) AND NOT EXISTS (SELECT 1 FROM PackageUser AS pu WHERE p._PackageID=pu.Package AND (pu.DeploymentState=6 OR pu.DeploymentState=5) AND (pu._WorkId=0 OR pu._WorkId=?1) AND (p._WorkId=0  OR p._WorkId=?1) LIMIT 1) GROUP BY PackageFamily) highestVersion ON CASE WHEN toSetFlags.SourceBundle=0 THEN highestVersion._PackageID=toSetFlags._PackageID ELSE toSetFlags.SourceBundle=highestVersion.SourceBundle AND toSetFlags.PackageType=8 END)
 UPDATE Package SET Flags=Flags|0x400 WHERE _PackageID IN (SELECT toSetFlags._PackageID FROM PACKAGE AS toSetFlags INNER JOIN (SELECT p._PackageID, p.SourceBundle, MAX(Version) AS MaxVersion FROM Package AS p WHERE p.PackageType&0x21!=0 AND p._WorkId=0 AND NOT EXISTS (SELECT 1 FROM PackageUser AS pu WHERE p._PackageID=pu.Package AND (pu.DeploymentState=6 OR pu.DeploymentState=5) AND pu._WorkId=0 AND p._WorkId=0 LIMIT 1) AND (p.PackageFamily NOT IN (SELECT PackageFamily FROM Package WHERE Flags&0x400!=0 GROUP BY PackageFamily)) GROUP BY PackageFamily) highestVersion ON CASE WHEN toSetFlags.SourceBundle=0 THEN highestVersion._PackageID=toSetFlags._PackageID ELSE toSetFlags.SourceBundle=highestVersion.SourceBundle AND toSetFlags.PackageType=8 END)
 UPDATE Package SET Flags=Flags|0x400 WHERE _PackageID IN (SELECT toSetFlags._PackageID FROM PACKAGE AS toSetFlags INNER JOIN (SELECT p._PackageID, p.SourceBundle, MAX(Version) AS MaxVersion FROM Package AS p WHERE p.PackageType&0x21!=0 AND p.PackageFamily=? AND p._WorkId=0 AND NOT EXISTS (SELECT 1 FROM PackageUser AS pu WHERE p._PackageID=pu.Package AND (pu.DeploymentState=6 OR pu.DeploymentState=5) AND pu._WorkId=0 AND p._WorkId=0 LIMIT 1) GROUP BY PackageFamily) highestVersion ON CASE WHEN toSetFlags.SourceBundle=0 THEN highestVersion._PackageID=toSetFlags._PackageID ELSE toSetFlags.SourceBundle=highestVersion.SourceBundle AND toSetFlags.PackageType=8 END)
 UPDATE Package SET Flags=Flags|0x400 WHERE _PackageID IN (SELECT toSetFlags._PackageID FROM PACKAGE AS toSetFlags INNER JOIN (SELECT p._PackageID, p.SourceBundle, MAX(Version) AS MaxVersion FROM Package AS p WHERE p.PackageType&0x21!=0 AND p.PackageFamily=?1 AND (p._WorkId=0 OR p._WorkId=?2) AND NOT EXISTS (SELECT 1 FROM PackageUser AS pu WHERE p._PackageID=pu.Package AND (pu.DeploymentState=6 OR pu.DeploymentState=5) AND (pu._WorkId=0 OR pu._WorkId=?2) AND (p._WorkId=0  OR p._WorkId=?2)  LIMIT 1) GROUP BY PackageFamily) highestVersion ON CASE WHEN toSetFlags.SourceBundle=0 THEN highestVersion._PackageID=toSetFlags._PackageID ELSE toSetFlags.SourceBundle=highestVersion.SourceBundle AND toSetFlags.PackageType=8 END)
 UpstreamDependentPackageFullName
 Windows
!(wil::verify_bool((__noop(bestEffort || (packageRoot != nullptr && pDeleteOperations != nullptr)), ((bestEffort || (packageRoot != nullptr && pDeleteOperations != nullptr)) ? 1 : 0))))
!(wil::verify_bool((__noop(destinationDirectory < ManagedDirectory::NumDirectories), ((destinationDirectory < ManagedDirectory::NumDirectories) ? 1 : 0))))
!(wil::verify_bool((__noop(directoryToDelete < ManagedDirectory::NumDirectories), ((directoryToDelete < ManagedDirectory::NumDirectories) ? 1 : 0))))
!(wil::verify_bool((__noop(string == value), ((string == value) ? 1 : 0))))
!(wil::verify_bool(activatableClass->AddAttribute(aliasedAttribute, 1)))
!(wil::verify_bool(activatableClass->AddAttribute(entryPointAttribute, activatableClassEntryPoint)))
!(wil::verify_bool(ConvertSidToStringSidW(package->GetVisibleUser(), &userSidString)))
!(wil::verify_bool(extensionRegistration->AddAttribute(capabilitiesProperty, capabilities)))
!(wil::verify_bool(extensionRegistration->put_Icon(iconPath)))
!\$ E3
!_additionalValuesForInprocServer32.try_emplace( ValueName(WindowsGetStringRawBuffer(name, nullptr)), RegSzValueData(value)).second
!activatableClass->AddAttribute(name, value)
!activatableClass->put_DllPath(dllPath)
!activatableClass->put_ThreadingType(threadingModel)
!current.IsValid()
!D$`I
!emplaceResult.second
!fileHandle
!hasAnyPerArchitecturePaths && !pathFound
!inProcessHandlerNode
!inProcessServerNode
!IsCreateRegistryCompatibilityManagerPresent()
!m_values.try_emplace(std::move(valueName), std::move(valueData)).second
!pathFound
!pointer
!server->put_AppUserModelId(appUserModelId)
!server->put_CommandLine(commandLine)
!server->put_ExePath(exePath)
!server->put_ExePath(exePath) || !server->put_IdentityType(IdentityType_ActivateAsPackage) || !server->put_Instancing(InstancingType_SingleInstance) || !server->put_AppUserModelId(appUserModelId)
!server->put_IdentityType(identityType)
!server->put_Instancing(instancing)
!serverRegistration->put_ExePath(serverPath) || !serverRegistration->put_IdentityType(IdentityType_ActivateAsPackage) || !serverRegistration->put_Instancing(InstancingType_SingleInstance) || !serverRegistration->put_AppUserModelId(appUserModelId) || !serverRegistration->AddAttribute(sharedUsageName, sharedUsageValue)
!source && (length == static_cast<size_t>(-1))
!string
!t$ 3
!T$@A
!t$`H
!t$pE3
!This program cannot be run in DOS mode.
"%ls"
"%ls" %ls
".B204b.06N
".B204T.06`
"b&n(l*
#\$pA
#OSIntegration::DEH::RegistryCompatibility::Key::AddSubkey
#StreamingDataSourcePrefetchCanceled
#text
$#Au(
$(Package)
$0< u
$0ku!
$0ku(
$D!l$@A
%02u%02u%02u %02u%02u%02u.%03u [%s 0x%08X] P%x T%x: %s
%02u%02u%02u %02u%02u%02u.%03u [Profile %ums] P%x T%x: %s
%02u%02u%02u %02u%02u%02u.%03u [Trace] P%x T%x: %s
%08x%08x
%AppRepository%
%AppRepository%\Downlevel\StateRepository-Machine.srd
%AppRepository%\StateRepository-Deployment.srd
%AppRepository%\StateRepository-Machine.srd
%AppRepository%\StateRepository-User-%UserSid%.srd
%hs!%p: 
%hs(%d) tid(%x) %08X %ws
%hs(%u)\%hs!%p: 
%Ip)Q
%localappdata%\Microsoft\WindowsApps
%nameCollisionMap->HasKey(keyName, &fHasKey)
%PROGRAMDATA%
%s %I64d %s %s
%s!%s
%s%s%s%s
%s.%s
%s.%s%s
%s:%s
%s\%d
%s\%s
%s\%s\%s
%s\%s\%s\%s
%s\AC
%s\AppData
%s\Deleted
%s\LocalCache
%s\LocalState
%s\resources.pri
%s\RoamingState
%s\Settings
%s\Staging
%s\TempState
%s\WpSystem
%s\WpSystem\%s\AppData\Local\Packages
%s_32
%s_64
%SystemRoot%\System32\BackgroundTaskHost.exe
%USERPROFILE%
%windir%\system32
%windir%\System32\BackgroundTaskHost.exe
%windir%\system32\eraproxyapp.exe
%windir%\system32\gamecoreproxyapp.exe
%windir%\system32\windowscoreadapterapp.exe
%windir%\syswow64\aghost.exe
%Y-%m-%dT%H:%M:%SZ
((HRESULT)0x80004005L)
((HRESULT)0x8007000EL)
((HRESULT)0x80070057L)
((HRESULT)0x80080204L)
(|$@I
(08@H
(A;;0xB;;;%s)
(A^_^[
(A^A\_^[]
(A_A^_^[]
(A_A^A]A\_^[]
(caller: %p) 
(currentEnd - currentBegin) > MaxKeyNameLength
(D$Pf
(database)
(f*"(
(HashMap<CLSID, ComProxyStubRegistration*>::Make(&_proxyStubs))
(HashMap<CLSID, ComTreatAsClassRegistration*>::Make(&_treatAsClasses))
(HashMap<CLSID, Internal::ComClassRegistrationCombinedProperties*>::Make(&_classes))
(HashMap<HSTRING, IInspectable*>::Make(&dataFormatUnique))
(HashMap<HSTRING, IInspectable*>::Make(&progIdHelperList))
(HashMap<HSTRING, IInspectable*>::Make(&treatAsList))
(HashMap<IID, ComInterfaceRegistration*>::Make(&_interfaces))
(HashMap<UINT32, IComServerRegistration*>::Make(&_servers))
(Inbox) Package rows w/no PackageUser references
(incomingExtensionElements == nullptr && countIncomingElements > 0) || (outgoingExtensionElements == nullptr && countOutgoingElements > 0)
(incomingExtensionElements == nullptr) || (countIncomingElements == 0) || (result == nullptr)
(incomingPackage == nullptr) || ((incomingExtensionElements == nullptr) && (countIncomingElements > 0)) || (outgoingPackage == nullptr) || ((outgoingExtensionElements == nullptr) && (countOutgoingElements > 0)) || (result == nullptr)
(incomingPackage == nullptr) || (outgoingPackage == nullptr) || (result == nullptr)
(incomingPackage == nullptr) || (result == nullptr)
(L$`f
(L$n (,
(m_text.length() - currentBegin) > MaxKeyNameLength
(Non-Inbox) Package rows w/no PackageUser references
(null)
(registrationStore->*Traits::getEntriesForPackage)(packageFullName, &entriesHandle)
(registrationStore->*Traits::readEntry)(packageFullName, EntryIdRaiiTraits::UnwrapRaiiType(entryId), properties, nullptr, nullptr)
(registrationStore->*Traits::tryGetEntryIdForPackageByIndex)(entriesHandle, index, &hasEntryAtIndex, &entryId)
(supportedArchitecturesForInprocServer == SupportedArchitectureFlags{}) && (supportedArchitecturesForInprocHandler == SupportedArchitectureFlags{})
(t$ H
(t$@I
(t$@L
(t$PL
(tBxTt"zL
)D$0f
*.dat*
*.sccd
*@8t$PuDE3
*[local-name()='%s']
*[local-name()='ActivatableClass']
*[local-name()='ActivatableClassAttribute']
*[local-name()='AppExecutionAlias']
*[local-name()='AppExecutionAlias']/*[local-name()='ExecutionAlias']
*[local-name()='AppExtension']
*[local-name()='AppExtensionHost']/*[local-name()='Name']
*[local-name()='ApplicationContentUriRules']/*[local-name()='Rule']
*[local-name()='AppService']
*[local-name()='AppUriHandler']
*[local-name()='AppUriHandler']/*[local-name()='Host']
*[local-name()='AppUriHandler']/@*[local-name()='Name']
*[local-name()='Arguments']
*[local-name()='BackgroundTasks']/*[local-name()='Task']
*[local-name()='Certificate']
*[local-name()='Certificates']
*[local-name()='DefaultTile']/*[local-name()='TileUpdate']
*[local-name()='DialProtocol']
*[local-name()='DisplayName']
*[local-name()='EditFlags']
*[local-name()='ExecutionAlias']
*[local-name()='Extensions']/*[local-name()='Extension' and @StartPage]
*[local-name()='FileOpenPicker']
*[local-name()='FileSavePicker']
*[local-name()='FileTypeAssociation']
*[local-name()='FileTypeAssociation']/*[local-name()='DisplayName']
*[local-name()='FileTypeAssociation']/*[local-name()='EditFlags']
*[local-name()='FileTypeAssociation']/*[local-name()='InfoTip']
*[local-name()='FileTypeAssociation']/*[local-name()='KindMap']/*[local-name()='Kind']
*[local-name()='FileTypeAssociation']/*[local-name()='Logo']
*[local-name()='FileTypeAssociation']/*[local-name()='MigrationProgIds']/*[local-name()='MigrationProgId']
*[local-name()='FileTypeAssociation']/*[local-name()='OleClass']
*[local-name()='FileTypeAssociation']/*[local-name()='ProgId']
*[local-name()='FileTypeAssociation']/*[local-name()='PropertyLists']/*[local-name()='PropertyList']
*[local-name()='FileTypeAssociation']/*[local-name()='SupportedFileTypes']/*[local-name()='FileType']
*[local-name()='FileTypeAssociation']/*[local-name()='SupportedVerbs']/*[local-name()='Verb']
*[local-name()='Host']
*[local-name()='HostRuntime']
*[local-name()='InfoTip']
*[local-name()='Instancing']
*[local-name()='Interface']
*[local-name()='LocalExperiencePack']
*[local-name()='Logo']
*[local-name()='Path']
*[local-name()='Properties']
*[local-name()='Protocol']
*[local-name()='Protocol']/*[local-name()='DisplayName']
*[local-name()='Protocol']/*[local-name()='Logo']
*[local-name()='Protocol']/*[local-name()='MigrationProgIds']/*[local-name()='MigrationProgId']
*[local-name()='PublisherCacheFolders']/*[local-name()='Folder']
*[local-name()='SelectionCriteria']
*[local-name()='ShareTarget']/*[local-name()='DataFormat']
*[local-name()='ShareTarget']/*[local-name()='SupportedFileTypes']/*[local-name()='FileType']
*[local-name()='ShareTarget']/*[local-name()='SupportedFileTypes']/*[local-name()='SupportsAnyFileType']
*[local-name()='SupportedFileTypes']/*[local-name()='FileType']
*[local-name()='SupportedFileTypes']/*[local-name()='SupportsAnyFileType']
*[local-name()='SupportedVerbs']/*[local-name()='Verb' and @Id='Open']
*[local-name()='TrustFlags']
*[local-name()='VisualElements']
*[local-name()='WebAccountProvider']
*[local-name()='WebAccountProvider']/*[local-name()='AdditionalUrls']/*[local-name()='Url']
*[local-name()='XboxLive']
*instance
*value
, could not get user sid
, status=0x
, user SID: 
,:.60
,N&N N
,N.j$N
,p<DR
,xEPg
,Zndrz
../..
../../*[local-name()='VisualElements']
./*[local-name()='AppointmentsProvider']/*[local-name()='AppointmentsProviderLaunchActions']
./*[local-name()='AppointmentsProvider']/*[local-name()='AppointmentsProviderLaunchActions']/*[local-name()='LaunchAction']
./*[local-name()='AppService']
./*[local-name()='BackgroundTasks']
./*[local-name()='InitialRotationPreference']/*[local-name()='Rotation']
./*[local-name()='LoopbackAccessRules']
./*[local-name()='Rule' and @Direction='in']
./*[local-name()='Rule' and @Direction='out']
./*[local-name()='ServiceId']
./*[local-name()='SplashScreen']
./*[local-name()='VisualElements']
./@*[local-name()="DesiredView"]
./m:VisualElements
./m2:VisualElements
./m3:VisualElements
.?AVbad_alloc@std@@
.?AVbad_array_new_length@std@@
.?AVbad_cast@std@@
.?AVexception@std@@
.?AVResultException@wil@@
.?AVtype_info@@
._Q%N
.00cfg
.accountpicture-ms
.application
.appref-ms
.appx_
.B204
.CRT$XCA
.CRT$XCL
.CRT$XCU
.CRT$XCZ
.CRT$XIA
.CRT$XIC
.CRT$XIZ
.CRT$XLA
.CRT$XLZ
.CRT$XPA
.CRT$XPZ
.CRT$XTA
.CRT$XTZ
.data
.data$brc
.data$r$brc
.data$rs$brc
.didat$2
.didat$3
.didat$4
.didat$5
.didat$6
.didat$7
.edata
.gadget
.gehcont
.gfids
.giats
.html
.idata$2
.idata$3
.idata$4
.idata$5
.idata$6
.N&h$N
.pdata
.rdata
.rdata$brc
.rdata$r
.rdata$T$brc
.rdata$zETW0
.rdata$zETW1
.rdata$zETW2
.rdata$zETW9
.rdata$zzzdbg
.rsrc
.rsrc$01
.rsrc$02
.rtc$IAA
.rtc$IZZ
.rtc$TAA
.rtc$TZZ
.text
.text$di
.text$mn
.text$mn$00
.text$x
.text$yd
.tls$
.tls$ZZZ
.WebAccountProvider
.wwa.bt
.xdata
.xdata$x
.xn--
/*[local-name()="Package"]/*[local-name()="Capabilities"]/*[local-name()="Capability" and @Name="uiAccess"]
/*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application' and @Id='%s']/*[local-name()='Extensions']/*[local-name()='Extension']
/*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application' and @StartPage] | /*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application']/*[local-name()='Extensions']/*[local-name()='Extension' and @StartPage]
/*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application']
/*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application'] | /*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application']/*[local-name()='Extensions']/*[local-name()='Extension']
/*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application']/*[local-name()='Extensions']/*[local-name()='Extension' and @Category='windows.backgroundTasks']/*[local-name()='BackgroundTasks' and @ServerName]
/*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application']/*[local-name()='Extensions']/*[local-name()='Extension' and @Category='windows.backgroundTasks']/*[local-name()='BackgroundTasks']/*[local-name()='Task' and (@Type='pushNotification' or @Type='controlChannel')]
/*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application']/*[local-name()='Extensions']/*[local-name()='Extension' and @Category='windows.loopbackAccessRules']
/*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application']/*[local-name()='Extensions']/*[local-name()='Extension']/*[local-name()='AppExecutionAlias']/*[local-name()='ExecutionAlias' and @Alias]
/*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application']/*[local-name()='Extensions']/*[local-name()='Extension']/*[local-name()='AppExecutionAlias']/*[local-name()='ExecutionAlias' and @Alias='
/*[local-name()='Package']/*[local-name()='Capabilities']/*[local-name()='Capability' and @Name='%s']
/*[local-name()='Package']/*[local-name()='Capabilities']/*[local-name()='Capability' and namespace-uri()='http://schemas.microsoft.com/appx/2013/xbox/manifest']
/*[local-name()='Package']/*[local-name()='Capabilities']/*[local-name()='DeviceCapability' and @Name='%s']
/*[local-name()='Package']/*[local-name()='Dependencies']/*[local-name()='OSPackageDependency']
/*[local-name()='Package']/*[local-name()='Extensions']/*[local-name()='Extension' and @Category='windows.dataProtection']/*[local-name()='DataProtection']
/*[local-name()='Package']/*[local-name()='Extensions']/*[local-name()='Extension'] | /*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application']/*[local-name()='Extensions']/*[local-name()='Extension']
/*[local-name()='Package']/*[local-name()='Extensions']/*[local-name()='Extension'] | /*[local-name()='Package']/*[local-name()='Applications']/*[local-name()='Application']/*[local-name()='Extensions']/*[local-name()='Extension'] | /*[local-name()='Package']/*[local-name()='Extensions']/mx:PackageExtension
/*[local-name()='Package']/*[local-name()='Extensions']/*[local-name()='Extension'] |/*[local-name()='Package']/*[local-name()='Extensions']/mx:PackageExtension
/*[local-name()='Package']/*[local-name()='Properties']/*[local-name()='Description']
/*[local-name()='Package']/*[local-name()='Properties']/*[local-name()='DisplayName']
/*[local-name()='Package']/*[local-name()='Properties']/*[local-name()='Logo']
/*[local-name()='Package']/*[local-name()='Properties']/*[local-name()='PublisherDisplayName']
//*[local-name()='Extension' and @Category='windows.comInterface']/*[local-name()='ComInterface']/*[local-name()='Interface' and @Id='%ls' and @%ls='%ls' and @ProxyStubClsid='%ls']
//*[local-name()='Extension' and @Category='windows.comInterface']/*[local-name()='ComInterface']/*[local-name()='ProxyStub' and @Id='%ls']
//*[local-name()='Extension' and @Category='windows.comInterface']/*[local-name()='ComInterface']/*[local-name()='TypeLib' and @Id='%ls']/*[local-name()='Version' and @VersionNumber='%ls']
//*[local-name()='Extension' and @Category='windows.comServer']/*[local-name()='ComServer']/*[local-name()='ExeServer' or local-name()='SurrogateServer' or local-name()='ServiceServer']/*[(local-name()='Class' or local-name()='ClassReference' or local-name()='InProcessServerClassReference') and @Id='%ls']
//*[local-name()='Extension' and @Category='windows.comServer']/*[local-name()='ComServer']/*[local-name()='InProcessHandler']/*[(local-name()='Class' or local-name()='ClassReference') and @Id='%ls']
//*[local-name()='Extension' and @Category='windows.comServer']/*[local-name()='ComServer']/*[local-name()='InProcessServer']/*[(local-name()='Class' or local-name()='ClassReference') and @Id='%ls']
//*[local-name()='Extension' and @Category='windows.comServer']/*[local-name()='ComServer']/*[local-name()='ManagedInProcessServer']/*[(local-name()='Class' or local-name()='ClassReference') and @Id='%ls']
//*[local-name()='Extension' and @Category='windows.comServer']/*[local-name()='ComServer']/*[local-name()='ProgId' and @Clsid='%ls' and @Id='%ls']
//*[local-name()='Extension' and @Category='windows.comServer']/*[local-name()='ComServer']/*[local-name()='ProgId' and @Id='%ls']
//*[local-name()='Extension' and @Category='windows.comServer']/*[local-name()='ComServer']/*[local-name()='TreatAsClass' and @Id='%ls']
//*[local-name()='Extension' and @Category='windows.comServer']/*[local-name()='ComServer']//*[local-name()='Class' and @Id='%ls']
/@*[local-name()="DesiredView"]
/m:Package/m:Applications/m:Application/m:Extensions/mx:Extension/mx:XboxSystemResources
: could not check access
: could not get SDDL
: could not get security descriptor
: does not have a resources.pri file or could not create a resource manager
: owner is 
: SDDL is 
: user has access 0x
: user has no access
:%Ip)u
::GetLastError()
::RegOpenKeyExW(classesRootKey.get(), Constants::CLSID, 0 , KEY_READ, &clsidTopLevelKey)
::RegOpenKeyExW(clsidKey.get(), Constants::InprocServer32, 0 , KEY_READ, &inprocServer32Key)
::RegOpenKeyExW(clsidTopLevelKey.get(), GuidString(clsid), 0 , samDesired, key)
::RegOpenKeyExW(GetHiveKey(whichHive), GetClassesRootPathRelativeToHiveKey(whichHive), 0 , samDesired, key)
::WindowsConcatString(path.get(), separator.Get(), &temp)
::WindowsConcatString(temp.get(), resourceId.get(), &path)
::WindowsCreateString(buffer.GetChars(), buffer.GetLength(), result)
::WindowsCreateString(enumValue, static_cast<UINT32>(wcslen(enumValue)), stringEnumValueAsHstring)
::WindowsCreateString(temp, static_cast<UINT32>(wcslen(temp)), dwordEnumValueAsHstring)
:@8y=tMH
:ALTPu6A9B
:APPS
:B7Xzu!
:m'w8u(
:PKMPu#A9B
:RDDLuJ9B
:RESA
:RESPt
;\$Pr
;|$@|
;~ rB
;PKCXt
;t$@t
;T$Hv-
??0?$basic_ios@GU?$char_traits@G@std@@@std@@IEAA@XZ
??0?$basic_iostream@GU?$char_traits@G@std@@@std@@QEAA@PEAV?$basic_streambuf@GU?$char_traits@G@std@@@1@@Z
??0?$basic_streambuf@GU?$char_traits@G@std@@@std@@IEAA@XZ
??0_Lockit@std@@QEAA@H@Z
??1?$basic_ios@GU?$char_traits@G@std@@@std@@UEAA@XZ
??1?$basic_iostream@GU?$char_traits@G@std@@@std@@UEAA@XZ
??1?$basic_streambuf@GU?$char_traits@G@std@@@std@@UEAA@XZ
??1_Lockit@std@@QEAA@XZ
??6?$basic_ostream@GU?$char_traits@G@std@@@std@@QEAAAEAV01@H@Z
??6?$basic_ostream@GU?$char_traits@G@std@@@std@@QEAAAEAV01@P6AAEAVios_base@1@AEAV21@@Z@Z
??Bid@locale@std@@QEAA_KXZ
?_Getcat@?$time_get@GV?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
?_Getgloballocale@locale@std@@CAPEAV_Locimp@12@XZ
?_Ipfx@?$basic_istream@GU?$char_traits@G@std@@@std@@QEAA_N_N@Z
?_Lock@?$basic_streambuf@GU?$char_traits@G@std@@@std@@UEAAXXZ
?_Pninc@?$basic_streambuf@GU?$char_traits@G@std@@@std@@IEAAPEAGXZ
?_Unlock@?$basic_streambuf@GU?$char_traits@G@std@@@std@@UEAAXXZ
?_Xbad_alloc@std@@YAXXZ
?_Xlength_error@std@@YAXPEBD@Z
?_Xout_of_range@std@@YAXPEBD@Z
?D9u8tj
?gbump@?$basic_streambuf@GU?$char_traits@G@std@@@std@@IEAAXH@Z
?get@?$time_get@GV?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@@std@@QEBA?AV?$istreambuf_iterator@GU?$char_traits@G@std@@@2@V32@0AEAVios_base@2@AEAHPEAUtm@@PEBG4@Z
?getloc@ios_base@std@@QEBA?AVlocale@2@XZ
?id@?$time_get@GV?$istreambuf_iterator@GU?$char_traits@G@std@@@std@@@std@@2V0locale@2@A
?imbue@?$basic_streambuf@GU?$char_traits@G@std@@@std@@MEAAXAEBVlocale@2@@Z
?setbuf@?$basic_streambuf@GU?$char_traits@G@std@@@std@@MEAAPEAV12@PEAG_J@Z
?setstate@?$basic_ios@GU?$char_traits@G@std@@@std@@QEAAXH_N@Z
?setw@std@@YA?AU?$_Smanip@_J@1@_J@Z
?showmanyc@?$basic_streambuf@GU?$char_traits@G@std@@@std@@MEAA_JXZ
?sync@?$basic_streambuf@GU?$char_traits@G@std@@@std@@MEAAHXZ
?-u<H
?uflow@?$basic_streambuf@GU?$char_traits@G@std@@@std@@MEAAGXZ
?xsgetn@?$basic_streambuf@GU?$char_traits@G@std@@@std@@MEAA_JPEAG_J@Z
?xsputn@?$basic_streambuf@GU?$char_traits@G@std@@@std@@MEAA_JPEBG_J@Z
@*[local-name()='%ls']
@*[local-name()='Category']
@*[local-name()='CompatMode']
@*[local-name()='CurrentDirectoryPath']
@*[local-name()='DdeExecApplication']
@*[local-name()='DdeExecCommand']
@*[local-name()='DdeExecIfExec']
@*[local-name()='DdeExecTopic']
@*[local-name()='Default']
@*[local-name()='HostId']
@*[local-name()='IdentityType']
@*[local-name()='Parameters']
@*[local-name()='RunFullTrust']
@*[local-name()='RuntimeBehavior']
@*[local-name()='Scope']
@*[local-name()='Subsystem']
@*[local-name()='SupportsMultipleInstances']
@*[local-name()='TrustLevel']
@.data
@.didat
@.reloc
@0nJK
@66\[
@8)u8H
@8|$@t|L
@8|$`t
@8|$Ht4I
@8}ou+H
@8=5^
@81t M
@85#S%
@85<R%
@87u0;]
@8FJK
@8-i_
@8l$`t
@8s t
@8s@t*H
@8spt*H
@8t$@
@8t$@t)H
@8t$@t*H
@8t$@t]
@8t$@t^
@8t$`A
@8t$0t
@8t$At
@8t$P
@8t$p
@8t$Pt
@8t$Q
@8t$Qt5@
@8t$R
@8t8@A
@8u(t
@8u/t
@8wxL
@8y t)H
@A^_]
@A^_^
@A^_^[]
@A^_^][
@A^A\_
@A^A\_^]
@A__]
@A_A^]
@A_A^_
@A_A^_^]
@A_A^A\
@A_A^A\_]
@A_A^A\_^
@A_A^A\_^[]
@A_A^A]
@A_A^A]A\_[]
@A_A^A]A\_^[
@A_A^A]A\_^]
@AddedItems
@Category
@DeletedItems
@Direction
@FolderPath
@H^JK
@ModifiedItems
@onecore\admin\appmodel\osim\src\extensiondll\onecore\registration.cpp
@onecore\base\appmodel\staterepository\dataaccesslayer\texta.cpp
@PackageFamilyName
@Qm6t
@shell32.dll,-%d
@SUVWATAUAVAWH
@SUVWATAVAW
@SUVWATAVAWH
@SUVWAV
@SUVWAVAWH
@SUVWAVH
@SUVWH
@SUWAVAWH
@SVWAVAWH
@SVWAVH
@SVWH
@USVH
@USVWATAUAVAWH
@USVWATAUAVH
@USVWATAUAWH
@USVWATAVAWH
@USVWATAVH
@USVWAUAVAWH
@USVWAVAWH
@USVWAVH
@USVWH
@USWATAUAVAWH
@USWATAUH
@USWH
[ UVWH
[%hs(%hs)]
[%hs]
[{Package}]
[checkstatements] #%u Database %p: Statement %p: %s SQL %s
[DatabaseCache.Add] #%u Database %p: StatementCache %p: Cache Size/Hits/Misses %u/%llu/%llu
[DatabaseCache.Get(Hit)] #%u DatabaseCache %p: Database %p: StatementCache %p: Cache Size/Hits/Misses %u/%llu/%llu: Filename %s
[DatabaseCache.Get(Miss)] #%u DatabaseCache %p: Cache Size/Hits/Misses %u/%llu/%llu: Filename %s
[H9)t
[IzZG
[post-sqlite3_exec] #%u Database %p: Try %u (%llums) {%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X} TID:%u : SQL %s
[post-sqlite3_finalize] #%u Database %p: Statement %p: --
[post-sqlite3_prepare] #%u Database %p: Statement -------- --: Try %u (%llums) : SQL %s
[post-sqlite3_prepare] #%u Database %p: Statement %p %s: Try %u (%llums) : SQL %s
[post-sqlite3_reset] #%u Database %p: Statement %p: %s
[post-sqlite3_step] #%u Database %p: Statement %p %s: Tries %u
[pre-DatabaseCache.Get] #%u DatabaseCache %p: Cache Size/Hits/Misses %u/%llu/%llu: Filename %s
[pre-sqlite3_exec] #%u Database %p {%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X} TID:%u : SQL %s
[pre-sqlite3_finalize] #%u Database %p: Statement %p: %s
[pre-sqlite3_prepare] #%u Database %p : SQL %s
[pre-sqlite3_reset] #%u Database %p: Statement %p: %s
[pre-sqlite3_step] #%u Database %p: Statement %p %s
[pre-StatementCache.Get] #%u StatementCache %p: Cache Size/Hits/Misses %u/%llu/%llu
[sqlite3_close] #%u Database %p: %s
[sqlite3_exec] #%u Database %p: Try %u (%llums) {%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X}%s%s TID:%u %s : SQL %s
[sqlite3_finalize] #%u Database %p: Statement %p: --: %s
[sqlite3_open: lastErrNo:0x%X filecontrolrc:%d] #%u Database %p: %hs
[sqlite3_open: lastErrNo:0x%X filecontrolrc:%d] #%u Database %p: %s
[sqlite3_prepare] #%u Database %p: Try %u (%llums) %s : SQL %s
[sqlite3_prepare] #%u Database %p: Try %u (%llums)%s%s %s : SQL %s
[sqlite3_reset] #%u Database %p: Statement %p: %s: %s
[sqlite3_step] #%u Database %p: Statement %p %s: Try %u (%llums)%s%s %s : SQL %s
[S'rA9
[StatementCache.Add(list)] #%u StatementCache %p: Cache Size/Hits/Misses %u/%llu/%llu
[StatementCache.Add] #%u Database %p: StatementCache %p: Statement %p: Cache Size/Hits/Misses %u/%llu/%llu: SQL %s
[StatementCache.Get(Hit)] #%u Database %p: StatementCache %p: Statement %p: Cache Size/Hits/Misses %u/%llu/%llu: SQL %s
[StatementCache.Get(Miss)] #%u StatementCache %p: Cache Size/Hits/Misses %u/%llu/%llu: SQL %s
\$ E3
\$ UH
\$ UVWATAUAVAWH
\$ UVWATAVH
\$ UVWAVAWH
\$ UVWH
\$ UWATAVAWH
\$ VWAVH
\$ WH
\$(D#
\$(D+
\$@D83u5
\$`A;
\$<;A
\$0;A
\$0E3
\$8H;
\$8sSH
\$AD8d$@u
\$DE;
\$h8Y(
\$HD;
\$HD9d$0tDI
\$hM;
\$p;D$8
\$pD;
\$xfD
\$XfD
\$xfD
\$XH!\$0A
\%s.pckgdep
\\?\UNC\
\AC\#!
\AC\Microsoft\CryptnetUrlCache
\AppData
\DosDevices\
\LaunchWinApp.exe" "%1"
\Local
\LocalCache
\LocalState
\Microsoft\Windows\LfSvc\Geofence
\Packages
\Packages\
\resources.pri
\roaming.lock
\RoamingState
\Schemas
\Settings
\settings.dat
\Settings\roaming.lock
\SharedLimitedTime\
\Software\Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppModel\Repository
\Staging
\SystemUWPLauncher.exe
\TempState
\Users\
\WOW6432Node
\Wow6464Node
\WowAA32Node
\WowAA64Node
\WpSystem\
]@tZH
]|pIX
]HH!]
]HH!t$`H
]HH!t$`L
^|`JbbdNfLh0j
^lBaaAV
^m&5t
_^[]H
_^6&a
__C_specific_handler
__current_exception
__current_exception_context
__CxxFrameHandler3
__CxxFrameHandler4
__std_terminate
_1.0.0.0_neutral_neutral_nopublisherid
_activatableClassId.Set(activatableClassId.Get())
_attributes->GetView(&(_properties.CustomAttributes.MapView))
_attributes->GetView(attributes)
_classes->First(&iterator)
_classes->Insert(clsid, classProperties.Get(), &replaced)
_classNames->Append(className.Get())
_collector->CreateExeServerRegistration(&exeServer)
_collector->CreateInprocHandlerClassRegistration(id, &inprocHandlerClassRegistration)
_collector->CreateInprocServerClassRegistration(id, &inprocServerClassDllRegistration)
_collector->CreateInterfaceRegistration(idGuid, &interfaceReg)
_collector->CreateManagedInprocServerClassRegistration(id, &managedInprocServerClassRegistration)
_collector->CreateProgIdRegistration(id.get(), &progId)
_collector->CreateProxyStubRegistration(idGuid, &proxyStub)
_collector->CreateServiceServerRegistration(&serviceServer)
_collector->CreateSurrogateServerRegistration(&surrogateServer)
_collector->CreateTreatAsClassRegistration(idGuid, &treatAs)
_collector->CreateTypeLibRegistration(idGuid, versionNumber.get(), &typeLib)
_collector->ImplicitlyMarkRegistrationsWithMachineScope()
_combinedProperties
_combinedProperties->AddStringValueForInprocServer32CompatibilityKey( assemblyAttributeName.Get(), assembly)
_combinedProperties->AddStringValueForInprocServer32CompatibilityKey( implementationClassAttributeName.Get(), implementationClass)
_combinedProperties->AddStringValueForInprocServer32CompatibilityKey( runtimeVersionAttributeName.Get(), runtimeVersion)
_combinedProperties->SetInprocServerDllPath_arm(mscoreeDll.Get())
_combinedProperties->SetInprocServerDllPath_arm64(mscoreeDll.Get())
_combinedProperties->SetInprocServerDllPath_x64(mscoreeDll.Get())
_combinedProperties->SetInprocServerDllPath_x86(mscoreeDll.Get())
_combinedProperties->SetIsSystemInprocServerDll(true)
_combinedProperties->SetOutofprocClassIsSurrogate(true)
_combinedProperties->SetServerId(serverId)
_current == nullptr
_customAttributes->GetView(&customAttributesView)
_customAttributes->HasKey(name, &alreadyHasKey)
_customAttributes->Insert(name, propValue.Get(), &replacedIgnored)
_customAttributes->Lookup(name, &existingPropValue)
_CxxThrowException
_dataFormats->Append(dataFormat)
_dataFormats->IndexOf(dataFormat, &indexIgnored, &found)
_exeServers->First(&iterator)
_exeServers->HasKey(serverName, found)
_exeServers->Insert(serverName.Get(), static_cast<IExeServerRegistration*>(server), &replaced)
_exeServers->Lookup(serverName, &registration)
_HD8e@t
_implementedCategories->GetView(&implementedCategoriesView)
_implementedCategories->Insert(Wrappers::HStringReference(categoryKey).Get(), categoryPropValue.Get(), &replacedIgnored)
_incomingPackage
_incomingPackage->ParseAndSubmitProxyStubs()
_incomingPackage->ParseAndSubmitRegistrations()
_Initialize(userToken)
_initterm
_initterm_e
_inProcessActivatableClasses->First(&iterator)
_inProcessActivatableClasses->HasKey(activatableClassId, found)
_inProcessActivatableClasses->Insert(acid.Get(), static_cast<IDllServerActivatableClassRegistration*>(activatableClass), &replaced)
_inProcessActivatableClasses->Lookup(activatableClassId, &registration)
_interfaceRegistrations->First(&iterator)
_interfaceRegistrations->HasKey(iid.Get(), found)
_interfaceRegistrations->Insert(iid.Get(), itf, &replaced)
_interfaces->Insert(interfaceId, spRegistration.Get(), &replaced)
_miscStatusAspects->GetView(&miscStatusAspectsView)
_miscStatusAspects->HasKey(aspect, &alreadyHasKey)
_miscStatusAspects->Insert(aspect, miscStatusPropValue.Get(), &replacedIgnored)
_miscStatusAspects->Lookup(aspect, &existingMiscStatusPropValue)
_o___std_exception_copy
_o___std_exception_destroy
_o___std_type_info_destroy_list
_o___stdio_common_vsnprintf_s
_o___stdio_common_vsnwprintf_s
_o___stdio_common_vsprintf
_o___stdio_common_vswprintf
_o___stdio_common_vswscanf
_o__callnewh
_o__cexit
_o__configure_narrow_argv
_o__crt_atexit
_o__errno
_o__execute_onexit_table
_o__initialize_narrow_environment
_o__initialize_onexit_table
_o__invalid_parameter_noinfo
_o__invalid_parameter_noinfo_noreturn
_o__purecall
_o__register_onexit_function
_o__seh_filter_dll
_o__stricmp
_o__wcsicmp
_o__wcsnicmp
_o__wcstoui64
_o__wtoi
_o_ceilf
_o_free
_o_malloc
_o_memcpy_s
_o_realloc
_o_terminate
_o_wcscat_s
_o_wcscpy_s
_o_wcstok_s
_o_wcstoul
_outOfProcessActivatableClasses->First(&iterator)
_outOfProcessActivatableClasses->HasKey(activatableClassId, found)
_outOfProcessActivatableClasses->Insert(acid.Get(), static_cast<IExeServerActivatableClassRegistration*>(activatableClass), &replaced)
_outOfProcessActivatableClasses->Lookup(activatableClassId, &registration)
_package->GetMainPackageFamilyMonikerForActivation(&localMainPackageFamilyMoniker)
_packageElements
_packageElements[i]->get_childNodes(&nodes)
_pastTheEnd
_progIdHelperList->Clear()
_progIdHelperList->Insert(currentVersion, nullptr, &replaced)
_progIdHelperList->Insert(versionIndependentProgId, nullptr, &replaced)
_progIds->Insert(progId, spRegistration.Get(), &replaced)
_properties.ActivatableClasses.InitializeFromStringArray(_classNames.Get())
_properties.EnableOleDefaultHandler.Present
_properties.EnableVirtualizationForInprocHandler.Present
_properties.EnableVirtualizationForInprocServer.Present
_properties.ImplementedCategories.MapView.CopyTo(IID_PPV_ARGS(&implementedCategoriesIterable))
_properties.InprocHandlerHasMachineScope.Present
_properties.InprocServerHasMachineScope.Present
_properties.InsertableObject.Present
_properties.IsSystemInprocServerDll.Present
_properties.MiscStatusAspects.MapView.CopyTo( IID_PPV_ARGS(&miscStatusAspectsIterable))
_properties.OutofprocClassHasMachineScope.Present
_properties.UseUniversalMarshaler.Present
_properties.Verbs.MapView.CopyTo(IID_PPV_ARGS(&verbsIterable))
_propertyValueFactory->CreateString(miscStatus, &miscStatusPropValue)
_propertyValueFactory->CreateString(value, &propValue)
_propertyValueFactory->CreateString(verb, &verbPropValue)
_propertyValueFactory->CreateUInt32(0, &categoryPropValue)
_propertyValueFactory->CreateUInt32(value, &propValue)
_proxyStubRegistrations->First(&iterator)
_proxyStubRegistrations->HasKey(clsid.Get(), found)
_proxyStubRegistrations->Insert(clsid.Get(), proxyStub, &replaced)
_proxyStubRegistrations->Lookup(clsid.Get(), &inspectable)
_proxyStubs->Insert(proxyStubClassId, spRegistration.Get(), &replaced)
_server.CopyTo(server)
_serverCount > 0
_servers->Insert(serverId, serverRegistration.Get(), &replaced)
_sourcePackage->GenerateAppUserModelId( AAP_SERVER_REGISTRATION_SHAREDUSAGE_PRAID, &appUserModelIdBuffer)
_sourcePackage->GenerateAppUserModelId(idBuffer.GetChars(), &appUserModelIdBuffer)
_sourcePackage->GetIsStoreSigned()
_sourcePackage->QuirkIsEnabled(QUIRK_REX_ActivationDEHErrorOverwrite, &ignoreErrorsForCompatibility)
_spAttributesCollisionMap->HasKey(keyName, &fHasKey)
_spAttributesCollisionMap->Insert(keyName, keyName, &fReplaced)
_spAttributesCollisionMap->Remove(keyName)
_spAttributesMap->GetView(_properties.CustomProperties.MapView.ReleaseAndGetAddressOf())
_spAttributesMap->GetView(spAttributesMapView.GetAddressOf())
_spPropertyValueFactory->CreateString(value, &spPropertyValue)
_spPropertyValueFactory->CreateUInt32(value, &spPropertyValue)
_treatAsClasses->Insert(classId, spRegistration.Get(), &replaced)
_typeLibs->Insert(typeLibKey.Get(), spRegistration.Get(), &replaced)
_verbs->GetView(&verbsView)
_verbs->HasKey(verbId, &alreadyHasKey)
_verbs->Insert(verbId, verbPropValue.Get(), &replacedIgnored)
_verbs->Lookup(verbId, &existingVerbPropValue)
` AUAVAWH
` UAVAWH
`.rdata
`[@D+
``hpx
`0>JK
`0FJK
`8FJK
`A^_^[]
`A^_^][
`A^A\_^]
`A_A^_^[
`A_A^_^]
`A_A^A\^]
`A_A^A]_]
`A_A^A]A\_^]
{ AVH
{00020424-0000-0000-C000-000000000046}
{4ED3A719-CEA8-4BD9-910D-E252F997AFC2}
{A56A841F-E974-45C1-8001-7E3F8A085917}
{BFEC0C93-0B7D-4F2C-B09C-AFFFC4BDAE78}
|$ A+
|$ ATAVAWH
|$ AVH
|$ D+
|$ E3
|$ UATAUAVAWH
|$ UATAVH
|$ UAVAWH
|$ UH
|$(A^
|$(A_
|$(E3
|$(H;
|$@D8
|$@E3
|$@L+
|$`E3
|$0A^A\
|$0A_A^
|$0E3
|$0H;
|$4A+
|$8A_A^A\
|$8A+
|$8E3
|$8H!E
|$8H;
|$HD9d$0tQI
|$hE3
|$HH;
|$PE3
|$pH;
|$PH=
|$XH!\$`H!\$hH!\$p
|9fD9Q
}@!}HI
}0H+}(H
}8H!}@H
}8H;u
}P9]Ht
~?fE9$
~@H9FXu
~[IcQ(A
~\HcS(A
~]IcQ(A
~^HcS(A
~_HcS(A
~1LcA(H
~9|$0t
~D$(f
~D$(fA
~TIcQ(A
~VHcS(A
~WIcQ(A
~WMcA(fA
+ *Px
+dZrp>N
+E8<$E
+L$XA
<.L!|$8A
<@/t5L
<@\t=fB
<A\t:
<B\uzH
<Error 0x%X converting the user's SID to a string>
<Error 0x%X getting the user's SID from the process' token>
<Error 0x%X in GetApplicationUserModelId>
<Error 0x%X in GetApplicationUserModelIdFromToken>
<Error 0x%X in GetPackageFullName>
<Error 0x%X in NtQueryInformationProcess>
<Error 0x%X in OpenProcessToken>
<Error 0x%X in QueryFullProcessImageNameW>
<Error 0x%X moving command line>
<Error allocating memory>
<Error message string not found>
<error>
<No commandline present>
<no-error-message>
<None>
<null>
<P/u(
<String too big>
<Unknown>
=;\$8t5
=ALTP
=APPS
=APPSt,H
=DEPG
=DEPGt
=GLOB
=JHN8
=RDDL
=SECU
=TPLT
>`R7>u
>|:(P
>L9 uAH
0123456789ABCDEFBCryptCreateHash
0123456789abcdefghjkmnpqrstvwxyz
040904B0
08@HPX
08@HPX`fJK
08@HPX`h
08@HPX`hpx
08@HPXb
0A^_]
0A^_^
0A^_^[]
0A^_^][
0A^A\]
0A^A]A\_^[]
0A_A^]
0A_A^_
0A_A^_][
0A_A^_^]
0A_A^A\
0A_A^A\_]
0A_A^A\_^
0A_A^A\_^[]
0A_A^A]_]
0A_A^A]_^
0A_A^A]A\_
0A_A^A]A\_^]
0h~JK
0RP\M
0x%08lx
1.3.6.1.4.1.311.10.3.6
1.3.6.1.4.1.311.10.3.70
1.3.6.1.4.1.311.76.3.1
10.0.22000.1165
10.0.22000.1165 (WinBuild.160101.0800)
1234567890abcdefghjkmnpqrstvwxyzABCDEFGHJKMNPQRSTVWXYZ
2J,N.j$N
2t$A+
3;\$8t+
3D$@A
3D$8%x
3D$XA
4j8d6T2N,J*a
66666
6B062R
6d<H:|>d@rD
6E;f(t
6f:f8B4B2J
6H9;t
6N2J,N.j$N
8@~JK
8@HVJK
8@NJK
8@uuI
8\$ u
8\$`t
8\$`thH
8^@t=H
8_(t$H
88:8>
8A^_^[
8A_A^A]A\_^][
8A9}Hu<A8
8D2B4
8D9l$Pt
8DEPG
8EptX
8H!(H
8L$0tEH
8L$0u
8L$8t
8PPu#
8SRD1t
8YMtf@
8Yxt4H
9(v H
9*vVH
9\$0t
9\$8|
9\$Ht4H
9\$Pv[H
9\tkA
9] v/A
9_`t8H
9_dt8H
9{Xv/@8
9+t_H
90tFH
97tKA
98v H
98v*H
98v0H
98v2H
9C u I
9D$@t
9D$`t.
9D$8t
9D$8tBH
9D$pt/A
9D$Xt
9Epu#E3
9GLOBA
9H9t$X
9JHN8
9L$`t!A
9L$0}b
9L$0t
9M4t}A
9N4t\A
9N4tdA
9N4tN
9O4t?A
9O4t>
9O4tN
9q uSH
9RESAA
9RESPA
9s@|/3
9SECUuGA9A
9t$@t
9t$8|
9t$Du
9TPLTt
9y<tjH
9Y8IL
A"D8A#t
A(A;@
A,9A(
A]A\]
A]A\_[]
A^_[]
A^_^[
A^_^[]
A^_^][
A^A\]
A^A\_^]
A^A]]
A^A]A\
A^A]A\_]
A^A]A\_^[]
A_A\_^]
A_A]A\_]
A_A]A\_^
A_A]A\_^[]
A_A^]
A_A^_
A_A^_^[
A_A^_^[]
A_A^_^]
A_A^_^][
A_A^A\
A_A^A\_]
A_A^A\_^
A_A^A\_^[]
A_A^A\_^][
A_A^A]
A_A^A]_]
A_A^A]_^
A_A^A]_^[]
A_A^A]A\
A_A^A]A\]
A_A^A]A\_
A_A^A]A\_[]
A_A^A]A\_^
A_A^A]A\_^[]
A_A^A]A\_^]
A_A^A]A\_^][
a7l6y+
A8]8t
A8~8tII
A8I!t
A9,$u
A9~(v)I
A9~(v-I
A9~0u
A9~0u)
A94$u
A9u0t H
A9u0tLA
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
Access: %u mask 0x%0x
AccessCheck
AccessControlFlags
accountpictureprovider
AccTreeResetNamedSecurityInfo
ACFolder
acid.Initialize(activatableClass->get_ActivatableClassId())
AcquireSRWLockExclusive
AcquireSRWLockShared
AcquireStateLock
AcquisitionInfo
Action
Action Protocol
ActionDisplayName
activatableClass
activatableClass->get_ActivationType(&activationType)
activatableClass->PendingWriteToStore(packageMoniker, registrationStoreContext)
activatableClass->put_IsPackageRelativePath(isPackageRelativePath)
ActivatableClassId
ActivatableClassIdentifier
activateAsActivator
activateAsPackage
activateAsUser
Activation
activationType == Windows::Foundation::ActivationType_OutOfProcess
ActiveCodePage
ActivityError
ActivityFailure
ActivityIntermediateStop
ActivityStoppedAutomatically
AddAccessAllowedAceEx
AddAccessAllowedAceEx %ls %u %p
AddAce
addAppointment
addend
AddExtensionProgId
AddImplementedCategory(CATID_Insertable)
AdditionalUrls
AddLanguageToMachineLanguageList
AddPackageDataAccessHelper %ws %ws
AddRestrictedAppContainerPathIfNeccessary
AddStringCustomAttribute(assemblyAttributeName.Get(), assembly)
AddStringCustomAttribute(implementationClassAttributeName.Get(), implementationClass)
AddStringCustomAttribute(runtimeVersionAttributeName.Get(), runtimeVersion)
AdjustTokenPrivileges
After %d retries for %ws, hr=0x%0x
afterFirstUnlock
aghostsvcs.dll
ALARM_DEH_KEYWORD
Alias
aliasedAttribute.Initialize(DownloadUploadClassConstants::attributeAliased)
All merge file indices are taken
Allocate
AllocateAndInitializeSid
AllowSilentDefaultTakeOver
Already encrypted %ws can't do DPL
ALTPH
Always
always
AlwaysUnsafe
Analyze
ANALYZE;
ancestor::*[local-name()='Application']
ancestor::*[local-name()='Application'][1]
ancestor::*[local-name()='Extension']
Apartment
api-ms-win-appmodel-identity-l1-2-0.dll
api-ms-win-appmodel-runtime-internal-l1-1-1.dll
api-ms-win-appmodel-runtime-internal-l1-1-2.dll
api-ms-win-appmodel-runtime-internal-l1-1-3.dll
api-ms-win-appmodel-runtime-internal-l1-1-4.dll
api-ms-win-appmodel-runtime-l1-1-0.dll
api-ms-win-appmodel-runtime-l1-1-1.dll
api-ms-win-appmodel-state-l1-2-0.dll
api-ms-win-appmodel-unlock-l1-1-0.dll
api-ms-win-core-apiquery-l1-1-0.dll
api-ms-win-core-biplmapi-l1-1-0.dll
api-ms-win-core-biptcltapi-l1-1-7.dll
api-ms-win-core-com-l1-1-0.dll
api-ms-win-core-com-private-l1-1-0.dll
api-ms-win-core-debug-l1-1-0.dll
api-ms-win-core-delayload-l1-1-0.dll
api-ms-win-core-delayload-l1-1-1.dll
api-ms-win-core-errorhandling-l1-1-0.dll
api-ms-win-core-file-l1-1-0.dll
api-ms-win-core-file-l1-2-0.dll
api-ms-win-core-file-l1-2-4.dll
api-ms-win-core-file-l2-1-0.dll
api-ms-win-core-file-l2-1-2.dll
api-ms-win-core-handle-l1-1-0.dll
api-ms-win-core-heap-l1-1-0.dll
api-ms-win-core-heap-l2-1-0.dll
api-ms-win-core-interlocked-l1-1-0.dll
api-ms-win-core-io-l1-1-0.dll
api-ms-win-core-kernel32-legacy-l1-1-0.dll
api-ms-win-core-libraryloader-l1-2-0.dll
api-ms-win-core-localization-l1-2-0.dll
api-ms-win-core-memory-l1-1-0.dll
api-ms-win-core-path-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-1.dll
api-ms-win-core-processthreads-l1-1-3.dll
api-ms-win-core-profile-l1-1-0.dll
api-ms-win-core-psapi-l1-1-0.dll
api-ms-win-core-quirks-l1-1-0.dll
api-ms-win-core-realtime-l1-1-0.dll
api-ms-win-core-registry-l1-1-0.dll
api-ms-win-core-registry-l1-1-1.dll
api-ms-win-core-registry-l2-1-0.dll
api-ms-win-core-rtlsupport-l1-1-0.dll
api-ms-win-core-shlwapi-legacy-l1-1-0.dll
api-ms-win-core-string-l1-1-0.dll
api-ms-win-core-string-l2-1-0.dll
api-ms-win-core-synch-l1-1-0.dll
api-ms-win-core-synch-l1-2-0.dll
api-ms-win-core-sysinfo-l1-1-0.dll
api-ms-win-core-threadpool-l1-2-0.dll
api-ms-win-core-threadpool-legacy-l1-1-0.dll
api-ms-win-core-timezone-l1-1-0.dll
api-ms-win-core-windowserrorreporting-l1-1-1.dll
api-ms-win-core-winrt-error-l1-1-0.dll
api-ms-win-core-winrt-l1-1-0.dll
api-ms-win-core-winrt-string-l1-1-0.dll
api-ms-win-core-wow64-l1-1-1.dll
api-ms-win-crt-private-l1-1-0.dll
api-ms-win-crt-runtime-l1-1-0.dll
api-ms-win-crt-string-l1-1-0.dll
api-ms-win-eventing-classicprovider-l1-1-0.dll
api-ms-win-eventing-provider-l1-1-0.dll
api-ms-win-eventing-tdh-l1-1-0.dll
api-ms-win-net-isolation-l1-1-0.dll
api-ms-win-ntuser-ie-message-l1-1-0.dll
api-ms-win-security-accesshlpr-l1-1-0.dll
api-ms-win-security-base-l1-1-0.dll
api-ms-win-security-cryptoapi-l1-1-0.dll
api-ms-win-security-lsalookup-l1-1-0.dll
api-ms-win-security-lsalookup-l2-1-0.dll
api-ms-win-security-provider-l1-1-0.dll
api-ms-win-security-sddl-l1-1-0.dll
api-ms-win-shcore-stream-l1-1-0.dll
api-ms-win-stateseparation-helpers-l1-1-0.dll
ApiSetQueryApiSetPresence
appContainer
AppContainerDeriveSidFromMoniker
AppData
AppDataFolder
AppDataVolume
AppendMenuFlag
AppExecutionAlias
AppExecutionAliasUser
AppExtension
AppExtensionHost
AppExtensionName
AppID
AppId
AppID
AppId
AppInstaller
AppInstallerUri
ApplicabilityState
ApplicabilityStateEnumMap
Application
application
Application
application.manifest
application.reference
application->GetAppUserModelId(&appUserModelId)
ApplicationBackgroundTask
ApplicationCompany
ApplicationContentUriRule
ApplicationContentUris
ApplicationCount
ApplicationDescription
ApplicationExtension
ApplicationIcon
ApplicationIdentity
ApplicationIndex
ApplicationLogo
applicationManaged
ApplicationName
ApplicationProperty
Applications
applications->GetCurrent(&application)
ApplicationType
ApplicationUser
ApplicationUserModelId
appLicensing
AppliedACLs
AppListEntry
APPLYDATA_DEH_KEYWORD
ApplyExceptions %u
ApplyInPlace
ApplyPackageDataAccessACLs %ls %ls %ls %d %d
ApplyRegistryACLs %u
ApplyRegistrySubKeyACLs
ApplySystemAppDataBaseKeyACLs
APPMODEL_RUNTIME_DMR_KEYWORD
AppModelDeploymentNotifications
AppName
AppObject.Aliased
AppObject.EntryPoint
AppObject.RuntimeType
appOSVersion
AppPaths
AppService
APPSERVICE_DEH_KEYWORD
AppStateSubFolder
APPSYNC_DEH_KEYWORD
AppUriHandler
AppUriHandlerGroup
AppUserModelId
AppUserModelID
appUserModelId.Initialize(appUserModelIdBuffer.GetChars())
appUserModelId.Initialize(L"")
appUserModelId.Initialize(pwszAUMID.get())
AppX Deployment Extensions OneCore DLL
APPX_BASE_DEH_KEYWORD
APPX_E_INVALID_MANIFEST
AppxAllUserStore
AppXAllUserStore.dll
AppxByteCodeQueue
AppXdbszz9cysstkgdz6xk17sywkqb7gjj0v
AppXDeleteFile
AppXDeployment.Perftrack.Task.Uninstall
AppXDeployment.Task.Server.AppxAllUserStore
AppXDeployment.Task.Server.Dependency
AppXDeployment.Task.Server.Deployment
AppXDeployment.Task.Server.Deployment.AllowReset
AppXDeployment.Task.Server.Deployment.AllowService
AppXDeployment.Task.Server.Deployment.AllowService2
AppXDeployment.Task.Server.Deployment.AllowUninstall
AppXDeployment.Task.Server.Deployment.BeginJETSession
AppXDeployment.Task.Server.Deployment.BundleProcessor
AppXDeployment.Task.Server.Deployment.CancelRequest
AppXDeployment.Task.Server.Deployment.CleanupManagerPostDeployment
AppXDeployment.Task.Server.Deployment.CleanupManagerPreDeployment
AppXDeployment.Task.Server.Deployment.ClearPackageStatus
AppXDeployment.Task.Server.Deployment.ContainerDeploymentStateHandler
AppXDeployment.Task.Server.Deployment.CreateDatabase
AppXDeployment.Task.Server.Deployment.DataFlushStateHandler
AppXDeployment.Task.Server.Deployment.DeletePackageFiles
AppXDeployment.Task.Server.Deployment.DeStagePackage
AppXDeployment.Task.Server.Deployment.DisablePackage
AppXDeployment.Task.Server.Deployment.EndJETSession
AppXDeployment.Task.Server.Deployment.EvaluateStateHandler
AppXDeployment.Task.Server.Deployment.FileCompressionStat
AppXDeployment.Task.Server.Deployment.FileStat
AppXDeployment.Task.Server.Deployment.FlushMachineRegistration
AppXDeployment.Task.Server.Deployment.FlushUserRegistration
AppXDeployment.Task.Server.Deployment.GetRequestForWNFName
AppXDeployment.Task.Server.Deployment.MRTDataStateHandler
AppXDeployment.Task.Server.Deployment.MutablePackageDirectoryStateHandler
AppXDeployment.Task.Server.Deployment.OptionalDependencyHandler
AppXDeployment.Task.Server.Deployment.OSIMActivate
AppXDeployment.Task.Server.Deployment.OSIMDeactivate
AppXDeployment.Task.Server.Deployment.PackageManagerGetPackageReader
AppXDeployment.Task.Server.Deployment.PackagesInUse
AppXDeployment.Task.Server.Deployment.PackageStateHandler
AppXDeployment.Task.Server.Deployment.PrerequisiteStateHandler
AppXDeployment.Task.Server.Deployment.QueueManagerDequeue
AppXDeployment.Task.Server.Deployment.QueueManagerEnqueue
AppXDeployment.Task.Server.Deployment.QueueManagerGetNext
AppXDeployment.Task.Server.Deployment.ReleaseJETResources
AppXDeployment.Task.Server.Deployment.RepositoryBeginTransaction
AppXDeployment.Task.Server.Deployment.RepositoryCommitTransaction
AppXDeployment.Task.Server.Deployment.RepositoryRollbackTransaction
AppXDeployment.Task.Server.Deployment.RepositoryTerminateSession
AppXDeployment.Task.Server.Deployment.Runtime
AppXDeployment.Task.Server.Deployment.SetPackageState
AppXDeployment.Task.Server.Deployment.SetPackageStatus
AppXDeployment.Task.Server.Deployment.SharedAppsRedirectHandler
AppXDeployment.Task.Server.Deployment.SharedAppsSyncHandler
AppXDeployment.Task.Server.Deployment.SISOptimization
AppXDeployment.Task.Server.Deployment.StagePackage
AppXDeployment.Task.Server.Deployment.StageUserData
AppXDeployment.Task.Server.Deployment.StateRepositoryDownlevel
AppXDeployment.Task.Server.Deployment.StateRepositoryFixIntegrity
AppXDeployment.Task.Server.Deployment.TilesStateHandler
AppXDeployment.Task.Server.Deployment.Trust
AppXDeployment.Task.Server.Deployment.UpdatePackage
AppXDeployment.Task.Server.Deployment.UpdatePackageStatus
AppXDeployment.Task.Server.Deployment.VersionSupercedenceHandler
AppXDeployment.Task.Server.Extensions
AppXDeployment.Task.Server.OSIM
AppXDeployment.Task.Server.Service
AppXDeployment.Task.Server.StagingManager
AppXDeployment.Task.Server.VolumeManager
AppXDeployment.Task.Server.VolumeRequestManager
AppXDeploymentClient.dll
AppxDeploymentExtensions.dll
AppXDeploymentExtensions.onecore.dll
AppxDeploymentExtensions.OneCore.pdb
AppXDeploymentServer
AppxDeploymentServer.dll
APPXDEPLOYMENTSERVER_KEYWORD
APPXDEPLOYMENTSERVER_PERF_KEYWORD
AppxExtension
AppXFreeMemory
AppXGetPackageCapabilities
AppxManifest
AppxManifest.xml
AppxMetadata\AppxBundleManifest.xml
AppxMetadata\CodeIntegrity.cat
AppxMiniRepository
AppxPackageOriginEnumMap
AppxPackageVolumes
AppxPolicies
AppxPurgeList
AppXqj98qxeaynz6dv4459ayz6bnqxbyaqcs
AppxRoot
AppxSignature.p7x
AppxSignatureOriginEnumMap
AppxStateChange
Architecture
ArchitectureEnumMap
Argument
Arguments
ARI8A
ARI8H
arm64
ArrayAddString %ls
AspectFlag
aspects->get_item(nodeIndex, &node)
aspects->get_length(&listLength)
Assembly
AsynchronousInterface
ATAUAVH
ATAVAWH
ATTACH DATABASE '%s' AS '%s';
Attribute
AttributeName
attributes->get_item(nodeIndex, &node)
attributes->get_length(&listLength)
attributes->Insert(keyName.Get(), propValue.Get(), &replaced)
AttributesMap::Make(&_attributes)
AttributesMap::Make(&registration->_attributes)
AttributeValue
audio
Authorization
AutoConvertTo
automatic index on PackageIdByAll(_PackageID)
AUTOPLAY_DEH_KEYWORD
AutoSelect
AutoUpdatePackage
AuxUserType
B@@8r(u
B|DJFbHNJLL0N
B7Xzz
BACKGROUND_TASKS_DEH_KEYWORD
BackgroundColor
BackgroundEntryPoint
BackgroundPlaybackHost
backgroundTaskClassId.Concat(serverIndex, &fullBackgroundTaskClassId)
backgroundTaskClassId.Initialize(DownloadUploadClassConstants::vpnPluginbackgroundTaskClassId)
backgroundTaskEntryPoint.Initialize(pVpnManifest->backgroundTaskAcid)
BackgroundTaskHost
BackgroundTaskHost.exe
backgroundTaskHost.exe
BackgroundTasksHandlerDEHUnitialize
BackgroundTransferHost
BackgroundTransferHost.exe
BackgroundVpnTaskHost
Backup
BACKUP_ELIGIBILITY
bad allocation
bad array new length
bad cast
batfile
bcd.dll
BcdCloseObject
BcdCloseStore
BcdGetElementData
BcdOpenObject
BcdOpenSystemStore
Bcp47IsValid
Bcp47Langs.dll
bcp47mrm.dll
Bcrypt.dll
BCryptCloseAlgorithmProvider
BCryptDestroyHash
BCryptFinishHash
BCryptGetProperty
BCryptHashData
BCryptOpenAlgorithmProvider
BEGIN -> COMMIT;
BEGIN -> ROLLBACK;
BEGIN EXCLUSIVE /*%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X*/;
BiApplicationStateTransition
BiChangeApplicationStateForPackageName
BinaryCount
BindToObject %ul %ls
BiPtActivateInBackgroundEx
bluetooth
BMAP<
Bool1
Bool2
Bp(rt
BrowserChoice_cw5n1h2txyewy
buffer error
buffer.GetChars() == nullptr
BuildFilename
BuildFilename returned empty lock file path
Bundle
BundlePackage
BundlePackageFullName
BundleResource
BusyCount
BusyDelayBetweenRetries
BusyMaxTimeout
BusyTimeout
BX9A4t
C !C0!C8
C D8U@u
C D9 
C H;{
C()x(H
C,L;KPs
C:\Windows\DefaultApp\AppXSignature.p7x
c:\windows\system32
C@H9CP
C@H9CPt
C`#St
C++/WinRT version:2.0.201201.7
C0D9 
C0D9 @
C84.u53
C8D8 
C9fD9?u-
Cache.Count
Cache.Hits
Cache.Misses
cache_size
CachedMergedResourcesPriFileName
CacheHit
CacheMiss
CacheSpill
CacheUsed
CacheWrite
CalculateAbsolutePathIfNecessary(dllPath, &isPackageRelativePath)
CalculateAbsolutePathIfNecessary(exePath, &isPackageRelativePath)
CalculateBinaryCompatibilityPropertiesIfNecessary(incomingPackage)
CalculateServerPermissions(strPackageSid)
CalculateSurrogateDllPath(incomingPackage)
callContext
CallContext:[%hs] 
callerModule
CallerPackageFullName
callerReturnAddressOffset
CallingProcess
CallOrigin
callOrigin
cannot start a transaction within a transaction
Capabilities
capabilitiesProperty.Initialize(DownloadUploadClassConstants::backgroundTasksPropCapabilities)
Capability
capabilityCheck
CapabilityCount
CapabilityNotSupported
CapabilitySids
capauthz.dll
CaptureErroPathInCallBack %ls 0x%0x
Category
CategoryName
CD$@L
CdplIsAppDataProtectionSupported
CdplIsAppDataProtectionSupported %ls %llu.
CdplIsSupported
CdplProtectFileToLevelWithResult
CdplProtectFileToLevelWithResult %ls level %u protectResult %u %u
census
cerfile
CertAddCertificateContextToStore
CertCloseStore
CertDeleteCertificateFromStore
CertEnumCertificatesInStore
CertFindCertificateInStore
CertFreeCertificateContext
CertGetEnhancedKeyUsage
CertGetSubjectCertificateFromStore
CERTIFICATES_DEH_KEYWORD
CertOpenStore
CfUnregisterSyncRoot
changeid_next_value
CharLowerBuffW
chatMessageNotification
CheckAllCascadingInDeploymentPartition
CheckAllCascadingInMachinePartition
CheckDirectoryExistenceAndLogIfNeeded %ls
CheckDirectoryExistenceAndLogIfNeeded %ls %u
CheckDirectoryExistenceWithRepair %ls %u
CheckDirectoryExistenceWithRepair %ls %u %u
CheckDirectoryExistenceWithRepair %ls%u
CheckIfStateChangeNotificationExists
CheckPackageHasAnyRegistrationsOfTypeForCurrentScope< ComClassRegistrationEntryProperties>(registrationStore, packageFullName, hasComRegistrationsForCurrentScope)
CheckPackageHasAnyRegistrationsOfTypeForCurrentScope< ComInterfaceRegistrationEntryProperties>(registrationStore, packageFullName, hasComRegistrationsForCurrentScope)
CheckPackageHasAnyRegistrationsOfTypeForCurrentScope< ComProgIdRegistrationEntryProperties>(registrationStore, packageFullName, hasComRegistrationsForCurrentScope)
CheckPackageHasAnyRegistrationsOfTypeForCurrentScope< ComTreatAsClassRegistrationEntryProperties>(registrationStore, packageFullName, hasComRegistrationsForCurrentScope)
CheckPackageHasAnyRegistrationsOfTypeForScope<Properties>(registrationStore, packageFullName, PackagedComEntryTraits<Properties>::hasMachineScope, hasAnyRegistrationsForCurrentScope)
CheckPackageHasAnyRegistrationsOfTypeForScope<Properties>(registrationStore, packageFullName, PackagedComEntryTraits<Properties>::hasUserScope, hasAnyRegistrationsForCurrentScope)
CheckPackageHasAnyTypeLibRegistrationsForCurrentScope(registrationStore, packageFullName, hasComRegistrationsForCurrentScope)
CheckPackageHasAnyTypeLibRegistrationsForScope(registrationStore, packageFullName, ::RegistrationHasMachineScope<ComTypeLibVersionRegistrationEntryProperties>, hasAnyRegistrationsForCurrentScope)
CheckPackageHasAnyTypeLibRegistrationsForScope(registrationStore, packageFullName, ::RegistrationHasUserScope<ComTypeLibVersionRegistrationEntryProperties>, hasAnyRegistrationsForCurrentScope)
CheckPackageHasComRegistrationsForCurrentScope(spRegistrationStore.Get(), packageMoniker.Get(), &packageHasComRegistrationsForCurrentScope)
Checkpoint
CheckPoint.VPN_cw5n1h2txyewy
CheckpointInterval
CheckpointMaxClockDelta
CheckpointMode
CheckResult
CheckStateLeftFromPreviousUninstall %u
childNodes->get_item(nodeIndex, &node)
childNodes->get_length(&listLength)
chm.file
Cl tSH
Cl u)H
Cl u)I
CL$@L+
Class
classChilds->get_item(nodeIndex, &node)
classChilds->get_length(&listLength)
classElement->get_baseName(&elementName)
classElement->get_baseName(bstrNodeName.AddressOf())
classes->get_item(classIndex, &node)
classes->get_item(classIndex, &nodeClass)
classes->get_item(nodeIndex, &node)
classes->get_length(&listLength)
classes->HasKey(id, &internalRegistrationExists)
classes->Insert(id, _combinedProperties.Get(), &replaced)
classes->Lookup(id, &_combinedProperties)
classic
ClassId
classId.Initialize(BackgroundPlaybackClassConstants::outOfProcessBackgroundPlayerClassId)
classId.Initialize(BackgroundPlaybackClassConstants::outOfProcessMediaPlayerClassId)
classProperties
ClassReference
classReg->AddDataFormat(dataFormat.Get())
classReg->AddImplementedCategory(implementedCategoryId)
classReg->AddMiscStatusAspect(aspectTypeValue.Get(), aspectOleMiscFlag.Get())
classReg->AddVerb(id.Get(), verb.Get())
classReg->SetAutoConvertTo(autoConvertTo)
classReg->SetConversionReadable(conversion.Get())
classReg->SetConversionReadWritable(conversion.Get())
classReg->SetDefaultFormatName(defaulStandardFormat.Get())
classReg->SetDefaultFormatName(defaultFormatName.Get())
classReg->SetDefaultIcon(defaultIcon.Get())
classReg->SetDisplayName(displayName.Get())
classReg->SetInsertableObject(insertableObject)
classReg->SetMiscStatusDefault(oleMiscFlag.Get())
classReg->SetProgId(progId.Get())
classReg->SetShortDisplayName(shortDisplayName.Get())
classReg->SetToolboxBitmap32(toolboxBitmap.Get())
classReg->SetTypeLib(typeLibId)
classReg->SetTypeLibWithVersion(typeLibId, typeLibVersionNumber.Get())
classReg->SetVersionIndependentProgId(versionIndependentProgId.Get())
classRegistration->SetAppId(_appId.Value)
classRegistration->SetApplicationDisplayName( _properties.ApplicationDisplayName.Value.Get())
classRegistration->SetExeServerArguments(_properties.Arguments.Value.Get())
classRegistration->SetExeServerPath(_properties.Executable.Value.Get(), _properties.IsSystemExecutable.GetValueOrDefault(false), _properties.SystemExecutableArchitecture.GetValueOrDefault(IMAGE_FILE_MACHINE_UNKNOWN))
classXPath
cldapi.dll
CleanupStateName %ws %ws
Clear
ClearApplicationManifestLanguages
ClearNonPortableData
ClearNonPortableData %ws %u %u %u
CLIPC.dll
clipc.dll
ClipCallServer
ClipCallServerImportLicenses
ClipClose
ClipOpen
CloseAppExecutionAliasEx
CloseHandle
CloseState
CloseStateContainer
CloseStateLock
CloseThreadpoolTimer
Cloud Files Uninstall
ClrHost.dll
ClrHost.exe
CLSID
Clsid
CLSID
CLSIDFromString
cmdfile
CoCreateFreeThreadedMarshaler
CoCreateGuid
CoCreateInstance
CoGetApartmentType
CoGetModuleArchitecture
CoGetModuleArchitecture( absolutePathUnspecifiedArchitecture.get(), &moduleArchitecture)
CoGetModuleArchitecture(_exeServerAbsolutePath.get(), reinterpret_cast<DWORD*>(&_executableArchitecture))
CoGetModuleArchitecture(_surrogateDllAbsolutePath.get(), reinterpret_cast<DWORD*>(&_surrogateDllArchitecture))
CoGetModuleArchitecture(absolutePath.get(), architecture)
collector->PendingRemove(outgoingPackage, deploymentOperation, resourcesManager, outgoingPackageContext)
collector->PendingWrite(incomingPackage, resourcesManager, outgoingPackageContext)
collector->QueryInterface(&winrtCollector)
COLLECTOREXTENSION_DEH_KEYWORD
collectors->GetActivationCatalogCollector()->AddInProcessActivatableClassRegistration(classRegistration.Get())
collectors->GetActivationCatalogCollector()->AddInterfaceRegistration(iid, registrationImpl.Get())
collectors->GetActivationCatalogCollector()->AddOutOfProcessActivatableClassRegistration(classRegistration.Get())
collectors->GetActivationCatalogCollector()->AddProxyStubRegistration( clsid, registrationImpl.Get())
collectors->GetActivationCatalogCollector()->AddServerRegistration(serverRegistration.Get())
collectors->GetActivationCatalogCollector()->RetrieveInProcessActivatableClassRegistration(activatableClassId, &found, &retrievedInProcClassRegistration)
collectors->GetActivationCatalogCollector()->RetrieveInterfaceRegistration(iid, &found, nullptr)
collectors->GetActivationCatalogCollector()->RetrieveOutOfProcessActivatableClassRegistration( activatableClassId, &found, &outOfProcessRegistration)
collectors->GetActivationCatalogCollector()->RetrieveOutOfProcessActivatableClassRegistration(activatableClassId, &found, &retrievedOutOfProcClassRegistration)
collectors->GetActivationCatalogCollector()->RetrieveProxyStubRegistration(clsid, &found, &registration)
collectors->GetActivationCatalogCollector()->RetrieveServerRegistration( serverName, &found, &serverRegistration)
collectors->GetActivationCatalogCollector()->RetrieveServerRegistration(serverName, &found, &retrievedServerRegistration)
collectors->GetActivationCatalogCollector()->RetrieveServerRegistration(serverName, &found, &serverRegistration)
collectors->GetExtensionCatalogCollector()->CreateExtensionRegistration( contractId, activatableClassId, spExtensionRegistration.GetAddressOf())
collectors->GetExtensionCatalogCollector()->RetrieveExtensionRegistration( contractId, activatableClassId, spExtensionRegistration.GetAddressOf())
Column
ColumnNumber
Com::Catalog::Win32Registry::Details::GetStringValue
Com::Catalog::Win32Registry::GetInprocServer32Properties
Com::Catalog::Win32Registry::OpenClassesRootKey
Com::Catalog::Win32Registry::OpenClsidKey
com1.
com2.
com3.
com4.
com5.
com6.
com7.
com8.
com9.
combase.dll
ComClassRegistration::RuntimeClassInitialize(classes, id)
comfile
ComInterface
comInterfaceElement->get_baseName(bstrNodeName.AddressOf())
comInterfaceNodes->get_item(nodeIndex, &node)
comInterfaceNodes->get_length(&listLength)
command
commandLine
commandLine.Initialize(L"")
COMMIT /*%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X*/;
CommitPublisherTree
CommitPublisherTree %ls
CommitStateDirectoryStructure
CommitStateRegistryStructure
Common::Deployment::GetSystemBinaryForArchitecture( packageArchitecture, exeFileName, packageIsWin8X, exeServerPath)
Common::Deployment::GetSystemBinaryForArchitecture( this->_sourcePackage->GetPackageArchitecture(), pszPath, packageIsWin8X, pathStringBuffer)
Common::SidHelper::ConvertSidToString(userSid, &userSidString)
Common::Xml::GetAttributeValueStringByLocalName(extensionElement, L"CompatMode", attributeValue, &attributeFound)
Common::Xml::GetAttributeValueStringByLocalName(extensionElement, L"Scope", attributeValue, &attributeFound)
Common::Xml::GetAttributeValueStringFromElement( const_cast<IXMLDOMElement*>(incomingExtensionElements[i]), Appx::Packaging::Manifest::AttributeNameWithoutPrefix::EntryPoint, strEntryPoint, &foundEntryPoint)
Common::Xml::GetAttributeValueStringFromElement( const_cast<IXMLDOMElement*>(incomingExtensionElements[i]), Appx::Packaging::Manifest::AttributeNameWithoutPrefix::StartPage, strEntryPoint, &foundStartPage)
Common::Xml::GetAttributeValueStringFromElement( element.Get(), attributeName.GetRawBuffer(nullptr), buffer)
Common::Xml::GetAttributeValueUInt32FromElement( element.Get(), ActivatableClassConstants::attributeValueAttribute, &value)
Common::Xml::GetValueStringFromQuery( query.GetRawBuffer(nullptr), element.Get(), buffer)
Common::Xml::GetXMLElementsFromQuery( ActivatableClassConstants::attributeXPath, element.Get(), attributes.ReleaseAndGetAddressOf())
Common::Xml::GetXMLElementsFromQuery( ActivatableClassConstants::classesXPath, element.Get(), classes.ReleaseAndGetAddressOf())
Common::Xml::GetXMLElementsFromQuery( ActivatableClassConstants::interfacesXPath, element.Get(), &interfaces)
Common::Xml::GetXMLNodeListFromQuery( L"*[local-name()='BackgroundTasks']/*[local-name()='Task']", const_cast<IXMLDOMElement*>(incomingExtensionElements[i]), &taskItems, &taskItemsCount)
COMMUNICATION_BLOCKING_APP_DEH_KEYWORD
ComOutofprocClassRegistration::RuntimeClassInitialize(classes, id, serverId)
CompanyName
CompareStringEx
CompareStringOrdinal
CompareStringW
CompatMode
compress
Compress(x[,level]) error: Invalid level (%d)
Compress(x[,level]) error: Invalid type for level (%d)
CompressedSizeKB
ComServer
comServerElement->get_baseName(bstrNodeName.AddressOf())
comServerNodes->get_item(nodeIndex, &node)
comServerNodes->get_length(&listLength)
ComServerRegistration::CreateClassRegistration<ComExeClassRegistration>(classId, &classRegistration)
ComServerRegistration::CreateClassRegistration<ComServiceClassRegistration>(classId, &classRegistration)
ComServerRegistration::CreateClassRegistration<ComSurrogateClassRegistration>(classId, &classRegistration)
ComServerRegistration::SetArguments(arguments)
ComServerRegistration::SetExecutable(executable, isSystemExecutable)
ComServerRegistration::SetServiceName(serviceName)
ComServerRegistration::SetSurrogateAppId(appId)
ComServerRegistration::SetSurrogateAppId(classId)
ComServerRegistration::SetSystemExecutableArchitecture(architecture)
Config
confirmAppClose
ConnectedSet
ConnectedSetPackageFamily
console
constrainedImpersonation
ConstructCommandLine(_exeServerAbsolutePath.get(), _exeServerArguments.Value.GetRawBuffer(nullptr), _exeServerCommandLine)
Container %ls user %ls
Content
ContentGroup
ContentGroupFile
contentRestrictions
contentsCopy
ContentType
Context
ContractId
ContractID
contractId.Initialize(DownloadUploadClassConstants::backgroundTasksContractId)
contractIdCopy.Set(contractId.Get())
Control
controlChannel
Conversion
conversionNodes->get_item(nodeIndex, &node)
conversionNodes->get_length(&listLength)
ConvertSecurityDescriptorToStringSecurityDescriptorW
ConvertSidToString
ConvertSidToString %ls
ConvertSidToString %ls %ls %p
ConvertSidToString %p
ConvertSidToString %u
ConvertSidToStringSidW
ConvertStringSecurityDescriptorToSecurityDescriptor( WindowsGetStringRawBuffer(securityDescriptorString, nullptr), SDDL_REVISION_1, reinterpret_cast<PSECURITY_DESCRIPTOR*>(&binarySecurityDescriptor), nullptr)
ConvertStringSecurityDescriptorToSecurityDescriptor(szSDDL, SDDL_REVISION_1, ppSD, nullptr)
ConvertStringSecurityDescriptorToSecurityDescriptorW
ConvertStringSidToSidW
copy.Initialize(_activatableClassId.Get())
copy.Initialize(_contractId.Get())
copy.Initialize(_permissions.Get())
copy.Initialize(_properties.AppUserModelId.Value.Get())
copy.Initialize(_properties.CommandLine.Value.Unexpanded.Get())
copy.Initialize(_properties.Description.Get())
copy.Initialize(_properties.DisplayName.Get())
copy.Initialize(_properties.DllPath.Value.Unexpanded.Get())
copy.Initialize(_properties.ExePath.Value.Unexpanded.Get())
copy.Initialize(_properties.Icon.Get())
copy.Initialize(_properties.Vendor.Get())
copy.Initialize(_serverName.Get())
CopyFileEx( pSourceAbsolutePath, pDestinationAbsolutePath, nullptr, nullptr, nullptr, COPY_FILE_ALLOW_DECRYPTED_DESTINATION)
CopyFileExW
CopyFiles(pCopyOperations, signatureOrigin, bestEffort)
CopyFileW
CopySid
CoSetProxyBlanket
CoTaskMemAlloc
CoTaskMemFree
CoTaskMemRealloc
CouldMultiUserAppsBehaviorBePossibleForPackage
Couldn't get link count from shared merged PRI file
Couldn't open shared merged PRI file to check link count
Count
count
Count
count
CountOfErrorsCorrected
CountOfErrorsDetected
CoWaitForMultipleHandles
cplfile
Cpu:%d%s Io:%d%s Mem:%d%s
CpuPriority
CreateACFolderIfNecessary %ls
CreateACFolderIfNecessary %ls user %ls package %ls %u
CreateActivationCatalogCollector(&activationCatalogCollector)
CreateActivationCatalogCollectorForUser(&activationCatalogCollectorForUser)
CreateAppDataFolder %ls user %ls package %ls
CreateAppDataFolder %u
CreateAppExecutionAliasEx2
CreateAppHive %ls user %ls package %ls
CreateBindCtx
CreateCompatibilityEntries(incomingPackage)
Created shared merged PRI file
CreateDesktopAppXLocalCacheStructure
CreateDirectoriesAndCopyFiles( _incomingPackageManagedDirectories, _incomingPackageFileOperations.Get(), _incomingPackageMoniker.Get(), _incomingSignatureOrigin, false )
CreateDirectory
CreateDirectoryIfNecessary %ws
CreateDirectoryTree %ls
CreateDirectoryTree %ls, post-fix
CreateDirectoryTree(destinationDirectoryPath)
CreateDirectoryW
CreateDirectoryW %ls
CreateDirectoryW %ls %ls
createDist
CreateEventExW
CreateEventW
CreateExtensionCatalogCollector(&extensionCatalogCollector)
CreateFileManager(&m_fileManager)
CreateFileMappingW
CreateFileW
CreateFolderAndSetAcl %ls
CreateFromSddlTemplateStringWithTrusteeSidParseToken %ls
CreateFullFileName %ws %ws from
CreateFullFileName %ws %ws to
CreateFullFileName %ws file %ws
CreateFullFileName %ws file %ws root %ws
CreateHardLinkW
CreateManagedDirectories(managedDirectories, packageMoniker, bestEffort)
CreateMutexExW
createOptions
CreatePackagedComCatalogCollector(&packagedComCatalogCollector)
CreatePackagedComCatalogCollectorForUserOrSystemRegister(userToken, &packagedComCatalogCollectorForUserOrSystemRegister)
CreatePackagesFolderForVolume %u
CreatePrivateObjectSecurityEx
CreatePropertyValueFactoryIfNecessary()
CreatePublisherRoot %zu
CreatePublisherSubFolder Folder[%u] %ls of %zu
CreateRegistryCompatibilityCollector
CreateRegistryCompatibilityCollector(&registryCompatibilityCollector)
CreateRegistryCompatibilityCollectorForUserOrSystemRegister
CreateRegistryCompatibilityCollectorForUserOrSystemRegister(userToken, &registryCompatibilityCollectorForUserOrSystemRegister)
CreateRegistryCompatibilityManager
CreateRegistryCompatibilityManager(m_isMachineRegister, (m_isMachineRegister ? nullptr : m_userToken), &m_registryCompatibilityManager)
CreateResourcesManager((m_whichPhase == WhichPhaseForDEH::Machine), false, userToken, &m_resourcesManager)
CreateSchemaContext
CreateSecureSystemAppDataFolder
CreateSecureSystemAppDataFolder Root %ls
CreateSemaphoreExW
CreateStateContainer
CreateStateContainer %ls
CreateStateLocations %ws %u
CreateStateLocations up to %d times for %ws
CreateStateLock
CreateStateLockRegistration
CreateStateLockRegistration %u
CreateStateMountedFolders %ls user %ls package %ls
CreateStateMountedFolders Root %ls user %ls package %ls hasCentennial %u
CreateStateSubcontainer
CreateStructured
CreateSubKey %ws 0x%0x
CreateSubKey 0x%0x
CreateSystemAppDataFolder %u
CreateSystemAppDataFolder Root %ls
CreateSystemStateRootFolderIfNecessary %ls user %ls %ls
CreateThreadpoolTimer
CreateUnstructured
CreateUnstructuredStateSubFolder %d root %ls
CreateUnstructuredStateSubFolder LOCALCACHE
CreateUnstructuredStateSubFolder ROAMING
CreateUnstructuredStateSubFolder TEMP
CreateWellKnownSid
CreateWellKnownSid %u
CreateWPSystemAndSIDFolders
CRIM0+
Critical
CRYPT32.dll
CryptAcquireContextW
CryptCreateHash
CryptDestroyHash
CryptGetHashParam
CryptHashData
CryptMsgClose
CryptMsgGetParam
CryptQueryObject
CryptReleaseContext
CT$@H
CT$@I
CT$`H
Current shared merged PRI file ignored
Current user-specific merged PRI file ignored
currentBegin == currentEnd
currentBegin == m_text.length()
currentContextId
currentContextMessage
currentContextName
CurrentFilePath
CurrentFileSize
CurrentlyInstalledPackages
currentOperation
CurrentPackageFullName
currentPackageFullName
currentStatus
currentStepIndex
CurrentVersion
CurVer
CUSTOM_CAPABILITY_CHECK
CustomInstallWork
CustomSurrogateExecutable
cW*q.
cw5n1h2txyewy
D!\$`H
D!D$ E3
D!E0H
D!T$DD!T$pI
D#CtA
D#CtD
D#GtD
D$ ALTP
D$ ALTPL
D$ APPS
D$ APPSL
D$ DEPGD
D$ DEPGL
d$ E3
D$ E3
d$ E3
D$ E3
d$ E3
D$ E3
d$ E3
D$ E3
d$ E3
D$ E3
d$ E3
D$ E3
d$ E3
D$ E3
D$ fD
D$ GLOB
D$ H!D$(
D$ H;
D$ JHN8
D$ PKMP
D$ RDDL
D$ RDDLM
D$ RESPL
D$ SECUD
D$ SECUM
D$ SRD1H
D$ TPLT
D$(E3
D$(H+
D$(H9
D$@9|$HD
D$@A+
D$@D3
D$@E3
d$@E3
D$@E3
D$@H;
D$@L;
D$@L+
D$@u1H
D$\E3
D$` t
D$`8_(t
D$`E3
d$`E3
D$`H;
D$`L+
D$`L9u
D$<E3
D$0 u
D$0!|$(H!|$ 
D$0!|$@L
d$0D8
D$0E2
D$0E3
d$0fD
D$0H;
D$0H+
D$0skH
D$4D;
D$4E+
D$4E3
D$8E3
D$8H;
D$8H+
D$8I;
D$8L!D$0
D$a9u
D$DH;
D$DI;
D$H0u
d$h9L$hL
D$hA;
D$hE;
D$HE3
D$hE3
D$HE3
D$hE3
D$hfE
D$hH;
d$HL!e
D$HL;
d$HM;
D$htqH
D$LE3
D$lH9\$pu"A
D$p!M
D$P@@
D$P98t
d$pA!4$I
D$PA3
D$PE3
D$pE3
D$PE3
D$pE3
D$pfD9(tKH
D$pH;
D$PH;
D$pH;
D$PH+D$@I;
D$PHcH
D$pHcy
D$PL;
D$q8T$bu
D$tH;
D$x!D$DL
D$x;(r
D$x;8r
D$x0u
D$X9G4
D$XA;
D$xA;
D$XD3
D$XH;
d$xH9|$hu
D$xI;
D$xL!|$hH
d$xM;
D$xtw
D(mgQ
D:(A;;CC;;;%ls)
D:(A;;GA;;;SY)(A;;GA;;;%ls)(A;;GA;;;%ls)
D:(A;CIOI;GRGX;;;BU)(A;CIOI;GRGX;;;AC)(A;CIOI;GRGWSD;;;SY)
D:(A;CROICI;GA;;;%s)
D:(A;OICI;KA;;;CO)(A;OICI;KA;;;SY)(A;OICI;KA;;;%ls)(A;OICI;KA;;;BA)
D:AI(A;OICI;0x1200A9;;;%s)(A;OICI;0x1200A9;;;BU)
D:AI(A;OICI;GA;;;%s)
D:AI(A;OICI;GA;;;%s)(A;OICI;FA;;;%s)
D:PAI(A;;FA;;;SY)(A;;FA;;;BA)
D:PAI(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;;FRFX;;;BU)(A;;FRFX;;;AU)
D:PAI(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;%s)
D;\$D
D;\$p
D;|$`
D;|$h
D;}(r
D;d$`
D;exr
D;l$`
D;L$lr
D;L$pr
D;l$x
D;t$@
D;t$0
D;t$d
D;t$H
D;t$h
D;t$P
D;t$p
D;u(r
D+D$x
D+D$xD
D3]LA
D3D$@A
D3D$XA
D3ELA
D3ELD
D8 ubH
D8(u^L
D8.u*
D8{8uNH
D8|$@
D8|$0
D8|$1
D8|$hu@H
D8|$Hu8H
D8|$I
D8|$Pt
D8|$Pu
D8|$X
D8}@t
D8}Gt,H
D8}gu
D8}guWH
D8}HtkH
D8}otrL
D8}ou
D8}Pu@D
D8}Xt/A
D8}XtWD8}
D8~HtzD
D8~Xu
D85@L'
D8A#u
D8c4u
D8c6D
D8c6t[A
D8cxt
D8d$@
D8d$@t
D8d$@tP
D8d$`
D8d$0t
D8d$0tY
D8d$Ht)H
D8d$Ht*H
D8d$Ht}H
D8d$I
D8d$pt}H
D8d3@
D8d3@toHc}
D8e@t
D8E`t
D8e0t(H
D8eot H
D8ewt D9eOA
D8f@t7H
D8g|t
D8kPt
D8l$ 
D8l$@t
D8l$0
D8l$1
D8l$P
D8l$R
D8l$X
D8l;@
D8l8@uhH
D8l9@u
D8mHu
D8mPt
D8qPu 
D8t$0
D8t$0tMD
D8t$0tUD
D8t$xu
D8t9@u
D8u7t
D8u8t
D8wPt
D8wPu!
D8wxL
D8y8uyH
D9"u&H
D9#tN
D9#vgL
D9(vkH;
D9;}OH
D9?viH
D9|$ 
D9|$`
D9|$`u
D9|$0H
D9|$d
D9|$Dt+H
D9}@@
D9}0uYH
D9}8t
D9}8t1D9;v,H
D9}gt
D9}gt,
D9}gt[H
D9}gu
D9}XtgD
D9~hv@A
D9aLu
D9c t
D9d$@M
D9d$@t
D9d$@uVH
D9d$0
D9D$0u
D9d$0u8H
D9D$4
D9d$8
D9d$8t
D9d$h
D9d$H
D9d$lv2E
D9d$PL
D9d$Pt
D9d$pv2E
D9e@t
D9egt"H
D9egt&H
D9egt]
D9egu&E3
D9eHt
D9eHtGH
D9eHu
D9eHv
D9ewt
D9g8woL
D9gPvSE
D9h,u
D9iL|
D9l$@
D9l$@t
D9l$@t A
D9l$\trL
D9l$`
D9l$8t
D9l$D
D9l$d
D9l$Du
D9l$h
D9l$l
D9l$p
D9l$P
D9l$PtfH
D9m@t#D9mHI
D9m@t;E
D9m@t9L
D9m@u
D9m@u&H
D9m0u?H
D9mPt
D9mPt}D9+
D9t$`
D9t$`t
D9t$8t
D9u@t
D9u0t6
D9u8t
D9u8t H
D9'vxE3
DACL of %ls has duplicated package*SIDs ? %u
DACL of %ls missing package*SIDs ? %u
daily
data error
Database
Database.Checkpoint
DatabaseCache.Add
DatabaseCache.Get
DatabaseCache.Lifespan
DatabaseConnection
DatabaseCorruptionFirstDetectedUptime
DatabaseCorruptionFirstDetectedWhen
DatabaseCorruptionLastReported
DatabasePtr
DatabaseStatisticsUpdateInterval
DatabaseStatisticsUpdateMaintenanceTaskInterval
DatabaseStatisticsUpdateMaxClockDelta
DataFormats
dataFormats->get_item(nodeIndex, &node)
dataFormats->get_length(&listLength)
dataFormatValues->Append(aspectFlag.Get())
dataFormatValues->Append(directionValue.Get())
dataFormatValues->Append(formatName.Get())
dataFormatValues->Append(mediumFlag.Get())
dataFormatValues->Append(standardFormat.Get())
DATAPACKAGEHOST_DEH_KEYWORD
DD$@H
DD$XH
ddeexec
DebugBreak
default
DEFAULT_DATA
DefaultApp_cw5n1h2txyewy
DefaultBackgroundTasksDEHUnitialize
DefaultFile
DefaultFormatName
DefaultIcon
defaultIconValues->Append(path.Get())
defaultIconValues->Append(resourceIndex.Get())
DefaultStandardFormat
DefaultStartPage
DefaultTile
DeferredCleanup
DehName
DelayLoadFailureHook
DelegateExecute
DELETE
DELETE FROM %s WHERE _WorkId=? AND _WorkId<>0;
DELETE FROM Activation WHERE (_ActivationID NOT IN (SELECT Activation FROM Application)) AND (_ActivationID NOT IN (SELECT Activation FROM ApplicationExtension)) AND (_ActivationID NOT IN (SELECT Activation FROM PackageExtension));
DELETE FROM AppExecutionAlias WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
DELETE FROM AppExecutionAliasUser WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
DELETE FROM AppExecutionAliasUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM AppExtension WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
DELETE FROM AppExtensionHost WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
DELETE FROM AppInstaller WHERE (PackageFamily = 0) AND (_AppInstallerID NOT IN (SELECT AppInstaller FROM AppInstallerUri)) AND (_AppInstallerID NOT IN (SELECT AppInstaller FROM AutoUpdatePackage)) AND (_AppInstallerID NOT IN (SELECT AppInstaller FROM PackageAppInstaller));
DELETE FROM AppInstaller WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM AppInstallerUri WHERE (AppInstaller>0) AND (AppInstaller NOT IN (SELECT _AppInstallerID FROM AppInstaller));
DELETE FROM Application WHERE (Activation>0) AND (Activation NOT IN (SELECT _ActivationID FROM Activation));
DELETE FROM Application WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM Application WHERE _ApplicationID=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM Application WHERE _ApplicationID=? AND _WorkId=0;
DELETE FROM ApplicationBackgroundTask WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
DELETE FROM ApplicationContentUriRule WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
DELETE FROM ApplicationExtension WHERE (Activation>0) AND (Activation NOT IN (SELECT _ActivationID FROM Activation));
DELETE FROM ApplicationExtension WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
DELETE FROM ApplicationIdentity WHERE (ApplicationUserModelId NOT IN (SELECT ApplicationUserModelId FROM Application)) AND (_ApplicationIdentityID NOT IN (SELECT ApplicationIdentity FROM AppExecutionAliasUser)) AND (_ApplicationIdentityID NOT IN (SELECT ApplicationIdentity FROM ApplicationUser)) AND (_ApplicationIdentityID NOT IN (SELECT ApplicationIdentity FROM PrimaryTileUser)) AND (_ApplicationIdentityID NOT IN (SELECT ApplicationIdentity FROM SRJournal)) AND (_ApplicationIdentityID NOT IN (SELECT ApplicationIdentity FROM SRJournalArchive)) AND (_ApplicationIdentityID NOT IN (SELECT ApplicationIdentity FROM SecondaryTileUser));
DELETE FROM ApplicationProperty WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
DELETE FROM ApplicationUser WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
DELETE FROM ApplicationUser WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
DELETE FROM ApplicationUser WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM ApplicationUser WHERE (PackageUser>0) AND (PackageUser NOT IN (SELECT _PackageUserID FROM PackageUser));
DELETE FROM ApplicationUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM AppService WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
DELETE FROM AppUriHandler WHERE (AppUriHandlerGroup>0) AND (AppUriHandlerGroup NOT IN (SELECT _AppUriHandlerGroupID FROM AppUriHandlerGroup));
DELETE FROM AppUriHandler WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
DELETE FROM AppUriHandlerGroup WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
DELETE FROM AppxExtension WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM AppxExtension WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM AppxExtension WHERE _AppxExtensionID=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM AppxExtension WHERE _AppxExtensionID=? AND _WorkId=0;
DELETE FROM AppxManifest WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM AppxManifest WHERE _AppxManifestID=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM AppxManifest WHERE _AppxManifestID=? AND _WorkId=0;
DELETE FROM AutoUpdatePackage WHERE (AppInstaller>0) AND (AppInstaller NOT IN (SELECT _AppInstallerID FROM AppInstaller));
DELETE FROM AutoUpdatePackage WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM Bundle WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM BundlePackage WHERE (Bundle>0) AND (Bundle NOT IN (SELECT _BundleID FROM Bundle));
DELETE FROM BundleResource WHERE (BundlePackage>0) AND (BundlePackage NOT IN (SELECT _BundlePackageID FROM BundlePackage));
DELETE FROM ConnectedSetPackageFamily WHERE (ConnectedSet>0) AND (ConnectedSet NOT IN (SELECT _ConnectedSetID FROM ConnectedSet));
DELETE FROM ConnectedSetPackageFamily WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM ContentGroup WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM ContentGroupFile WHERE (ContentGroup>0) AND (ContentGroup NOT IN (SELECT _ContentGroupID FROM ContentGroup));
DELETE FROM ContentGroupFile WHERE (File>0) AND (File NOT IN (SELECT _FileID FROM File));
DELETE FROM CustomInstallWork WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM CustomInstallWork WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM DefaultTile WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
DELETE FROM Dependency WHERE (DependentPackage>0) AND (DependentPackage NOT IN (SELECT _PackageID FROM Package));
DELETE FROM DependencyGraph WHERE (DependentPackage>0) AND (DependentPackage NOT IN (SELECT _PackageID FROM Package));
DELETE FROM DependencyGraph WHERE (SupplierPackage>0) AND (SupplierPackage NOT IN (SELECT _PackageID FROM Package));
DELETE FROM DependencyGraph WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM DependencyGraph WHERE _DependencyGraphID IN (SELECT _ShadowId FROM DependencyGraph WHERE _WorkId=? AND _WorkId<>0);
DELETE FROM DependencyGraph WHERE _WorkId=? AND _WorkId<>0 AND _IsMarkedForDeletion<>0 AND _ShadowId<>0;
DELETE FROM DeploymentHistory WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
DELETE FROM DeploymentHistory WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM DynamicAppUriHandler WHERE (DynamicAppUriHandlerGroup>0) AND (DynamicAppUriHandlerGroup NOT IN (SELECT _DynamicAppUriHandlerGroupID FROM DynamicAppUriHandlerGroup));
DELETE FROM DynamicAppUriHandlerGroup WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM DynamicAppUriHandlerGroup WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM EndOfLifePackage WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM Enterprise WHERE (_EnterpriseID NOT IN (SELECT Enterprise FROM Package));
DELETE FROM File WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM File WHERE _FileID IN (SELECT _FileID FROM File INNER JOIN (SELECT Package AS P, RelativeFilePath AS R FROM File WHERE _WorkId=? AND _WorkId<>0) WHERE _WorkId=0 AND Package=P AND RelativeFilePath=R);
DELETE FROM FileTypeAssociation WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
DELETE FROM HostRuntime WHERE (PackageExtension>0) AND (PackageExtension NOT IN (SELECT _PackageExtensionID FROM PackageExtension));
DELETE FROM MrtApplication WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
DELETE FROM MrtDefaultTile WHERE (DefaultTile>0) AND (DefaultTile NOT IN (SELECT _DefaultTileID FROM DefaultTile));
DELETE FROM MrtPackage WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM MrtSharedPri WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM MrtUserPri WHERE (MrtSharedPri>0) AND (MrtSharedPri NOT IN (SELECT _MrtSharedPriID FROM MrtSharedPri));
DELETE FROM MrtUserPri WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM MrtUserPri WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM MrtUserPri WHERE Package=? AND User=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM MrtUserPri WHERE Package=? AND User=? AND _WorkId=0;
DELETE FROM NamedDependency WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM OptionalBundle WHERE (MainBundle>0) AND (MainBundle NOT IN (SELECT _BundleID FROM Bundle));
DELETE FROM OptionalBundlePackage WHERE (OptionalBundle>0) AND (OptionalBundle NOT IN (SELECT _OptionalBundleID FROM OptionalBundle));
DELETE FROM OptionalBundleResource WHERE (OptionalBundlePackage>0) AND (OptionalBundlePackage NOT IN (SELECT _OptionalBundlePackageID FROM OptionalBundlePackage));
DELETE FROM Package WHERE (Enterprise>0) AND (Enterprise NOT IN (SELECT _EnterpriseID FROM Enterprise));
DELETE FROM Package WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM Package WHERE (SourceBundle>0) AND (SourceBundle NOT IN (SELECT _BundleID FROM Bundle));
DELETE FROM Package WHERE (TargetDeviceFamily>0) AND (TargetDeviceFamily NOT IN (SELECT _TargetDeviceFamilyID FROM TargetDeviceFamily));
DELETE FROM Package WHERE _PackageID IN (SELECT p_PackageID FROM (SELECT p_PackageID, EXISTS(SELECT 1 FROM BundlePackage AS bp INNER JOIN Package AS p ON bp.Version=p.Version AND bp.Architecture=p.Architecture AND ((bp.ResourceId=p.ResourceId) OR (bp.ResourceId IS NULL AND p.ResourceId IS NULL)) WHERE bp.PackageType=0 AND bp.Bundle=p_SourceBundle AND p.PackageFamily=p_PackageFamily AND bp._WorkId=0 AND p._WorkId=0 LIMIT 1) AS hasPackages FROM (SELECT p._PackageID AS p_PackageID, p.PackageFamily AS p_PackageFamily, p.SourceBundle AS p_SourceBundle FROM Package AS p WHERE p.PackageType & 8 != 0 AND p.SourceBundle <> 0 AND p._WorkId=0)) WHERE hasPackages=0);
DELETE FROM Package WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM Package WHERE _PackageID=? AND _WorkId=0;
DELETE FROM PackageAppInstaller WHERE (AppInstaller>0) AND (AppInstaller NOT IN (SELECT _AppInstallerID FROM AppInstaller));
DELETE FROM PackageAppInstaller WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM PackageDependency WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM PackageDependency WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM PackageExtension WHERE (Activation>0) AND (Activation NOT IN (SELECT _ActivationID FROM Activation));
DELETE FROM PackageExtension WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM PackageExternalLocation WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM PackageExternalLocation WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM PackageExternalLocation WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PackageExternalLocation WHERE User=? AND Package=? AND _WorkId=0;
DELETE FROM PackageFamily WHERE (_PackageFamilyID NOT IN (SELECT PackageFamily FROM AppInstaller)) AND (_PackageFamilyID NOT IN (SELECT PackageFamily FROM AutoUpdatePackage)) AND (_PackageFamilyID NOT IN (SELECT PackageFamily FROM ConnectedSetPackageFamily)) AND (_PackageFamilyID NOT IN (SELECT PackageFamily FROM DynamicAppUriHandlerGroup)) AND (_PackageFamilyID NOT IN (SELECT PackageFamily FROM EndOfLifePackage)) AND (_PackageFamilyID NOT IN (SELECT PackageFamily FROM Package)) AND (_PackageFamilyID NOT IN (SELECT PackageFamily FROM PackageDependency)) AND (_PackageFamilyID NOT IN (SELECT PackageFamily FROM PackageFamilyPolicy)) AND (_PackageFamilyID NOT IN (SELECT PackageFamily FROM PackageFamilyUser)) AND (_PackageFamilyID NOT IN (SELECT PackageFamily FROM PackageIdentity)) AND (_PackageFamilyID NOT IN (SELECT PackageFamily FROM ProvisionedPackageExclude)) AND (_PackageFamilyID NOT IN (SELECT PackageFamily FROM SRJournal)) AND (_PackageFamilyID NOT IN (SELECT PackageFamily FROM SRJournalArchive));
DELETE FROM PackageFamilyPolicy WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM PackageFamilyPolicy WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM PackageFamilyUser WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM PackageFamilyUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM PackageFamilyUserResource WHERE (PackageFamilyUser>0) AND (PackageFamilyUser NOT IN (SELECT _PackageFamilyUserID FROM PackageFamilyUser));
DELETE FROM PackageIdentity WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM PackageIdentity WHERE (PackageFullName NOT IN (SELECT PackageFullName FROM Package)) AND (_PackageIdentityID NOT IN (SELECT PackageIdentity FROM DeploymentHistory)) AND (_PackageIdentityID NOT IN (SELECT PackageIdentity FROM PackageMachineStatus)) AND (_PackageIdentityID NOT IN (SELECT PackageIdentity FROM PackageSuperceded)) AND (_PackageIdentityID NOT IN (SELECT PackageIdentity FROM PackageUserStatus)) AND (_PackageIdentityID NOT IN (SELECT PackageIdentity FROM ProvisionedPackage)) AND (_PackageIdentityID NOT IN (SELECT PackageIdentity FROM ProvisionedPackageDeleted)) AND (_PackageIdentityID NOT IN (SELECT PackageIdentity FROM SRHistory)) AND (_PackageIdentityID NOT IN (SELECT PackageIdentity FROM SRJournal)) AND (_PackageIdentityID NOT IN (SELECT PackageIdentity FROM SRJournalArchive));
DELETE FROM PackageLocation WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM PackageLocation WHERE Package IN (SELECT Package FROM PackageLocation WHERE _WorkId=? AND _WorkId<>0) AND _WorkId=0;
DELETE FROM PackageMachineStatus WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
DELETE FROM PackagePolicy WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM PackagePolicy WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM PackageProperty WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM PackageSourceUri WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM PackageSuperceded WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
DELETE FROM PackageSuperceded WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM PackageUser WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM PackageUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM PackageUser WHERE _PackageUserID IN (SELECT _PackageUserID FROM PackageUser INNER JOIN (SELECT User AS U, Package AS P FROM PackageUser WHERE _WorkId=? AND _WorkId<>0) WHERE _WorkId=0 AND User=U AND Package=P);
DELETE FROM PackageUser WHERE _PackageUserID=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PackageUser WHERE _PackageUserID=? AND _WorkId=0;
DELETE FROM PackageUser WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?);
DELETE FROM PackageUser WHERE User=? AND Package=? AND _WorkId=0;
DELETE FROM PackageUserStatus as pus WHERE pus.PackageIdentity NOT IN ( SELECT _PackageIdentityID FROM PackageIdentity AS pi INNER JOIN Package AS p ON pi.PackageFullName=p.PackageFullName);
DELETE FROM PackageUserStatus AS pus WHERE User IN ( SELECT _UserID FROM User WHERE UserSid=?) AND PackageIdentity IN (SELECT _PackageIdentityID FROM PackageIdentity WHERE PackageFullName=?);
DELETE FROM PackageUserStatus WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
DELETE FROM PackageUserStatus WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM PrimaryTile WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
DELETE FROM PrimaryTile WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM PrimaryTileUser WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
DELETE FROM PrimaryTileUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM PrimaryTileUser WHERE _PrimaryTileUserId IN (SELECT _PrimaryTileUserId FROM PrimaryTileUser INNER JOIN (SELECT ApplicationIdentity AS ai, User AS usr FROM PrimaryTileUser WHERE _WorkId=? AND _WorkId<>0 ) WHERE _WorkId=0 AND ApplicationIdentity=ai AND User=usr);
DELETE FROM PrimaryTileUser WHERE TileUniqueId IN (SELECT TileUniqueId FROM PrimaryTileUser WHERE _WorkId=? AND _WorkId<>0) AND _WorkId=0;
DELETE FROM PrimaryTileUserChangelog WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM Protocol WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
DELETE FROM ProvisionedPackage WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
DELETE FROM ProvisionedPackageDeleted WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
DELETE FROM ProvisionedPackageExclude WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM ProvisionedPackageExclude WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM PublisherCacheFolder WHERE (PackageExtension>0) AND (PackageExtension NOT IN (SELECT _PackageExtensionID FROM PackageExtension));
DELETE FROM Resource WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM SecondaryTile WHERE _SecondaryTileID IN (SELECT SecondaryTile FROM SecondaryTileUser WHERE _WorkId=0 AND TileUniqueId IN (SELECT TileUniqueId FROM SecondaryTileUser WHERE _WorkId=? AND _WorkId<>0)) AND _WorkId=0;
DELETE FROM SecondaryTile WHERE SecondaryTile._SecondaryTileID NOT IN (SELECT SecondaryTile FROM SecondaryTileUser);
DELETE FROM SecondaryTileUser WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
DELETE FROM SecondaryTileUser WHERE (SecondaryTile>0) AND (SecondaryTile NOT IN (SELECT _SecondaryTileID FROM SecondaryTile));
DELETE FROM SecondaryTileUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM SecondaryTileUser WHERE TileUniqueId IN (SELECT TileUniqueId FROM SecondaryTileUser WHERE _WorkId=? AND _WorkId<>0) AND _WorkId=0;
DELETE FROM SecondaryTileUserChangelog WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM SharedPackageContainer WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM SharedPackageContainerPackageFamily WHERE (SharedPackageContainer>0) AND (SharedPackageContainer NOT IN (SELECT _SharedPackageContainerID FROM SharedPackageContainer));
DELETE FROM SRHistory WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
DELETE FROM SRHistory WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM SRJournal WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
DELETE FROM SRJournal WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
DELETE FROM SRJournal WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM SRJournal WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM SRJournal WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
DELETE FROM SRJournal WHERE (PackageUser>0) AND (PackageUser NOT IN (SELECT _PackageUserID FROM PackageUser));
DELETE FROM SRJournal WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM SRJournalArchive WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
DELETE FROM SRJournalArchive WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
DELETE FROM SRJournalArchive WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM SRJournalArchive WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
DELETE FROM SRJournalArchive WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
DELETE FROM SRJournalArchive WHERE (PackageUser>0) AND (PackageUser NOT IN (SELECT _PackageUserID FROM PackageUser));
DELETE FROM SRJournalArchive WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM TargetDeviceFamily WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM User WHERE (_UserID NOT IN (SELECT User FROM AppExecutionAliasUser)) AND (_UserID NOT IN (SELECT User FROM ApplicationUser)) AND (_UserID NOT IN (SELECT User FROM AppxExtension)) AND (_UserID NOT IN (SELECT User FROM CustomInstallWork)) AND (_UserID NOT IN (SELECT User FROM DependencyGraph)) AND (_UserID NOT IN (SELECT User FROM DeploymentHistory)) AND (_UserID NOT IN (SELECT User FROM DynamicAppUriHandlerGroup)) AND (_UserID NOT IN (SELECT User FROM MrtUserPri)) AND (_UserID NOT IN (SELECT User FROM PackageDependency)) AND (_UserID NOT IN (SELECT User FROM PackageExternalLocation)) AND (_UserID NOT IN (SELECT User FROM PackageFamilyPolicy)) AND (_UserID NOT IN (SELECT User FROM PackageFamilyUser)) AND (_UserID NOT IN (SELECT User FROM PackagePolicy)) AND (_UserID NOT IN (SELECT User FROM PackageSuperceded)) AND (_UserID NOT IN (SELECT User FROM PackageUser)) AND (_UserID NOT IN (SELECT User FROM PackageUserStatus)) AND (_UserID NOT IN (SELECT User FROM PrimaryTileUser)) AND (_UserID NOT IN (SELECT User FROM PrimaryTileUserChangelog)) AND (_UserID NOT IN (SELECT User FROM ProvisionedPackageExclude)) AND (_UserID NOT IN (SELECT User FROM SRHistory)) AND (_UserID NOT IN (SELECT User FROM SRJournal)) AND (_UserID NOT IN (SELECT User FROM SRJournalArchive)) AND (_UserID NOT IN (SELECT User FROM SecondaryTileUser)) AND (_UserID NOT IN (SELECT User FROM SecondaryTileUserChangelog)) AND (_UserID NOT IN (SELECT User FROM SharedPackageContainer)) AND (_UserID NOT IN (SELECT User FROM WowDependencyGraph));
DELETE FROM WowDependencyGraph WHERE (DependentPackage>0) AND (DependentPackage NOT IN (SELECT _PackageID FROM Package));
DELETE FROM WowDependencyGraph WHERE (SupplierPackage>0) AND (SupplierPackage NOT IN (SELECT _PackageID FROM Package));
DELETE FROM WowDependencyGraph WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
DELETE FROM WowDependencyGraph WHERE _WorkId=? AND _WorkId<>0 AND _IsMarkedForDeletion<>0 AND _ShadowId<>0;
DELETE FROM WowDependencyGraph WHERE _WorkId=?;
DELETE FROM WowDependencyGraph WHERE _WowDependencyGraphID IN (SELECT _ShadowId FROM WowDependencyGraph WHERE _WorkId=? AND _WorkId<>0);
DELETE FROM XboxPackage WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
DELETE FROM XboxPackage WHERE EditionId IN (SELECT EditionId FROM XboxPackage WHERE _WorkId=? AND _WorkId<>0) AND _WorkId=0;
DeleteAce
DeleteAce %ls %u %u %u 0x%0x
DeleteCriticalSection
Deleted
DeleteFile %ls
DeleteFileW
DeleteStateNameForUser %ws %ws
DeleteUpdatedPackageKey
Dependency
DependencyArchitecture
DependencyGraph
DependencyMinVersion
DependencyName
DependencyPaths
DependencyProviderGuid
DependencyPublisher
DependentPackage
Deployment
DeploymentDatabase
DeploymentDatabaseAutoCheckpoint
DeploymentDatabaseCacheSize
DeploymentDatabaseCheckpointThreshold
DeploymentDatabaseFileChunkSize
DeploymentDatabaseJournalSizeLimit
DeploymentDatabaseOptions
DeploymentDatabasePageSize
DeploymentDatabaseStatisticsLastUpdated
DeploymentHistory
DeploymentOperation
deploymentOperation
DeploymentOperation
deploymentOperation
DeploymentOperation
DeploymentOperationEnumMap
DeploymentOptions
DeploymentOptionsBitMap
DeploymentOptionsHighBitMap
DeploymentPath
DeploymentState
DeploymentStateHandlerEnumMap
DeprovisionApplicationCapabilities
descendant-or-self::*/attribute::ServerName
Description
Design Mode
Design Mode V2
DesiredInitialViewState
desiredStatus
desktop2:AllowSilentDefaultTakeOver
desktop4:Subsystem
desktop5:ThumbnailTypeOverlay
DesktopApplicationPath
DesktopAppXActivateOptions
DestagedTimestamp
Destination Path
destinationDirectoryPath.CopyFromString(pDestinationAbsolutePath)
DestinationFolderPath
DestinationMediaID
DestinationPath
DestroyAllAndUnregisterRoaming
DestroyAllExcept
DestroyPrivateObjectSecurity
DETACH DATABASE '%s';
DetailedMessageInfo
Details::GetStringValueExpanded(inprocServer32Key.get(), L"", dllPath)
DetermineDataProtectionLevel %ls
DeveloperModeRequired
DevelopmentMode
developmentModeNetwork
DEVICEACCESS_DEH_KEYWORD
DeviceAccessVetoReasonMap
DeviceCapabilityHandlerCLSID
DeviceCapabilityName
deviceConnectionChange
deviceFamilyName
DeviceId
DeviceID
DeviceId
DeviceIoControl
DeviceName
deviceServicing
deviceUse
DIALPROTOCOL_DEH_KEYWORD
DidAppSurviveOSUpgradeForUser
DidCatalogCheckFailed
Direction
directlyServicedPackagesList
DirectoryExists %ls
DirectoryExists %ls 0x%0x
DirtyPackages
DisableByteCodeCache
disabled
DispatchMessageW
DisplayName
dllElement->get_baseName(&elementName)
dllfile
dllPaths.Path_arm
dllPaths.Path_arm64
dllPaths.Path_x64
dllPaths.Path_x86
DllSurrogate
DocPrint
dom->selectSingleNode(xpath, node.ReleaseAndGetAddressOf())
DownlevelMachineDatabase
DownlevelMachineDatabaseAutoCheckpoint
DownlevelMachineDatabaseCacheSize
DownlevelMachineDatabaseCheckpointThreshold
DownlevelMachineDatabaseFileChunkSize
DownlevelMachineDatabaseJournalSizeLimit
DownlevelMachineDatabaseOptions
DownlevelMachineDatabasePageSize
DownlevelMachineDatabaseStatisticsLastUpdated
DOWNLOAD_DEH_KEYWORD
DropImpersonation
DropImpersonation %ls
DropImpersonation %ws %ws
drvfile
DSM_DEH_KEYWORD
DuplicateChannelName
DurationMS
DynamicAppUriHandler
DynamicAppUriHandlerGroup
E H;E
E(f;0
E(H;E
E;~(r
E@fD;0
E@fD;0tvA
E_FAIL
E_INVALIDARG
E_NOTIMPL
E_OUTOFMEMORY
E_UNEXPECTED
E`H!EhH
E|$@H
E8<0u
E8H!}8H
EditFlags
EfsOpenFileRawFailed
EfsOpenFileRawFailedAttemptingRetry
EfsOpenFileRawFailedAttemptingRetryForWrite
EfsOpenFileRawInternal
E'H!E7!E?H
EH8EP
eHD+`
EL$8E
Element
ElementName
empty distance tree with lengths
EnableAppAttach
enabled
EnabledFeatureUsage
EnableFileOrFolderEncryption %ws %u
EnableOleDefaultHandler
EncryptPackagesFolder %ws %u
EndOfLifePackage
EndOfLifePackageList
endswith
EndsWith(*string*,suffix) error: Invalid type (%d)
EndsWith(string,*suffix*) error: Invalid type (%d)
EnforceCompatModeRestrictionsOnIncomingPackage(incomingPackage, incomingExtensionElements, countIncomingElements)
EnterCriticalSection
Enterprise
Entry Point for extension WebAccountProvider is not supported.
EntryPoint
entryPoint.Initialize(pwszEntryPoint)
entryPointAttribute.Initialize(DownloadUploadClassConstants::attributeEntryPoint)
entryPointAttribute.Initialize(L"AppObject.EntryPoint")
EnumValue %u
en-US
EoI9E
ePD8i$t
EqualSid
eraApplication
eraproxyapp.exe
Error
error
Error
error
Error
Error 0x%X in ConvertCapabilitiesToString
ERROR_BAD_ARGUMENTS
ERROR_INVALID_DATA
ErrorCode
errorCode
ErrorCode
errorCode
ErrorCode
ErrorCodeDescription
ErrorContext
ErrorContext1
ErrorContext2
ErrorCount
ErrorDescription
ErrorFileInfo
ErrorMessage
errorString
ErrorString
errorString
ErrorText
EtwEventEnabled
EtwEventRegister
EtwEventUnregister
EtwEventWrite
EvaluateRequest(dehRequest, result)
EventActivityIdControl
EventData
EventlogDllFamilyPath
EventRegister
EventSetInformation
EventUnregister
EventWriteTransfer
EVNTP
EvtClose
EvtGetChannelConfigProperty
EvtOpenChannelConfig
EX9G$tV
EX9G4t6
eX9u`
Exception
ExceptionCode
exclude
EXCLUSIVE
ExclusiveTrust
exeClass.query_to(&classReg)
exeClass.query_to(&outofprocClass)
exeClass.query_to(&registryCompatibility)
exeClass.query_to(&scope)
Executable
ExecutableName
execution_flags
ExecutionFlags
exefile
ExeHost
exePath.Initialize(DownloadUploadClassConstants::DownloadUploadServers[index].outOfProcessServerPath)
exePath.Initialize(DownloadUploadClassConstants::vpnPluginOutOfProcessServerPath)
ExeServer
exeServer.query_to(&registryCompatibility)
exeServer.query_to(&scope)
exeServer.query_to(&server)
exeServer->SetArguments(arguments.get())
exeServer->SetExecutable(executable.get(), FALSE)
ExeServerRegistration
ExeServerRegistration::Create( serverName, package->GetCollectors(), &serverRegistration)
ExeServerRegistration::Create(fullServerName, package->GetCollectors(), &server)
ExeServerRegistration::Create(serverName, _sourcePackage->GetCollectors(), &server)
ExeServerRegistration_Impl::Create(serverName, &serverRegistration)
existingMiscStatusPropValue->GetString(existingMiscStatus.GetAddressOf())
existingPropValue->GetString(existingValue.GetAddressOf())
existingPropValue->GetUInt32(&existingValue)
existingVerbPropValue->GetString(existingVerb.GetAddressOf())
ExitCode
ExitingPackageFullname
ExpandedSQL
ExpandedSQL=%hs
experimentId
Expiration
explorer.assocactionid.burnselection
explorer.assocactionid.closesession
explorer.assocactionid.erasedisc
explorer.assocactionid.zipselection
explorer.assocprotocol.search-ms
explorer.burnselection
explorer.closesession
explorer.erasedisc
explorer.zipselection
Extended
ExtendedData
extendedExecutionUnconstrained
extendedVideoPlayback
Extension
extension->get_baseName(bstrNodeName.AddressOf())
extensionCatalogContext->CreateExtensionEntry( _contractId.Get(), packageMoniker, _activatableClassId.Get(), _properties)
extensionCatalogContext->RemoveExtensionEntriesForPackage(packageMoniker.Get(), deploymentOperation)
extensionElements[extensionIndex]->get_firstChild(&node)
ExtensionName
extensionRegistration
extensionRegistration->PendingWriteToStore( packageMoniker.Get(), extensionCatalogContext.Get())
extensionRegistration->Validate(incomingPackage)
ExtensionsCategoryNames
extensionToProcess == NULL || currentPackage == NULL || helper == NULL
ExternalLocation
ext-ms-onecore-appmodel-staterepository-internal-l1-1-3.dll
ext-ms-win32-subsystem-query-l1-1-0
ext-ms-win-advapi32-ntmarta-l1-1-0
ext-ms-win-advapi32-ntmarta-l1-1-0.dll
ext-ms-win-appmodel-appexecutionalias-l1-1-0.dll
ext-ms-win-appmodel-appexecutionalias-l1-1-1.dll
ext-ms-win-appmodel-deployment-l1-1-0
ext-ms-win-appmodel-deployment-l1-1-0.dll
ext-ms-win-appmodel-deployment-l1-1-1
ext-ms-win-appmodel-registrycompatibility-l1-1-0
ext-ms-win-appmodel-registrycompatibility-l1-1-0.dll
ext-ms-win-ci-management-l1-1-2.dll
ext-ms-win-com-ole32-l1-1-0
ext-ms-win-com-ole32-l1-1-1
ext-ms-win-com-ole32-l1-1-1.dll
ext-ms-win-com-ole32-l1-1-2
ext-ms-win-com-ole32-l1-1-3
ext-ms-win-com-ole32-l1-1-4
ext-ms-win-com-ole32-l1-1-5
ext-ms-win-com-ole32-l1-3-0
ext-ms-win-com-ole32-l1-4-0
ext-ms-win-desktopappx-l1-1-0
ext-ms-win-desktopappx-l1-1-0.dll
ext-ms-win-desktopappx-l1-1-1
ext-ms-win-desktopappx-l1-1-2
ext-ms-win-desktopappx-l1-1-3
ext-ms-win-desktopappx-l1-1-4
ext-ms-win-desktopappx-l1-1-4.dll
ext-ms-win-desktopappx-l1-1-5
ext-ms-win-desktopappx-l1-1-6
ext-ms-win-desktopappx-l1-1-6.dll
ext-ms-win-desktopappx-l1-1-7
ext-ms-win-desktopappx-l1-2-0
ext-ms-win-ole32-bindctx-l1-1-0.dll
ext-ms-win-resources-deployment-l1-1-0.dll
ext-ms-win-resources-languageoverlay-l1-1-0
ext-ms-win-resources-languageoverlay-l1-1-1
ext-ms-win-resources-languageoverlay-l1-1-1.dll
ext-ms-win-resources-languageoverlay-l1-1-2
ext-ms-win-resources-languageoverlay-l1-1-3
ext-ms-win-resources-languageoverlay-l1-1-4
ext-ms-win-resources-languageoverlay-l1-1-5
ext-ms-win-resources-languageoverlay-l1-1-6
ext-ms-win-security-capauthz-l1-1-0.dll
ext-ms-win-security-capauthz-l1-1-1.dll
ext-ms-win-security-efswrt-l1-1-0
ext-ms-win-security-efswrt-l1-1-1
ext-ms-win-security-efswrt-l1-1-2
ext-ms-win-security-efswrt-l1-1-2.dll
ext-ms-win-security-efswrt-l1-1-3
ext-ms-win-session-usermgr-l1-1-0
ext-ms-win-session-usermgr-l1-1-0.dll
ext-ms-win-session-usermgr-l1-2-0
ext-ms-win-session-usertoken-l1-1-0
ext-ms-win-session-usertoken-l1-1-0.dll
ext-ms-win-session-winsta-l1-1-0
ext-ms-win-session-winsta-l1-1-1
ext-ms-win-session-winsta-l1-1-2
ext-ms-win-session-winsta-l1-1-3
ext-ms-win-session-winsta-l1-1-4
ext-ms-win-session-wtsapi32-l1-1-0
ext-ms-win-session-wtsapi32-l1-1-0.dll
ext-ms-win-session-wtsapi32-l1-1-1
ext-ms-win-shell32-shellfolders-l1-1-0.dll
ext-ms-win-shell-shell32-l1-2-0
ext-ms-win-shell-shell32-l1-2-0.dll
ext-ms-win-shell-shell32-l1-2-1
ext-ms-win-shell-shell32-l1-2-2
ext-ms-win-shell-shell32-l1-2-3
ext-ms-win-shell-shell32-l1-5-0
ext-ms-win-storage-sense-l1-1-0
ext-ms-win-storage-sense-l1-2-0
ext-ms-win-storage-sense-l1-2-1
ext-ms-win-storage-sense-l1-2-2
ext-ms-win-storage-sense-l1-2-3
ext-ms-win-storage-sense-l1-2-4
ext-ms-win-wevtapi-eventlog-l1-1-0
ext-ms-win-wevtapi-eventlog-l1-1-0.dll
ext-ms-win-wevtapi-eventlog-l1-1-1
ext-ms-win-wevtapi-eventlog-l1-1-2
ext-ms-win-wevtapi-eventlog-l1-1-3
extOrProtocol
EXTRA
F L9 
f(item.Get())
f;4Qu E
f;4Qu@E
f;t|Hu`D
F<}lf-#X
f5.vpn.client_cw5n1h2txyewy
f9,^u
f9,Au
f9,Hu
f9,Nu
f9,Pu
f9,Vu
f9,Yu
f9:t/H
f9<Au
f9<Bu
f9<Cu
f9<Ju
f9<Qu
f9<Xu
f94Au
f94Bu
f94Cu
f94Gu
f94Hu
f94Ju
f94Ku
f94Qu
f94zu
fA9(u
fA9,@u
fA9,Qu
fA9+u
fA9<Fu
fA9<Hu
fA9>u
fA94@u
fA94Pu
fA94Tu
fA9Z*v$A
Failed applying DACL from ApplyPackageDataAccessACLs %ls %ls %ls %d %d
Failed applying SACL from ApplyPackageDataAccessSACL %ls %ls %ls %d %d
Failed applying SACL from ApplyPackageDataAccessSACL taken ownership %ls %ls %ls %d %d
Failed call to GetSystemDirectory/GetSystemWow64Directory2. imageFileMachine=%u
Failed in VerifyIfSecureSystemAppDataFolderAlreadyExists()
Failed to compare file paths %ls, %ls
Failed to create full file name for file %ls
Failed to create full file name for folder %ls
Failed to create full file name for folder search path %ls
Failed to delete alias file for package %ws.
Failed to get file attributes from handle for folder %ls
Failed to get file final path for folder %ls
Failed to get file handle for file %ls
Failed to get file handle for folder %ls
Failed to get file hardlink information for file %ls
Failed to get handle for folder %ls
Failed to read status (PackageStatusAri-OFF) for 
Failed to read status (PackageStatus-OFF) for 
Failed to set file delete disposition for file %ls
Failed to set file delete disposition for folder %ls
Failed to sync status (PackageStatusAri-OFF) for 
Failed to sync status (PackageStatus-OFF) for 
Failed to update State Repository Cache
FailFast
FailFastBusySnapshot.StatementInProgress: #%u Index=%u Database=%p Statement=%p SQL=%s
FailFastBusySnapshot: Statements Total=%u Busy=%u Database=%p FirstBusySQL=%hs
Failure
failureCount
failureId
failureType
FallbackError
false
FamilyMonikerStringToSid %ls
FB&_W
fB;4it
fB9,[u
fB9,Ju
fB9<Bu
fB94@u
fB94Bu
fB94Cu
fB9tu
fD; u
fD;0u
fD;8u
fD9 t
fD9!t
fD9!u
fD9"u
fD9#t
fD9#u
fD9$~u
fD9$Au
fD9$Bu
fD9$Cu
fD9$Fu
fD9$Gu
fD9$Hu
fD9$hu
fD9$iu
fD9$Ou
fD9$Pu
fD9$pu
fD9$Su
fD9$xu
fD9$Yu
fD9$zu
fD9&u
fD9(t
fD9(t6H
fD9)t
fD9)u
fD9*u
fD9,{u
fD9,Au
fD9,Bu
fD9,Cu
fD9,Fu
fD9,Hu
fD9,Ju
fD9,Ku
fD9,wu
fD9/t
fD9:t
fD9;t
fD9;u
fD9?u
fD9?u!H
fD9|]
fD9+t
fD9<Au
fD9<Cu
fD9<Fu
fD9<Hu
fD9<Ou
fD9<su
fD9>t
fD9>u$H
fD90t
fD90u
fD91t
fD94_u
fD94{u
fD94Au
fD94Bu
fD94Cu
fD94Ku
fD94Ou
fD94qu
fD94Qu
fD94Zu
fD94zu
fD98t
fD99t
fD99u3H
fD9dM
fD9l]
fD9lE
fD9lM
fD9t}
fD9tE
fD9'u+H
fE;l$
fE9 tjH
fE9 u
fE9$@u
fE9$_u
fE9$Gu
fE9$Nu
fE9$Xu
fE9&t
fE9,_u
fE9,Fu
fE9,Hu
fE9<$
fE9<^u
fE9<Fu
fE9<Iu
fE9<Pu
fE9<Ru
fE9<Xu
fE9<xu
fE94@u
fE94Au
fE94Gu
fE94Hu
fE98t
fE9DM
fE9DU
featureBaseVersion
FeatureError
featureId
featureStage
FeatureUsage
FeatureVariantUsage
featureVersion
FetchDataFromPolicyCache %ls
fF9$Bu
fF9,@u
fF9,~u
fF9,Bu
fF9,Gu
fF9,ru
fF9,su
fF9,xu
fF9<Au
fF9<Bu
fF9<cu
fF9<Hu
fF94@u
fF94Bu
fF94Cu
fF94xu
fG9,qu
fG9du
file error
File hardlink identified in files %ls
File redirection identified in files %ls and %ls
file://
fileAccess
FileCreationTime(UTC): %04hu-%02hu-%02hu %02hu:%02hu:%02hu, LastFileWriteTime(UTC): %04hu-%02hu-%02hu %02hu:%02hu:%02hu, FileSize: %I64u, Attributes: 0x%08lx
FileDescription
FileExists %ls
FileInUse
FileInUse PFun: %ws, ImageName: %ws, Cmd: %ws, UserSid: %ws, SessionId: %d, PID: %d
FileManager_cw5n1h2txyewy
fileName
FileName
fileName
FileName
fileName
FileName
fileName
filename
fileName
FileName
fileName
FileName
Filename
FileName
fileName
FileName
Filename
FileName
fileName
FileName
fileName
FileName
Filename
FileName
fileName
FileName
fileName
FileName
fileName
FileName
fileName
FileName
fileName
filename
FileName
Filename
filename
fileName
FileName
fileName
FileName
filename
Filename
filename
FileName
fileName
FileName
fileName
FileName
fileName
FileName
fileName
FileName
fileName
FileName
fileName
FileName
Filename
fileName
FileName
FileOperationInfoVector::Make(&_incomingPackageFileOperations)
FileOperationInfoVector::Make(&_outgoingPackageFileOperations)
FilePath
Files
FileSize
Filesize
FileSystemEntryExists %ls
FileSystemEntryExists %ls succeeded %u
FileSystemType
FileTimeToSystemTime
FILETYPE_DEH_KEYWORD
FileTypeAssociation
FileVersion
FilterOnNamePublisherId %ws publisher %ws
FindByPackageAndCategory
FindByPackageExtension
FindClose
FindFirstFile %ws
FindFirstFileW
FindNextFile
FindNextFileW
FindReferencedClassElementById(classReferenceElement, wil::str_raw_ptr(id), referencedClassElement)
FindReferencedClassElementById(progId, progIdClsid.GetRawBuffer(nullptr), &classElementToCompare)
FindReferencedClassElementById(root, clsid, terminalClassElement)
FindReferencedClassElementById(treatAsClassElement, currentTreatAsValue.GetRawBuffer(nullptr), &nextClassElement)
FindReferencedClassElementForClassReference(root, &elementWithClassProperties)
FindTerminalClassElement(root, clsid, &terminalClassElement)
FindTreatAsClassElementById(currentTreatAsClassElement.get(), currentTreatAsValue.GetRawBuffer(nullptr), &nextTreatAsClassElement)
FindTreatAsClassElementById(root, clsid, &initialTreatAsElement)
FirewallAPI.dll
FirstBusySQL
FirstLine
FixAllCascadingInDeploymentPartition
FixAllCascadingInMachinePartition
FixAppHiveIfNeeded
Flags
FLAGS
Flags
FlagsHigh
Folder %ls
Folder %ls isFullTrust %u hasCentennial %u
Folder %ls user %ls package %ls publisher %ls
Folder %ls user %ls package %ls publisher %ls isFullTrust %u
Folder %ls.
FolderPath
FollowProgIdChain( progId, currentVersion, progIdClsid.GetAddressOf())
FollowProgIdChain(root, currentVersion.get())
Fonecore\admin\appmodel\common\mountedfolder.cpp
fonfile
ForEachCollector(whichPhase, incomingPackage, [&](ICollector *collector) { RETURN_IF_FAILED(collector->PendingWrite(incomingPackage, resourcesManager, outgoingPackageContext)); return S_OK; })
ForEachCollector(whichPhase, outgoingPackage, [&](ICollector *collector) { RETURN_IF_FAILED(collector->PendingRemove(outgoingPackage, deploymentOperation, resourcesManager, outgoingPackageContext)); return S_OK; })
ForEachCollectorInArray(GetCollectorsForMachineRegister(package), lambda)
ForEachCollectorInArray(GetCollectorsForSingletonRegister(package), lambda)
ForEachCollectorInArray(GetCollectorsForSystemRegister(package), lambda)
ForEachCollectorInArray(GetCollectorsForUserRegister(package), lambda)
ForEachExtensionRegistration(extensionRegistrationMap.Get(), [&](Internal::CExtensionRegistration* extensionRegistration) { RETURN_HR(extensionRegistration->Validate(incomingPackage)); })
ForEachExtensionRegistration(extensionRegistrationMap.Get(), [&](Internal::CExtensionRegistration* extensionRegistration) { StringReference packageMoniker(incomingPackage->GetPackageMoniker()); RETURN_HR(extensionRegistration->PendingWriteToStore( packageMoniker.Get(), extensionCatalogContext.Get())); })
ForEachManagedDirectory( managedDirectories, packageMoniker, bestEffort, [](HSTRING directoryToCreate, HSTRING securityDescriptorString) { AutoPtrLocal<BYTE> binarySecurityDescriptor; RETURN_IF_WIN32_BOOL_FALSE(ConvertStringSecurityDescriptorToSecurityDescriptor( WindowsGetStringRawBuffer(securityDescriptorString, nullptr), SDDL_REVISION_1, reinterpret_cast<PSECURITY_DESCRIPTOR*>(&binarySecurityDescriptor), nullptr)); SECURITY_ATTRIBUTES securityAttributes = { sizeof(SECURITY_ATTRIBUTES), binarySecurityDescriptor }; if (!CreateDirectory( WindowsGetStringRawBuffer(directoryToCreate, nullptr), &securityAttributes)) { const HRESULT hrCreateDirectory = HRESULT_FROM_WIN32(GetLastError()); if (hrCreateDirectory != HRESULT_FROM_WIN32(ERROR_ALREADY_EXISTS)) { RETURN_HR(hrCreateDirectory); } } return S_OK; })
ForEachString(strings, [&](HSTRING current) -> HRESULT { return UInt32Add(valuesCharacterCount, WindowsGetStringLen(current), &valuesCharacterCount); })
ForEachString(strings, [&](HSTRING current) -> HRESULT { UINT32 sourceLength = 0; LPCWSTR sourceCharacters = WindowsGetStringRawBuffer(current, &sourceLength); while (sourceLength--) { *(collectedCharacters++) = *(sourceCharacters++); } valuesCopiedCount++; if (valuesCopiedCount < valuesCount) { *(collectedCharacters++) = ','; } return S_OK; })
FormatApplicationUserModelId
FormatApplicationUserModelId(packageFamilyName.get(), AAP_SERVER_REGISTRATION_SHAREDUSAGE_PRAID, &appUserModelIdLength, appUserModelId)
FormatMessageW
FormatName
formatsNodes->get_item(nodeIndex, &node)
formatsNodes->get_length(&listLength)
formatsValues->Append(formatName.Get())
formatsValues->Append(standardFormat.Get())
ForMove
FoundState
Framework
FrameworkList
FrameworkPackage
FreeLibrary
FreeSid
FreeTransientObjectSecurityDescriptor
FriendlyTypeName
FSRing
FtBxTt"zT
FullDetails
FullFilePath
FullTrust
function
FunctionType
G !G0H
G H!G(H
G L;C
G(D88
g:%I64u
g`D;%
G6?lYi
G8!GHH
gamecoreproxyapp.exe
gamingContainerResources
gattCharacteristicNotification
GCChangelogsInterval
gchangeid_next_value() failed
GCTimeToLiveExpiredInterval
general
GenerateAppUserModelId( package->GetPackageFamilyMoniker(), BackgroundPlaybackClassConstants::outOfProcessSharedServerAUMID, &pwszAUMID)
GenuD
Geofence.dat
GEOLOCATION_DEH_KEYWORD
get_attributes
get_nodeValue
GetAccess
GetAccess %ls
GetAce
GetAce %ls %u
GetAce %ls %u %u
GetAclInformation
GetActivationFactory( Wrappers::HStringReference(RuntimeClass_Windows_Foundation_PropertyValue).Get(), &_propertyValueFactory)
GetActivationFactory((Windows::Internal::String&)propertyValueId, &_propertyValueFactory)
GetActivationFactory((Windows::Internal::String&)propertyValueId, &registration->_propertyValueFactory)
GetAddPublisherArray
GetAddPublisherArray %ls
GetAndSet
GetAppContainerFolderPath
GetAppDataFolderPath
GetAppExecutionAliasApplicationType
GetAppExecutionAliasApplicationUserModelIdEx
GetAppExecutionAliasExecutableEx
GetAppExecutionAliasPackageFamilyNameEx
GetApplicationManifestLanguages
GetApplicationUserModelId
GetApplicationUserModelIdFromToken
GetAppxDataRootPath
GetAppXLogMessageFromDataFailure
GetArchitecturesSupportedForActivationByClsid(root, wil::str_raw_ptr(terminalClsid), &supportedArchitectures)
GetAttributeValueBooleanFromQuery( ActivatableClassConstants::runFullTrustAttributeXPath, element.Get(), runFullTrustAttribute, &runFullTrustAttributeFound)
GetAttributeValueGuidStringFromElement(element, attribute, buffer, &attributeFound)
GetAttributeValueStringFromElement( applicationElement.Get(), Internal::ActivatableClassConstants::idAttribute, idBuffer, &idAttributeFound)
GetAttributeValueStringFromElement( applicationElement.Get(), Internal::PackagedComConstants::idAttribute, idBuffer, &idAttributeFound)
GetAttributeValueStringFromElement(element, attribute, buffer, &attributeFound)
GetAttributeValueStringFromQuery( ActivatableClassConstants::identityTypeAttributeXPath, element.Get(), identityTypeBuffer, &identityTypeAttributeFound)
GetAttributeValueStringFromQuery( ActivatableClassConstants::runtimeBehaviorAttributeXPath, parentExtensionElement.Get(), runtimeBehaviorAsString, &runtimeBehaviorFound)
GetAttributeValueStringFromQuery( ActivatableClassConstants::trustLevelAttributeXPath, parentExtensionElement.Get(), trustLevelAsString, &trustLevelFound)
GetBackgroundTaskRegkeySD(userSidString.get(), &securityDescriptor)
GetBackgroundTaskType(taskItemNode.Get(), &capability)
GetByPackageFullName %ls
GetCanonicalMergedPriFileNameForPackages
GetChanges() called but !db.IsOpen()
GetClsidDisplayNameOrShortName(root, wil::str_raw_ptr(clsidString), &displayName, &displayNameFound)
GetClsidIsInsertableObject(root, wil::str_raw_ptr(clsidString), &isInsertableObject)
GetCommaSeparatedValue(conversionValues.Get(), conversion.GetAddressOf())
GetCommaSeparatedValue(dataFormatValues.Get(), dataFormat.GetAddressOf())
GetCommaSeparatedValue(defaultIconValues.Get(), defaultIcon.GetAddressOf())
GetCommaSeparatedValue(toolboxBitmapValue.Get(), toolboxBitmap.GetAddressOf())
GetCommaSeparatedValue(verbValues.Get(), verb.GetAddressOf())
GetCurrentProcess
GetCurrentProcessId
GetCurrentThread
GetCurrentThreadId
GetDeletedFolderPath
GetDeploymentError
GetDeploymentOptions
GetDeploymentOptions %ws %u %u
GetEffectivePackageStatusForUser
GetEffectiveToken %ls
GetFileAttributesExW
GetFileAttributesW
GetFileInformationByHandle
GetFileInformationByHandleEx
GetFileSecurity %u
GetFileSecurityW
GetFileSizeEx
GetFinalPathNameByHandleW
GetGenericKeyEncryptionHeader
GetHasAnyClasses(&hasAnyClasses)
GetHasCentennial
GetHasCentennial %ls user %ls package %ls
GetHasCentennial Root %ls
GetHivePath
GetHivePath %u
GetHivePath %u size %u
GetInprocServer32Properties(WhichHive::LocalMachine, __uuidof(PackagedInprocClassVirtualizationManager), &g_virtualizationManagerDllPath)
GetInternalReferenceBlobForManifestValue
GetLastError
GetLastInsertRowID() called but !db.IsOpen()
GetLengthSid
GetLocalTime
GetManagedDirectoryPath( destinationDirectory, incomingPackageMoniker, destinationDirectoryPath.GetAddressOf())
GetModuleFileNameA
GetModuleHandleExA
GetModuleHandleExW
GetModuleHandleW
getNamedItem
GetNamedSecurityInfo %ls
GetNamedSecurityInfo %ls returned null dacl.
GetNamedSecurityInfoW
GetNext %ws publisher %ws threshold %u count %u
GetNonExactManifestReader
GetPackagedFileAbsolutePath(incomingPackage, _exeServerPath.Value.GetRawBuffer(nullptr), _exeServerAbsolutePath)
GetPackagedFileAbsolutePath(incomingPackage, _properties.DefaultIcon.Value.GetRawBuffer(nullptr), _defaultIconAbsolutePath)
GetPackagedFileAbsolutePath(incomingPackage, _properties.DllPath.Value.GetRawBuffer(nullptr), _surrogateDllAbsolutePath)
GetPackagedFileAbsolutePath(incomingPackage, _properties.ToolboxBitmap32.Value.GetRawBuffer(nullptr), _toolboxBitmap32AbsolutePath)
GetPackagedFileAbsolutePath(incomingPackage, GetInprocHandlerDllForArchitecture(architecture).GetRawBuffer(nullptr), _inprocHandlerAbsolutePaths.*(architecture.PerArchitectureDllPath))
GetPackagedFileAbsolutePath(incomingPackage, GetInprocServerDllForArchitecture(architecture).GetRawBuffer(nullptr), _inprocServerAbsolutePaths.*(architecture.PerArchitectureDllPath))
GetPackageFamilyReferenceCount
GetPackageFullName
GetPackageFullNameFromToken
GetPackagesRootLocationFromStateRoot
GetPackageStatus
GetPackageStatusForUser
GetPackageStatusForUserSid
GetPackageTable %ws publisher %ws
GetPersistedRegistryLocationW
GetPersistedRegKeyPath
GetProcAddress
GetProcessHeap
GetProcessInformation
GetProfileType
GetProxyStubSupportedArchitectures(root, wil::str_raw_ptr(proxyStubClsidString), &supportedArchitectures)
GetPublisher %ls
GetPublisherFolders
GetPublisherFolders %ls
GetPublisherRoot %ls
GetPublisherRootFolder
GetPublisherRootFolder %u
GetSchemaContext
GetSchemaContext %ls
GetSecureSystemAppDataFolder
GetSecureSystemAppDataFolder %ws
GetSecureSystemAppDataFolder %ws %u
GetSecureSystemAppDataFolderPath
GetSecurityDescriptorDacl
GetSecurityDescriptorDacl %ls
GetSecurityDescriptorOwner
GetSecurityInfo
GetSessionIdsOwnedByUser
GetSessionUserSidQueryTokenFailed
GetSet
GetSettingName %ls %u
GetSettingValue %ls %u
GetSidSubAuthority
GetSidSubAuthorityCount
GetStagedPackageOrigin
GetStateFolder
GetStateFolderPath %ls persist %u
GetStateRootFolder
GetStateRootFolder %u
GetStateRootPath %ws size %u
GetStateRootPathInternal
GetStateRootSubfolderPath SETTINGS
GetStateSettingsFolder
GetStateSettingsFolderPath
GetStateSettingsFolderPath %ls
GetStringValue %ws
GetSubfolderPath %ws size %u
GetSupportedArchitecturesBasedOnDllPaths(inProcessHandlerElement.get(), Internal::PackagedComConstants::inProcessHandlerDllElement, &supportedArchitecturesForInprocHandler)
GetSupportedArchitecturesBasedOnDllPaths(inProcessServerElement.get(), Internal::PackagedComConstants::inProcessServerDllElement, &supportedArchitecturesForInprocServer)
GetSupportedArchitecturesBasedOnDllPaths(proxyStubObtained.get(), Internal::PackagedComConstants::proxyStubDllElement, supportedArchitectures)
GetSystemAppDataFolder
GetSystemAppDataFolder %u
GetSystemAppDataFolderPath
GetSystemAppDataKey
GetSystemAppDataKey %ls
GetSystemAppDataKey %u
GetSystemAppDataRootKeyAndSubkey
GetSystemDirectoryW
GetSystemFileAbsolutePath(_executableArchitecture, _exeServerPath.Value.GetRawBuffer(nullptr), _exeServerAbsolutePath)
GetSystemInfo
GetSystemMetadataPathForPackage
GetSystemMetadataPathForPackage( WindowsGetStringRawBuffer(packageMoniker, nullptr), &systemMetadataPathLength, systemMetadataPath)
GetSystemStateRoot %ls
GetSystemStateRootFolderPath
GetSystemTimeAsFileTime
GetSystemWow64Directory2W
GetTarget %ls
GetTarget %ls persist %u
GetTempPath2W
GetThreadImpersonationToken
GetTickCount64
GetTokenInformation
GetTokenInformationNoThrow
GetTokenInformationNoThrow %ws publisher %ws threshold %u count %u
GetTotalChanges() called but !db.IsOpen()
GetTraceEnableFlags
GetTraceEnableLevel
GetTraceLoggerHandle
GetUserProfileFolderPath
GetUserProfileFolderPath %u
GetUserSid
GetUserSidFromToken
GetUserTokenAndCheckDirectoryExistence %ls %ls %ls %ls %ls
GetUserTokenAndCheckDirectoryExistence %ls %u
GetUserTokenFromContext
getValueResult
GetVersionExW
GetVirtualizationManagerDllFilename(&virtualizationManagerDllFilename)
GetVisibilityTable %ws publisher %ws
GetVolumeFromSubpath
GetVolumeMediaId
GetVolumeNameForVolumeMountPointW
GetWindowsDirectoryW
GetXMLDOMFromPackage %ls
GetXMLElementFromQuery( Internal::ActivatableClassConstants::ancestorApplicationXPath, element.Get(), &applicationElement)
GetXMLElementFromQuery( Internal::PackagedComConstants::ancestorApplicationXPath, element, &applicationElement)
GetXMLElementFromQuery(classXPath.get(), referencingElement, referencedClassElement)
GetXMLElementFromQuery(inProcessHandlerClassXPath.get(), root, &inProcessHandlerClassElement)
GetXMLElementFromQuery(inProcessServerClassXPath.get(), root, &inProcessServerClassElement)
GetXMLElementFromQuery(managedInProcessServerClassXPath.get(), root, &managedInProcessServerClassElement)
GetXMLElementFromQuery(outofprocClassXPath.get(), root, &outofprocClassElement)
GetXMLElementFromQuery(treatAsClassXPath.get(), root, treatAsClassElement)
GetXMLElementFromQuery(xpath.get(), element, &interfaceObtained)
GetXMLElementFromQuery(xpath.get(), element, &progId)
GetXMLElementFromQuery(xpath.get(), element, &proxyStubObtained)
GetXMLElementFromQuery(xpath.get(), element, &typeLib)
GetXMLElementFromQuery(xpath.get(), previousProgId, &progId)
GhD;p
GLOB8V
GlobalMemoryStatusEx
GNHcK(A
GP!G`f
GPH!]
GPH!]g8^ u
GuidString::GuidString
GX9G4
H SVWH
H UATAUAVAWH
H UATAVH
h UAVAWH
H UAVAWH
h UAVAWH
H WATAUAVAWH
H!\$0
H!\$0H
H!\$8I
H!\$pH
H!] H
H!]@H!]8H
H!]0H
H!]0L
H!]HH
H!_(H!_0H!_8H!_@M
H!_@3
H!|$ H
H!|$@L
H!|$`L
H!|$x
H!}?f
H!}@E3
H!}XH
H!0H!p
H!E'H
H!EXH
H!l$@
H!M(H
H!M0H
H!M8H
H!t$ E3
H!t$(E3
H!t$p
H!t$pL
H!t$x
H!uX3
H!X D
H;;tWH
H;^0r
H;^0s
H;_0r
H;_Pr
H;_Ps
H;{ r
H;{`r
H;{0r
H;{8r
H;{hr
H;{Pr
H;>t&H
H;3t_H
H;3tyH
H;7t{H
H;7tYH
H;7tyH
H;7tYH
H;A0s
H;D$ u
H;D$(t
H;D$0u
H;D$8tiH
H;D$Xr
H;Khr
H;KPr
H;KPs
H;NXs
H;O@H
H;OPr
H;s r
H;S(v
H;t$xs~
H;w`t)H
H;w8r
H;wht)H
H;wpr
H;wPr
H;wPs
H;wPt)H
H;wXt)H
H;yPr
H+SXH
H+W@H
h5!wE
H9)t0H
H9\$@
H9\$Xv/3
H9]0tXH
H9]0uiH
H9]0uUH
H9_Ht?H
H9_pv(H;wXr
H9{ v5H
H9{`v2H;{Pr
H9{0v!H
H9{8v=H
H9{Pv:H
H9|$h
H9|$hu
H9|$hu!
H9|$hu!A
H9|$hu"A
H9|$hu*A
H92t1L
H9C vVH;{ r
H9Khv
H9L$@
H9L$8
H9L$H
H9MPu
H9MPv
H9oHsKH
H9q,r
H9q`u
H9qPv*H;_Pr
H9s8v!H
H9shv!H
H9sPvh3
H9T$x
H9u(u
H9w8vYH;w8r
H9y v4H;y r
H9y`v2H;{Pr
H9Y0vbH;Y0r
H9y0v'H;^0r
hA^_^[
HA_A^_^[]
hA_A^A]A\_^[]
HA_A^A]A\_^[]
HA_A^A]A\_^][
halfHour
HandleLockedAppDataIfNeeded %ws
HandleRemoveForRoamingProfile %u %u
HardLinkedCount
HardLinkedSizeKB
HardwareOnly
hasAnyClasses
HasFullTrust
hash_base32
hash_base32() doesn't support double (%d)
HashDigestLength
Hasher.GetDigestAsBase32(text) failed
Hasher.Start() failed
Hasher.Update(integer) failed
Hasher.Update(text) failed
HasWin32alacarte
Hc\$8
Hc^ B8|3(
HcC$H
HcC$L9
HcD$$H
HcD$8
HcF$H
HcF$L9
HcI(H
HcK(A
HcK(H
HcL$ H
HcQ(H
HcS(A
Hct$@E
HD9}gt`D
HeaderAddr
HeapAlloc
heapBuffer
HeapFree
Helium
Helium\Cache
HELPDIR
HelpDirectory
helper->Initialize(packageToParse, extensionElements, countExtensionElements)
hlpfile
HostingModel
HostNames
HostRuntime
HostRuntimePackageFullName
hrAppend
hrCommitChanges
hrCommitChangesHelper
hrCopyFiles
hrCreateDirectory
hrCurrent
hrDeleteDirectories
HRDRBRd
hrDuplicateString
hresult
HResult
hresult
HResult
hresult
HResult
hresult
HResult
hresult
HRESULT
hresult
HResult
hresult
HRESULT
hresult
HResult
hresult
HRESULT_FROM_WIN32(13L)
HRESULT_FROM_WIN32(160L)
HresultCode
hrEvaluateInstall
hrEvaluateUpdate
hrForEach
hrGetComPackageInstallOrder
hrInitialize
hrInitializeFileOperationInfo
hrInsert
hrLookup
hrParse
hrParsePackage
hrPathAllocCombine
hrPendingWrite
hrput_AppUserModelId
hrput_DLLPath
hrReadEntry
hrRemove
hrRetrieveValue != E_POINTER
hrRuntimeClassInitialize
hrSetCommandLine
hrSetExePath
hrSubmitActivatableClass
hrSubmitClassEntryPointRegistration
hrSubmitExeServerRegistration
hrSubmitOutOfProcessActivatableClassRegistration
hrValidate
HStringReference(managedDirectoryPath).CopyTo(pDirectoryPath)
htafile
HTML Format
http://
https
https://
https://insiderportal.microsoft.com/api/
Hu3fD9
HUInt32Add(lengthIncludingNullTerminator, 1, &lengthIncludingNullTerminator)
HV@k>
i(Lcy H
I*VwZ
i,L;IPs
I;~8r
I_RpcExceptionFilter
i|,D+
I96v?I
I9D$@
I9Khs
I9v8vaH
IcF D8l0H
IcF L
IcI(H
IcK(f
IcK(H
icon.png
iconPath.Initialize(DownloadUploadClassConstants::extensionIconPath)
IcQ(A
IcQ(fA
IcQ(L
IcS(fA
ID$`H
ID$XH
IdempotentSetString(_incomingPackageMoniker, incomingPackageMoniker)
IdempotentSetString(_incomingPackageRoot, incomingPackageRoot)
IdempotentSetString(_outgoingPackageMoniker, outgoingPackageMoniker)
IdempotentSetString(_outgoingPackageRoot, outgoingPackageRoot)
IdentifyUserNameInPath %ls
IdleTaskInProgress
ifexec
Ignoring protection level %u for %ls.
Ignoring unsupported protection level %u for %ls.
IIDFromString
IIDFromString(buffer.GetChars(), guid)
Image
imageName
ImagePath
Impersonate %ls %ls
ImpersonateLoggedOnUser
ImpersonateSelf
impersonateSelf.Impersonate()
ImplementationClass
Implemented Categories
ImplementedCategories
implementedCategories->get_item(nodeIndex, &node)
implementedCategories->get_length(&listLength)
implementedCategoryKeyValuePair->get_Key(&implementedCategory)
ImportRedirectionTable
include
incomingExtensionElements == nullptr && countIncomingElements > 0
incomingPackage
incomingPackage->GetCollectors()->GetExtensionCatalogCollector()->ValidateEntries( &incoming)
incomingPackage->GetMainPackageFamilyMoniker(executionPackageFamily)
IncomingPackageName
incompatible version
incomplete distance tree
incomplete dynamic bit lengths tree
incomplete literal/length tree
incorrect data check
incorrect header check
IncrementPackageStatusVersion
Index
INDEXEDDB_DEH_KEYWORD
indirectlyServicedPackagesList
inffile
Information
InfoTip
Ingoring error for CdplProtectFileToLevelWithResult(%ls)
Initialize %ws %ws
Initialize %ws %ws %ws %u %u
Initialize %ws user %ws
InitializeAcl
InitializeCriticalSectionAndSpinCount
InitializeCriticalSectionEx
InitializeFileOperationInfo( HStringReference(destinationAbsolutePath).Get(), HStringReference(sourceAbsolutePath).Get(), &fileOperationInfo)
InitializeSecurityDescriptor
InitializeSListHead
InitializeSRWLock
InitOnceBeginInitialize
InitOnceComplete
InProcessActivatableClassRegistration::Create(acid, _sourcePackage->GetCollectors(), &activatableClass)
InProcessActivatableClassRegistration_Impl::Create(activatableClassId, &classRegistration)
InProcessHandler
inProcessHandlerClassElement->get_parentNode(&inProcessHandlerNode)
inProcessHandlerClassXPath
InProcessHandlerDll
inProcessHandlerNode.query_to(&inProcessHandlerElement)
InProcessServer
inProcessServerClassElement->get_parentNode(&inProcessServerNode)
InProcessServerClassReference
inProcessServerClassXPath
InProcessServerDll
inProcessServerNode.query_to(&inProcessServerElement)
InprocHandler32
inprocHandlerClassRegistration.query_to(&classRegistration)
inprocHandlerClassRegistration.query_to(&inprocClassDllRegistration)
inprocHandlerClassRegistration.query_to(&inprocClassRegistration)
inprocHandlerClassRegistration.query_to(&registryCompatibility)
inprocHandlerClassRegistration.query_to(&scope)
InprocServer32
inprocServerClassDllRegistration.query_to(&classRegistration)
inprocServerClassDllRegistration.query_to(&inprocClassDllRegistration)
inprocServerClassDllRegistration.query_to(&inprocClassRegistration)
inprocServerClassDllRegistration.query_to(&inprocServerClassRegistration)
inprocServerClassDllRegistration.query_to(&registryCompatibility)
inprocServerClassDllRegistration.query_to(&scope)
INSERT INTO Activation (_Revision, ActivationKey, Flags, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?,?);
INSERT INTO AppExecutionAlias (_Revision, _WorkId, Alias, Extension, Flags, _Dictionary) VALUES(?,?,?,?,?,?);
INSERT INTO AppExecutionAliasUser (_Revision, User, ApplicationIdentity, Alias, Status, _Dictionary) VALUES(?,?,?,?,?,?);
INSERT INTO AppExtension (_Revision, _WorkId, Name, Id, PublicFolder, DisplayName, Description, Extension, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?);
INSERT INTO AppExtensionHost (_Revision, _WorkId, Extension, Name, _Dictionary) VALUES(?,?,?,?,?);
INSERT INTO ApplicationBackgroundTask (_Revision, _WorkId, Type, Extension, "Index", _Dictionary) VALUES(?,?,?,?,?,?);
INSERT INTO ApplicationExtension (_Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);
INSERT INTO ApplicationUser (_Revision, _WorkId, User, ApplicationIdentity, Application, Package, PackageUser)SELECT 1, ?2, pu.User, ai._ApplicationIdentityID, a._ApplicationID, pu.Package, pu._PackageUserID FROM PackageUser AS pu INNER JOIN Application AS a ON a.Package=pu.Package INNER JOIN ApplicationIdentity AS ai ON ai.ApplicationUserModelId=a.ApplicationUserModelId WHERE pu._PackageUserID=?1   AND (pu._WorkId=0 OR pu._WorkId=?2) AND (a._WorkId=0 OR a._WorkId=?2);
INSERT INTO AppService (_Revision, _WorkId, Name, Extension, "Index", _Dictionary) VALUES(?,?,?,?,?,?);
INSERT INTO AppUriHandler (_Revision, _WorkId, HostName, Path, Extension, ProgID, AppUriHandlerGroup, _Dictionary) VALUES(?,?,?,?,?,?,?,?);
INSERT INTO AppUriHandlerGroup (_Revision, _WorkId, Name, Extension, _Dictionary) VALUES(?,?,?,?,?);
INSERT INTO AppxExtension (_Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?);
INSERT INTO AppxManifest (_Revision, _WorkId, Package, Xml, _Dictionary) VALUES(?,?,?,compress(?),?);
INSERT INTO DependencyGraph (_Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary) SELECT _Revision, ?2, ?1, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE _DependencyGraphID=?1 AND _ShadowId=0 AND NOT EXISTS(SELECT 1 FROM DependencyGraph WHERE _ShadowId=?1 AND _WorkId<>0 LIMIT 1);
INSERT INTO DependencyGraph (_Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary) VALUES(?1,?2,?3,?4,?5,?6,?7,?8,?9,?10);
INSERT INTO FileTypeAssociation (_Revision, _WorkId, FileType, ContentType, Extension, "Index", ProgID, _Dictionary) VALUES(?,?,?,?,?,?,?,?);
INSERT INTO HostRuntime (_Revision, _WorkId, HostId, PackageExtension, _Dictionary) VALUES(?,?,?,?,?);
INSERT INTO MrtApplication (_Revision, _WorkId, Application, DisplayNameReference, DescriptionReference, Square150x150LogoReference, Square44x44LogoReference, Wide310x150LogoReference, Square310x310LogoReference, Square71x71LogoReference, StartPageReference, SplashScreenImageReference, VisualGroupReference, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?);
INSERT INTO MrtPackage (_Revision, _WorkId, Package, DisplayNameReference, PublisherDisplayNameReference, DescriptionReference, LogoReference, _Dictionary) VALUES(?,?,?,?,?,?,?,?);
INSERT INTO Package (_Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);
INSERT INTO PackageExtension (_Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);
INSERT INTO PackageFamily (_Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary) VALUES(?,?,?,?,?,?,?);
INSERT INTO PackageIdentity (_Revision, PackageFamily, PackageFullName, _Dictionary) VALUES(?,?,?,?);
INSERT INTO PackageLocation (_Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, ProjectionId, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?);
INSERT INTO PackageUser (_Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary) VALUES(?,?,?,?,?,?,?,?,?,?,?);
INSERT INTO PackageUser(_Revision, _WorkId, Package, User, InstallTime, IsExplicitlyInstalled, DeploymentState, AppDataVolume)SELECT 1, 0, _PackageID, (SELECT _UserID FROM User WHERE UserSid=X'010100000000000512000000'), now(), 1, 1, 0 FROM Package WHERE _PackageID NOT IN (SELECT Package FROM PackageUser) AND PackageOrigin=2;
INSERT INTO PackageUser(_Revision, _WorkId, Package, User, InstallTime, IsExplicitlyInstalled, DeploymentState, AppDataVolume)SELECT 1, 0, _PackageID, (SELECT _UserID FROM User WHERE UserSid=X'010100000000000512000000'), now(), 1, 6, 0 FROM Package WHERE _PackageID NOT IN (SELECT Package FROM PackageUser) AND PackageOrigin<>2;
INSERT INTO PackageUserStatus (_Revision, PackageIdentity, User, Status, _Dictionary) VALUES(?,?,?,?,?);
INSERT INTO Protocol (_Revision, _WorkId, ProtocolName, ReturnResults, Extension, "Index", ProgID, _Dictionary) VALUES(?,?,?,?,?,?,?,?);
INSERT INTO PublisherCacheFolder (_Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary) VALUES(?,?,?,?,?,?);
INSERT INTO Sequence (Id, LastValue) VALUES(?,?);
INSERT INTO TargetDeviceFamily (_Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary) VALUES(?,?,?,?,?,?,?,?);
INSERT INTO User (_Revision, UserSid, _Dictionary) VALUES(?,?,?);
INSERT INTO WowDependencyGraph (_Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary) SELECT _Revision, ?2, ?1, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE _WowDependencyGraphID=?1 AND _ShadowId=0 AND NOT EXISTS(SELECT 1 FROM WowDependencyGraph WHERE _ShadowId=?1 AND _WorkId<>0 LIMIT 1);
INSERT INTO WowDependencyGraph (_Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary) VALUES(?1,?2,?3,?4,?5,?6,?7,?8,?9,?10);
INSERT OR IGNORE INTO ApplicationUser (_Revision, _WorkId, User, ApplicationIdentity, Application, Package, PackageUser)SELECT 1, ?2, pu.User, ai._ApplicationIdentityID, a._ApplicationID, pu.Package, pu._PackageUserID FROM PackageUser AS pu INNER JOIN Application AS a ON a.Package=pu.Package INNER JOIN ApplicationIdentity AS ai ON ai.ApplicationUserModelId=a.ApplicationUserModelId WHERE pu._PackageUserID=?1   AND (pu._WorkId=0 OR pu._WorkId=?2) AND (a._WorkId=0 OR a._WorkId=?2);
INSERT OR IGNORE INTO User(_Revision, UserSid, _Dictionary)VALUES(1, X'010100000000000512000000', NULL);
Insertable
InsertableObject
insfile
InstalledLocationVirtualization
InstallPackageList
instance
instance->ParseApplicationExtension( currentPackage, extensionToProcess, categoryName )
insufficient memory
integer
IntegrityLevel
integrityResult
Interactive User
Interface
InterfaceId
InterfaceIdentifier
interfaceReg.query_to(&registryCompatibility)
interfaceReg.query_to(&scope)
interfaceReg->SetAsynchronousInterface(asynchronousInterfaceGuid)
interfaceReg->SetProxyStubClsidWithSupportedArchitectures(proxyStubClsid, supportedArchitectures)
interfaceReg->SetSynchronousInterface(synchronousInterfaceGuid)
interfaceReg->SetTypeLib(typeLibIdGuid, nullptr)
interfaceReg->SetTypeLib(typeLibIdGuid, versionNumber.get())
interfaceReg->SetUniversalMarshaler(useUniversalMarshaler)
InterfaceRegistration::Create(strValidatedIid, interfaceName, strValidatedCLSID, _sourcePackage->GetCollectors(), &itf)
InterfaceRegistration_Impl::Create(name, clsid, &registrationImpl)
interfaces->get_item(nodeIndex, &node)
interfaces->get_length(&listLength)
InterlockedPopEntrySList
InterlockedPushEntrySList
Internal::BackgroundPlaybackClassHelper::SubmitBackgroundPlaybackRegistration(package, strEntryPoint.GetChars(), !!foundStartPage)
Internal::DownloadUploadClassHelper::InstallVpnBackgroundTask( package, appUserModelId.get(), vpnManifest )
Internal::DownloadUploadClassHelper::SubmitDownloadUploadServerRegistration(package, appIndex, strAppUserModelId)
Internal::DownloadUploadClassHelper::SubmitVpnPluginServerRegistration( package, vpnManifest, appIndex, strAppUserModelId)
Internal::GetPackagedFileAbsolutePath(incomingPackage, _properties.Executable.Value.GetRawBuffer(nullptr), surrogateExecutableAbsolutePath)
Internal::GetPackagedFileAbsolutePath(incomingPackage, _properties.HelpDirectory.Value.GetRawBuffer(nullptr), absolutePath)
Internal::GetPackagedFileAbsolutePath(incomingPackage, _properties.Win32Path.Value.GetRawBuffer(nullptr), absolutePath)
Internal::GetPackagedFileAbsolutePath(incomingPackage, _properties.Win64Path.Value.GetRawBuffer(nullptr), absolutePath)
Internal::GetPackagedFileAbsolutePath(incomingPackage, GetDllPathForArchitecture(architecture).GetRawBuffer(nullptr), dllAbsolutePath)
Internal::GetSystemFileAbsolutePath( _properties.SystemExecutableArchitecture.Value, _properties.Executable.Value.GetRawBuffer(nullptr), surrogateExecutableAbsolutePath)
InternalDevUnlock
InternalName
internetClient
internetshortcut
invalid bit length repeat
invalid block type
invalid distance code
invalid hash bucket count
invalid literal/length code
Invalid phase for Collectors
invalid stored block lengths
invalid string_view position
invalid window size
InvalidateLanguageResourceCaches
IoPriority
iot2:Subsystem
is_srjournal_enabled
is_triggers_enabled
IsCentennial
IsCommsSystemService
IsDebuggerPresent
IsDeveloperModeEnabled
IsDPLSupportedOnPlatform %ws.
IsEncrypted %ws
IsErrorFatal 0x%0x %ls
IsImpersonating
IsInAutoCommitMode() called but !db.IsOpen()
IsInboxPackage
IsInPlaceUpdate
IsInRelatedSet
IsInstalled
IsMounted %ls
IsMounted %ls persist %u
IsNonInboxAllUserPackage
IsOptional
IsPackageEncrypted
IsPackageInUpgradeKey
IsPackageOnPreinstalledVolume
IsPackageUnregisteredForRoaming %ws
IsPackageUnregisteredForRoaming: bad packageFamilyName
IsPackageUsingBDC
IsProcessorFeaturePresent
IsRetailUnlocked
isSessionLocked
IsSideloadingEnabled
IsStreamingPackage
IsUpdate
IsUserProfileEnabledForRoaming
IsValidSid
IsWellKnownSid
It$XH
iterator->get_Current(&item)
iterator->get_HasCurrent(&hasCurrent)
iterator->MoveNext(&hasCurrent)
jD9}gt&D
JHD8z(u
journal_mode
journal_size_limit
Jp2D0tLp2D4B$
jsefile
JuniperNetworks.JunosPulseVpn_cw5n1h2txyewy
k VWAVH
k,L;KPs
K`H;KPr
k<D8k<t#
K32EnumProcesses
kernel32.dll
kernelbase.dll
Key %ls index %u
KeyName
keyValuePair->get_Key(clsid.ReleaseAndGetAddressOf())
keyValuePair->get_Key(iid.ReleaseAndGetAddressOf())
keyValuePair->get_Value(&classInterface)
keyValuePair->get_Value(&itf)
keyValuePair->get_Value(&proxyStub)
keyValuePair->get_Value(&serverInterface)
kinectAudio
kinectExpressions
kinectFace
kinectGamechat
kinectRequired
kinectVision
KXA_A^A]A\_^][
KXL9KPt
L!|$@H
L!|$0
L!t$0
L#~0M
L#5l9
L$ E3
l$ E3
L$ E3
l$ E3
L$ E3
l$ E3
L$ E3
l$ E3
L$ E3
L$ SVWAVH
L$ SVWH
L$ SWH
L$ UH
L$ USVWATAVAWH
L$ USVWAVH
L$ UVATAVAWH
L$ UVWATAUAVAWH
l$ VWATAUAVAW
l$ VWATAUAVAWD
l$ VWATAVAWH
L$ VWATAVAWH
l$ VWATAVAWH
l$ VWAUAVAWH
L$ VWAVH
l$ VWAVH
L$ WH
L$(E3
l$(E3
L$)D+
L$@9L$ t
L$@A+
L$@E3
L$@fH
L$@H;
L$@H3
L$@I+
L$`D;
L$`fA;
L$`H;
L$`H3
L$`xfM
l$0D8
L$0E;
l$0E3
L$0E3
L$0fD
L$0H3
L$0H9
L$0L!T$0L
L$1D+
L$4D9D$|tB
L$8H;
L$8H3
L$8H9
L$8H9;t
l$8IcF D8l0Hu
L$d;L$dr
L$DE3
L$hD;
l$hD8
L$HE3
L$hE3
L$HE3
L$hE3
L$HE3
L$hE3
L$hH;
L$HH;
L$hH;L$hr
L$hH;L$hrRA
L$hH3
L$HH3
L$hH3
L$HH3
L$hH3
L$HH3
L$hH3
L$hH9\$pu*
l$HsqL
L$lE3
L$P!E
l$P9T$0A
l$PA_A^A]A\_^
l$PD3
L$pE3
L$PE3
L$pE3
L$PE3
L$pE3
L$PE3
L$pH;
L$PH;
L$pH;
L$PH3
L$pH3
L$PH3
L$pH3
L$PH3
L$pH3
L$PH3
L$pH3
L$PH3
L$pH3
L$PH3
L$PHcQ
L$pL;M8t
L$XA+
L$XA3
L$XE3
L$xE3
L$XE3
L$xE3
L$XE3
l$XH;t$xs;H
L$XH+
L$XH3
L$xH3
L$XH3
L$xH9|$hu
L$XL;
L$xM;
L;6t&H
L;IPs
L;kHu
L;KHu
L;KHu"H
L;NHu%H
L;NHu+H
L;NPs
L;v8r
L;wPr
L;wPs
L9!u#
L9;u>H
L9\$XL
L9{Hu
L9|$0t-H
L9|$8
L9}8u
L9}wuYH
L97uHH
L9a(u
L9c(tmL
L9c@tmL
L9c0tmL
L9cHtmL
L9d$`
L9d$0
L9d$8
L9eXu:H
L9g0t
L9gXue
L9l$Ht
L9l$hu"
L9l$xL
L9m t
L9m u
L9mXu3H
L9n8u
L9nXu
L9O@t
L9U`L
L9w8t
L9wPH
lambda(spExtensionRegistration.Get())
lambda(winrtCollector.get())
Landscape
LandscapeFlipped
Language
LanguageExperiencePackExtensionHandler
LanguageOverlayKeyName
LanguagePreference
LastLine
Latest
LaunchAndActivationPermission
LaunchPermission
LazyFlushQueueLength
LcL$8L
LCMapStringEx
LD9&v9H
LeaveCriticalSection
LegalCopyright
Level %u for %ls.
LibraryFlag
LICENSING_DEH_KEYWORD
light
lineNumber
LineNumber
lineNumber
LineNumber
lineNumber
LineNumber
lineNumber
LineNumber
lineNumber
LineNumber
lineNumber
LineNumber
lineNumber
LineNumber
lineNumber
LineNumber
lineNumber
LineNumber
LinkDestinationPath
Linked user-specific merged PRI file
list too long
lnkfile
LoadCategoryNameTable
LoaderSearchPathEntry
LoaderSearchPathOverride
LoadExtensionRegistrationTable
LoadLibraryExW
Local AppData
Local\SM0:%lu:%lu:%hs
LocalAlloc
LocalCache
LocaleId
localExperienceCumulativeInternal
localExperienceInternal
LocalExperiencePackage
LocalFree
Locality %u
Locality %u path %ls
Locality %u size %u copiedSize %u fromPath %ls toPath %ls
Locality %u size %u copiedSize %u path %ls
Locality %u size %u path %ls
localManager
LocalServer32
LocalService
LocalStateFolder
Location
location
Location
locking_mode
LockTheStateLock %u
Log(*error*,message) error: Invalid type for error (%d)
Log(error,*message*) error: Invalid type for message (%d)
LogFileInfoAlongPath %ls %p 0x%0x
LogFileInfoAlongPath %ls 0x%0x
LogFileInUse Telemetry failed: No valid tag.
Logging data because access was denied for file: 
LogHr
LogIfAccessDenied
LogNt
LookasideHitPeak
LookasideMissFullPeak
LookasideMissSizePeak
LookasideUsed
LookasideUsedPeak
LookupAccountSidW
LookupPrivilegeValueW
lpacAppExperience
lpt1.
lpt2.
lpt3.
lpt4.
lpt5.
lpt6.
lpt7.
lpt8.
lpt9.
ls:\9
LsaLookupClose
LsaLookupFreeMemory
LsaLookupGetDomainInfo
LsaLookupOpenLocalPolicy
LXP_DEH_KEYWORD
M H1E
M;}0r
m_registrationStoreContext.copy_to(iid, ppv)
m_text.find(L'\\') != std::wstring::npos
m_text.length() < minLength
m_text.length() == 0
m_text.length() > maxLength
m_text.length() > UNICODE_STRING_MAX_CHARS
M8tUH
M9~(t$L
M9~(t(L
machine
Machine
machine
MACHINE\
MachineArchitecture
MachineDatabase
MachineDatabaseAutoCheckpoint
MachineDatabaseCacheSize
MachineDatabaseCheckpointThreshold
MachineDatabaseFileChunkSize
MachineDatabaseJournalSizeLimit
MachineDatabaseOptions
MachineDatabasePageSize
MachineDatabaseStatisticsLastUpdated
MainBundle
MainOrOptionalPackageFullName1
MainOrOptionalPackageFullName2
mainPackageFamilyMoniker.Set( localMainPackageFamilyMoniker->chars, localMainPackageFamilyMoniker->length)
MainPackageFamilyName
MainPackageFullName
MainPackageMoniker
MainSTA
MaintenanceInterval
MaintenanceMaxClockDelta
make_bstr_nothrow AttributeName
make_bstr_nothrow xpath
MakeAndInitialize<ActivationCatalogCollector>(collector)
MakeAndInitialize<ActivationCatalogCollectorForUser>(collector)
MakeAndInitialize<ClassRegistrationType>(&classRegistration, _classes.get(), classId, _id)
MakeAndInitialize<ComInprocHandlerClassDllRegistration>(&classRegistration, _classes.Get(), classId)
MakeAndInitialize<ComInprocServerClassDllRegistration>(&classRegistration, _classes.Get(), classId)
MakeAndInitialize<ComManagedInprocServerClassRegistration>(&classRegistration, _classes.Get(), classId)
MakeAndInitialize<ExtensionCatalogCollector>(collector)
MakeAndInitialize<FileManager>(ppFileManager)
MakeAndInitialize<PackagedComCatalogCollector>(collector)
MakeAndInitialize<PackagedComCatalogCollectorForUserOrSystemRegister>(collector, userToken)
MakeSelfRelativeSD
MallocCount
MallocCountPeak
MallocSizePeak
ManageCI_FreeSbcpHandle
ManageCI_ParseSbcpToken
ManageCI_QueryString
Managed.App.Settings
ManagedInProcessServer
managedInProcessServerClassXPath
managedInprocServerClassRegistration.query_to(&classRegistration)
managedInprocServerClassRegistration.query_to(&inprocClassRegistration)
managedInprocServerClassRegistration.query_to(&inprocServerClassRegistration)
managedInprocServerClassRegistration.query_to(&registryCompatibility)
managedInprocServerClassRegistration.query_to(&scope)
managedInprocServerClassRegistration->SetAssembly(assembly)
managedInprocServerClassRegistration->SetImplementationClass(implementationClass.get())
managedInprocServerClassRegistration->SetRuntimeVersion(runtimeVersion)
ManifestCacheOptions
ManifestLanguagesList
ManifestPath
manifestReader->GetApplications(&applications)
manifestReader->GetCapabilities(&capabilities)
manifestReader->GetPackageId(&packageId)
ManifestReaderFound
MapEnumString(ActivatableClassConstants::attributeTypeMap, ARRAYSIZE(ActivatableClassConstants::attributeTypeMap), typeValue, reinterpret_cast<DWORD*>(&type))
MapEnumString(ActivatableClassConstants::identityTypeMap, ARRAYSIZE(ActivatableClassConstants::identityTypeMap), Windows::Internal::StringReference(identityTypeBuffer.GetChars()), reinterpret_cast<DWORD*>(&identityType))
MapEnumString(ActivatableClassConstants::instancingMap, ARRAYSIZE(ActivatableClassConstants::instancingMap), instancingString, reinterpret_cast<DWORD*>(&instancing))
MapEnumString(ActivatableClassConstants::threadingMap, ARRAYSIZE(ActivatableClassConstants::threadingMap), threadingModelString, reinterpret_cast<DWORD*>(&threadingModel))
MapEnumString(Details::g_compatModeMap, string, compatMode)
MapEnumString(Details::g_scopeMap, string, scope)
MapEnumString(Internal::PackagedComConstants::threadingMap, ARRAYSIZE(Internal::PackagedComConstants::threadingMap), wil::str_raw_ptr(threadingModelString), reinterpret_cast<DWORD*>(threadingModel))
MapEnumString(map, mapLength, enumString, &enumValue)
MapEnumStringToHstringValue( Internal::PackagedComConstants::aspectMap, ARRAYSIZE(Internal::PackagedComConstants::aspectMap), aspectType.GetRawBuffer(nullptr), aspectTypeValue.GetAddressOf())
MapEnumStringToHstringValue( Internal::PackagedComConstants::directionMap, ARRAYSIZE(Internal::PackagedComConstants::directionMap), direction.GetRawBuffer(nullptr), directionValue.GetAddressOf())
MapEnumStringToHstringValue(Internal::PackagedComConstants::systemSurrogateMap, ARRAYSIZE(Internal::PackagedComConstants::systemSurrogateMap), wil::str_raw_ptr(systemSurrogateEnumString), &systemSurrogateExecutable)
MapViewOfFile
Match
MaxCount
MaxEntriesFlushed
MaxEntriesStored
MaxInstallOrder
MBI_SSL
MD$XH
MediaID
MediaId
MediaID
mediaProcessing
MediumFlag
mediumIL
memcmp
memcpy
memmove
memmove_s
MEMORY
MemoryPriority
MemoryUsed
MemoryUsedPeak
memset
Merge failure for shared merged PRI file
Merge failure for user-specific merged PRI file
Merged to user-specific merged PRI file
-MergedResources-
MergedResourcesIndex
MergeRelatedPriFiles
message
Message
message
Message
message
Message
message
Message
MHH!}
microphone
Microsoft
Microsoft Corporation
Microsoft Enhanced RSA and AES Cryptographic Provider
Microsoft.GameOS
Microsoft.MicrosoftEdge_8wekyb3d8bbwe
Microsoft.MicrosoftEdgeBeta_8wekyb3d8bbwe
Microsoft.MoCamera_cw5n1h2txyewy
microsoft.powershellscript.1
microsoft.system.package.metadata
Microsoft.unsignedPackageManagement_8wekyb3d8bbwe
Microsoft.Windows.ApplicationModel.DesktopAppx
Microsoft.Windows.AppXDeploymentExtensions
Microsoft.Windows.AppxDeploymentFallback
Microsoft.Windows.AppXDeploymentServer
Microsoft.Windows.BackgroundAccessManager
Microsoft.Windows.Networking.ModernApps.LoopbackAccess
Microsoft.Windows.Notifications.Deployment
Microsoft.Windows.PackageExperiment
Microsoft.Windows.Security.CustomCapability
Microsoft.Windows.Shell.CentennialDefaultAssoc
Microsoft.Windows.StateRepository.Service
Microsoft.Windows.TlgAggregateInternal
Microsoft.Windows.Wil.FeatureLogging
Microsoft.zMicrosoftEdge_8wekyb3d8bbwe
Microsoft\Windows\CurrentVersion\Appx\AppxAllUserStore\
Microsoft\Windows\X509Enrollment\FS.token
MicrosoftTelemetryAssertTriggeredUM
MicrosoftWindows.
Microsoft-Windows-AppModel-State
Microsoft-Windows-AppXDeployment-Server
Microsoft-Windows-AppXDeploymentServer/Debug
Microsoft-Windows-AppXDeploymentServer/Diagnostic
Microsoft-Windows-AppXDeploymentServer/Operational
Microsoft-Windows-AppXDeploymentServer/Restricted
MigrateToCentennialAsDefault
MigrateWritablePackageRootData
MigratorPatch
MinEntriesFlushed
MiscStatus
miscStatus != existingMiscStatus
miscStatusAspectFlagsPropertyValue->GetString( &miscStatusAspectFlagsString)
miscStatusAspectKeyValuePair->get_Key(&miscStatusAspect)
miscStatusAspectKeyValuePair->get_Value( &miscStatusAspectFlagsInspectable)
MissingPackageFamily
MissingParameter
MitigatedAppDataVolume
MkParseDisplayName
MoCOM
MOCOM_HELPER_KEYWORD
MoCOMHelper::CreateHelper( m_sourcePackage->GetUserToken(), extensionElements[extensionIndex], &contractId, const_cast<OSIntegration::Package*>(m_sourcePackage), &mocomHelper)
mocomHelper->Evaluate(m_sourcePackage)
modern
ModifiedFile
modifiedReason
module
MofFile
Moniker
MountedAppStateFolderTarget
MountedSettingsFolderTarget
MountPoint
MoveAppData %ws
MoveContentsOfFolderForDeletion %ws delete %ws
MoveFile %ls %ls
MoveFileEx %ws %ws
MoveFileEx %ws src %ws dest %ws file %ws
MoveFileExW
MoveFileW
MrmCoreR.dll
MRT Deh
MRT_DEH_KEYWORD
MrtApplication
MrtDefaultTile
MrtPackage
MrtSharedPri
MrtUserPri
ms:CriticalData
ms:Measures
ms:ReservedKeyword44
ms:Telemetry
MSAC_SIGNOUT_DEH_KEYWORD
ms-accountpictureprovider
ms-appdata
ms-appx
ms-appx-web
ms-autoplay
mscoree.dll
Msg:[%ws] 
MsgWaitForMultipleObjects
msi.package
msi.patch
MsixAppCompatSupport::GetExtensionCompatMode( const_cast<IXMLDOMElement*>(incomingExtensionElements[extensionIndex]), &compatMode)
MsixAppCompatSupport::GetExtensionCompatMode(extensionElements[extensionIndex], &compatMode)
MsixAppCompatSupport::GetExtensionScope(extensionElements[extensionIndex], &scope)
MsixvcSignature.p7
msvcp_win.dll
ms-windows-search
ms-xbl-%08x
MultiByteToWideChar
multiPlaneOverlay
Multiple audio declarations found.
multipleInstances
MultiSelectModel
MultiString::InitializeFromStringArray
MultiStringIterator::operator *
MultiStringIterator::operator ++
MultiStringIterator::operator ==
musicLibrary
MutablePackageDirectory
m'w8Z
MXfD;i
MyForEach
MyForEach(iterator, [&packageMoniker, &registrationStoreContext] ( IKeyValuePair< HSTRING, IDllServerActivatableClassRegistration* > * keyValuePair ) -> HRESULT { ComPtr< IDllServerActivatableClassRegistration > classInterface; RETURN_IF_FAILED(keyValuePair->get_Value(&classInterface)); RETURN_IF_FAILED(static_cast< InProcessActivatableClassRegistration_Impl* >(classInterface.Get())-> PendingWriteToStore(packageMoniker, registrationStoreContext)); return S_OK; })
MyForEach(iterator, [&packageMoniker, &registrationStoreContext] ( IKeyValuePair< HSTRING, IExeServerActivatableClassRegistration* > *keyValuePair ) -> HRESULT { ComPtr< IExeServerActivatableClassRegistration > classInterface; RETURN_IF_FAILED(keyValuePair->get_Value(&classInterface)); OutOfProcessActivatableClassRegistration_Impl *activatableClass = static_cast< OutOfProcessActivatableClassRegistration_Impl* >(classInterface.Get()); RETURN_IF_FAILED(activatableClass->PendingWriteToStore(packageMoniker, registrationStoreContext)); return S_OK; })
MyForEach(iterator, [&packageMoniker, &registrationStoreContext]( IKeyValuePair< HSTRING, IInspectable* > *keyValuePair ) -> HRESULT { ComPtr< IInspectable > itf; Windows::Internal::String iid; RETURN_IF_FAILED(keyValuePair->get_Key(iid.ReleaseAndGetAddressOf())); RETURN_IF_FAILED(keyValuePair->get_Value(&itf)); RETURN_IF_FAILED(registrationStoreContext->CreateInterfaceEntry( packageMoniker.Get(), iid.Get(), *static_cast<InterfaceRegistration_Impl*>(itf.Get()))); return S_OK; })
MyForEach(iterator, [&packageMoniker, &registrationStoreContext]( IKeyValuePair< HSTRING, IInspectable* > *keyValuePair ) -> HRESULT { ComPtr< IInspectable > proxyStub; Windows::Internal::String clsid; RETURN_IF_FAILED(keyValuePair->get_Key(clsid.ReleaseAndGetAddressOf())); RETURN_IF_FAILED(keyValuePair->get_Value(&proxyStub)); RETURN_IF_FAILED(registrationStoreContext->CreateProxyStubEntry( packageMoniker.Get(), clsid.Get(), *static_cast<ProxyStubRegistration_Impl*>(proxyStub.Get()))); return S_OK; })
MyForEach(iterator, [this, incomingPackage, &registrationStoreContext] ( IKeyValuePair< HSTRING, IExeServerRegistration* > *keyValuePair ) -> HRESULT { ComPtr< IExeServerRegistration > serverInterface; RETURN_IF_FAILED(keyValuePair->get_Value(&serverInterface)); RETURN_IF_FAILED(static_cast<ExeServerRegistration_Impl*>(serverInterface.Get())-> PendingWriteToStore(incomingPackage, registrationStoreContext)); return S_OK; })
N@H9NPt!L
N6Eh0
NameCollisionMap::Make(&_nameCollisionMap)
NameCollisionMap::Make(&registration->_nameCollisionMap)
nameCollisionMap->Insert(keyName, keyName, &replaced)
nameCollisionMap->Remove(keyName)
NamedDependency
NavigateTo
NdrClientCall2
need dictionary
NetworkIsolationCreateAppContainerLoopbackRules
NetworkIsolationCreateDeleteContainerLoopbackRules
NetworkIsolationDeleteAppContainerLoopbackRules
NetworkIsolationSetupAppContainerBinaries
Neutral
neutral
new %u
New %u
NewMainPackageFullName
newPair->SetKey(key)
newPair->SetValue(value)
NextDeploymentState
nextTreatAsClassElement
Ng0D+
No DPL support for level %u on encrypted non-system drive.
No entry point found.
No shared merged files found
No token handle
No user-specific merged files found
node.As(&aspect)
node.As(&classElement)
node.As(&comInterfaceElement)
node.As(&comServerElement)
node.As(&conversionFormat)
node.As(&dataFormatElement)
node.As(&element)
node.As(&extension)
node.As(&format)
node.As(&implementedCategory)
node.As(&verbElement)
node.query_to(&classElement)
node.query_to(&dllElement)
node.query_to(&typeLib)
node.query_to(&version)
node->get_baseName(bstrNodeName.AddressOf())
nodeClass.query_to(&classElement)
nodes->get_item(nodeIndex, &node)
nodes->get_length(&listLength)
NORMAL
notifyBamSvc
NoUIEntryPoints-DesignMode
NoUIEntryPoints-DesignModeV2
NtAccessCheck
NtClose
NtCreateFile
NtCreateLowBoxToken
NtCreateSection
NtDeleteWnfStateName
NtDeleteWnfStateName %llu
ntdll.dll
ntelA
NtFsControlFile
NtMapViewOfSection
NTMARTA.dll
NtQueryInformationFile
NtQueryInformationProcess
NtQueryInformationThread
NtQueryInformationToken
NtQuerySystemInformation
NtQueryWnfStateData
NtSetInformationThread
NtSetInformationVirtualMemory
NtSetSecurityObject
NTStatus
NtUnmapViewOfSection
NtUpdateWnfStateData
NumAllocationFailures
numAttempts
NumberOfFiles
NumberOfPagesCheckpointed
NumBucketLimitReached
NumFlushes
NumLargeEventFailures
numTotalSteps
NXL9NPt0A
O H;K
O:%sD:P(A;;FA;;;%s)(A;;GR;;;%s)(A;;GR;;;%s)(A;;GR;;;%s)(A;;FA;;;BA)
O:%sD:P(A;OICI;FA;;;%s)(A;OICI;GR;;;%s)(A;OICI;GR;;;%s)(A;OICI;GR;;;%s)(A;OICI;FA;;;BA)
O:BAG:BAD:(A;;0x1;;;SY)(A;;0x1;;;BA)
O:PSG:BAD:(A;;0xB;;;BU)(A;;0xB;;;AC)
O:PSG:BAD:(A;;0xB;;;SY)(A;;0xB;;;BA)(A;;0xB;;;BU)
O:PSG:BAD:(A;;0xB;;;SY)(A;;0xB;;;IU)(A;;0xB;;;BA)(A;;0xB;;;BU)
O:SYG:SYD:P(A;OICI;KA;;;SY)(A;OICI;KRKX;;;BA)(A;OICI;KRKX;;;%s)
o\$PH
ObjectLength
ObjectNum
ocxfile
oD$ f
OD87t
offlineSoftwareHive
Offset
oL$0f
OldMainPackageFullName
ole32.dll
OLEAUT32.dll
OleMiscFlag
OleVerbFlag
onecore\admin\appmodel\cleanupmanager\cleanupmanager.cpp
onecore\admin\appmodel\common\accesshelpers.cpp
onecore\admin\appmodel\common\alluserstorepaths.cpp
onecore\admin\appmodel\common\alluserstoresetupphase.cpp
onecore\admin\appmodel\common\bcdutil.cpp
onecore\admin\appmodel\common\directoryacls.cpp
onecore\admin\appmodel\common\directorypaths.cpp
onecore\admin\appmodel\common\encryption.cpp
onecore\Admin\appmodel\common\FileInUseTelemetry.hpp
onecore\admin\appmodel\common\fspolicy.cpp
onecore\admin\appmodel\common\hardlinkingacls.cpp
onecore\admin\appmodel\common\impersonateself.cpp
onecore\admin\appmodel\common\logfileinformation.cpp
onecore\Admin\appmodel\common\ManifestCache.hpp
onecore\admin\appmodel\common\manifestreader.cpp
onecore\admin\appmodel\common\metadata.cpp
onecore\admin\appmodel\common\mrthelper.cpp
onecore\admin\appmodel\common\optionalpackagehelper.cpp
onecore\admin\appmodel\common\packageid.cpp
onecore\admin\appmodel\common\packageprocess.cpp
onecore\admin\appmodel\common\packagestatus.cpp
onecore\admin\appmodel\common\prefetchfile.cpp
onecore\admin\appmodel\common\privilege.cpp
onecore\Admin\appmodel\Common\ProgID.hpp
onecore\admin\appmodel\common\removeregistrytree.cpp
onecore\admin\appmodel\common\securitydescriptorbuilder.cpp
onecore\admin\appmodel\common\sessionutilities.cpp
onecore\admin\appmodel\common\signaturetools.cpp
onecore\admin\appmodel\common\statepaths.cpp
onecore\Admin\appmodel\Common\StateRepository.hpp
onecore\admin\appmodel\common\takeownership.cpp
onecore\admin\appmodel\common\utilities.cpp
onecore\Admin\appmodel\Common\Utilities.hpp
onecore\admin\appmodel\common\volume.cpp
onecore\admin\appmodel\common\volumemanager.cpp
onecore\admin\appmodel\common\xmltools.cpp
onecore\admin\appmodel\osim\src\deh\appx\appexecutionalias\appexecutionaliashelper.cpp
onecore\admin\appmodel\osim\src\deh\appx\applydata\applydata.cpp
onecore\admin\appmodel\osim\src\deh\appx\appointmentdataprovider\appointmentdataproviderhelper.cpp
onecore\admin\appmodel\osim\src\deh\appx\appservice\appservicehelper.cpp
onecore\admin\appmodel\osim\src\deh\appx\appservice\AppServiceHelper.hpp
onecore\admin\appmodel\osim\src\deh\appx\appuri\appurihelper.cpp
onecore\admin\appmodel\osim\src\deh\appx\appxminirepository\appxminirepositoryhandler.cpp
onecore\admin\appmodel\osim\src\deh\appx\callcontrol\callcontrolhelper.cpp
onecore\admin\appmodel\osim\src\deh\appx\capabilityauthorization\capabilityauthorizationhandler.cpp
onecore\admin\appmodel\osim\src\deh\appx\common\actionhelper.cpp
onecore\Admin\appmodel\OSIM\src\deh\appx\Common\AppContainerImpersonate.hpp
onecore\admin\appmodel\osim\src\deh\appx\common\capabilities.cpp
onecore\admin\appmodel\osim\src\deh\appx\common\ConstantStringMap.hpp
onecore\admin\appmodel\osim\src\deh\appx\common\customcapabilities.cpp
onecore\admin\appmodel\osim\src\deh\appx\common\dehrequest.cpp
onecore\admin\appmodel\osim\src\deh\appx\common\deploymentextension.cpp
onecore\Admin\appmodel\OSIM\src\deh\appx\Common\EnumStringMapping.hpp
onecore\admin\appmodel\osim\src\deh\appx\common\extensionbundle.cpp
onecore\admin\appmodel\osim\src\deh\appx\common\mocomhelper.cpp
onecore\Admin\appmodel\OSIM\src\deh\appx\Common\MoCOMHelper.hpp
onecore\admin\appmodel\osim\src\deh\appx\common\MoCOMHelper.hpp
onecore\Admin\appmodel\OSIM\src\deh\appx\Common\MsixAppCompatSupport.hpp
onecore\admin\appmodel\osim\src\deh\appx\common\package.cpp
onecore\admin\appmodel\osim\src\deh\appx\common\progidregistryhelper.cpp
onecore\admin\appmodel\osim\src\deh\appx\common\shellrefresh.cpp
onecore\admin\appmodel\osim\src\deh\appx\common\tools.cpp
onecore\admin\appmodel\osim\src\deh\appx\common\usertoken.cpp
onecore\admin\appmodel\osim\src\deh\appx\common\xmltools.cpp
onecore\admin\appmodel\osim\src\deh\appx\contactdataprovider\contactdataproviderhelper.cpp
onecore\admin\appmodel\osim\src\deh\appx\emaildataprovider\emaildataproviderhelper.cpp
onecore\admin\appmodel\osim\src\deh\appx\filetype\filetypeextensionhandlermobilecore.cpp
onecore\admin\appmodel\osim\src\deh\appx\filetype\filetypehelper.cpp
onecore\admin\appmodel\osim\src\deh\appx\loopbackaccess\loopbackaccessrulesextensionhandler.cpp
onecore\admin\appmodel\osim\src\deh\appx\packagemachinecompliance\packagemachinecompliance.cpp
onecore\admin\appmodel\osim\src\deh\appx\posbarcodescannerprovider\posbarcodescannerproviderhelper.cpp
onecore\admin\appmodel\osim\src\deh\appx\pospaymentconnector\pospaymentconnectorhelper.cpp
onecore\admin\appmodel\osim\src\deh\appx\precompilation\precompilationhandler.cpp
onecore\admin\appmodel\osim\src\deh\appx\protocol\protocolextensionhandlermobilecore.cpp
onecore\admin\appmodel\osim\src\deh\appx\protocol\protocolhelper.cpp
onecore\admin\appmodel\osim\src\deh\appx\runtime\aripackage.cpp
onecore\admin\appmodel\osim\src\deh\appx\runtime\AriPackage.hpp
onecore\admin\appmodel\osim\src\deh\appx\runtime\aristring.cpp
onecore\admin\appmodel\osim\src\deh\appx\runtime\runtimeextensionhandler.cpp
onecore\Admin\appmodel\OSIM\src\deh\appx\StartupTask\StartupTaskHelper.hpp
onecore\admin\appmodel\osim\src\deh\appx\state\state.cpp
onecore\admin\appmodel\osim\src\deh\appx\uiaccess\uiaccesscapabilityhandler.cpp
onecore\admin\appmodel\osim\src\deh\appx\unsignedenforcer\unsignedenforcerextensionhandler.cpp
onecore\admin\appmodel\osim\src\deh\appx\userdatataskdataprovider\userdatataskdataproviderhelper.cpp
onecore\Admin\appmodel\OSIM\src\deh\BaseClasses\BaseHandlers.hpp
onecore\Admin\appmodel\OSIM\src\deh\BaseClasses\BaseHelpers.hpp
onecore\admin\appmodel\osim\src\deh\baseclasses\mainpackagedeploymentextensionhandler.cpp
onecore\admin\appmodel\osim\src\deh\certificates\certificates.cpp
onecore\admin\appmodel\osim\src\deh\cloudfiles\cloudfilesextensionhandler.cpp
onecore\admin\appmodel\osim\src\deh\dialprotocol\dialprotocolhelper.cpp
onecore\admin\appmodel\osim\src\deh\gdx\mrthandler.cpp
onecore\admin\appmodel\osim\src\deh\geolocation\geolocationextensionhandler.cpp
onecore\admin\appmodel\osim\src\deh\licensing\licensing.cpp
onecore\admin\appmodel\osim\src\deh\lxp\languageexperiencepackextensionhandler.cpp
onecore\admin\appmodel\osim\src\deh\uex\apppicker\apppickerhelper.cpp
onecore\Admin\appmodel\OSIM\src\deh\uex\apppicker\fileOpenPickerHelper.hpp
onecore\Admin\appmodel\OSIM\src\deh\uex\apppicker\fileSavePickerHelper.hpp
onecore\admin\appmodel\osim\src\deh\uex\apppicker\mobilecorecachedfileupdater.cpp
onecore\admin\appmodel\osim\src\deh\uex\apppicker\mobilecorefileopenpicker.cpp
onecore\admin\appmodel\osim\src\deh\uex\apppicker\mobilecorefilesavepicker.cpp
onecore\admin\appmodel\osim\src\deh\uex\backgroundtasks\backgroundtaskshandler.cpp
onecore\admin\appmodel\osim\src\deh\uex\backgroundtasks\backgroundtasksutilities.cpp
onecore\admin\appmodel\osim\src\deh\uex\defaultbackgroundtasks\defaultbackgroundtasksclass.cpp
onecore\admin\appmodel\osim\src\deh\uex\defaultbackgroundtasks\defaultbackgroundtasksclasshelper.cpp
onecore\Admin\appmodel\OSIM\src\deh\uex\inc\BaseHandler.hpp
onecore\Admin\appmodel\OSIM\src\deh\uex\inc\BaseHelper.hpp
onecore\admin\appmodel\osim\src\deh\uex\preinstalledconfigtask\preinstalledconfigtaskhandler.cpp
onecore\admin\appmodel\osim\src\deh\uex\preinstalledconfigtask\preinstalledconfigtaskhelper.cpp
onecore\admin\appmodel\osim\src\deh\uex\printsupportextension\printsupportextensionhelper.cpp
onecore\admin\appmodel\osim\src\deh\uex\printsupportworkflow\printsupportworkflowhelper.cpp
onecore\admin\appmodel\osim\src\deh\uex\share\sharehelper.cpp
onecore\admin\appmodel\osim\src\deh\uex\share\sharemobilecore.cpp
onecore\Admin\appmodel\OSIM\src\deh\uex\UpdateMigrationTask\UpdateMigrationTaskHandler.hpp
onecore\admin\appmodel\osim\src\deh\uex\updatemigrationtask\updatemigrationtaskhelper.cpp
onecore\admin\appmodel\osim\src\deh\userdataaccess\userdataaccessextensionhandler.cpp
onecore\admin\appmodel\osim\src\deh\visualelements\notificationsapplication.cpp
onecore\admin\appmodel\osim\src\deh\visualelements\splashscreeninstall.cpp
onecore\admin\appmodel\osim\src\deh\visualelements\visualelementsextensionhandler.cpp
onecore\admin\appmodel\osim\src\deh\visualelements\visualelementshelper.cpp
onecore\admin\appmodel\osim\src\deh\wcosadapterapp\wcosadapterappextensionhandler.cpp
onecore\admin\appmodel\osim\src\deh\webaccountprovider\webaccountproviderhelper.cpp
onecore\admin\appmodel\osim\src\deh\winrt\activationdeh\activatableclass.cpp
onecore\admin\appmodel\osim\src\deh\winrt\activationdeh\activatableclasshelper.cpp
onecore\admin\appmodel\osim\src\deh\winrt\backgroundplaybackdeh\backgroundplaybackclass.cpp
onecore\admin\appmodel\osim\src\deh\winrt\backgroundplaybackdeh\backgroundplaybackclasshelper.cpp
onecore\admin\appmodel\osim\src\deh\winrt\collector\activatableclassregistration.cpp
onecore\admin\appmodel\osim\src\deh\winrt\collector\activationcatalogverifier.cpp
onecore\admin\appmodel\osim\src\deh\winrt\collector\collector.cpp
onecore\admin\appmodel\osim\src\deh\winrt\collector\CollectorPendingWriteRemove.hpp
onecore\admin\appmodel\osim\src\deh\winrt\collector\collectors.cpp
onecore\admin\appmodel\osim\src\deh\winrt\collector\extensioncatalogcollector.cpp
onecore\admin\appmodel\osim\src\deh\winrt\collector\ExtensionCatalogCollector.hpp
onecore\admin\appmodel\osim\src\deh\winrt\collector\filemanager.cpp
onecore\admin\appmodel\osim\src\deh\winrt\collector\packagedcomregistration.cpp
onecore\admin\appmodel\osim\src\deh\winrt\collector\proxystubregistration.cpp
onecore\admin\appmodel\osim\src\deh\winrt\collector\RegistryCompatibilityTypes.hpp
onecore\admin\appmodel\osim\src\deh\winrt\collector\resourcesmanager.cpp
onecore\admin\appmodel\osim\src\deh\winrt\componentuideh\componentuiextensionhandler.cpp
onecore\admin\appmodel\osim\src\deh\winrt\downloaduploaddeh\downloaduploadclass.cpp
onecore\admin\appmodel\osim\src\deh\winrt\downloaduploaddeh\downloaduploadclasshelper.cpp
onecore\Admin\appmodel\OSIM\src\deh\WinRT\Inc\Uint32String.hpp
onecore\admin\appmodel\osim\src\deh\winrt\packagedcomdeh\packagedcomextensionhandler.cpp
onecore\admin\appmodel\osim\src\deh\winrt\restrictedlaunchdeh\restrictedlaunchhelper.cpp
onecore\admin\appmodel\osim\src\extensiondll\onecore\dllmain.cpp
onecore\admin\appmodel\osim\src\extensionmanager\extensionmanagerproviders.cpp
onecore\admin\appmodel\packagemanager\logging\appxlog.cpp
onecore\admin\appmodel\packagerepository\common\applicationextras.cpp
onecore\admin\appmodel\packagerepository\common\extensions.cpp
onecore\admin\appmodel\packagerepository\common\localizationdictionary.cpp
onecore\admin\appmodel\packagerepository\common\packageextras.cpp
onecore\admin\appmodel\packagerepository\common\packagerow.cpp
onecore\admin\appmodel\packagerepository\common\tools.cpp
onecore\admin\appmodel\packagerepository\common\visibilityrow.cpp
onecore\Admin\appmodel\PackageRepository\Inc\External\ITable.hpp
onecore\admin\appmodel\packagerepository\staterepository\applicationtable.cpp
onecore\admin\appmodel\packagerepository\staterepository\dependencygraphtable.cpp
onecore\admin\appmodel\packagerepository\staterepository\dependencytable.cpp
onecore\admin\appmodel\packagerepository\staterepository\extensiontable.cpp
onecore\admin\appmodel\packagerepository\staterepository\packagetable.cpp
onecore\admin\appmodel\packagerepository\staterepository\repositorypropertybag.cpp
onecore\admin\appmodel\packagerepository\staterepository\repositorysession.cpp
onecore\admin\appmodel\packagerepository\staterepository\staterepositoryhelper.cpp
onecore\admin\appmodel\packagerepository\staterepository\visibilitytable.cpp
onecore\admin\appmodel\packagerepository\staterepository\wowdependencygraphtable.cpp
onecore\admin\appmodel\precompilation\bytecodequeuemanager\bytecodequeuemanager.cpp
onecore\admin\appmodel\statecreation\lib\statecreation.cpp
onecore\admin\appmodel\statecreation\lib\statecreationhelpers.cpp
onecore\base\appmodel\appxminirepository\lib\appxminirepository.cpp
onecore\base\appmodel\common\autostring.cpp
onecore\base\appmodel\common\base32encoding.cpp
onecore\base\appmodel\common\bytebuffer.cpp
onecore\base\appmodel\common\cryptoprovider.cpp
onecore\base\appmodel\common\impersonationcontext.cpp
onecore\base\appmodel\common\pathhelpers.cpp
onecore\base\appmodel\common\registrykey.cpp
onecore\base\appmodel\common\sid.cpp
onecore\base\appmodel\common\sidhelper.cpp
onecore\base\appmodel\common\stateschema.cpp
onecore\base\appmodel\common\stateseparation.cpp
onecore\base\appmodel\common\stringbuilder.cpp
onecore\base\appmodel\common\userprofile.cpp
onecore\base\appmodel\common\widestring.cpp
onecore\base\appmodel\package\packagesid.cpp
onecore\base\appmodel\packageacquisitioninfo\packageacquisitioninfo.cpp
onecore\base\appmodel\runtime\src\systemmetadatainternal.cpp
onecore\Base\appmodel\StateManager\ApiSet\Inc\StateHeap.hpp
onecore\base\appmodel\statemanager\apiset\lib\statespace.cpp
onecore\Base\appmodel\StateRepository\Common\Inc\Security.hpp
onecore\base\appmodel\staterepository\dataaccesslayer\blob.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\changetracking.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\database.cpp
onecore\Base\appmodel\StateRepository\DataAccessLayer\Database.hpp
onecore\base\appmodel\staterepository\dataaccesslayer\databasecache.cpp
onecore\Base\appmodel\StateRepository\DataAccessLayer\DatabaseCache.hpp
onecore\base\appmodel\staterepository\dataaccesslayer\databasecachesingleton.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\datatype-hasher.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\datatype-progid.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\dictionaryreader.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\dictionaryserialization.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\dictionarywinrtreader.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\dictionarywriter.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\dictionaryxmlwriter.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entities-partitions.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-activation.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-activation-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appexecutionalias.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appexecutionalias-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appexecutionaliasuser.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appextension.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appextensionhost.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appinstaller.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appinstalleruri.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-application.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationbackgroundtask.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationcontenturirule.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationcontenturirule-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-application-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationextension.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationextension-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationidentity.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationproperty.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationuser.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-applicationuser-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appservice.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appurihandler.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appurihandlergroup.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appxextension.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-appxmanifest.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-autoupdatepackage.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-bundle.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-bundlepackage.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-bundleresource.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-connectedsetpackagefamily.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-contentgroup.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-contentgroupfile.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-custominstallwork.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-defaulttile.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-dependency.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-dependency-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-dependencygraph.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-dependencygraph-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-deploymenthistory.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-dynamicappurihandler.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-dynamicappurihandlergroup.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-endoflifepackage.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-enterprise.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-file.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-file-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-filetypeassociation.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-hostruntime.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-hostruntime-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-mrtapplication.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-mrtdefaulttile.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-mrtpackage.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-mrtsharedpri.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-mrtuserpri.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-nameddependency.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-optionalbundle.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-optionalbundlepackage.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-optionalbundleresource.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-package.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageappinstaller.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-package-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagedependency.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageextension.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageextension-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageexternallocation.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagefamily.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagefamily-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagefamilypolicy.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagefamilyuser.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagefamilyuserresource.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageidentity.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageidentity-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagelocation.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagelocation-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagemachinestatus.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagepolicy.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageproperty.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagesourceuri.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packagesuperceded.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageuser.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageuser-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageuserstatus.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-packageuserstatus-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-primarytile.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-primarytileuser.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-primarytileuserchangelog.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-primarytileuserchangelog-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-primarytileuser-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-protocol.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-provisionedpackage.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-provisionedpackagedeleted.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-provisionedpackageexclude.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-publishercachefolder.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-resource.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-resource-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-secondarytile.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-secondarytile-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-secondarytileuser.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-secondarytileuserchangelog.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-secondarytileuserchangelog-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-secondarytileuser-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-sequence.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-sequence-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-sharedpackagecontainer.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-sharedpackagecontainerpackagefamily.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-srhistory.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-srjournal.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-srjournalarchive.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-targetdevicefamily.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-tilechangelogview-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-tileview-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-user.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-user-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-workinprogress.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-workinprogress-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-wowdependencygraph.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-wowdependencygraph-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-xboxpackage.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\entity-xboxpackage-custom.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\globals.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\logging.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\longrunningtransaction.cpp
onecore\Base\appmodel\StateRepository\DataAccessLayer\MultiUser.hpp
onecore\base\appmodel\staterepository\dataaccesslayer\repository.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\resourcepriority.cpp
onecore\Base\appmodel\StateRepository\DataAccessLayer\ResourcePriority.hpp
onecore\base\appmodel\staterepository\dataaccesslayer\statement.cpp
onecore\Base\appmodel\StateRepository\DataAccessLayer\Statement.hpp
onecore\base\appmodel\staterepository\dataaccesslayer\statementcache.cpp
onecore\Base\appmodel\StateRepository\DataAccessLayer\StatementCache.hpp
onecore\base\appmodel\staterepository\dataaccesslayer\statementexecution.cpp
onecore\base\appmodel\staterepository\dataaccesslayer\text.cpp
onecore\Base\appmodel\StateRepository\DataAccessLayer\Utf16String.hpp
onecore\Base\appmodel\StateRepository\DataAccessLayer\Utf8String.hpp
onecore\base\appmodel\trust\trustlabelacehelpers.cpp
onecore\base\appmodel\trust\trustlabelhelpersbase.cpp
onecore\internal\base\inc\appmodel\appxminirepository\AppXMiniRepository.h
onecore\internal\com\inc\combase\ComGuid.hpp
onecore\internal\sdk\inc\wil/Staging.h
onecore\internal\sdk\inc\wil\opensource/wil/resource.h
onecore\internal\sdk\inc\wil\opensource/wil/result.h
onecore\internal\sdk\inc\wil\opensource/wil/result_macros.h
onecore\internal\sdk\inc\wil\opensource/wil/token_helpers.h
onecore\internal\sdk\inc\wil\opensource\wil\resource.h
onecore\internal\sdk\inc\wil\opensource\wil\token_helpers.h
onecore\internal\sdk\inc\wil\opensource\wil\win32_helpers.h
onecore\internal\sdk\inc\wil\opensource\wil\winrt.h
onecore\internal\shell\inc\UserChoiceCore.h
onecore\printscan\appxpackaging\lib\crypto\src\signaturecheckhelper.cpp
onecore\private\base\inc\AppModel\Common\FileInUse.hpp
onecore\private\base\inc\appmodel\package\PackageMoniker.hpp
onecore\private\base\inc\appmodel\runtime\DependencyMiniRepositoryWriter.inl
onecore\private\base\inc\appmodel\runtime\Sections_Applications.hpp
onecore\private\base\inc\appmodel\runtime\Sections_DependencyGraph.hpp
onecore\private\base\inc\appmodel\runtime\Sections_MrtResources.hpp
onecore\private\base\inc\appmodel\runtime\Sections_PackageMutablePaths.hpp
onecore\private\base\inc\appmodel\statemanager\statelock.hpp
onecore\private\base\inc\appmodel\staterepository\dal\Database.hpp
onecore\private\base\inc\appmodel\staterepository\dal\ResourcePriority.hpp
onecore\private\com\inc\combase\ComRegistryCatalogFunctions.hpp
onecore\private\com\inc\deployment\RegistrationStore.hpp
onecore\private\com\inc\deployment\RegistrationStoreApiTypes.hpp
onecore\shell\lib\userchoicehelpers\userchoicecore.cpp
onecoreuap\base\appmodel\statemanager\helpers\policycache.cpp
onecoreuap\base\background\bi\backgroundtaskdehhelper\backgroundtaskdehhelper.cpp
Online
OOBEApp_cw5n1h2txyewy
OPCOx
OpenAppExecutionAliasForUserEx
OpenClassesRootKey(whichHive, KEY_READ, &classesRootKey)
OpenClsidKey(whichHive, clsid, KEY_READ, &clsidKey)
OpenCurrentUserLocalSettings
OpenDatabaseFromCache
OpenIsSafe
OpenProcess
OpenProcess() failed on %u of %u for %hs
OpenProcessToken
OpenRootKey
OpenSemaphoreW
OpenStateExplicit
OpenStateExplicit %ws
OpenStateExplicitForUserSid
OpenStateExplicitForUserSid %p %ws
OpenStateExplicitForUserSidString
OpenStateExplicitForUserSidString %ls
OpenSubKey
OpenThreadToken
OpenWithProgids
Operation
operation(spItem.Get())
Optional
OptionalBundle
OptionalBundlePackage
OptionalBundleResource
OptionalPackageSubtype
Options
Orientation
OriginalFilename
OriginalUser
originatingContextId
originatingContextMessage
originatingContextName
originCallerModule
originCallerReturnAddressOffset
originFile
originLineNumber
originModule
originName
OrphanedAppDataVolume
OSIM.Request[]
OSIM_KEYWORD
OSIMListTypeEnumMap
OSIntegration.DEH.ActivationCatalogCollector
OSIntegration.DEH.ActivationCatalogCollectorForUser
OSIntegration.DEH.Collectors
OSIntegration.DEH.ComExeClassRegistration
OSIntegration.DEH.ComExeServerRegistration
OSIntegration.DEH.ComInprocHandlerClassDllRegistration
OSIntegration.DEH.ComInprocServerClassDllRegistration
OSIntegration.DEH.ComInterfaceRegistration
OSIntegration.DEH.ComManagedInprocServerClassRegistration
OSIntegration.DEH.ComProgIdRegistration
OSIntegration.DEH.ComProxyStubRegistration
OSIntegration.DEH.ComServiceClassRegistration
OSIntegration.DEH.ComServiceServerRegistration
OSIntegration.DEH.ComSurrogateClassRegistration
OSIntegration.DEH.ComSurrogateServerRegistration
OSIntegration.DEH.ComTreatAsClassRegistration
OSIntegration.DEH.ComTypeLibRegistration
OSIntegration.DEH.ExtensionCatalogCollector
OSIntegration.DEH.ExtensionRegistration
OSIntegration.DEH.FileManager
OSIntegration.DEH.Internal.ComClassRegistrationCombinedProperties
OSIntegration.DEH.PackagedComCatalogCollector
OSIntegration.DEH.PackagedComCatalogCollectorForUserOrSystemRegister
OSIntegration.DEH.ResourcesManager
OSIntegration::DEH::ActivatableClassExtensionHandler::EvaluateInstall
OSIntegration::DEH::ActivatableClassExtensionHandler::EvaluateInstall::<lambda_ca50a542438661657683b658dd96f968>::operator ()
OSIntegration::DEH::ActivatableClassExtensionHandler::EvaluateUpdate
OSIntegration::DEH::ActivatableClassExtensionHandler::EvaluateUpdate::<lambda_6b5390bdd3848eea468870de6086145c>::operator ()
OSIntegration::DEH::ActivationCatalogCollector::AddInProcessActivatableClassRegistration
OSIntegration::DEH::ActivationCatalogCollector::AddInterfaceRegistration
OSIntegration::DEH::ActivationCatalogCollector::AddOutOfProcessActivatableClassRegistration
OSIntegration::DEH::ActivationCatalogCollector::AddProxyStubRegistration
OSIntegration::DEH::ActivationCatalogCollector::AddServerRegistration
OSIntegration::DEH::ActivationCatalogCollector::PendingRemove
OSIntegration::DEH::ActivationCatalogCollector::PendingWrite
OSIntegration::DEH::ActivationCatalogCollector::PendingWrite::<lambda_a3ade90a58a229906f7e7a75aa5dade1>::operator ()
OSIntegration::DEH::ActivationCatalogCollector::PendingWriteExeSevers
OSIntegration::DEH::ActivationCatalogCollector::PendingWriteExeSevers::<lambda_27f7d355cfe9816ac73f1f46b49084f1>::operator ()
OSIntegration::DEH::ActivationCatalogCollector::PendingWriteInProcActivatableClasses
OSIntegration::DEH::ActivationCatalogCollector::PendingWriteInProcActivatableClasses::<lambda_b3a86b97bb11c9df9a1ea36f832f020f>::operator ()
OSIntegration::DEH::ActivationCatalogCollector::PendingWriteInterfaces
OSIntegration::DEH::ActivationCatalogCollector::PendingWriteInterfaces::<lambda_536fbb6f2e4e6049ca1eb5df2349593f>::operator ()
OSIntegration::DEH::ActivationCatalogCollector::PendingWriteOutOfProcActivatableClasses
OSIntegration::DEH::ActivationCatalogCollector::PendingWriteOutOfProcActivatableClasses::<lambda_841f68c3fb636327c2a35da9541cdda3>::operator ()
OSIntegration::DEH::ActivationCatalogCollector::PendingWriteProxyStubs
OSIntegration::DEH::ActivationCatalogCollector::PendingWriteProxyStubs::<lambda_5f3b790ed6ade741a45d0e0c2653e8b2>::operator ()
OSIntegration::DEH::ActivationCatalogCollector::RetrieveInProcessActivatableClassRegistration
OSIntegration::DEH::ActivationCatalogCollector::RetrieveInterfaceRegistration
OSIntegration::DEH::ActivationCatalogCollector::RetrieveOutOfProcessActivatableClassRegistration
OSIntegration::DEH::ActivationCatalogCollector::RetrieveProxyStubRegistration
OSIntegration::DEH::ActivationCatalogCollector::RetrieveServerRegistration
OSIntegration::DEH::ActivationCatalogCollectorForUser::PendingRemove
OSIntegration::DEH::BackgroundPlaybackClassExtensionHandler::EvaluateInstall
OSIntegration::DEH::BackgroundPlaybackClassExtensionHandler::EvaluateUpdate
OSIntegration::DEH::BackgroundPlaybackClassExtensionHandler::ParsePackage
OSIntegration::DEH::BackgroundPlaybackClassExtensionHandler::ParsePackage::<lambda_076f33a7be5b1d92f407a11593e57ae7>::operator ()
OSIntegration::DEH::CollectorExtensionHandler::_EvaluateInstall
OSIntegration::DEH::CollectorExtensionHandler::_EvaluateInstall::<lambda_2e2c9b35ea924044ff9d2bafa49a107f>::operator ()
OSIntegration::DEH::CollectorExtensionHandler::_EvaluateUpdate
OSIntegration::DEH::CollectorExtensionHandler::_EvaluateUpdate::<lambda_c321f4a929ade397d5f4e1fb6cbb2776>::operator ()
OSIntegration::DEH::CollectorExtensionHandler::_Initialize
OSIntegration::DEH::CollectorExtensionHandler::_Initialize::<lambda_c31dfe9aabe5db5550fdac5f0d4de088>::operator ()
OSIntegration::DEH::CollectorExtensionHandler::CommitChanges
OSIntegration::DEH::CollectorExtensionHandler::EvaluateInstall
OSIntegration::DEH::CollectorExtensionHandler::EvaluateUpdate
OSIntegration::DEH::CollectorExtensionHandler::Initialize
OSIntegration::DEH::CollectorExtensionHandler::PostOsUpgradeEvaluateRequest
OSIntegration::DEH::Collectors::RuntimeClassInitialize
OSIntegration::DEH::ComClassRegistration::RuntimeClassInitialize
OSIntegration::DEH::ComExeServerRegistration::CreateClassRegistration
OSIntegration::DEH::ComExeServerRegistration::SetArguments
OSIntegration::DEH::ComExeServerRegistration::SetExecutable
OSIntegration::DEH::ComExeServerRegistration::SetSystemExecutableArchitecture
OSIntegration::DEH::ComInterfaceRegistration::CreateCompatibilityEntries
OSIntegration::DEH::ComInterfaceRegistration::PendingWriteRegistration
OSIntegration::DEH::ComInterfaceRegistration::SetAsynchronousInterface
OSIntegration::DEH::ComInterfaceRegistration::SetHasMachineScope
OSIntegration::DEH::ComInterfaceRegistration::SetProxyStubClsidWithSupportedArchitectures
OSIntegration::DEH::ComInterfaceRegistration::SetSynchronousInterface
OSIntegration::DEH::ComInterfaceRegistration::SetTypeLib
OSIntegration::DEH::ComInterfaceRegistration::SetUniversalMarshaler
OSIntegration::DEH::ComManagedInprocServerClassRegistration::SetAssembly
OSIntegration::DEH::ComManagedInprocServerClassRegistration::SetImplementationClass
OSIntegration::DEH::ComManagedInprocServerClassRegistration::SetRuntimeVersion
OSIntegration::DEH::ComOutofprocClassRegistration::RuntimeClassInitialize
OSIntegration::DEH::ComponentUIExtensionHandler::EvaluateInstall
OSIntegration::DEH::ComponentUIExtensionHandler::EvaluateUpdate
OSIntegration::DEH::ComponentUIExtensionHandler::ParseExtensions
OSIntegration::DEH::ComProgIdRegistration::CreateCompatibilityEntries
OSIntegration::DEH::ComProgIdRegistration::PendingWriteRegistration
OSIntegration::DEH::ComProgIdRegistration::SetClsidWithIsInsertableObject
OSIntegration::DEH::ComProgIdRegistration::SetCurrentVersion
OSIntegration::DEH::ComProgIdRegistration::SetDisplayName
OSIntegration::DEH::ComProgIdRegistration::SetHasMachineScope
OSIntegration::DEH::ComProxyStubRegistration::CreateCompatibilityEntries
OSIntegration::DEH::ComProxyStubRegistration::PendingCopyFiles
OSIntegration::DEH::ComProxyStubRegistration::PendingWriteRegistration
OSIntegration::DEH::ComProxyStubRegistration::SetDisplayName
OSIntegration::DEH::ComProxyStubRegistration::SetHasMachineScope
OSIntegration::DEH::ComProxyStubRegistration::SetPath
OSIntegration::DEH::ComProxyStubRegistration::SetPath_arm
OSIntegration::DEH::ComProxyStubRegistration::SetPath_arm64
OSIntegration::DEH::ComProxyStubRegistration::SetPath_x64
OSIntegration::DEH::ComProxyStubRegistration::SetPath_x86
OSIntegration::DEH::ComServerRegistration::CreateClassRegistration
OSIntegration::DEH::ComServerRegistration::CreateCompatibilityEntries
OSIntegration::DEH::ComServerRegistration::PendingWriteRegistration
OSIntegration::DEH::ComServerRegistration::SetApplicationDisplayName
OSIntegration::DEH::ComServerRegistration::SetApplicationId
OSIntegration::DEH::ComServerRegistration::SetArguments
OSIntegration::DEH::ComServerRegistration::SetCalculatedRegistrationProperties
OSIntegration::DEH::ComServerRegistration::SetDisplayName
OSIntegration::DEH::ComServerRegistration::SetExecutable
OSIntegration::DEH::ComServerRegistration::SetLaunchAndActivationPermission
OSIntegration::DEH::ComServerRegistration::SetServiceName
OSIntegration::DEH::ComServerRegistration::SetSurrogateAppId
OSIntegration::DEH::ComServerRegistration::SetSystemExecutableArchitecture
OSIntegration::DEH::ComServiceServerRegistration::CreateClassRegistration
OSIntegration::DEH::ComServiceServerRegistration::SetArguments
OSIntegration::DEH::ComServiceServerRegistration::SetServiceName
OSIntegration::DEH::ComSurrogateClassRegistration::RuntimeClassInitialize
OSIntegration::DEH::ComSurrogateServerRegistration::CreateClassRegistration
OSIntegration::DEH::ComSurrogateServerRegistration::SetAppId
OSIntegration::DEH::ComSurrogateServerRegistration::SetCustomSurrogateExecutable
OSIntegration::DEH::ComSurrogateServerRegistration::SetCustomSurrogateSystemExecutableArchitecture
OSIntegration::DEH::ComTreatAsClassRegistration::CreateCompatibilityEntries
OSIntegration::DEH::ComTreatAsClassRegistration::PendingWriteRegistration
OSIntegration::DEH::ComTreatAsClassRegistration::SetAutoConvertTo
OSIntegration::DEH::ComTreatAsClassRegistration::SetDisplayName
OSIntegration::DEH::ComTreatAsClassRegistration::SetHasMachineScope
OSIntegration::DEH::ComTypeLibRegistration::CreateCompatibilityEntries
OSIntegration::DEH::ComTypeLibRegistration::PendingWriteRegistration
OSIntegration::DEH::ComTypeLibRegistration::SetDisplayName
OSIntegration::DEH::ComTypeLibRegistration::SetFlags
OSIntegration::DEH::ComTypeLibRegistration::SetHasMachineScope
OSIntegration::DEH::ComTypeLibRegistration::SetHelpDirectory
OSIntegration::DEH::ComTypeLibRegistration::SetLocaleId
OSIntegration::DEH::ComTypeLibRegistration::SetWin32Path
OSIntegration::DEH::ComTypeLibRegistration::SetWin64Path
OSIntegration::DEH::CreateActivationCatalogCollector
OSIntegration::DEH::CreateActivationCatalogCollectorForUser
OSIntegration::DEH::CreateCollectorExtensionHandlerForPhase
OSIntegration::DEH::CreateComponentUIExtensionHandler
OSIntegration::DEH::CreateExtensionCatalogCollector
OSIntegration::DEH::CreateFileManager
OSIntegration::DEH::CreatePackagedComCatalogCollector
OSIntegration::DEH::CreatePackagedComCatalogCollectorForUserOrSystemRegister
OSIntegration::DEH::CreatePackagedComExtensionHandler
OSIntegration::DEH::CreateResourcesManager
OSIntegration::DEH::CreateWinRTActivatableClassHandler
OSIntegration::DEH::DownloadUploadClassExtensionHandler::DoesPackageContainPPLE
OSIntegration::DEH::DownloadUploadClassExtensionHandler::EvaluateInstall
OSIntegration::DEH::DownloadUploadClassExtensionHandler::EvaluateInstall::<lambda_70ba1b592f20e71f3e40643bb6ee1b06>::operator ()
OSIntegration::DEH::DownloadUploadClassExtensionHandler::EvaluateUpdate
OSIntegration::DEH::DownloadUploadClassExtensionHandler::EvaluateUpdate::<lambda_1e4db68e180b278994722837186e5c68>::operator ()
OSIntegration::DEH::DownloadUploadClassExtensionHandler::Initialize
OSIntegration::DEH::DownloadUploadClassExtensionHandler::ParsePackage
OSIntegration::DEH::DownloadUploadClassExtensionHandler::ParsePackage::<lambda_5e764d5b04a49840b06fa4fd270096ec>::operator ()
OSIntegration::DEH::ExeServerRegistration::Create
OSIntegration::DEH::ExeServerRegistration::Retrieve
OSIntegration::DEH::ExtensionCatalogCollector::CreateExtensionRegistration
OSIntegration::DEH::ExtensionCatalogCollector::PendingRemove
OSIntegration::DEH::ExtensionCatalogCollector::PendingWrite
OSIntegration::DEH::ExtensionCatalogCollector::PendingWrite::<lambda_b96e67b5a297b202c0bc3ddb4fc2d545>::operator ()
OSIntegration::DEH::ExtensionCatalogCollector::RetrieveExtensionRegistration
OSIntegration::DEH::ExtensionCatalogCollector::RuntimeClassInitialize
OSIntegration::DEH::ExtensionCatalogCollector::ValidateEntries
OSIntegration::DEH::ExtensionCatalogCollector::ValidateEntries::<lambda_dea84625d9f1c17c04202f60a8731da2>::operator ()
OSIntegration::DEH::ExtensionRegistration::Create
OSIntegration::DEH::ExtensionRegistration::Retrieve
OSIntegration::DEH::FileManager::CommitChanges
OSIntegration::DEH::FileManager::CommitChangesHelper
OSIntegration::DEH::FileManager::CopyFileHelper
OSIntegration::DEH::FileManager::CopyFiles
OSIntegration::DEH::FileManager::CopyFileToManagedDirectory
OSIntegration::DEH::FileManager::CreateDirectoriesAndCopyFiles
OSIntegration::DEH::FileManager::CreateManagedDirectories
OSIntegration::DEH::FileManager::CreateManagedDirectories::<lambda_c11df9236caa9d9f68526d2c6bbf0787>::operator ()
OSIntegration::DEH::FileManager::DeleteContext::DeleteFileAbsolutePath
OSIntegration::DEH::FileManager::DeleteContext::DeleteRelativePath
OSIntegration::DEH::FileManager::DeleteDirectoriesRecursive
OSIntegration::DEH::FileManager::DeleteDirectoriesRecursive::<lambda_6476aca0b996a4f9e9c4ef9eeced6215>::operator ()
OSIntegration::DEH::FileManager::DeleteManagedDirectory
OSIntegration::DEH::FileManager::ForEachManagedDirectory
OSIntegration::DEH::FileManager::GetManagedDirectoryPath
OSIntegration::DEH::FileManager::IdempotentSetString
OSIntegration::DEH::FileManager::RuntimeClassInitialize
OSIntegration::DEH::ForEachExtensionRegistration
OSIntegration::DEH::InProcessActivatableClassRegistration::Create
OSIntegration::DEH::InterfaceRegistration::Create
OSIntegration::DEH::Internal::ActivatableClassHelper::CalculateAbsolutePathIfNecessary
OSIntegration::DEH::Internal::ActivatableClassHelper::Create
OSIntegration::DEH::Internal::ActivatableClassHelper::Initialize
OSIntegration::DEH::Internal::ActivatableClassHelper::MapEnumString
OSIntegration::DEH::Internal::ActivatableClassHelper::ParseAndSubmitCustomAttributes
OSIntegration::DEH::Internal::ActivatableClassHelper::ParseAndSubmitDwordAttribute
OSIntegration::DEH::Internal::ActivatableClassHelper::ParseAndSubmitIAMActivatableClass
OSIntegration::DEH::Internal::ActivatableClassHelper::ParseAndSubmitInProcessServer
OSIntegration::DEH::Internal::ActivatableClassHelper::ParseAndSubmitOAMActivatableClass
OSIntegration::DEH::Internal::ActivatableClassHelper::ParseAndSubmitOutOfProcessServer
OSIntegration::DEH::Internal::ActivatableClassHelper::ParseAndSubmitProxyStubs
OSIntegration::DEH::Internal::ActivatableClassHelper::ParseAndSubmitRegistrations
OSIntegration::DEH::Internal::ActivatableClassHelper::ParseAndSubmitStringAttribute
OSIntegration::DEH::Internal::ActivatableClassHelper::ParseProxyStub
OSIntegration::DEH::Internal::ActivatableClassHelper::ParseProxyStub::<lambda_e15568ccfcccc128a6062ef0dc63ba63>::operator ()
OSIntegration::DEH::Internal::ActivatableClassHelper::RetrieveAttribute
OSIntegration::DEH::Internal::ActivatableClassHelper::RetrieveValue
OSIntegration::DEH::Internal::ActivatableClassHelper::ValidateActivatableClassRegistrationWithDesktopApplicationPathAttribute
OSIntegration::DEH::Internal::ActivatableClassHelper::ValidateActivatableClassRegistrationWithDesktopApplicationPathAttribute::<lambda_c5b2c6688f326f3b488281d1561ee4d2>::operator ()
OSIntegration::DEH::Internal::ActivatableClassRegistration_Impl<struct OSIntegration::DEH::InProcessActivatableClassRegistration>::get_ActivatableClassId
OSIntegration::DEH::Internal::ActivatableClassRegistration_Impl<struct OSIntegration::DEH::InProcessActivatableClassRegistration>::get_Attributes
OSIntegration::DEH::Internal::ActivatableClassRegistration_Impl<struct OSIntegration::DEH::InProcessActivatableClassRegistration>::Initialize
OSIntegration::DEH::Internal::ActivatableClassRegistration_Impl<struct OSIntegration::DEH::OutOfProcessActivatableClassRegistration>::get_ActivatableClassId
OSIntegration::DEH::Internal::ActivatableClassRegistration_Impl<struct OSIntegration::DEH::OutOfProcessActivatableClassRegistration>::get_Attributes
OSIntegration::DEH::Internal::ActivatableClassRegistration_Impl<struct OSIntegration::DEH::OutOfProcessActivatableClassRegistration>::Initialize
OSIntegration::DEH::Internal::AddDwordAttribute
OSIntegration::DEH::Internal::AddStringAttribute
OSIntegration::DEH::Internal::BackgroundPlaybackClassHelper::SubmitBackgroundPlaybackRegistration
OSIntegration::DEH::Internal::BackgroundPlaybackClassHelper::SubmitClassEntryPointRegistration
OSIntegration::DEH::Internal::BackgroundPlaybackClassHelper::SubmitClassEntryPointRegistration::<lambda_792309c43c2ffa5394f66b15fca3a708>::operator ()
OSIntegration::DEH::Internal::BackgroundPlaybackClassHelper::SubmitExeServerRegistration
OSIntegration::DEH::Internal::BackgroundPlaybackClassHelper::SubmitExeServerRegistration::<lambda_3d38a6ad352c016e32b3ec19e9fd4391>::operator ()
OSIntegration::DEH::Internal::BackgroundPlaybackClassHelper::SubmitOutOfProcessActivatableClassRegistration
OSIntegration::DEH::Internal::BackgroundPlaybackClassHelper::SubmitOutOfProcessActivatableClassRegistration::<lambda_71959025ce706ff8969e15b11d8e4197>::operator ()
OSIntegration::DEH::Internal::CExtensionRegistration::AddAttribute
OSIntegration::DEH::Internal::CExtensionRegistration::CheckAttributeNameDoesNotCollide
OSIntegration::DEH::Internal::CExtensionRegistration::get_ActivatableClassId
OSIntegration::DEH::Internal::CExtensionRegistration::get_Attributes
OSIntegration::DEH::Internal::CExtensionRegistration::get_ContractId
OSIntegration::DEH::Internal::CExtensionRegistration::get_Description
OSIntegration::DEH::Internal::CExtensionRegistration::get_DisplayName
OSIntegration::DEH::Internal::CExtensionRegistration::get_Icon
OSIntegration::DEH::Internal::CExtensionRegistration::get_Vendor
OSIntegration::DEH::Internal::CExtensionRegistration::PendingWriteToStore
OSIntegration::DEH::Internal::CExtensionRegistration::put_Description
OSIntegration::DEH::Internal::CExtensionRegistration::put_DisplayName
OSIntegration::DEH::Internal::CExtensionRegistration::put_Icon
OSIntegration::DEH::Internal::CExtensionRegistration::put_Vendor
OSIntegration::DEH::Internal::CExtensionRegistration::Validate
OSIntegration::DEH::Internal::CheckAttributeNameDoesNotCollide
OSIntegration::DEH::Internal::CollectorPackageInformation::GetMainPackageFamilyMoniker
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::AddDataFormat
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::AddImplementedCategory
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::AddMiscStatusAspect
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::AddStringCustomAttribute
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::AddStringValueForInprocServer32CompatibilityKey
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::AddUint32CustomAttribute
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::AddVerb
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::CalculateBinaryCompatibilityPropertiesIfNecessary
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::CalculateSurrogateDllPath
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::CreateClsidKeyTemplateFromSharedProperties
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::CreateCompatibilityEntries
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::CreateInprocHandler32Subkey
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::CreateInprocServer32Subkey
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::CreatePropertyValueFactoryIfNecessary
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::PendingWriteRegistration
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetAppId
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetApplicationDisplayName
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetAutoConvertTo
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetCalculatedRegistrationProperties
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetConversionReadable
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetConversionReadWritable
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetDefaultFormatName
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetDefaultIcon
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetDisplayName
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetDllPath
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetEnableVirtualizationForInprocHandler
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetEnableVirtualizationForInprocServer
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetExeServerArguments
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetExeServerPath
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetHasMachineScope
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetInprocHandlerDllPath_arm
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetInprocHandlerDllPath_arm64
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetInprocHandlerDllPath_x64
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetInprocHandlerDllPath_x86
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetInprocHandlerHasMachineScope
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetInprocServerDllPath_arm
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetInprocServerDllPath_arm64
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetInprocServerDllPath_x64
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetInprocServerDllPath_x86
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetInprocServerHasMachineScope
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetInsertableObject
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetIsSystemInprocServerDll
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetMiscStatusDefault
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetOleDefaultHandler
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetOutofprocClassHasMachineScope
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetProgId
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetServerId
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetShortDisplayName
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetThreadingModel
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetToolboxBitmap32
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetTypeLib
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetTypeLibWithVersion
OSIntegration::DEH::Internal::ComClassRegistrationCombinedProperties::SetVersionIndependentProgId
OSIntegration::DEH::Internal::ConstructCommandLine
OSIntegration::DEH::Internal::ContractIdActivatableClassIdPairLifetimeTraits::Construct
OSIntegration::DEH::Internal::ContractIdActivatableClassIdPairLifetimeTraits::Destroy
OSIntegration::DEH::Internal::DownloadUploadClassHelper::GetBackgroundTaskRegkeySD
OSIntegration::DEH::Internal::DownloadUploadClassHelper::InstallVpnBackgroundTask
OSIntegration::DEH::Internal::DownloadUploadClassHelper::SubmitActivatableClass
OSIntegration::DEH::Internal::DownloadUploadClassHelper::SubmitActivatableClass::<lambda_9aa712cb9c348317ca342d7f61dd3100>::operator ()
OSIntegration::DEH::Internal::DownloadUploadClassHelper::SubmitActivatableClassRegistration
OSIntegration::DEH::Internal::DownloadUploadClassHelper::SubmitBackgroundTasksExtension
OSIntegration::DEH::Internal::DownloadUploadClassHelper::SubmitBackgroundVpnPluginTasksExtension
OSIntegration::DEH::Internal::DownloadUploadClassHelper::SubmitClassEntryPointRegistration
OSIntegration::DEH::Internal::DownloadUploadClassHelper::SubmitDownloadUploadServerRegistration
OSIntegration::DEH::Internal::DownloadUploadClassHelper::SubmitVpnPluginActivatableClass
OSIntegration::DEH::Internal::DownloadUploadClassHelper::SubmitVpnPluginServerRegistration
OSIntegration::DEH::Internal::DownloadUploadClassHelper::UninstallVpnBackgroundTask::<lambda_5a90c5cc9b9b143a7ca88b0cbee99f96>::operator ()
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::AddActivatableClass
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::CalculateServerPermissions
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::Create
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::get_AppUserModelId
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::get_CommandLine
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::get_ExePath
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::get_Permissions
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::get_ServerName
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::PendingWriteToStore
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::put_AppUserModelId
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::put_CommandLine
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::put_ExePath
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::put_ExplicitPsmActivationType
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::put_HostRuntimeId
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::put_IsPackageRelativePath
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::put_RuntimeBehavior
OSIntegration::DEH::Internal::ExeServerRegistration_Impl::put_TrustLevel
OSIntegration::DEH::Internal::ForEachCollector
OSIntegration::DEH::Internal::ForEachCollectorInArray
OSIntegration::DEH::Internal::GetPackagedFileAbsolutePath
OSIntegration::DEH::Internal::GetSystemFileAbsolutePath
OSIntegration::DEH::Internal::GetVirtualizationManagerDllFilename
OSIntegration::DEH::Internal::InitializeFileOperationInfo
OSIntegration::DEH::Internal::InProcessActivatableClassRegistration_Impl::Create
OSIntegration::DEH::Internal::InProcessActivatableClassRegistration_Impl::get_DllPath
OSIntegration::DEH::Internal::InProcessActivatableClassRegistration_Impl::PendingWriteToStore
OSIntegration::DEH::Internal::InProcessActivatableClassRegistration_Impl::put_DllPath
OSIntegration::DEH::Internal::InProcessActivatableClassRegistration_Impl::put_IsPackageRelativePath
OSIntegration::DEH::Internal::InterfaceRegistration_Impl::Create
OSIntegration::DEH::Internal::OutOfProcessActivatableClassRegistration_Impl::Create
OSIntegration::DEH::Internal::OutOfProcessActivatableClassRegistration_Impl::get_ServerRegistration
OSIntegration::DEH::Internal::OutOfProcessActivatableClassRegistration_Impl::PendingWriteToStore
OSIntegration::DEH::Internal::PendingRemoveForEachCollector
OSIntegration::DEH::Internal::PendingRemoveForEachCollector::<lambda_e29fdc21eff9148f99982ff7115f48bd>::operator ()
OSIntegration::DEH::Internal::PendingWriteForEachCollector
OSIntegration::DEH::Internal::PendingWriteForEachCollector::<lambda_a2fc4769d442ad47c81f3aa61edae982>::operator ()
OSIntegration::DEH::Internal::ProxyStubRegistration_Impl::Create
OSIntegration::DEH::MapEnumString
OSIntegration::DEH::MsixAppCompatSupport::GetExtensionCompatMode
OSIntegration::DEH::MsixAppCompatSupport::GetExtensionScope
OSIntegration::DEH::MsixAppCompatSupport::ParseCompatModeString
OSIntegration::DEH::MsixAppCompatSupport::ParseScopeString
OSIntegration::DEH::OutOfProcessActivatableClassRegistration::Create
OSIntegration::DEH::OutOfProcessActivatableClassRegistration::Retrieve
OSIntegration::DEH::PackagedComCatalogCollector::CreateExeServerRegistration
OSIntegration::DEH::PackagedComCatalogCollector::CreateInprocHandlerClassRegistration
OSIntegration::DEH::PackagedComCatalogCollector::CreateInprocServerClassRegistration
OSIntegration::DEH::PackagedComCatalogCollector::CreateInterfaceRegistration
OSIntegration::DEH::PackagedComCatalogCollector::CreateManagedInprocServerClassRegistration
OSIntegration::DEH::PackagedComCatalogCollector::CreateProgIdRegistration
OSIntegration::DEH::PackagedComCatalogCollector::CreateProxyStubRegistration
OSIntegration::DEH::PackagedComCatalogCollector::CreateServiceServerRegistration
OSIntegration::DEH::PackagedComCatalogCollector::CreateSurrogateServerRegistration
OSIntegration::DEH::PackagedComCatalogCollector::CreateTreatAsClassRegistration
OSIntegration::DEH::PackagedComCatalogCollector::CreateTypeLibRegistration
OSIntegration::DEH::PackagedComCatalogCollector::GetHasAnyClasses
OSIntegration::DEH::PackagedComCatalogCollector::PendingRemove
OSIntegration::DEH::PackagedComCatalogCollector::PendingWrite
OSIntegration::DEH::PackagedComCatalogCollector::PendingWriteForEachRegistration
OSIntegration::DEH::PackagedComCatalogCollector::RuntimeClassInitialize
OSIntegration::DEH::PackagedComCatalogCollector::SetIsAdditiveMode
OSIntegration::DEH::PackagedComCatalogCollectorForUserOrSystemRegister::CheckPackageHasAnyRegistrationsOfTypeForCurrentScope
OSIntegration::DEH::PackagedComCatalogCollectorForUserOrSystemRegister::CheckPackageHasAnyRegistrationsOfTypeForScope
OSIntegration::DEH::PackagedComCatalogCollectorForUserOrSystemRegister::CheckPackageHasAnyTypeLibRegistrationsForCurrentScope
OSIntegration::DEH::PackagedComCatalogCollectorForUserOrSystemRegister::CheckPackageHasAnyTypeLibRegistrationsForScope
OSIntegration::DEH::PackagedComCatalogCollectorForUserOrSystemRegister::CheckPackageHasComRegistrationsForCurrentScope
OSIntegration::DEH::PackagedComCatalogCollectorForUserOrSystemRegister::PendingRemove
OSIntegration::DEH::PackagedComCatalogCollectorForUserOrSystemRegister::PendingWrite
OSIntegration::DEH::PackagedComExtensionHandler::EnforceCompatModeRestrictionsOnIncomingPackage
OSIntegration::DEH::PackagedComExtensionHandler::EvaluateInstall
OSIntegration::DEH::PackagedComExtensionHandler::EvaluateInstall::<lambda_dbcc53783b1005b0e9c88ff06bb92204>::operator ()
OSIntegration::DEH::PackagedComExtensionHandler::EvaluateUpdate
OSIntegration::DEH::PackagedComExtensionHandler::EvaluateUpdate::<lambda_802f913504ee6646336dad329df77d60>::operator ()
OSIntegration::DEH::PackagedComExtensionHandler::FindReferencedClassElementById
OSIntegration::DEH::PackagedComExtensionHandler::FindReferencedClassElementForClassReference
OSIntegration::DEH::PackagedComExtensionHandler::FindTerminalClassElement
OSIntegration::DEH::PackagedComExtensionHandler::FindTreatAsClassElementById
OSIntegration::DEH::PackagedComExtensionHandler::FollowProgIdChain
OSIntegration::DEH::PackagedComExtensionHandler::ForEachString
OSIntegration::DEH::PackagedComExtensionHandler::GetArchitecturesSupportedForActivationByClsid
OSIntegration::DEH::PackagedComExtensionHandler::GetClsidDisplayNameOrShortName
OSIntegration::DEH::PackagedComExtensionHandler::GetClsidIsInsertableObject
OSIntegration::DEH::PackagedComExtensionHandler::GetCommaSeparatedValue
OSIntegration::DEH::PackagedComExtensionHandler::GetProxyStubSupportedArchitectures
OSIntegration::DEH::PackagedComExtensionHandler::GetSupportedArchitecturesBasedOnDllPaths
OSIntegration::DEH::PackagedComExtensionHandler::MapEnumStringToHstringValue
OSIntegration::DEH::PackagedComExtensionHandler::ParseAndRetrieveApplicationIdAndDisplayName
OSIntegration::DEH::PackagedComExtensionHandler::ParseAndRetrieveAttribute
OSIntegration::DEH::PackagedComExtensionHandler::ParseAndRetrieveBool
OSIntegration::DEH::PackagedComExtensionHandler::ParseAndRetrieveGuid
OSIntegration::DEH::PackagedComExtensionHandler::ParseAndRetrieveLocalizableAttribute
OSIntegration::DEH::PackagedComExtensionHandler::ParseAndRetrievePath
OSIntegration::DEH::PackagedComExtensionHandler::ParseClassProperties
OSIntegration::DEH::PackagedComExtensionHandler::ParseComInterface
OSIntegration::DEH::PackagedComExtensionHandler::ParseComServer
OSIntegration::DEH::PackagedComExtensionHandler::ParseConversion
OSIntegration::DEH::PackagedComExtensionHandler::ParseConversionFormats
OSIntegration::DEH::PackagedComExtensionHandler::ParseDataFormats
OSIntegration::DEH::PackagedComExtensionHandler::ParseExeClass
OSIntegration::DEH::PackagedComExtensionHandler::ParseExeServer
OSIntegration::DEH::PackagedComExtensionHandler::ParseExtensions
OSIntegration::DEH::PackagedComExtensionHandler::ParseImplementedCategories
OSIntegration::DEH::PackagedComExtensionHandler::ParseInprocClassProperties
OSIntegration::DEH::PackagedComExtensionHandler::ParseInProcessHandler
OSIntegration::DEH::PackagedComExtensionHandler::ParseInProcessHandlerClass
OSIntegration::DEH::PackagedComExtensionHandler::ParseInProcessServer
OSIntegration::DEH::PackagedComExtensionHandler::ParseInProcessServerClass
OSIntegration::DEH::PackagedComExtensionHandler::ParseInprocServerClassProperties
OSIntegration::DEH::PackagedComExtensionHandler::ParseInterface
OSIntegration::DEH::PackagedComExtensionHandler::ParseManagedInProcessServer
OSIntegration::DEH::PackagedComExtensionHandler::ParseManagedInProcessServerClass
OSIntegration::DEH::PackagedComExtensionHandler::ParseMiscStatus
OSIntegration::DEH::PackagedComExtensionHandler::ParseOutofprocClassProperties
OSIntegration::DEH::PackagedComExtensionHandler::ParsePerArchitectureDllPaths
OSIntegration::DEH::PackagedComExtensionHandler::ParseProgId
OSIntegration::DEH::PackagedComExtensionHandler::ParseProxyStub
OSIntegration::DEH::PackagedComExtensionHandler::ParseServer
OSIntegration::DEH::PackagedComExtensionHandler::ParseServiceClass
OSIntegration::DEH::PackagedComExtensionHandler::ParseServiceServer
OSIntegration::DEH::PackagedComExtensionHandler::ParseSurrogateClass
OSIntegration::DEH::PackagedComExtensionHandler::ParseSurrogateServer
OSIntegration::DEH::PackagedComExtensionHandler::ParseThreadingModelAttribute
OSIntegration::DEH::PackagedComExtensionHandler::ParseTreatAsClass
OSIntegration::DEH::PackagedComExtensionHandler::ParseTypeLib
OSIntegration::DEH::PackagedComExtensionHandler::ParseVerbs
OSIntegration::DEH::PackagedComExtensionHandler::PostOsUpgradeEvaluateRequest
OSIntegration::DEH::PackagedComExtensionHandler::SetInprocClassDllProperties
OSIntegration::DEH::PackagedComExtensionHandler::TryGetArchitectureOfSurrogateClass
OSIntegration::DEH::PackagedComExtensionHandler::VerifyClassProgId
OSIntegration::DEH::PackagedComExtensionHandler::VerifyInterface
OSIntegration::DEH::PackagedComExtensionHandler::VerifyInterfaceTypeLib
OSIntegration::DEH::PackagedComExtensionHandler::VerifyTreatAsChain
OSIntegration::DEH::PackagedComExtensionHandler::VerifyVersionIndependentProgId
OSIntegration::DEH::PackagedComExtensionHandler::VerifyVersionIndependentProgIdHelper
OSIntegration::DEH::ProxyStubRegistration::FindOrCreate
OSIntegration::DEH::RegistryCompatibility::Details::CastValueDataSize
OSIntegration::DEH::RegistryCompatibility::Details::GetStringByteCountIncludingTerminator
OSIntegration::DEH::RegistryCompatibility::Details::GetStringLength
OSIntegration::DEH::RegistryCompatibility::Details::GetStringLengthIncludingTerminator
OSIntegration::DEH::RegistryCompatibility::Details::GetStringPointer
OSIntegration::DEH::RegistryCompatibility::GenericValueData::GenericValueData
OSIntegration::DEH::RegistryCompatibility::Key::AddValue
OSIntegration::DEH::RegistryCompatibility::KeyPath::KeyPath
OSIntegration::DEH::RegistryCompatibility::Name<0,16383,1>::Name
OSIntegration::DEH::RegistryCompatibility::Name<1,256,0>::Name
OSIntegration::DEH::RegistryCompatibility::RegBinaryValueData::RegBinaryValueData
OSIntegration::DEH::ResourcesManager::CommitChanges
OSIntegration::DEH::ResourcesManager::CommitChangesHelper
OSIntegration::DEH::ResourcesManager::GetFileManager
OSIntegration::DEH::ResourcesManager::GetRegistrationStoreContext
OSIntegration::DEH::ResourcesManager::GetRegistryCompatibilityManager
OSIntegration::Tools::GetXMLDOMFromPackage(const_cast<OSIntegration::Package*>(package), dom.ReleaseAndGetAddressOf())
OSIntegration::Tools::MoCOMHelper::CreateHelper
OSMaxVersionTested
OSMinVersion
OSVersionAppModel
OSVersionBuild
OSVersionMajor
OSVersionMinor
OSVersionRevision
oT$@f
other._current == nullptr
OtherPackageName
OutgoingPackageName
outofprocClassXPath
OutOfProcessActivatableClassRegistration::Create( classId, serverName, package->GetCollectors(), &activatableClass)
OutOfProcessActivatableClassRegistration::Create(acid, serverName, _sourcePackage->GetCollectors(), &activatableClass)
OutOfProcessActivatableClassRegistration::Create(activatableClassId, serverName, package->GetCollectors(), &activatableClass)
OutOfProcessActivatableClassRegistration_Impl::Create(activatableClassId, serverRegistration.Get(), &classRegistration)
OutOfProcessServer
OutputDebugStringW
OverlayPackages
oversubscribed distance tree
oversubscribed dynamic bit lengths tree
oversubscribed literal/length tree
Owner: %ls %u
Owner: N/A
p AWH
p WATAUAVAWH
p WAVAWH
p![XT?
p"Y~/
P(9Q(t*
p(Q6k7(
p(X|S
p)P47
p*X3A
P:\WindowsApps
p:_0#
p@Q4K
p[]T?
p[Z~v
p`nJK
p{W\$
p0^R;
p0nJK
P3>,RNtQuerySystemInformation
p8@NJK
p8V~{/q
p9\9HtbD
PA^_]
PA^_^
pA^_^
pA^_^[]
PA^_^[]
pA^_^[]
PA^_^[]
pA^_^[]
PA^_^[]
PA^_^][
pA^A\_^]
PA^A\_^]
PA^A]A\_^[]
PA_A^_][
pA_A^_^]
PA_A^_^]
pA_A^_^]
PA_A^_^]
pA_A^_^]
PA_A^_^]
pA_A^A\_^[]
PA_A^A\_^[]
PA_A^A]_^[]
pA_A^A]A\_[]
PA_A^A]A\_^[
pA_A^A]A\_^]
PA_A^A]A\_^]
pA_A^A]A\_^]
PA_A^A]A\_^]
pA_A^A]A\_^]
PA_A^A]A\_^]
pA_A^A]A\_^]
PA_A^A]A\_^]
Package
package
Package
Package %ls
Package %ls %ls %ls
Package %ws
Package %ws %ws
Package %ws %ws %ws
Package %ws root %ws user %ws hasCentennial %u
Package %ws.
Package rows w/no PackageUser references
Package.PackageType=Bundle and Package.SourceBundle=BundlePackage but no other Package rows from Bundle
package->GetManifestReader(&manifestReader)
PackageAppInstaller
PackageArchitecture
PACKAGED_COM_DEH_KEYWORD
packageDacl
packagedClassicApp
PackagedCom
packagedComContext->GetComClassEntriesForPackage(packageMoniker.Get(), &classesHandle)
packagedComContext->ReadComClassEntry(packageMoniker.Get(), clsid, properties)
packagedComContext->TryGetComClassIdForPackageByIndex(classesHandle, classIndex, &hasEntryAtIndex, &clsid)
PackageDependency
PackageDisplayName
PackageExtension
PackageExternalLocation
PackageFamily
PackageFamilyName
PackageFamilyNameFromFullName
PackageFamilyNameFromId
PackageFamilyPolicy
PackageFamilyUser
PackageFamilyUserResource
PackageFlags
PackageFlags2
PackageFolder
PackageFolderOld
PackageFullName
packageFullName
PackageFullName
packageFullName
PackageFullName
packageFullName
PackageFullName
packageFullName
PackageFullName
PackageFullname
PackageFullName
PackageFullname
PackageFullName
PackageFullname
PackageFullName
PackageFullname
PackageFullName
packageFullName
PackageFullName
packageFullName
PackageFullName
packageFullName7
PackageFullNames
PackageId
PackageID
packageId->GetPackageFamilyName(&packageFamilyName)
PackageIdentity
PackageIndex
PackageKey
PackageList
PackageLocation
PackageMachineStatus
PackageMoniker
packageMoniker
PackageMoniker
PackageMoniker2
PackageMoniker3
PackageMonikerNew
PackageMonikerOld
PackageName
PackageNameAndPublisherIdFromFamilyName
PackageNameAndPublisherIdFromFamilyName %ls
PackageNameOne
PackageNameTwo
PackageOrigin
PackagePolicy
PackageProperty
PackageRelativeApplicationId
PackageRelativeExecutable
PackageRepository.edb
PackageRepositoryAllocate
PackageRepositoryFree
PackageRepositoryRoot
PackageRootFolder
PackageRow was not initialized with lazy init info. Cannot query external location info.
Packages
PackageSID
PackageSid
PackageSID
PackageSidFromFamilyName
packageSidString.SetValueFromString(packageSid.GetRawBuffer(nullptr))
PackageSidToPackageCapabilitySid %ls %ls %p
PackageSidToPackageCapabilitySid %ls %p
PackageSourceUri
PackageState
PackageStatus
PackageStatus_DependencyPackageIssue
PackageStatusUpdateBad_ModifiedPackage
PackagesToBeInstalled
PackageSuperceded
PackageTableRowKey
PackageType
PackageUri
PackageUser
PackageUser rows for Bundle but no other Package(s) sourced from the bundle
PackageUser rows for Inbox packages cannot be DeploymentState=Paused
PackageUser.User has Package(s) with Package.Type!=Bundle but not Package.Type=Bundle
PackageUserStatus
PackageVersion
packageVersion
PackageVersion
packageVersion
PackageVersion2
PageCacheOverflow
PageCacheOverflowPeak
PageCachePeak
PageCacheUsed
PageCacheUsedPeak
pair->get_Value(&spRegistration)
paPt,
Parameters
parentExtension.As(&parentExtensionElement)
ParseAndRetrieveApplicationIdAndDisplayName( root, applicationId.GetAddressOf(), applicationDisplayName.GetAddressOf())
ParseAndRetrieveAttribute( aspect.Get(), Internal::PackagedComConstants::oleMiscFlagAttribute, aspectOleMiscFlag.GetAddressOf())
ParseAndRetrieveAttribute( aspect.Get(), Internal::PackagedComConstants::typeAttribute, aspectType.GetAddressOf())
ParseAndRetrieveAttribute( classElement.Get(), Internal::PackagedComConstants::resourceIdAttribute, resourceId.GetAddressOf(), &resourceIdFound)
ParseAndRetrieveAttribute( classElement.Get(), Internal::PackagedComConstants::resourceIndexAttribute, resourceIndex.GetAddressOf(), &resourceIndexFound)
ParseAndRetrieveAttribute( classElement.Get(), Internal::PackagedComConstants::versionNumberAttribute, typeLibVersionNumber.GetAddressOf(), &typeLibVersionNumberFound)
ParseAndRetrieveAttribute( classElementToCompare.Get(), Internal::PackagedComConstants::versionIndependentProgIdAttribute, versionIndependentProgIdToCompare.GetAddressOf(), &versionIndependentProgIdToCompareFound)
ParseAndRetrieveAttribute( currentTreatAsClassElement.get(), Internal::PackagedComConstants::treatAsAttribute, currentTreatAsValue.GetAddressOf())
ParseAndRetrieveAttribute( dataFormatElement.Get(), Internal::PackagedComConstants::aspectFlagAttribute, aspectFlag.GetAddressOf())
ParseAndRetrieveAttribute( dataFormatElement.Get(), Internal::PackagedComConstants::directionAttribute, direction.GetAddressOf())
ParseAndRetrieveAttribute( dataFormatElement.Get(), Internal::PackagedComConstants::formatNameAttribute, formatName.GetAddressOf(), &formatNameFound)
ParseAndRetrieveAttribute( dataFormatElement.Get(), Internal::PackagedComConstants::mediumFlagAttribute, mediumFlag.GetAddressOf())
ParseAndRetrieveAttribute( dataFormatElement.Get(), Internal::PackagedComConstants::standardFormatAttribute, standardFormat.GetAddressOf(), &standardFormatFound)
ParseAndRetrieveAttribute( element, attributeHelper, interfaceToBeVerified.GetAddressOf())
ParseAndRetrieveAttribute( element, Internal::PackagedComConstants::idAttribute, classId.GetAddressOf())
ParseAndRetrieveAttribute( element, Internal::PackagedComConstants::idAttribute, interfaceId.GetAddressOf())
ParseAndRetrieveAttribute( element, Internal::PackagedComConstants::idAttribute, typeLibId.GetAddressOf())
ParseAndRetrieveAttribute( element, Internal::PackagedComConstants::proxyStubClsidAttribute, proxyStub.GetAddressOf())
ParseAndRetrieveAttribute( format.Get(), Internal::PackagedComConstants::formatNameAttribute, formatName.GetAddressOf(), &formatNameFound)
ParseAndRetrieveAttribute( format.Get(), Internal::PackagedComConstants::standardFormatAttribute, standardFormat.GetAddressOf(), &standardFormatFound)
ParseAndRetrieveAttribute( progId.Get(), Internal::PackagedComConstants::clsidAttribute, clsidProgId.GetAddressOf(), &clsidFound)
ParseAndRetrieveAttribute( progId.Get(), Internal::PackagedComConstants::currentVersionAttribute, currentVersion.GetAddressOf(), &currentVersionFound)
ParseAndRetrieveAttribute( progId.Get(), Internal::PackagedComConstants::currentVersionAttribute, currentVersionProgId.GetAddressOf(), &currentVersionFound)
ParseAndRetrieveAttribute( root, Internal::PackagedComConstants::argumentsAttribute, &arguments, &argumentsFound)
ParseAndRetrieveAttribute( root, Internal::PackagedComConstants::defaultFormatNameAttribute, defaultFormatName.GetAddressOf(), &defaultFormatNameFound)
ParseAndRetrieveAttribute( root, Internal::PackagedComConstants::defaultStandardFormatAttribute, defaulStandardFormat.GetAddressOf(), &defaulStandardFormatFound)
ParseAndRetrieveAttribute( root, Internal::PackagedComConstants::launchAndActivationPermissionsAttribute, launchAndActivationPermission.GetAddressOf(), &launchAndActivationPermissionFound)
ParseAndRetrieveAttribute( root, Internal::PackagedComConstants::oleMiscFlagAttribute, oleMiscFlag.GetAddressOf())
ParseAndRetrieveAttribute( root, Internal::PackagedComConstants::progIdAttribute, progId.GetAddressOf(), &progIdFound)
ParseAndRetrieveAttribute( root, Internal::PackagedComConstants::serviceNameAttribute, &serviceName)
ParseAndRetrieveAttribute( root, Internal::PackagedComConstants::versionIndependentProgIdAttribute, versionIndependentProgId.GetAddressOf(), &versionIndependentProgIdFound)
ParseAndRetrieveAttribute( verbElement.Get(), Internal::PackagedComConstants::appendMenuFlagAttribute, appendMenuFlag.GetAddressOf())
ParseAndRetrieveAttribute( verbElement.Get(), Internal::PackagedComConstants::idAttribute, id.GetAddressOf())
ParseAndRetrieveAttribute( verbElement.Get(), Internal::PackagedComConstants::oleVerbFlagAttribute, oleVerbFlag.GetAddressOf())
ParseAndRetrieveAttribute(classReferenceElement, Internal::PackagedComConstants::idAttribute, &id)
ParseAndRetrieveAttribute(dllElement.get(), Internal::PackagedComConstants::processorArchitectureAttribute, architecture.GetAddressOf())
ParseAndRetrieveAttribute(extensionElements[extensionIndex], Internal::PackagedComConstants::categoryAttribute, category.GetAddressOf())
ParseAndRetrieveAttribute(root, Internal::PackagedComConstants::argumentsAttribute, &arguments, &argumentsFound)
ParseAndRetrieveAttribute(root, Internal::PackagedComConstants::assemblyAttribute, &assembly)
ParseAndRetrieveAttribute(root, Internal::PackagedComConstants::clsidAttribute, &clsidString)
ParseAndRetrieveAttribute(root, Internal::PackagedComConstants::currentVersionAttribute, &currentVersion, &currentVersionFound)
ParseAndRetrieveAttribute(root, Internal::PackagedComConstants::idAttribute, &id)
ParseAndRetrieveAttribute(root, Internal::PackagedComConstants::implementationClassAttribute, &implementationClass)
ParseAndRetrieveAttribute(root, Internal::PackagedComConstants::pathAttribute, &path)
ParseAndRetrieveAttribute(root, Internal::PackagedComConstants::proxyStubClsidAttribute, &proxyStubClsidString)
ParseAndRetrieveAttribute(root, Internal::PackagedComConstants::runtimeVersionAttribute, &runtimeVersion)
ParseAndRetrieveAttribute(root, Internal::PackagedComConstants::systemSurrogateAttribute, &systemSurrogateEnumString, &systemSurrogateFound)
ParseAndRetrieveAttribute(root, Internal::PackagedComConstants::threadingModelAttribute, &threadingModelString, &threadingModelFound)
ParseAndRetrieveAttribute(typeLib.get(), Internal::PackagedComConstants::versionNumberAttribute, &versionNumber, &versionNumberFound)
ParseAndRetrieveAttribute(version.get(), Internal::PackagedComConstants::libraryFlagAttribute, &libraryFlag, &libraryFlagFound)
ParseAndRetrieveAttribute(version.get(), Internal::PackagedComConstants::localeIdAttribute, &localeId, &localeIdFound)
ParseAndRetrieveAttribute(version.get(), Internal::PackagedComConstants::versionNumberAttribute, &versionNumber)
ParseAndRetrieveAttribute(winElement.get(), Internal::PackagedComConstants::resourceIdAttribute, &resourceId, &resourceIdFound)
ParseAndRetrieveBool( root, Internal::PackagedComConstants::insertableObjectAttribute, &insertableObject, &insertableObjectFound)
ParseAndRetrieveBool(root, Internal::PackagedComConstants::enableOleDefaultHandlerAttribute, &enableOleDefaultHandler, &enableOleDefaultHandlerFound)
ParseAndRetrieveBool(root, Internal::PackagedComConstants::useUniversalMarshalerAttribute, &useUniversalMarshaler, &useUniversalMarshalerFound)
ParseAndRetrieveBool(root, Internal::PackagedComConstants::virtualizationAttribute, &virtualizationEnabled, &virtualizationFound)
ParseAndRetrieveBool(terminalClassElement.get(), Internal::PackagedComConstants::insertableObjectAttribute, &insertableObject, &insertableObjectFound)
ParseAndRetrieveGuid( classElement.Get(), Internal::PackagedComConstants::idAttribute, &typeLibId, &typeLibIdFound)
ParseAndRetrieveGuid( implementedCategory.Get(), Internal::PackagedComConstants::idAttribute, &implementedCategoryId)
ParseAndRetrieveGuid( root, Internal::PackagedComConstants::autoConvertToAttribute, &autoConvertTo, &autoConvertToFound)
ParseAndRetrieveGuid( root, Internal::PackagedComConstants::idAttribute, &helperId)
ParseAndRetrieveGuid( root, Internal::PackagedComConstants::idAttribute, &idGuid)
ParseAndRetrieveGuid( root, Internal::PackagedComConstants::treatAsAttribute, &treatAsGuid)
ParseAndRetrieveGuid(root, Internal::PackagedComConstants::appIdAttribute, &appId, &appIdFound)
ParseAndRetrieveGuid(root, Internal::PackagedComConstants::asynchronousInterfaceAttribute, &asynchronousInterfaceGuid, &asynchronousFound)
ParseAndRetrieveGuid(root, Internal::PackagedComConstants::autoConvertToAttribute, &autoConvertToGuid, &autoConvertToFound)
ParseAndRetrieveGuid(root, Internal::PackagedComConstants::clsidAttribute, &clsid, &clsidFound)
ParseAndRetrieveGuid(root, Internal::PackagedComConstants::idAttribute, &id)
ParseAndRetrieveGuid(root, Internal::PackagedComConstants::idAttribute, &idGuid)
ParseAndRetrieveGuid(root, Internal::PackagedComConstants::proxyStubClsidAttribute, &proxyStubClsid, &proxyStubFound)
ParseAndRetrieveGuid(root, Internal::PackagedComConstants::synchronousInterfaceAttribute, &synchronousInterfaceGuid, &synchronousFound)
ParseAndRetrieveGuid(typeLib.get(), Internal::PackagedComConstants::idAttribute, &typeLibIdGuid)
ParseAndRetrieveLocalizableAttribute( root, Internal::PackagedComConstants::displayNameAttribute, displayName.GetAddressOf(), &displayNameFound)
ParseAndRetrieveLocalizableAttribute( root, Internal::PackagedComConstants::shortDisplayNameAttribute, shortDisplayName.GetAddressOf(), &shortDisplayNameFound)
ParseAndRetrieveLocalizableAttribute( verbElement.Get(), Internal::PackagedComConstants::displayNameAttribute, displayName.GetAddressOf())
ParseAndRetrieveLocalizableAttribute(root, Internal::PackagedComConstants::displayNameAttribute, &displayName, &displayNameFound)
ParseAndRetrieveLocalizableAttribute(terminalClassElement.get(), Internal::PackagedComConstants::displayNameAttribute, displayName, displayNameFound)
ParseAndRetrieveLocalizableAttribute(terminalClassElement.get(), Internal::PackagedComConstants::shortDisplayNameAttribute, displayName, displayNameFound)
ParseAndRetrieveLocalizableAttribute(version.get(), Internal::PackagedComConstants::displayNameAttribute, &displayName, &displayNameFound)
ParseAndRetrievePath( classElement.Get(), Internal::PackagedComConstants::pathAttribute, path.GetAddressOf())
ParseAndRetrievePath(classElement, Internal::PackagedComConstants::pathAttribute, &relativePath, &pathFound)
ParseAndRetrievePath(dllElement.get(), Internal::PackagedComConstants::pathAttribute, &pathForArchitecture)
ParseAndRetrievePath(root, Internal::PackagedComConstants::customSurrogateExecutableAttribute, &customSurrogateExecutable, &customSurrogateExecutableFound)
ParseAndRetrievePath(root, Internal::PackagedComConstants::executableAttribute, &executable)
ParseAndRetrievePath(root, Internal::PackagedComConstants::pathAttribute, &relativePathUnspecifiedArchitecture, &pathFound)
ParseAndRetrievePath(version.get(), Internal::PackagedComConstants::helpDirectoryAttribute, &helpDirectory, &helpDirectoryFound)
ParseAndRetrievePath(winElement.get(), Internal::PackagedComConstants::pathAttribute, &path)
ParseAndSubmitCustomAttributes(root, activatableClass)
ParseAndSubmitDwordAttribute(activatableClass, node)
ParseAndSubmitStringAttribute(activatableClass, node)
ParseApplicationUserModelId
ParseClassProperties(elementWithClassProperties.get(), classReg.get())
ParseClassProperties(elementWithClassProperties.get(), classRegistration.get())
ParseComInterface(extension.Get(), (compatMode == MsixAppCompatSupport::CompatMode::Classic), (scope == MsixAppCompatSupport::Scope::Machine))
ParseCompatModeString(attributeValue.GetChars(), compatMode)
ParseComServer(extension.Get(), (compatMode == MsixAppCompatSupport::CompatMode::Classic), (scope == MsixAppCompatSupport::Scope::Machine))
ParseConversion(classElement.Get(), classReg)
ParseConversionFormats(conversionFormat.Get(), conversionValues.Get())
ParseDataFormats(classElement.Get(), classReg)
ParseExeClass(classElement.get(), exeServer.get(), hasRegistryCompatibility, hasMachineScope)
ParseExeServer(comServerElement.Get(), hasRegistryCompatibility, hasMachineScope)
ParseExtensions(const_cast<IXMLDOMElement**>(incomingExtensionElements), countIncomingElements)
ParseImplementedCategories(classElement.Get(), classReg)
ParseInprocClassProperties(root, inprocClassRegistration.get())
ParseInProcessHandler(comServerElement.Get(), hasRegistryCompatibility, hasMachineScope)
ParseInProcessHandlerClass(classElement.get(), dllPaths, hasRegistryCompatibility, hasMachineScope)
ParseInProcessServer(comServerElement.Get(), hasRegistryCompatibility, hasMachineScope)
ParseInProcessServerClass(classElement.get(), dllPaths, hasRegistryCompatibility, hasMachineScope)
ParseInprocServerClassProperties(root, inprocServerClassRegistration.get())
ParseInterface(comInterfaceElement.Get(), hasRegistryCompatibility, hasMachineScope)
ParseManagedInProcessServer(comServerElement.Get(), hasRegistryCompatibility, hasMachineScope)
ParseManagedInProcessServerClass(classElement.get(), assembly.get(), runtimeVersion.get(), hasRegistryCompatibility, hasMachineScope)
ParseMiscStatus(classElement.Get(), classReg)
ParseOutofprocClassProperties(root, outofprocClass.get())
ParsePackage(incomingPackage, result)
ParsePerArchitectureDllPaths(root, Internal::PackagedComConstants::inProcessHandlerDllElement, dllPaths)
ParsePerArchitectureDllPaths(root, Internal::PackagedComConstants::inProcessServerDllElement, dllPaths)
ParsePerArchitectureDllPaths(root, Internal::PackagedComConstants::proxyStubDllElement, dllPaths, true)
ParseProgId(comServerElement.Get(), hasRegistryCompatibility, hasMachineScope)
ParseProxyStub(comInterfaceElement.Get(), hasRegistryCompatibility, hasMachineScope)
ParseProxyStub(node)
ParseScopeString(attributeValue.GetChars(), scope)
ParseServer(root, server.get())
ParseServiceClass(classElement.get(), serviceServer.get(), hasRegistryCompatibility, hasMachineScope)
ParseServiceServer(comServerElement.Get(), hasRegistryCompatibility, hasMachineScope)
ParseSurrogateClass(classElement.get(), surrogateServer.get(), hasRegistryCompatibility, hasMachineScope)
ParseSurrogateServer(comServerElement.Get(), hasRegistryCompatibility, hasMachineScope)
ParseThreadingModelAttribute(root, &threadingModel)
ParseTreatAsClass(comServerElement.Get(), hasRegistryCompatibility, hasMachineScope)
ParseTypeLib(comInterfaceElement.Get(), hasRegistryCompatibility, hasMachineScope)
ParseVerbs(classElement.Get(), classReg)
PartA_PrivTags
Partition
Partition %d not supported by GC()
pASTJ
Path %ls
Path %ls level %u.
path %ws %u %u
Path: %ls
Path: %ls -> %ls
Path: %ls hasCentennial %u isFullTrust %u runAsSystem %u user %ls
Path: %ls subDir %ls
Path: %ls subDir %ls isFullTrust %u runAsSystem %u
Path: %ws
PathAllocCanonicalize
PathAllocCombine
PathAllocCombine( destinationDirectoryPath.GetRawBuffer(nullptr), WindowsGetStringRawBuffer(relativeFilePath, nullptr), PATHCCH_ALLOW_LONG_PATHS, &destinationAbsolutePath)
PathAllocCombine( systemMetadataPath, L"PackagedCom", PATHCCH_ALLOW_LONG_PATHS, &managedDirectoryPath)
PathAllocCombine( WindowsGetStringRawBuffer(incomingPackageRoot, nullptr), WindowsGetStringRawBuffer(relativeFilePath, nullptr), PATHCCH_ALLOW_LONG_PATHS, &sourceAbsolutePath)
PathAllocCombine(_sourcePackage->GetPackageRoot(), wil::str_raw_ptr(relativePath), PATHCCH_ALLOW_LONG_PATHS, &absolutePath)
PathAllocCombine(_sourcePackage->GetPackageRoot(), wil::str_raw_ptr(relativePathUnspecifiedArchitecture), PATHCCH_ALLOW_LONG_PATHS, &absolutePathUnspecifiedArchitecture)
PathAllocCombine(incomingPackage->GetPackageRoot(), relativePath, PATHCCH_ALLOW_LONG_PATHS, &absolutePath)
PathAllocCombine(systemDirectoryCharacters, relativePath, PATHCCH_ALLOW_LONG_PATHS, &absolutePath)
PathCchAppend
PathCchCombine
PathCchCombine %ls subDir %ls size %zu
PathCchRemoveBackslash
PathCchRemoveFileSpec
PathCchRemoveFileSpec %ls %u
PathCchRemoveFileSpec(destinationDirectoryPath, destinationPathLength)
PathCchSkipRoot
PathFindExtensionW
PathFindFileNameW
PathIsFileSpecW
PathName
PathOne
PathTwo
pAXxi
pBQ:$
pBQ6]/
pBR:&
pbTT$
pBZVZ
pC^4_
pCopyOperations->get_Size(&size)
pcU24.0
pcXV/
pCZry
PeekMessageW
PendingCopyFiles(packageMoniker, packageRoot.Get(), incomingPackage->GetSignatureOrigin(), fileManager.Get())
PendingRemoveForEachCollector(m_whichPhase, &outgoing, RegistrationStoreContext::RemoveDeploymentOperationType::Update, m_resourcesManager.Get(), outgoingPackageContext)
PendingWriteExeSevers(incomingPackage, registrationStoreContext.Get())
PendingWriteForEachCollector(m_whichPhase, &incoming, m_resourcesManager.Get(), outgoingPackageContext)
PendingWriteForEachRegistration( _classes.Get(), incomingPackage, resourcesManager)
PendingWriteForEachRegistration( _interfaces.Get(), incomingPackage, resourcesManager)
PendingWriteForEachRegistration( _progIds.Get(), incomingPackage, resourcesManager)
PendingWriteForEachRegistration( _proxyStubs.Get(), incomingPackage, resourcesManager)
PendingWriteForEachRegistration( _servers.Get(), incomingPackage, resourcesManager)
PendingWriteForEachRegistration( _treatAsClasses.Get(), incomingPackage, resourcesManager)
PendingWriteForEachRegistration( _typeLibs.Get(), incomingPackage, resourcesManager)
PendingWriteInProcActivatableClasses(packageMoniker, registrationStoreContext.Get())
PendingWriteInterfaces(packageMoniker, registrationStoreContext.Get())
PendingWriteOutOfProcActivatableClasses(packageMoniker, registrationStoreContext.Get())
PendingWriteProxyStubs(packageMoniker, registrationStoreContext.Get())
PerceivedType
Percentage
PeriodicUpdateRecurrence
Permissions Failure
PerPackageEntries
PerPackageFamilyEntries
PERSIST
Persist %u
Persist %u folder %ls
PersistAppExecutionAliasToFileHandleEx
PersistPackageBackupEligibility
PersistPackageBackupEligibility %ws
PersistToRegistry
PersistToStore
PerSystemEntries
pFileManager->CopyFileToManagedDirectory( packageMoniker, packageRoot, signatureOrigin, ManagedDirectory::PackagedComProgramData, _properties.DllPath.Value.Get())
pFileManager->CopyFileToManagedDirectory( packageMoniker, packageRoot, signatureOrigin, ManagedDirectory::PackagedComProgramData, GetDllPathForArchitecture(architecture).Get())
PhaseError
phI;~8r
phoneCall
PHONECALLORIGIN_DEH_KEYWORD
pHT^I
pHT<m
pHW>8
picturesLibrary
piffile
pIterable->First(&spIterator)
piYZX
pj[8T
pjSt=
pK_2k
PkgFullName
PKMP;
pKPV!
pKY|[
PlatformPolicyBlockReasonMap
Policy.Aggressive.ConnectionMaxAge
Policy.Aggressive.ConnectionMaxCount
Policy.Aggressive.ConnectionMinCount
Policy.Aggressive.GCInterval
Policy.Aggressive.StatementMaxAge
Policy.Aggressive.StatementMaxCount
Policy.Aggressive.StatementMinCount
Policy.Normal.ConnectionMaxAge
Policy.Normal.ConnectionMaxCount
Policy.Normal.ConnectionMinCount
Policy.Normal.GCInterval
Policy.Normal.StatementMaxAge
Policy.Normal.StatementMaxCount
Policy.Normal.StatementMinCount
PolicyCache
PolicyCache %ws
PolicyReason
Ponecore\admin\appmodel\common\configuration.cpp
Portrait
PortraitFlipped
PostCheckAllCascadingInMachinePartition
PostDowngradeVersion
PostFixAllCascadingInMachinePartition
ppleae38af2e007f4358a809ac99a64a67c1
PRAGMA %s;
PRAGMA %s=%I64d;
PRAGMA %s=%s;
PRAGMA optimize;
PreDowngradeVersion
Preference
PREINSTALLED_CONFIG_TASK_DEH_KEYWORD
PreRegisterOptionsBitMap
prevhost.exe
PreviewDetails
PreviewHost
PrimaryTile
PrimaryTileUser
PrimaryTileUserChangelog
PriMergeChecksum
PriPaths
privateNetworkClientServer
Problem
process
ProcessCount
ProcessId
processId
ProcessId
ProcessIdToSessionId
ProcessIndex
ProcessInformation
ProcessingPackageFullName
ProcessingSQL
ProcessorArchitecture
ProductName
ProductVersion
profapi.dll
Profile
ProfileImagePath
progId
ProgID
ProgId
progId.query_to(&registryCompatibility)
progId.query_to(&scope)
progId->SetClsidWithIsInsertableObject(clsid, isInsertableObject)
progId->SetCurrentVersion(currentVersion.get())
progIdHelperList.As(&_progIdHelperList)
progIdString.Set(progId)
Programmable
Property
property.Present
property.Present && (property.Value != value)
PropertyId
propertyValueFactory->CreateString(value, &propValue)
propertyValueFactory->CreateUInt32(value, &propValue)
Protocol
PROTOCOL_DEH_KEYWORD
Provider
ProviderDisplayName
ProviderGuid
ProviderName
ProvisionApplicationCapabilitiesEx
ProvisionedPackage
ProvisionedPackageDeleted
ProvisionedPackageExclude
Proxy Stub Server
ProxyStub
proxyStub.query_to(&registryCompatibility)
proxyStub.query_to(&scope)
proxyStub->SetDisplayName(displayName.get())
proxyStub->SetPath_arm(dllPaths.Path_arm.get())
proxyStub->SetPath_arm64(dllPaths.Path_arm64.get())
proxyStub->SetPath_x64(dllPaths.Path_x64.get())
proxyStub->SetPath_x86(dllPaths.Path_x86.get())
ProxyStubClsid
ProxyStubClsid32
ProxyStubDll
ProxyStubRegistration::FindOrCreate(strValidatedCLSID, dllPath, true , _sourcePackage->GetCollectors(), &proxyStub)
ProxyStubRegistration_Impl::Create(dllPath, isPackageRelativePath, &registrationImpl)
prRPf/
prTzz
pRU>'
PRVAd
pRXt8
Psm.ActivationType
psVV%
PublicFolder
Publisher
PublisherCacheFolder
PublisherDisplayName
PublisherFolders
PublisherName
pushNotification
pVector->QueryInterface(IID_PPV_ARGS(&spIterable))
pxZ0!
py\2F
pz\:(
pZ\tW
q"Y~/
q#Qz&
q(X|S
q)P47
q:_:C
q:_0#
q@Q4K
q[]T?
q[Z~v
q`W|1/
q0^R;
q0E9&t
q0R^G'
q1]Rz?L
q8V~{/q
qAQvV
qB^Xh
qBQ:$
qBQ6]/
qBR:&
qbTT$
qBZVZ
qC\r4
qC^4_
qcU24.0
qcXV/
QGB6u
qIRtK
qiYVH
qj[8T
qjSt=
qK_2k
qKPV!
qP[\=
qpackageName
qPR<M
qqTt>
qrRPf/
qrTzz
qrU8q
qRXt8
qsQ~K6
qSY:w
QueryActiveSession
QueryApplicationCapabilities
QueryApplicationCapabilitiesEx
QueryFullProcessImageNameW
QueryPerformanceCounter
QueryTransientObjectSecurityDescriptor
QueryUnbiasedInterruptTime
QueryUserToken
QueueLength
QueueUserWorkItem
QuirkIsEnabledForPackage2
quote.Concat(exePath, &temp)
qxZr<
qy\2F
qZ\tW
QZ^&A
r#fD9
R$fA;Z*
r:^<(:
R]^F=
r}6Ic
R0G6$
RaiseException
RaiseFailFastException
RDDLH
Readable
ReadFile
ReadWritable
reason
Recurrence
RecursivelyProtectSubFoldersToLevel %ls level %u
RecursivelyProtectSubFoldersToLevel %ls level %u %u
RedirectMrtResources
RegCloseKey
RegCreateKeyEx
RegCreateKeyEx(HKEY_USERS, capabilitiesKeyPath, 0, NULL, REG_OPTION_NON_VOLATILE, KEY_READ | KEY_WRITE, &sa, &hKey, nullptr)
RegCreateKeyExW
RegDeleteKey(hKeyPackage.get(), DownloadUploadClassConstants::vpnPluginbackgroundTaskClassId)
RegDeleteKeyExW
RegDeleteKeyW
RegDeleteKeyW  %ws %ws
RegDeleteTreeW
RegDeleteValue %ws
RegDeleteValueW
RegEnumKeyExW
RegEnumKeyW
RegEnumValueW
regfile
RegGetKeySecurity
RegGetValue
RegGetValueW
RegGetValueW %ws
RegGetValueW %ws %ws
RegisterStateChangeNotification
RegisterStateChangeNotification %u
RegisterStateLock
RegisterTraceGuidsW
registration
registration->_properties.Server.Value.Set(exeServer->get_ServerName().Get())
registration->_serverName.Set(serverName.Get())
registration->Description.Set(L"Proxy Stub Server")
registration->DllPath.Unexpanded.Set(dllPath.Get())
registration->Initialize(activatableClassId)
registration->InterfaceName.Set(name.Get())
registration->ProxyStubCLSID.Set(clsid.Get())
registration->SetDllPath_arm(dllPaths.Path_arm.get())
registration->SetDllPath_arm64(dllPaths.Path_arm64.get())
registration->SetDllPath_x64(dllPaths.Path_x64.get())
registration->SetDllPath_x86(dllPaths.Path_x86.get())
registration->SetEnableVirtualization(virtualizationEnabled)
registration->SetOleDefaultHandler(enableOleDefaultHandler)
registration->SetThreadingModel(threadingModel)
registrationScope->SetHasMachineScope(true)
registrationStore->CheckComPackageExists(packageFullName, &packageHasComRegistrations)
registrationStore->CreateComClassEntry(packageMoniker, _id, _properties)
registrationStore->CreateComInterfaceEntry(packageMoniker, _id, _properties)
registrationStore->CreateComProgIdEntry(packageMoniker, _id.Get(), _properties)
registrationStore->CreateComProxyStubEntry(packageMoniker, _id, _properties)
registrationStore->CreateComServerEntry(packageMoniker, _id, _properties)
registrationStore->CreateComTreatAsClassEntry(packageMoniker, _id, _properties)
registrationStore->CreateComTypeLibEntry( packageMoniker, _id, _versionNumber.Get(), _properties)
registrationStore->GetComTypeLib(packageFullName, typeLibId, &typeLibHandle)
registrationStore->GetComTypeLibsForPackage(packageFullName, &typeLibsHandle)
registrationStore->ReadComTypeLibEntry(packageFullName, typeLibId, versionId.get(), properties)
registrationStore->TryGetComTypeLibIdForPackageByIndex(typeLibsHandle, typeLibIndex, &hasTypeLibAtIndex, &typeLibId)
registrationStore->TryGetComTypeLibVersionIdByIndex(typeLibHandle, versionIndex, &hasVersionAtIndex, &versionId)
registrationStoreContext.query_to(&packagedComContext)
registrationStoreContext->CreateActivatableClassEntry( packageMoniker, _activatableClassId.Get(), _properties)
registrationStoreContext->CreateInterfaceEntry( packageMoniker.Get(), iid.Get(), *static_cast<InterfaceRegistration_Impl*>(itf.Get()))
registrationStoreContext->CreatePackage(packageMoniker.Get(), packageIsFramework)
registrationStoreContext->CreateProxyStubEntry( packageMoniker.Get(), clsid.Get(), *static_cast<ProxyStubRegistration_Impl*>(proxyStub.Get()))
registrationStoreContext->CreateServerEntry( packageMoniker.Get(), _serverName.Get(), _properties)
registrationStoreContext->RemoveActivationEntriesForPackage( packageMoniker.Get(), deploymentOperation, outgoingPackage->GetIsFramework())
RegistrationType
registryCompatibility->SetHasRegistryCompatibility(true)
registryCompatibilityCollector.query_to(&registryCompatibilityCollectorTestHooks)
registryCompatibilityCollector->AddKey( (_hasMachineScope ? Scope::Machine : Scope::User), Internal::GetAppIdKeyPath(_appId.Value), std::move(appIdKey))
registryCompatibilityCollector->AddKey( (_properties.HasMachineScope.GetValueOrDefault(false) ? Scope::Machine : Scope::User), Internal::GetClsidKeyPathForArchitecture(_id, architecture), Key(clsidKey))
registryCompatibilityCollector->AddKey( (_properties.HasMachineScope.GetValueOrDefault(false) ? Scope::Machine : Scope::User), Internal::GetClsidKeyPathForArchitecture(_id, architecture), std::move(clsidKey))
registryCompatibilityCollector->AddKey( (_properties.HasMachineScope.GetValueOrDefault(false) ? Scope::Machine : Scope::User), Internal::GetInterfaceKeyPathForArchitecture(_id, architecture), Key(interfaceKey))
registryCompatibilityCollector->AddKey( (_properties.HasMachineScope.GetValueOrDefault(false) ? Scope::Machine : Scope::User), Internal::GetProgIdKeyPath(_id.GetRawBuffer(nullptr)), std::move(progIdKey))
registryCompatibilityCollector->AddKey( (_properties.HasMachineScope.GetValueOrDefault(false) ? Scope::Machine : Scope::User), Internal::GetTypeLibVersionKeyPath(_id, _versionNumber.GetRawBuffer(nullptr)), std::move(typeLibVersionKey))
registryCompatibilityCollector->AddKey( (isMachineScope ? Scope::Machine : Scope::User), GetClsidKeyPathForArchitecture(_id, architecture), std::move(clsidKey))
registryCompatibilityCollectorTestHooks->SetIsAdditiveMode(incomingPackage)
RegistryKeyName
RegistryMapFactory< IDllServerActivatableClassRegistration * >::RegistryMap::Make(&_inProcessActivatableClasses)
RegistryMapFactory< IExeServerActivatableClassRegistration * >::RegistryMap::Make(&_outOfProcessActivatableClasses)
RegistryMapFactory< IExeServerRegistration * >::RegistryMap::Make(&_exeServers)
RegistryMapFactory< IInspectable* >::RegistryMap::Make(&_interfaceRegistrations)
RegistryMapFactory< IInspectable* >::RegistryMap::Make(&_proxyStubRegistrations)
RegistryMapFactory<ComProgIdRegistration*>::RegistryMap::Make(&_progIds)
RegistryMapFactory<ComTypeLibRegistration*>::RegistryMap::Make(&_typeLibs)
RegistryMapFactory<IInspectable*>::RegistryMap::Make(&_customAttributes)
RegistryMapFactory<IInspectable*>::RegistryMap::Make(&_implementedCategories)
RegistryMapFactory<IInspectable*>::RegistryMap::Make(&_miscStatusAspects)
RegistryMapFactory<IInspectable*>::RegistryMap::Make(&_verbs)
RegistrySubKeyName
RegLoadAppKeyW
RegNotifyChangeKeyValue
RegOpenCurrentUser
RegOpenCurrentUser %ws
RegOpenCurrentUserLocalSettings
RegOpenKeyEx
RegOpenKeyEx %ws
RegOpenKeyEx PSR
RegOpenKeyEx SCHEMAS
RegOpenKeyEx(HKEY_USERS, capabilitiesKeyPath, 0, KEY_READ | KEY_WRITE, &hKeyPackage)
RegOpenKeyExW
RegQueryInfoKey
RegQueryInfoKey(hKeyPackage.get(), nullptr, nullptr, nullptr, &cAcids, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr)
RegQueryInfoKeyW
RegQueryValueExW
RegSetKeySecurity
RegSetKeyValueW
RegSetKeyValueW %ws
RegSetKeyValueW %ws eligible %u
RegSetValueEx(hKey.get(), BTC_REGVALUE_AUMID, 0, REG_SZ, reinterpret_cast<const BYTE*>(appUserModelId), (DWORD)((wcslen(appUserModelId) + 1)*sizeof(WCHAR)))
RegSetValueEx(hKey.get(), BTC_REGVALUE_CAPABILITIES, 0, REG_DWORD, reinterpret_cast<const BYTE*>(&acidCapabilities), sizeof(DWORD))
RegSetValueExW
ReleaseMutex
ReleaseSemaphore
ReleaseSRWLockExclusive
ReleaseSRWLockShared
ReleaseStateLock
RemediationReason
Remove %ws %ws %ws
removeAppointment
RemoveCryptnetFolderIfExists
RemoveDirectoryTree %ls
RemoveDirectoryTree %ws
RemoveDirectoryTreeExcept %ls
RemoveDirectoryW
RemoveEmptyCentennialStateFolders %ls
RemoveLanguageFromMachineLanguageList
RemovePIIfromPath
RemovePublisherFolder Folder[%u]%ls of %u
RemoveRegistrationForUser failed in DirectoryExists for package %ws
RemoveRegistrationForUser failed in RemoveDirectoryTree for package %ws
RemoveSecureAppDataFolder %ls
RemoveStateLocations
RepairGhostMinimumAgeForDeletion
replaceAppointment
replaced
ReplacePackageSidWithPackageCapabilitySid %ls %p %u
ReplacePackageSidWithPackageCapabilitySid %ls %p %u %u
Repository.SetOptions.SetCacheSize
RepositoryPropertyBag::GetKey(userSid, package, category, keyString, key, _countof(key))
RequestCount
RequestedVersionAppModel
RequestedVersionBuild
RequestedVersionMajor
RequestedVersionMinor
RequestedVersionRevision
RequestPackageOperationImplementation
Required configuration data not found: %ws
RESA;
reset
ResetEvent
ResiliencyCurrentState
ResiliencyFilePath
ResolveDelayLoadedAPI
Resource
resourceConfiguration
ResourceGroup
ResourceId
ResourceIndex
ResourceManagerQueueGetCurrentDepth
ResourceManagerQueueGetMrtCachePathForPackage
ResourceManagerQueueReset
ResourceName
Resources
Resources.????????.pri
resources.pri
ResourcesConfig
resourcesManager->GetFileManager(&fileManager)
resourcesManager->GetRegistrationStoreContext(IID_PPV_ARGS(&extensionCatalogContext))
resourcesManager->GetRegistrationStoreContext(IID_PPV_ARGS(&registrationStoreContext))
resourcesManager->GetRegistrationStoreContext(IID_PPV_ARGS(&spRegistrationStore))
RESP;
RESTRICTED_LAUNCH_DEH_KEYWORD
Result
result
Result
result.Initialize(buffer.GetChars())
RetrieveAttribute(acidQuery, root, acid)
RetrieveAttribute(clsidQuery, root, strCLSID)
RetrieveAttribute(iidQuery, node, strIid)
RetrieveAttribute(interfaceNameQuery, node, interfaceName)
RetrieveAttribute(NameQuery, element, name)
RetrieveAttribute(serverNameQuery, root, serverName)
RetrieveAttribute(threadingModelQuery, root, threadingModelString)
RetrieveAttribute(TypeQuery, node, typeValue)
RetrieveAttribute(ValueQuery, element, value)
RetrieveValue( dllPathQuery, root, dllPath)
RetrieveValue(dllPathQuery, root, dllPath)
RetrieveValue(exePathQuery, root, exePath)
RetrieveValue(instancingQuery, root, instancingString)
RetryRemaining
returnCode
ReturnHr
ReturnNt
ReturnResults
ReturnVal
ReturnValue
RevertInstall
RevertToSelf
rfcommConnection
Rich Text Format
rJfD9?w
RoActivateInstance
RoGetActivationFactory
RoGetRegistrationStoreContext( RegistrationScope_PerUser, m_userToken, registrationStoreFlags, IID_PPV_ARGS(&m_registrationStoreContext))
RoGetRegistrationStoreContext(Windows::Foundation::RegistrationScope_PerUser, nullptr, 0, IID_PPV_ARGS(&registrationStoreContext))
rogId
ROLLBACK /*%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X*/;
RollbackDetailedMessageInfo
RollbackErrorFileInfo
RoOriginateError
RoOriginateErrorW
root.As(&element)
root->get_baseName(&elementName)
root->get_childNodes(&aspects)
root->get_childNodes(&childNodes)
root->get_childNodes(&classChilds)
root->get_childNodes(&classes)
root->get_childNodes(&comInterfaceNodes)
root->get_childNodes(&comServerNodes)
root->get_childNodes(&conversionNodes)
root->get_childNodes(&dataFormats)
root->get_childNodes(&formatsNodes)
root->get_childNodes(&implementedCategories)
root->get_childNodes(&verbs)
root->get_childNodes(&versionNodes)
root->get_firstChild(&node)
root->hasChildNodes(&hasTypeLibElement)
RoTransformError
RpcBindingBind
RpcBindingCreateW
RpcBindingFree
RpcExceptionFilter
RPCRT4.dll
RpcStringFreeW
RSDSWx
RtlAcquireSRWLockExclusive
RtlAcquireSRWLockShared
RtlAddAce
RtlAddProcessTrustLabelAce
RtlAllocateAndInitializeSid
RtlAllocateHeap
RtlAllocateHeap %u
RtlCaptureContext
RtlCaptureStackBackTrace
RtlCompareUnicodeString
RtlConvertSidToUnicodeString
RtlCopySid
RtlCreateAcl
RtlCreateSecurityDescriptor
RtlDeleteCriticalSection
RtlDeleteElementGenericTableAvl
RtlDeriveCapabilitySidsFromName
RtlDetermineDosPathNameType_U
RtlDisownModuleHeapAllocation
RtlDllShutdownInProgress
RtlDosPathNameToNtPathName_U_WithStatus
RtlDowncaseUnicodeString
RtlEnterCriticalSection
RtlEnumerateGenericTableWithoutSplayingAvl
RtlEqualUnicodeString
RtlExpandEnvironmentStrings
RtlExpandEnvironmentStrings_U
RtlFreeHeap
RtlFreeSid
RtlFreeUnicodeString
RtlGetAce
RtlGetDaclSecurityDescriptor
RtlGetDeviceFamilyInfoEnum
RtlInitializeCriticalSection
RtlInitializeGenericTableAvl
RtlInitUnicodeString
RtlInsertElementGenericTableAvl
RtlIsMultiSessionSku
RtlIsMultiUsersInSessionSku
RtlIsStateSeparationEnabled
RtlLeaveCriticalSection
RtlLengthSid
RtlLookupElementGenericTableAvl
RtlLookupFunctionEntry
RtlNotifyFeatureUsage
RtlNtStatusToDosErrorNoTeb
RtlPublishWnfStateData
RtlQueryFeatureConfiguration
RtlRegisterFeatureConfigurationChangeNotification
RtlReleaseSRWLockExclusive
RtlReleaseSRWLockShared
RtlReportException
RtlSetSaclSecurityDescriptor
RtlStringCchCatW %ws size %u
RtlStringCchCatW Family
RtlStringCchCatW PREFIX %u
RtlStringCchCatW PROFILE
RtlStringCchCatW RAC %u
RtlStringCchCopyW
RtlStringCchCopyW %ws size %u
RtlUnregisterFeatureConfigurationChangeNotification
RtlUpcaseUnicodeChar
RtlValidSid
RtlVirtualUnwind
RtlWow64IsWowGuestMachineSupported
RunAs
RunAsSystem
runFullTrust
runningAppsList
RUNTIME_DEH_KEYWORD
RuntimeType
RuntimeVersion
s WAVAWH
S:(ML;;NX;;;LW)
S:PAI
S:PAI(ML;OICI;NW;;;LW)
S-1-15-3-3845273463-1331427702-1186551195-1148109977
S-1-15-3-787448254-1207972858-3558633622-1059886964
S-1-5-80-2586557155-168560303-1373426920-983201488-1499765686
S-1-5-80-2676549577-1911656217-2625096541-4178041876-1366760775
S-1-5-80-410965207-2550896871-1717734767-2321332215-3755966139
Sanity limit reached %ls!
SCCDFreeParsedElements
SCCDParseFile
SCCDValidateAppxFile
SCCDValidateCatalogFile
Schemas
SchemaUsed
Scope
scope->SetHasMachineScope(true)
ScratchOverflow
ScratchOverflowPeak
ScratchSizePeak
ScratchUsed
ScratchUsedPeak
scrfile
scriptletfile
sD8>t
SDDL: %ls
SEARCHINDEXER_EXTENSION_KEYWORD
SearchString
SecondaryTile
SecondaryTileUser
SecondaryTileUser.SecondaryTile->SecondaryTile.rowid
SecondaryTileUserChangelog
Section
SecureSystemAppData
SecureSystemAppDataRetry
securityDescriptor.CopyTo(pDirectorySecurityDescriptor)
securityDescriptorString.Concat(packageDaclString, &securityDescriptorString)
securityDescriptorString.Concat(saclString, &securityDescriptorString)
securityDescriptorString.Initialize(defaultAAAPermissionsBase)
securityDescriptorString.Initialize(permissions)
SELECT _ActivationID, _Revision, ActivationKey, Flags, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, _Dictionary FROM Activation WHERE ActivationKey IS ?;
SELECT _AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary FROM AppExecutionAlias WHERE Alias=? AND Extension=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _AppExecutionAliasID, _Revision, _WorkId, Alias, Extension, Flags, _Dictionary FROM AppExecutionAlias WHERE Alias=? AND Extension=? AND _WorkId=0;
SELECT _AppExecutionAliasUserID, _Revision, User, ApplicationIdentity, Alias, Status, _Dictionary FROM AppExecutionAliasUser WHERE ApplicationIdentity=? AND User=? AND Alias=?;
SELECT _ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary FROM ApplicationContentUriRule WHERE Application=? AND (_WorkId=0 OR _WorkId=?) ORDER BY "Index";
SELECT _ApplicationContentUriRuleID, _Revision, _WorkId, Application, "Index", Uri, Type, WindowsRuntimeAccess, Flags, _Dictionary FROM ApplicationContentUriRule WHERE Application=? AND _WorkId=0 ORDER BY "Index";
SELECT _ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE Application=? AND Category=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationExtensionID, _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE Application=? AND Category=? AND _WorkId=0;
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary FROM Application WHERE (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary FROM Application WHERE _WorkId=0;
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary FROM Application WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary FROM Application WHERE Package=? AND _WorkId=0;
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary FROM Application WHERE Package=? AND PackageRelativeApplicationId=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _ApplicationID, _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary FROM Application WHERE Package=? AND PackageRelativeApplicationId=? AND _WorkId=0;
SELECT _ApplicationIdentityID, _Revision, ApplicationUserModelId, _Dictionary FROM ApplicationIdentity WHERE ApplicationUserModelId=?;
SELECT _ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE Application=? AND Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _ApplicationPropertyID, _Revision, _WorkId, Application, "Index", Name, _Dictionary FROM ApplicationProperty WHERE Application=? AND Name=? AND _WorkId=0;
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE (_WorkId=0 OR _WorkId=?);
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE _WorkId=0;
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND Category=? AND KeyString IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND Category=? AND KeyString IS ? AND _WorkId=0;
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND Package=? AND _WorkId=0;
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND Package=? AND Category=? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND Package=? AND Category=? AND _WorkId=0;
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND Package=? AND Category=? AND KeyString IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND Package=? AND Category=? AND KeyString IS ? AND _WorkId=0;
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND Package=? AND Category=? AND KeyString IS ? AND RegistrationInformation=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _AppxExtensionID, _Revision, _WorkId, User, Package, Category, KeyString, RegistrationInformation, ExtensionStatus, _Dictionary FROM AppxExtension WHERE User=? AND Package=? AND Category=? AND KeyString IS ? AND RegistrationInformation=? AND _WorkId=0;
SELECT _AppxManifestID, _Revision, _WorkId, Package, uncompress(Xml), _Dictionary FROM AppxManifest WHERE Package=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _AppxManifestID, _Revision, _WorkId, Package, uncompress(Xml), _Dictionary FROM AppxManifest WHERE Package=? AND _WorkId=0;
SELECT _DependencyGraphID FROM DependencyGraph WHERE _ShadowId=? AND _WorkId=? AND _WorkId<>0;
SELECT _DependencyGraphID FROM DependencyGraph WHERE DependentPackage=?1 AND DependencyType=?2 AND "User"=?3 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE DependentPackage=?1 AND DependencyType=?2 AND "User"=?3 AND _WorkId=?4)
SELECT _DependencyGraphID FROM DependencyGraph WHERE SupplierPackage=?1 AND "User"=?2 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE SupplierPackage=?1 AND "User"=?2 AND _WorkId=?3)
SELECT _DependencyGraphID, _Revision, _ShadowId FROM DependencyGraph WHERE _ShadowId=? AND _WorkId=? AND _WorkId<>0;
SELECT _DependencyGraphID, _Revision, _ShadowId, _IsMarkedForDeletion FROM DependencyGraph WHERE User=? AND DependentPackage=? AND SupplierPackage=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE _WorkId=?1) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE _WorkId=?1))) AND _IsMarkedForDeletion=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE SupplierPackage=?1 AND _WorkId=?2) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE SupplierPackage=?1 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE SupplierPackage=?1 AND _WorkId=?2))) AND _IsMarkedForDeletion=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependencyType=4 AND SupplierPackage=?2 AND _WorkId=?3) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependencyType=4 AND SupplierPackage=?2 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependencyType=4 AND SupplierPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0 ORDER BY _WorkId DESC;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=?3) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0 ORDER BY "Index";
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _WorkId=?4) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _WorkId=?4))) AND _IsMarkedForDeletion=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=?4) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=?4))) AND _IsMarkedForDeletion=0 ORDER BY _WorkId DESC;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=?3) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE SupplierPackage=?1 AND _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE User=?1 AND DependencyType=4 AND SupplierPackage=?2 AND _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=0 ORDER BY "Index";
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=0;
SELECT _DependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=0;
SELECT _DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary FROM Dependency WHERE DependentPackage=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC, "Index";
SELECT _DependencyID, _Revision, _WorkId, DependentPackage, "Index", DependencyType, Name, Publisher, MinVersion, MaxVersion, Flags, _Dictionary FROM Dependency WHERE DependentPackage=? AND _WorkId=0 ORDER BY "Index";
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE Name=? AND (_WorkId=0 OR _WorkId=?);
SELECT _OptionalBundleID, _Revision, _WorkId, MainBundle, Name, Publisher, Version, Filename, _Dictionary FROM OptionalBundle WHERE Name=? AND _WorkId=0;
SELECT _PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary FROM PackageExtension WHERE Package=? AND Category=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageExtensionID, _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary FROM PackageExtension WHERE Package=? AND Category=? AND _WorkId=0;
SELECT _PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary FROM PackageExternalLocation WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PackageExternalLocationID, _Revision, _WorkId, User, Package, Path, _Dictionary FROM PackageExternalLocation WHERE User=? AND Package=? AND _WorkId=0;
SELECT _PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary FROM PackageFamily WHERE Name=? AND PublisherId=?;
SELECT _PackageFamilyID, _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary FROM PackageFamily WHERE PackageFamilyName=?;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE _PackageID=?
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND ResourceId IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND PackageType & ? !=0 AND ResourceId IS ? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND Architecture=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFamily=? AND ResourceId IS ? AND Architecture=? AND _WorkId=0;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFullName=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PackageID, _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE PackageFullName=? AND _WorkId=0;
SELECT _PackageIdentityID, _Revision, PackageFamily, PackageFullName, _Dictionary FROM PackageIdentity WHERE PackageFullName=?;
SELECT _PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, ProjectionId, _Dictionary FROM PackageLocation WHERE Package=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PackageLocationID, _Revision, _WorkId, Package, Volume, InstalledLocation, MutableLink, MutableLocation, ProjectionId, _Dictionary FROM PackageLocation WHERE Package=? AND _WorkId=0;
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE (_WorkId=0 OR _WorkId=?);
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE _WorkId=0;
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE AppDataVolume=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE AppDataVolume=? AND _WorkId=0;
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE Package=? AND _WorkId=0;
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE User=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE User=? AND _WorkId=0;
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _PackageUserID, _Revision, _WorkId, Package, User, InstallTime, OSVersionWhenInstalled, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary FROM PackageUser WHERE User=? AND Package=? AND _WorkId=0;
SELECT _PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary FROM PublisherCacheFolder WHERE FolderName IS ? AND (_WorkId=0 OR _WorkId=?);
SELECT _PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary FROM PublisherCacheFolder WHERE FolderName IS ? AND _WorkId=0;
SELECT _PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary FROM PublisherCacheFolder WHERE PackageExtension=? AND (_WorkId=0 OR _WorkId=?);
SELECT _PublisherCacheFolderID, _Revision, _WorkId, PackageExtension, "Index", FolderName, _Dictionary FROM PublisherCacheFolder WHERE PackageExtension=? AND _WorkId=0;
SELECT _ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary FROM Resource WHERE Package=? AND (_WorkId=0 OR _WorkId=?) ORDER BY "Index";
SELECT _ResourceID, _Revision, _WorkId, Package, "Index", Language, _Dictionary FROM Resource WHERE Package=? AND _WorkId=0 ORDER BY "Index";
SELECT _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE _ApplicationExtensionID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Application, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, ResourceGroup, Flags, Subsystem, Parameters, CurrentDirectoryPath, Id, _LocalizedDictionary, _Dictionary FROM ApplicationExtension WHERE _ApplicationExtensionID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary FROM Application WHERE _ApplicationID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, "Index", ApplicationType, Flags, Subsystem, PackageRelativeApplicationId, ApplicationUserModelId, DisplayName, Description, Square150x150Logo, Square44x44Logo, Wide310x150Logo, Square310x310Logo, Square71x71Logo, ForegroundText, BackgroundColor, Activation, HostId, Executable, Entrypoint, StartPage, ResourceGroup, LockScreenNotification, LockScreenBadgeLogo, SplashScreenImage, SplashScreenBackgroundColor, InitialRotationPreference, ApplicationViewMinWidth, AppListEntry, EditionId, VisualGroup, Parameters, CurrentDirectoryPath, _Dictionary FROM Application WHERE _ApplicationID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary FROM PackageExtension WHERE _PackageExtensionID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, "Index", Category, Activation, HostId, Executable, Entrypoint, RuntimeType, StartPage, Flags, Parameters, CurrentDirectoryPath, Id, ResourceGroup, _Dictionary FROM PackageExtension WHERE _PackageExtensionID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary FROM TargetDeviceFamily WHERE _TargetDeviceFamilyID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, "Index", Name, MinVersion, MaxVersion, _Dictionary FROM TargetDeviceFamily WHERE _TargetDeviceFamilyID=? AND _WorkId=0;
SELECT _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary FROM Bundle WHERE _BundleID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, Package, UniqueLanguage, UniqueScale, UniqueDXFeatureLevel, _Dictionary FROM Bundle WHERE _BundleID=? AND _WorkId=0;
SELECT _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _Revision, _WorkId, PackageFamily, ResourceId, Architecture, Version, PackageFullName, IsInbox, PackageType, Flags, Flags2, DisplayName, PublisherDisplayName, Description, Logo, OSMinVersion, OSMaxVersionTested, TargetDeviceFamily, Capabilities, SupportedUsers, SignatureOrigin, PackageOrigin, Enterprise, SourceBundle, EditionId, OSVersionWhenIndexed, InPlaceUpdateBaseline, _Dictionary FROM Package WHERE _PackageID=? AND _WorkId=0;
SELECT _Revision, Name, Publisher, PublisherId, PackageFamilyName, PackageSID, _Dictionary FROM PackageFamily WHERE _PackageFamilyID=?;
SELECT _Revision, UserSid, _Dictionary FROM User WHERE _UserID=?;
SELECT _UserID FROM User WHERE UserSid=?;
SELECT _UserID, _Revision, UserSid, _Dictionary FROM User WHERE UserSid=?;
SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE _ShadowId=? AND _WorkId=? AND _WorkId<>0;
SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE SupplierPackage=?1 AND "User"=?2 AND _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE SupplierPackage=?1 AND "User"=?2 AND _WorkId=?3)
SELECT _WowDependencyGraphID, _Revision, _ShadowId FROM WowDependencyGraph WHERE _ShadowId=? AND _WorkId=? AND _WorkId<>0;
SELECT _WowDependencyGraphID, _Revision, _ShadowId, _IsMarkedForDeletion FROM WowDependencyGraph WHERE User=? AND DependentPackage=? AND SupplierPackage=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE (_WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE _WorkId=?1) OR _WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE _WorkId=?1))) AND _IsMarkedForDeletion=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE (_WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE SupplierPackage=?1 AND _WorkId=?2) OR _WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE SupplierPackage=?1 AND _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE SupplierPackage=?1 AND _WorkId=?2))) AND _IsMarkedForDeletion=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE (_WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=?3) OR _WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE (_WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _WorkId=?4) OR _WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _WorkId=?4))) AND _IsMarkedForDeletion=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE (_WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=?4) OR _WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=?4))) AND _IsMarkedForDeletion=0 ORDER BY _WorkId DESC;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE (_WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=?3) OR _WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE _WorkId=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE SupplierPackage IN (SELECT DISTINCT SupplierPackage FROM WowDependencyGraph WHERE User=? AND DependentPackage=? AND DependencyType=?) and _WorkId=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE SupplierPackage=?1 AND _WorkId=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND _WorkId=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND DependencyType & ?3 !=0 AND _WorkId=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=0;
SELECT _WowDependencyGraphID, _Revision, _WorkId, _ShadowId, _IsMarkedForDeletion, User, DependentPackage, "Index", SupplierPackage, DependencyType, _Dictionary FROM WowDependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=0;
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4)  AND (pu._WorkId=0 OR pu._WorkId=?4);
SELECT a._ApplicationID, a._Revision, a._WorkId, a.Package, a."Index", a.ApplicationType, a.Flags, a.Subsystem, a.PackageRelativeApplicationId, a.ApplicationUserModelId, a.DisplayName, a.Description, a.Square150x150Logo, a.Square44x44Logo, a.Wide310x150Logo, a.Square310x310Logo, a.Square71x71Logo, a.ForegroundText, a.BackgroundColor, a.Activation, a.HostId, a.Executable, a.Entrypoint, a.StartPage, a.ResourceGroup, a.LockScreenNotification, a.LockScreenBadgeLogo, a.SplashScreenImage, a.SplashScreenBackgroundColor, a.InitialRotationPreference, a.ApplicationViewMinWidth, a.AppListEntry, a.EditionId, a.VisualGroup, a.Parameters, a.CurrentDirectoryPath, a._Dictionary FROM Application AS a INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND a._WorkId=0 AND p._WorkId=0  AND pu._WorkId=0;
SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ae.Category=?2 AND pu.User=?1 AND a.ApplicationUserModelId=?3 AND (ae._WorkId=0 OR ae._WorkId=?4) AND (a._WorkId=0 OR a._WorkId=?4) AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkId=0 OR pu._WorkId=?4);
SELECT ae._ApplicationExtensionID, ae._Revision, ae._WorkId, ae.Application, ae."Index", ae.Category, ae.Activation, ae.HostId, ae.Executable, ae.Entrypoint, ae.RuntimeType, ae.StartPage, ae.ResourceGroup, ae.Flags, ae.Subsystem, ae.Parameters, ae.CurrentDirectoryPath, ae.Id, ae._LocalizedDictionary, ae._Dictionary FROM ApplicationExtension AS ae INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE ae.Category=?2 AND pu.User=?1 AND a.ApplicationUserModelId=?3 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT aea._AppExecutionAliasID, aea._Revision, aea._WorkId, aea.Alias, aea.Extension, aea.Flags, aea._Dictionary FROM AppExecutionAlias AS aea INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=aea.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID LEFT JOIN ApplicationIdentity AS ai ON ai.ApplicationUserModelId=a.ApplicationUserModelId LEFT JOIN AppExecutionAliasUser AS aeau ON aeau.ApplicationIdentity=ai._ApplicationIdentityID AND aeau.Alias=aea.Alias WHERE aea.Alias=?2 AND pu.User=?1 AND IFNULL(aeau.Status, 0)<>2 AND (aea._WorkId=0 OR aea._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3) ORDER BY IFNULL(aeau.Status, 0), pu.InstallTime;
SELECT aea._AppExecutionAliasID, aea._Revision, aea._WorkId, aea.Alias, aea.Extension, aea.Flags, aea._Dictionary FROM AppExecutionAlias AS aea INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=aea.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID LEFT JOIN ApplicationIdentity AS ai ON ai.ApplicationUserModelId=a.ApplicationUserModelId LEFT JOIN AppExecutionAliasUser AS aeau ON aeau.ApplicationIdentity=ai._ApplicationIdentityID AND aeau.Alias=aea.Alias WHERE aea.Alias=?2 AND pu.User=?1 AND IFNULL(aeau.Status, 0)<>2 AND aea._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0 ORDER BY IFNULL(aeau.Status, 0), pu.InstallTime;
SELECT aea._AppExecutionAliasID, aea._Revision, aea._WorkId, aea.Alias, aea.Extension, aea.Flags, aea._Dictionary FROM AppExecutionAlias AS aea INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=aea.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE aea.Alias=?2 AND pu.User=?1 AND (aea._WorkId=0 OR aea._WorkId=?3) AND (ae._WorkId=0 OR ae._WorkId=?3) AND (a._WorkId=0 OR a._WorkId=?3) AND (p._WorkId=0 OR p._WorkId=?3) AND (pu._WorkId=0 OR pu._WorkId=?3);
SELECT aea._AppExecutionAliasID, aea._Revision, aea._WorkId, aea.Alias, aea.Extension, aea.Flags, aea._Dictionary FROM AppExecutionAlias AS aea INNER JOIN ApplicationExtension AS ae ON ae._ApplicationExtensionID=aea.Extension INNER JOIN Application AS a ON a._ApplicationID=ae.Application INNER JOIN Package AS p ON p._PackageID=a.Package INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE aea.Alias=?2 AND pu.User=?1 AND aea._WorkId=0 AND ae._WorkId=0 AND a._WorkId=0 AND p._WorkId=0 AND pu._WorkId=0;
SELECT COUNT(*) FROM Application WHERE (_WorkId=0 OR _WorkId=?);
SELECT COUNT(*) FROM Application WHERE _WorkId=0;
SELECT COUNT(*) FROM AppxExtension WHERE (_WorkId=0 OR _WorkId=?);
SELECT COUNT(*) FROM AppxExtension WHERE _WorkId=0;
SELECT COUNT(*) FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE _WorkId=?1) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE _WorkId=?1))) AND _IsMarkedForDeletion=0;
SELECT COUNT(*) FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=?3) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0;
SELECT COUNT(*) FROM DependencyGraph WHERE _WorkId=0;
SELECT COUNT(*) FROM DependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=0;
SELECT COUNT(*) FROM Package WHERE (_WorkId=0 OR _WorkId=?);
SELECT COUNT(*) FROM Package WHERE _WorkId=0;
SELECT COUNT(*) FROM PackageUser WHERE (_WorkId=0 OR _WorkId=?);
SELECT COUNT(*) FROM PackageUser WHERE _WorkId=0;
SELECT COUNT(*) FROM PackageUser WHERE Package=? AND (_WorkId=0 OR _WorkId=?);
SELECT COUNT(*) FROM PackageUser WHERE Package=? AND _WorkId=0;
SELECT COUNT(*) FROM WowDependencyGraph WHERE (_WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE _WorkId=?1) OR _WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE _WorkId=?1))) AND _IsMarkedForDeletion=0;
SELECT COUNT(*) FROM WowDependencyGraph WHERE (_WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=?3) OR _WowDependencyGraphID IN (SELECT _WowDependencyGraphID FROM WowDependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0;
SELECT COUNT(*) FROM WowDependencyGraph WHERE _WorkId=0;
SELECT COUNT(*) FROM WowDependencyGraph WHERE User=?1 AND SupplierPackage=?2 AND _WorkId=0;
SELECT COUNT(*), GROUP_CONCAT(pu.rowid) FROM PackageUser AS pu INNER JOIN Package AS p on p._PackageID=pu.Package WHERE p.PackageOrigin=2 AND pu.DeploymentState=6;
SELECT COUNT(*), GROUP_CONCAT(pus.rowid) FROM PackageUserStatus as pus WHERE pus.PackageIdentity NOT IN ( SELECT _PackageIdentityID FROM PackageIdentity AS pi INNER JOIN Package AS p ON pi.PackageFullName=p.PackageFullName);
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppExecutionAlias WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppExecutionAliasUser WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppExecutionAliasUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppExtension WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppExtensionHost WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppInstaller WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppInstallerUri WHERE (AppInstaller>0) AND (AppInstaller NOT IN (SELECT _AppInstallerID FROM AppInstaller));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Application WHERE (Activation>0) AND (Activation NOT IN (SELECT _ActivationID FROM Activation));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Application WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ApplicationBackgroundTask WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ApplicationContentUriRule WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ApplicationExtension WHERE (Activation>0) AND (Activation NOT IN (SELECT _ActivationID FROM Activation));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ApplicationExtension WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ApplicationProperty WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ApplicationUser WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ApplicationUser WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ApplicationUser WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ApplicationUser WHERE (PackageUser>0) AND (PackageUser NOT IN (SELECT _PackageUserID FROM PackageUser));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ApplicationUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppService WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppUriHandler WHERE (AppUriHandlerGroup>0) AND (AppUriHandlerGroup NOT IN (SELECT _AppUriHandlerGroupID FROM AppUriHandlerGroup));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppUriHandler WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppUriHandlerGroup WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppxExtension WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppxExtension WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AppxManifest WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AutoUpdatePackage WHERE (AppInstaller>0) AND (AppInstaller NOT IN (SELECT _AppInstallerID FROM AppInstaller));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM AutoUpdatePackage WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Bundle WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM BundlePackage WHERE (Bundle>0) AND (Bundle NOT IN (SELECT _BundleID FROM Bundle));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM BundleResource WHERE (BundlePackage>0) AND (BundlePackage NOT IN (SELECT _BundlePackageID FROM BundlePackage));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ConnectedSetPackageFamily WHERE (ConnectedSet>0) AND (ConnectedSet NOT IN (SELECT _ConnectedSetID FROM ConnectedSet));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ConnectedSetPackageFamily WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ContentGroup WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ContentGroupFile WHERE (ContentGroup>0) AND (ContentGroup NOT IN (SELECT _ContentGroupID FROM ContentGroup));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ContentGroupFile WHERE (File>0) AND (File NOT IN (SELECT _FileID FROM File));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM CustomInstallWork WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM CustomInstallWork WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM DefaultTile WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Dependency WHERE (DependentPackage>0) AND (DependentPackage NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM DependencyGraph WHERE (DependentPackage>0) AND (DependentPackage NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM DependencyGraph WHERE (SupplierPackage>0) AND (SupplierPackage NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM DependencyGraph WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM DeploymentHistory WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM DeploymentHistory WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM DynamicAppUriHandler WHERE (DynamicAppUriHandlerGroup>0) AND (DynamicAppUriHandlerGroup NOT IN (SELECT _DynamicAppUriHandlerGroupID FROM DynamicAppUriHandlerGroup));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM DynamicAppUriHandlerGroup WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM DynamicAppUriHandlerGroup WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM EndOfLifePackage WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM File WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM FileTypeAssociation WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM HostRuntime WHERE (PackageExtension>0) AND (PackageExtension NOT IN (SELECT _PackageExtensionID FROM PackageExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM MrtApplication WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM MrtDefaultTile WHERE (DefaultTile>0) AND (DefaultTile NOT IN (SELECT _DefaultTileID FROM DefaultTile));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM MrtPackage WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM MrtSharedPri WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM MrtUserPri WHERE (MrtSharedPri>0) AND (MrtSharedPri NOT IN (SELECT _MrtSharedPriID FROM MrtSharedPri));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM MrtUserPri WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM MrtUserPri WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM NamedDependency WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM OptionalBundle WHERE (MainBundle>0) AND (MainBundle NOT IN (SELECT _BundleID FROM Bundle));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM OptionalBundlePackage WHERE (OptionalBundle>0) AND (OptionalBundle NOT IN (SELECT _OptionalBundleID FROM OptionalBundle));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM OptionalBundleResource WHERE (OptionalBundlePackage>0) AND (OptionalBundlePackage NOT IN (SELECT _OptionalBundlePackageID FROM OptionalBundlePackage));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Package WHERE (Enterprise>0) AND (Enterprise NOT IN (SELECT _EnterpriseID FROM Enterprise));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Package WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Package WHERE (SourceBundle>0) AND (SourceBundle NOT IN (SELECT _BundleID FROM Bundle));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Package WHERE (TargetDeviceFamily>0) AND (TargetDeviceFamily NOT IN (SELECT _TargetDeviceFamilyID FROM TargetDeviceFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Package WHERE _PackageID IN (SELECT p_PackageID FROM (SELECT p_PackageID, EXISTS(SELECT 1 FROM BundlePackage AS bp INNER JOIN Package AS p ON bp.Version=p.Version AND bp.Architecture=p.Architecture AND ((bp.ResourceId=p.ResourceId) OR (bp.ResourceId IS NULL AND p.ResourceId IS NULL)) WHERE bp.PackageType=0 AND bp.Bundle=p_SourceBundle AND p.PackageFamily=p_PackageFamily AND bp._WorkId=0 AND p._WorkId=0 LIMIT 1) AS hasPackages FROM (SELECT p._PackageID AS p_PackageID, p.PackageFamily AS p_PackageFamily, p.SourceBundle AS p_SourceBundle FROM Package AS p WHERE p.PackageType & 8 != 0 AND p.SourceBundle <> 0 AND p._WorkId=0)) WHERE hasPackages=0);
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Package WHERE _PackageID NOT IN (SELECT Package FROM PackageUser);
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageAppInstaller WHERE (AppInstaller>0) AND (AppInstaller NOT IN (SELECT _AppInstallerID FROM AppInstaller));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageAppInstaller WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageDependency WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageDependency WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageExtension WHERE (Activation>0) AND (Activation NOT IN (SELECT _ActivationID FROM Activation));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageExtension WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageExternalLocation WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageExternalLocation WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageFamilyPolicy WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageFamilyPolicy WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageFamilyUser WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageFamilyUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageFamilyUserResource WHERE (PackageFamilyUser>0) AND (PackageFamilyUser NOT IN (SELECT _PackageFamilyUserID FROM PackageFamilyUser));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageIdentity WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageLocation WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageMachineStatus WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackagePolicy WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackagePolicy WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageProperty WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageSourceUri WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageSuperceded WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageSuperceded WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageUser WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageUserStatus WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PackageUserStatus WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PrimaryTile WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PrimaryTile WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PrimaryTileUser WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PrimaryTileUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PrimaryTileUserChangelog WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Protocol WHERE (Extension>0) AND (Extension NOT IN (SELECT _ApplicationExtensionID FROM ApplicationExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ProvisionedPackage WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ProvisionedPackageDeleted WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ProvisionedPackageExclude WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM ProvisionedPackageExclude WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM PublisherCacheFolder WHERE (PackageExtension>0) AND (PackageExtension NOT IN (SELECT _PackageExtensionID FROM PackageExtension));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM Resource WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SecondaryTile WHERE SecondaryTile._SecondaryTileID NOT IN (SELECT SecondaryTile FROM SecondaryTileUser);
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SecondaryTileUser WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SecondaryTileUser WHERE (SecondaryTile>0) AND (SecondaryTile NOT IN (SELECT _SecondaryTileID FROM SecondaryTile));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SecondaryTileUser WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SecondaryTileUserChangelog WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SharedPackageContainer WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SharedPackageContainerPackageFamily WHERE (SharedPackageContainer>0) AND (SharedPackageContainer NOT IN (SELECT _SharedPackageContainerID FROM SharedPackageContainer));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRHistory WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRHistory WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournal WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournal WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournal WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournal WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournal WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournal WHERE (PackageUser>0) AND (PackageUser NOT IN (SELECT _PackageUserID FROM PackageUser));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournal WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournalArchive WHERE (Application>0) AND (Application NOT IN (SELECT _ApplicationID FROM Application));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournalArchive WHERE (ApplicationIdentity>0) AND (ApplicationIdentity NOT IN (SELECT _ApplicationIdentityID FROM ApplicationIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournalArchive WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournalArchive WHERE (PackageFamily>0) AND (PackageFamily NOT IN (SELECT _PackageFamilyID FROM PackageFamily));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournalArchive WHERE (PackageIdentity>0) AND (PackageIdentity NOT IN (SELECT _PackageIdentityID FROM PackageIdentity));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournalArchive WHERE (PackageUser>0) AND (PackageUser NOT IN (SELECT _PackageUserID FROM PackageUser));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM SRJournalArchive WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM TargetDeviceFamily WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM WowDependencyGraph WHERE (DependentPackage>0) AND (DependentPackage NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM WowDependencyGraph WHERE (SupplierPackage>0) AND (SupplierPackage NOT IN (SELECT _PackageID FROM Package));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM WowDependencyGraph WHERE (User>0) AND (User NOT IN (SELECT _UserID FROM User));
SELECT COUNT(*), GROUP_CONCAT(rowid) FROM XboxPackage WHERE (Package>0) AND (Package NOT IN (SELECT _PackageID FROM Package));
SELECT DISTINCT DependentPackage FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE SupplierPackage=?1 AND DependencyType=?2 AND _WorkId=?3) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE SupplierPackage=?1 AND DependencyType=?2 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE SupplierPackage=?1 AND DependencyType=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0;
SELECT DISTINCT DependentPackage FROM DependencyGraph WHERE SupplierPackage=?1 AND DependencyType=?2 AND _WorkId=0;
SELECT DISTINCT SupplierPackage FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE DependentPackage=?1 AND DependencyType=?2 AND _WorkId=?3) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE DependentPackage=?1 AND DependencyType=?2 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE DependentPackage=?1 AND DependencyType=?2 AND _WorkId=?3))) AND _IsMarkedForDeletion=0;
SELECT DISTINCT SupplierPackage FROM DependencyGraph WHERE DependentPackage=?1 AND DependencyType=?2 AND _WorkId=0;
SELECT EXISTS(SELECT 1 FROM AppxManifest WHERE _AppxManifestID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM AppxManifest WHERE _AppxManifestID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE (_DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=?4) OR _DependencyGraphID IN (SELECT _DependencyGraphID FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=?4))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE _DependencyGraphID=?1 AND (_WorkId=?2 OR (_WorkId=0 AND _DependencyGraphID NOT IN (SELECT _ShadowId FROM DependencyGraph WHERE _WorkId=?2))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE _DependencyGraphID=?1 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM DependencyGraph WHERE User=?1 AND DependentPackage=?2 AND SupplierPackage=?3 AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageLocation WHERE _PackageLocationID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageLocation WHERE _PackageLocationID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE _PackageUserID=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE _PackageUserID=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE User=? AND Package=? AND (_WorkId=0 OR _WorkId=?) LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE User=? AND Package=? AND _WorkId=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUser WHERE User=? AND Package=? AND _WorkId=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM PackageUserStatus AS pus INNER JOIN User AS u ON u._UserID=pus.User INNER JOIN PackageIdentity AS pi ON pi._PackageIdentityID=pus.PackageIdentity WHERE u.UserSid=? AND pi.PackageFullName=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM User WHERE UserSid=? LIMIT 1);
SELECT EXISTS(SELECT 1 FROM WowDependencyGraph WHERE _WowDependencyGraphID=?1 AND (_WorkId=?2 OR (_WorkId=0 AND _WowDependencyGraphID NOT IN (SELECT _ShadowId FROM WowDependencyGraph WHERE _WorkId=?2))) AND _IsMarkedForDeletion=0 LIMIT 1);
SELECT EXISTS(SELECT 1 FROM WowDependencyGraph WHERE _WowDependencyGraphID=?1 AND _WorkId=0 LIMIT 1);
SELECT Flags, Subsystem, HostId, Executable, Entrypoint, StartPage, ResourceGroup FROM Application WHERE _ApplicationID=? AND (_WorkId=0 OR _WorkId=?) ORDER BY _WorkId DESC;
SELECT Flags, Subsystem, HostId, Executable, Entrypoint, StartPage, ResourceGroup FROM Application WHERE _ApplicationID=? AND _WorkId=0;
SELECT hr._HostRuntimeID, hr._Revision, hr._WorkId, hr.HostId, hr.PackageExtension, hr._Dictionary FROM HostRuntime AS hr INNER JOIN PackageExtension AS pe ON pe._PackageExtensionID=hr.PackageExtension INNER JOIN DependencyGraph AS dg ON dg.SupplierPackage=pe.Package WHERE dg.User=?1 AND hr.HostId=?2 AND dg.DependencyType=0x8 AND dg.DependentPackage IN (SELECT _PackageID FROM Package WHERE PackageFullName=?3 AND (_WorkId=0 OR _WorkId=?4)) AND (hr._WorkId=0 OR hr._WorkId=?4) AND (pe._WorkId=0 OR pe._WorkId=?4) AND (dg._WorkId=0 OR dg._WorkId=?4);
SELECT hr._HostRuntimeID, hr._Revision, hr._WorkId, hr.HostId, hr.PackageExtension, hr._Dictionary FROM HostRuntime AS hr INNER JOIN PackageExtension AS pe ON pe._PackageExtensionID=hr.PackageExtension INNER JOIN DependencyGraph AS dg ON dg.SupplierPackage=pe.Package WHERE dg.User=?1 AND hr.HostId=?2 AND dg.DependencyType=0x8 AND dg.DependentPackage IN (SELECT _PackageID FROM Package WHERE PackageFullName=?3 AND _WorkId=0) AND hr._WorkId=0 AND pe._WorkId=0 AND dg._WorkId=0;
SELECT LastValue FROM Sequence WHERE Id=?;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND (p._WorkId=0 OR p._WorkId=?4)  AND (pu._WorkId=0 OR pu._WorkId=?4);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE pf.PackageFamilyName=?2 AND p.PackageType & ?3 !=0 AND pu.User=?1 AND p._WorkId=0  AND pu._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE p.PackageFamily=?1 AND p.PackageType & ?2 !=0 AND (p._WorkId=0 OR p._WorkId=?3)  ORDER BY pf.Name, pf.PublisherId, p.ResourceId, p.Version;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE p.PackageFamily=?1 AND p.PackageType & ?2 !=0 AND p._WorkId=0  ORDER BY pf.Name, pf.PublisherId, p.ResourceId, p.Version;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.Name=?1 AND (p._WorkId=0 OR p._WorkId=?2);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.Name=?1 AND p._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND p.PackageType & ?2 !=0 AND (p._WorkId=0 OR p._WorkId=?3);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PackageFamilyName=?1 AND p.PackageType & ?2 !=0 AND p._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PublisherId=?1 AND (p._WorkId=0 OR p._WorkId=?3);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE pf.PublisherId=?1 AND p._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageLocation AS pl ON pl.Package=p._PackageID WHERE pl.InstalledLocation=?1 AND (p._WorkId=0 OR p._WorkId=?2) AND (pl._WorkId=0 OR pl._WorkId=?2);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageLocation AS pl ON pl.Package=p._PackageID WHERE pl.InstalledLocation=?1 AND p._WorkId=0 AND pl._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageLocation AS pl ON pl.Package=p._PackageID WHERE pl.Volume=?1 AND (p._WorkId=0 OR p._WorkId=?2) AND (pl._WorkId=0 OR pl._WorkId=?2);
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageLocation AS pl ON pl.Package=p._PackageID WHERE pl.Volume=?1 AND p._WorkId=0 AND pl._WorkId=0;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User INNER JOIN Application AS a ON a.Package=p._PackageID INNER JOIN ApplicationExtension AS ae ON ae.Application=a._ApplicationID INNER JOIN AppExecutionAlias AS aea ON aea.Extension=ae._ApplicationExtensionID LEFT JOIN ApplicationIdentity AS ai ON ai.ApplicationUserModelId=a.ApplicationUserModelId LEFT JOIN AppExecutionAliasUser AS aeau ON aeau.ApplicationIdentity=ai._ApplicationIdentityID AND aeau.Alias=aea.Alias WHERE u.UserSid=?1 AND aea.Alias=?2 AND p.PackageFullName<>?3 AND IFNULL(aeau.Status, 0)<>2 AND (p._WorkId=0 OR p._WorkId=?4) AND (pu._WorkID=0 OR pu._WorkId=?4) AND (a._WorkID=0 OR a._WorkId=?4) AND (ae._WorkID=0 OR ae._WorkId=?4) AND (aea._WorkID=0 OR aea._WorkId=?4) ORDER BY IFNULL(aeau.Status, 0) DESC, pu.InstallTime;
SELECT p._PackageID, p._Revision, p._WorkId, p.PackageFamily, p.ResourceId, p.Architecture, p.Version, p.PackageFullName, p.IsInbox, p.PackageType, p.Flags, p.Flags2, p.DisplayName, p.PublisherDisplayName, p.Description, p.Logo, p.OSMinVersion, p.OSMaxVersionTested, p.TargetDeviceFamily, p.Capabilities, p.SupportedUsers, p.SignatureOrigin, p.PackageOrigin, p.Enterprise, p.SourceBundle, p.EditionId, p.OSVersionWhenIndexed, p.InPlaceUpdateBaseline, p._Dictionary FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID INNER JOIN User AS u ON u._UserID=pu.User INNER JOIN Application AS a ON a.Package=p._PackageID INNER JOIN ApplicationExtension AS ae ON ae.Application=a._ApplicationID INNER JOIN AppExecutionAlias AS aea ON aea.Extension=ae._ApplicationExtensionID LEFT JOIN ApplicationIdentity AS ai ON ai.ApplicationUserModelId=a.ApplicationUserModelId LEFT JOIN AppExecutionAliasUser AS aeau ON aeau.ApplicationIdentity=ai._ApplicationIdentityID AND aeau.Alias=aea.Alias WHERE u.UserSid=?1 AND aea.Alias=?2 AND p.PackageFullName<>?3 AND IFNULL(aeau.Status, 0)<>2 AND p._WorkId=0 AND pu._WorkID=0 AND a._WorkID=0 AND ae._WorkID=0 AND aea._WorkId=0 ORDER BY IFNULL(aeau.Status, 0) DESC, pu.InstallTime;
SELECT p._PackageID, pf.PackageFamilyName FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE p.PackageOrigin=?1 AND (p._WorkId=0 OR p._WorkId=?2);
SELECT p._PackageID, pf.PackageFamilyName FROM Package AS p INNER JOIN PackageFamily AS pf ON pf._PackageFamilyID=p.PackageFamily WHERE p.PackageOrigin=?1 AND p._WorkId=0;
SELECT PackageOrigin FROM Package WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?);
SELECT PackageOrigin FROM Package WHERE _PackageID=? AND _WorkId=0;
SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Package AS p ON p._PackageID=pel.Package WHERE pel.User=?1 AND p.PackageFullName=?2 AND pel._WorkId=?3 AND (p._WorkId=0 OR p._WorkId=?3) UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Package AS p ON p._PackageID=pel.Package WHERE pel.User=?1 AND p.PackageFullName=?2 AND pel._WorkId=0 AND (p._WorkId=0 OR p._WorkId=?3) UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Package AS p ON p._PackageID=pel.Package WHERE pel.User=0 AND p.PackageFullName=?2 AND pel._WorkId=?3 AND (p._WorkId=0 OR p._WorkId=?3) UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Package AS p ON p._PackageID=pel.Package WHERE pel.User=0 AND p.PackageFullName=?2 AND pel._WorkId=0 AND (p._WorkId=0 OR p._WorkId=?3) UNION ALL SELECT IFNULL(pl.MutableLink, pl.InstalledLocation) FROM PackageLocation AS pl INNER JOIN Package AS p ON p._PackageID=pl.Package WHERE p.PackageFullName=?2 AND pl._WorkId=?3 AND (p._WorkId=0 OR p._WorkId=?3) UNION ALL SELECT IFNULL(pl.MutableLink, pl.InstalledLocation) FROM PackageLocation AS pl INNER JOIN Package AS p ON p._PackageID=pl.Package WHERE p.PackageFullName=?2 AND pl._WorkId=0 AND (p._WorkId=0 OR p._WorkId=?3) LIMIT 1;
SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Package AS p ON p._PackageID=pel.Package WHERE pel.User=?1 AND p.PackageFullName=?2 AND pel._WorkId=0 AND p._WorkId=0 UNION ALL SELECT Path FROM PackageExternalLocation AS pel INNER JOIN Package AS p ON p._PackageID=pel.Package WHERE pel.User=0 AND p.PackageFullName=?2 AND pel._WorkId=0 AND p._WorkId=0 UNION ALL SELECT IFNULL(pl.MutableLink, pl.InstalledLocation) FROM PackageLocation AS pl INNER JOIN Package AS p ON p._PackageID=pl.Package WHERE p.PackageFullName=?2 AND pl._WorkId=0 AND p._WorkId=0 LIMIT 1;
SELECT Path FROM PackageExternalLocation WHERE User=?1 AND Package=?2 AND _WorkId=?3 UNION ALL SELECT Path FROM PackageExternalLocation WHERE User=?1 AND Package=?2 AND _WorkId=0 UNION ALL SELECT Path FROM PackageExternalLocation WHERE User=0 AND Package=?2 AND _WorkId=?3 UNION ALL SELECT Path FROM PackageExternalLocation WHERE User=0 AND Package=?2 AND _WorkId=0 UNION ALL SELECT IFNULL(MutableLink, InstalledLocation) FROM PackageLocation WHERE Package=?2 AND _WorkId=?3 UNION ALL SELECT IFNULL(MutableLink, InstalledLocation) FROM PackageLocation WHERE Package=?2 AND _WorkId=0 LIMIT 1;
SELECT Path FROM PackageExternalLocation WHERE User=?1 AND Package=?2 AND _WorkId=0 UNION ALL SELECT Path FROM PackageExternalLocation WHERE User=0 AND Package=?2 AND _WorkId=0 UNION ALL SELECT IFNULL(MutableLink, InstalledLocation) FROM PackageLocation WHERE Package=?2 AND _WorkId=0 LIMIT 1;
SELECT pus.Status FROM PackageUserStatus AS pus INNER JOIN User AS u ON u._UserID=pus.User INNER JOIN PackageIdentity AS pi ON pi._PackageIdentityID=pus.PackageIdentity WHERE u.UserSid=? AND pi.PackageFullName=?;
SELECT SupportedUsers FROM Package WHERE PackageFullName=? AND (_WorkId=0 OR _WorkId=?);
SELECT SupportedUsers FROM Package WHERE PackageFullName=? AND _WorkId=0;
SELECT UserSid FROM User AS u WHERE u._UserID IN (SELECT ptu.User FROM PrimaryTileUser AS ptu WHERE _WorkId=?1 UNION ALL SELECT stu.User FROM SecondaryTileUser AS stu WHERE _WorkId=?1 LIMIT 1) LIMIT 1;
SELECT UserSid FROM User AS u WHERE u._UserID IN (SELECT ptuc.User FROM PrimaryTileUserChangelog AS ptuc WHERE _WorkId=?1 UNION ALL SELECT stuc.User FROM SecondaryTileUserChangelog AS stuc WHERE _WorkId=?1 LIMIT 1) LIMIT 1;
SelectionFlags
selectSingleNode
self::*[@Category='windows.appointmentDataProvider' and @Executable='wwahost.exe']
self::*[@Category='windows.appService' and @Executable='wwahost.exe']
self::*[@Category='windows.backgroundTasks' and @Executable='wwahost.exe']
self::*[@Category='windows.barcodeScannerProvider' and @Executable='wwahost.exe']
self::*[@Category='windows.contactDataProvider' and @Executable='wwahost.exe']
self::*[@Category='windows.emailDataProvider' and @Executable='wwahost.exe']
self::*[@Category='windows.posPaymentConnector' and @Executable='wwahost.exe']
self::*[@Category='windows.userDataTaskDataProvider' and @Executable='wwahost.exe']
SeRestorePrivilege
server
SERVER_EXTENSION_KEYWORD
server->CreateClassRegistration(id, &exeClass)
server->CreateClassRegistration(id, &serviceClass)
server->CreateClassRegistration(id, &surrogateClass)
server->put_ExplicitPsmActivationType(PsmActNotBackground)
server->put_IsPackageRelativePath(isPackageRelativePath)
server->put_RuntimeBehavior(runtimeBehavior)
server->put_TrustLevel(trustLevel)
ServerCore
ServerExecutable
Server-Gui-Shell
ServerName
serverName.Concat(strServerIndex, &fullServerName)
serverName.Initialize( isWwaBackgroundAudioTask ? BackgroundPlaybackClassConstants::wwaBackgroundPlaybackServerName : BackgroundPlaybackClassConstants::outOfProcessBackgroundPlaybackServerName)
serverName.Initialize(DownloadUploadClassConstants::DownloadUploadServers[index].outOfProcessServerName)
serverName.Initialize(DownloadUploadClassConstants::vpnPluginOutOfProcessServerName)
serverName.Initialize(server->get_ServerName())
serverPath.Initialize(exeServerPath.GetChars())
serverReg->SetApplicationDisplayName(applicationDisplayName.Get())
serverReg->SetApplicationId(applicationId.Get())
serverReg->SetDisplayName(displayName.Get())
serverReg->SetLaunchAndActivationPermission(launchAndActivationPermission.Get())
serverRegistration
serviceClass.query_to(&classReg)
serviceClass.query_to(&outofprocClass)
serviceClass.query_to(&registryCompatibility)
serviceClass.query_to(&scope)
ServiceIdleTimeout
ServiceName
ServiceParameters
ServiceServer
serviceServer.query_to(&registryCompatibility)
serviceServer.query_to(&scope)
serviceServer.query_to(&server)
serviceServer->SetArguments(arguments.get())
serviceServer->SetServiceName(serviceName.get())
ServiceStatus
ServiceWaitHintInterval
Session:%d!clsid:%s
sessionId
SessionId
SessionKey
SeTakeOwnershipPrivilege
SetApplicationManifestLanguages
SetCalculatedRegistrationProperties(incomingPackage)
SetCentennialMetadataForFolder %ws %ws
SetDataProtectionLevel
SetDataProtectionLevel %ws.
SetDefault: Association=%ls, ProgId=%ls
SetDefault-Info: Association=%ls, ProgId=%ls, U=%ls, T=%02d:%02d:%02d:%02d:%02d:%02d, H=%ls
SetDefault-Mismatch: Association=%ls, ProgId=%ls, U=%ls, T1=%02d:%02d:%02d:%02d:%02d:%02d, T2=%02d:%02d:%02d:%02d:%02d:%02d
SetDefault-Modern: Association=%ls, ProgId=%ls
SetDeploymentError
SetDesktopAppXMetadataForFolder
SetEntriesInAclW
SetEvent
SetExtensionProperty
SetFileAttributesW
SetFileInformationByHandle
SetFolderDataProtectionLevelIfNeeded %ls.
SetFolderDataProtectionLevelIfNeeded %u %ls.
SetFolderDataProtectionToLevel %ls level %u %u.
SetForUser %ws %u
SetInprocClassDllProperties(inprocClassDllRegistration.get(), dllPaths)
SetLastError
SetNamedSecurityInfo %ls %u
SetNamedSecurityInfoW
SetPackageFullName
SetPackageFullName %ls
SetPackageStatusModifiedReason
SetProtocolProperty
SetPublisherFolders
SetPublisherFolders %ls
SetRegistrationProperty
SetRegistrationProperty( _properties.ExecutionPackageFamily, executionPackageFamily)
SetRegistrationProperty( _properties.LaunchAndActivationPermission, launchAndActivationPermission)
SetRegistrationProperty(_appId, appId)
SetRegistrationProperty(_applicationDisplayName, applicationName)
SetRegistrationProperty(_displayName, displayName)
SetRegistrationProperty(_exeServerArguments, arguments)
SetRegistrationProperty(_exeServerPath, path)
SetRegistrationProperty(_properties.ApplicationDisplayName, applicationDisplayName)
SetRegistrationProperty(_properties.ApplicationId, applicationId)
SetRegistrationProperty(_properties.Arguments, arguments)
SetRegistrationProperty(_properties.AsynchronousInterface, asynchronousInterface)
SetRegistrationProperty(_properties.AutoConvertTo, autoConvertTo)
SetRegistrationProperty(_properties.CLSID, clsid)
SetRegistrationProperty(_properties.CurrentVersion, currentVersion)
SetRegistrationProperty(_properties.DataFormats, _dataFormats.Get())
SetRegistrationProperty(_properties.DisplayName, displayName)
SetRegistrationProperty(_properties.DllPath, path)
SetRegistrationProperty(_properties.DllPath_arm, path)
SetRegistrationProperty(_properties.DllPath_arm64, path)
SetRegistrationProperty(_properties.DllPath_x64, path)
SetRegistrationProperty(_properties.DllPath_x86, path)
SetRegistrationProperty(_properties.Executable, executable)
SetRegistrationProperty(_properties.ExplicitPsmActivationType, explicitPsmActivationType)
SetRegistrationProperty(_properties.Flags, flags)
SetRegistrationProperty(_properties.HasMachineScope, (hasMachineScope != FALSE))
SetRegistrationProperty(_properties.HelpDirectory, helpDirectory)
SetRegistrationProperty(_properties.HostRuntimeId, hostRuntimeId.Get())
SetRegistrationProperty(_properties.InprocHandlerDllPath_arm, path)
SetRegistrationProperty(_properties.InprocHandlerDllPath_arm64, path)
SetRegistrationProperty(_properties.InprocHandlerDllPath_x64, path)
SetRegistrationProperty(_properties.InprocHandlerDllPath_x86, path)
SetRegistrationProperty(_properties.InprocServerDllPath_arm, path)
SetRegistrationProperty(_properties.InprocServerDllPath_arm64, path)
SetRegistrationProperty(_properties.InprocServerDllPath_x64, path)
SetRegistrationProperty(_properties.InprocServerDllPath_x86, path)
SetRegistrationProperty(_properties.IsPackageRelativePath, isPackageRelativePath)
SetRegistrationProperty(_properties.IsSystemExecutable, isSystemExecutable != FALSE)
SetRegistrationProperty(_properties.LocaleId, localeId)
SetRegistrationProperty(_properties.Permissions, securityDescriptorString.Get())
SetRegistrationProperty(_properties.ProxyStubCLSID, proxyStubClsid)
SetRegistrationProperty(_properties.RuntimeBehavior, runtimeBehavior)
SetRegistrationProperty(_properties.ServerId, serverId)
SetRegistrationProperty(_properties.ServiceName, serviceName)
SetRegistrationProperty(_properties.SurrogateAppId, appId)
SetRegistrationProperty(_properties.SynchronousInterface, synchronousInterface)
SetRegistrationProperty(_properties.SystemExecutableArchitecture, architecture)
SetRegistrationProperty(_properties.TrustLevel, trustLevel)
SetRegistrationProperty(_properties.TypeLibId, typeLibId)
SetRegistrationProperty(_properties.TypeLibVersionNumber, typeLibVersionNumber)
SetRegistrationProperty(_properties.Win32Path, win32Path)
SetRegistrationProperty(_properties.Win64Path, win64Path)
SetRegistrationProperty(property.Value, value)
SetRegistrationProperty(registration->IsPackageRelativePath, isPackageRelativePath)
SetRegistrationPropertyAllowMultipleIfConsistent
SetRegistrationPropertyAllowMultipleIfConsistent( _properties.ConversionReadWritable, readWritable)
SetRegistrationPropertyAllowMultipleIfConsistent( _properties.InprocHandlerHasMachineScope, true)
SetRegistrationPropertyAllowMultipleIfConsistent( _properties.InprocServerHasMachineScope, true)
SetRegistrationPropertyAllowMultipleIfConsistent( _properties.OutofprocClassHasMachineScope, true)
SetRegistrationPropertyAllowMultipleIfConsistent( _properties.VersionIndependentProgId, versionIndependentProgId)
SetRegistrationPropertyAllowMultipleIfConsistent(_properties.AutoConvertTo, autoConvertTo)
SetRegistrationPropertyAllowMultipleIfConsistent(_properties.ConversionReadable, readable)
SetRegistrationPropertyAllowMultipleIfConsistent(_properties.DefaultFormatName, defaultFormatName)
SetRegistrationPropertyAllowMultipleIfConsistent(_properties.DefaultIcon, defaultIcon)
SetRegistrationPropertyAllowMultipleIfConsistent(_properties.DisplayName, displayName)
SetRegistrationPropertyAllowMultipleIfConsistent(_properties.InsertableObject, true)
SetRegistrationPropertyAllowMultipleIfConsistent(_properties.MiscStatusDefault, miscStatusDefault)
SetRegistrationPropertyAllowMultipleIfConsistent(_properties.ProgId, progId)
SetRegistrationPropertyAllowMultipleIfConsistent(_properties.ShortDisplayName, shortDisplayName)
SetRegistrationPropertyAllowMultipleIfConsistent(_properties.Threading, static_cast<ThreadingModel>(threadingModel))
SetRegistrationPropertyAllowMultipleIfConsistent(_properties.ToolboxBitmap32, toolboxBitmap32)
SetSecurityAccessMask
SetSecurityDescriptorControl
SetSecurityDescriptorDacl
SetSecurityDescriptorGroup
SetSecurityDescriptorOwner
SetSecurityInfo
SetSecurityInfo %ls
SetStateSchema
SetThreadpoolTimer
SetThreadToken
Setting %ls %ls %u
SettingName
settingName is empty
Settings
SettingsApp_cw5n1h2txyewy
SettingsFolder
SettingSyncEnabled
SettingValue
SetUnhandledExceptionFilter
SetupPhase
SetValue %ls
SetValueFromString %ls
SetValueFromString %ls %ls
SetValueFromString %u %ws
SHA256
shareAccess
Shared
Shared merged file still in use
SharedMergedResourcesPriFileName
SharedPackageContainer
SharedPackageContainerPackageFamily
sharedUsageName.Initialize(AAP_SERVER_REGISTRATION_SHAREDUSAGE_PROPERTYNAME)
sharedUsageValue.Initialize(AAP_SERVER_REGISTRATION_SHAREDUSAGE_PROPERTYVALUE)
shbfile
SHChangeNotify
shcmdfile
SHCORE.dll
SHCreateMemStream
Shell
Shell IDList Array
shellExperience
ShellRefresh
SHGetKnownFolderPath
ShortDisplayName
ShouldValidateSignature
showAppointmentDetails
showTimeFrame
SHSetValueW
shsfile
SigCheck
sigcheckPassed
SignatureOrigin
SimilarPackageFullName
singleInstance
SisPath
sixHours
Size %u publisherRoot %ls
SizeInPages
SizeKB
SizeTAdd(commandLineLength, 1, &commandLineLength)
SizeTAdd(commandLineLength, 2, &commandLineLength)
SizeTAdd(commandLineLength, wcslen(arguments), &commandLineLength)
SizeTToDWord(rawSize, &size)
SizeTToUInt32(actualLength, &reportedLength)
Sleep
SleepConditionVariableCS
SmallLogo
Software\
Software\Classes
SOFTWARE\Classes
Software\Classes\Local Settings
Software\Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppModel
Software\Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppModel\Deployment
Software\Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppModel\Repository
Software\Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppModel\Repository\Packages
Software\Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppModel\Repository\Packages\
SOFTWARE\Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\Appmodel\ShellRefresh
Software\Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppModel\SystemAppData\
Software\Microsoft\LanguageOverlay
SOFTWARE\Microsoft\SecurityManager
Software\Microsoft\SystemCertificates
Software\Microsoft\UserData\UninstallTimes
Software\Microsoft\Windows NT\CurrentVersion\BackgroundModel\PreInstallTasks\RequireReschedule
SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\wwahost.exe
Software\Microsoft\Windows NT\CurrentVersion\ProfileList
SOFTWARE\Microsoft\Windows NT\CurrentVersion\Server\ServerLevels
Software\Microsoft\Windows\CurrentVersion\App Paths
Software\Microsoft\Windows\CurrentVersion\Appmodel
Software\Microsoft\Windows\CurrentVersion\AppModel\StateChange
SOFTWARE\Microsoft\Windows\CurrentVersion\AppModel\StateRepository
SOFTWARE\Microsoft\Windows\CurrentVersion\AppModel\StateRepositoryStatus
Software\Microsoft\Windows\CurrentVersion\AppModel\SystemAppData\
Software\Microsoft\Windows\CurrentVersion\Appx
SOFTWARE\Microsoft\Windows\CurrentVersion\Appx
Software\Microsoft\Windows\CurrentVersion\Appx\AppxAllUserStore
Software\Microsoft\Windows\CurrentVersion\Appx\ByteCodeQueue
Software\Microsoft\Windows\CurrentVersion\Appx\PackageVolumes
Software\Microsoft\Windows\CurrentVersion\Appx\PurgeList
Software\Microsoft\Windows\CurrentVersion\Authentication\LogonUI\Notifications\BackgroundCapability
Software\Microsoft\Windows\CurrentVersion\Explorer\AppContract
Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\%s
Software\Microsoft\Windows\CurrentVersion\Explorer\KindMap\
Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders
Software\Microsoft\Windows\CurrentVersion\Mrt
SOFTWARE\Microsoft\Windows\CurrentVersion\PushNotifications\Applications
Software\Microsoft\Windows\Shell\Associations\UrlAssociations
Software\Microsoft\Windows\Shell\Associations\UrlAssociations\%s
SOFTWARE\Microsoft\WindowsSelfHost\Applicability
Software\Policies\Microsoft\Windows\Appx
SonicWALL.MobileConnect_cw5n1h2txyewy
Source Path
SourceBundle
SourceFilePath
SourceFolderPath
SourceMediaID
SourcePath
spIterable->First(&spIterator)
spIterator->get_Current(spItem.GetAddressOf())
spIterator->get_Current(spKeyValuePair.GetAddressOf())
spIterator->get_HasCurrent(&bHasCurrent)
spIterator->MoveNext(&bHasCurrent)
spKeyValuePair->get_Value(&spExtensionRegistration)
SplashScreen
spPackagedComRegistration->PendingWriteRegistration( packageMoniker.Get(), incomingPackage, resourcesManager, spRegistrationStore.Get())
spRegistration
spRegistration.As(&spPackagedComRegistration)
spRegistrationStore->CreateComPackageInstallOrderEntry( maxInstallOrderMoniker.Get(), IsUserRegister(), m_maxInstallOrderProperties)
spRegistrationStore->CreateComPackageInstallOrderEntry( packageMoniker.Get(), IsUserRegister(), m_incomingPackageProperties)
spRegistrationStore->RemoveComPackageInstallOrderEntry( packageMoniker.Get(), IsUserRegister(), deploymentOperation)
SQLite.AutoIndexWarning
sqlite3_bind_blob
sqlite3_bind_int
sqlite3_bind_int64
sqlite3_bind_null
sqlite3_bind_text16
sqlite3_busy_timeout
sqlite3_changes
sqlite3_clear_bindings
sqlite3_close
sqlite3_column_blob
sqlite3_column_bytes
sqlite3_column_int
sqlite3_column_int64
sqlite3_column_text
sqlite3_column_text16
sqlite3_column_type
sqlite3_config
sqlite3_create_function_v2
sqlite3_db_config
sqlite3_db_filename
sqlite3_db_handle
sqlite3_db_status
sqlite3_errcode
sqlite3_errmsg
sqlite3_exec
sqlite3_expanded_sql
sqlite3_extended_errcode
sqlite3_extended_result_codes
sqlite3_file_control
sqlite3_finalize
sqlite3_free
sqlite3_get_autocommit
sqlite3_last_insert_rowid
sqlite3_log
sqlite3_malloc
sqlite3_next_stmt
sqlite3_open_v2
sqlite3_prepare_v2
sqlite3_profile
sqlite3_reset
sqlite3_result_blob
sqlite3_result_error_code
sqlite3_result_error_nomem
sqlite3_result_error16
sqlite3_result_int
sqlite3_result_int64
sqlite3_result_text16
sqlite3_snprintf
sqlite3_sql
sqlite3_status
sqlite3_step
sqlite3_stmt_busy
sqlite3_total_changes
sqlite3_trace
sqlite3_user_data
sqlite3_value_blob
sqlite3_value_bytes
sqlite3_value_int
sqlite3_value_int64
sqlite3_value_text
sqlite3_value_text16
sqlite3_value_type
sqlite3_wal_autocheckpoint
sqlite3_wal_checkpoint_v2
sqlite3_wal_checkpoint_v2(): Mode:%d EffectiveMode:%d Size:%d Pages:%d
Square150x150Logo
Square30x30Logo
Square44x44Logo
SRD1t
SRDictionaryToPropertySet
SRHistory
SRJournal
SRJournalArchive
sroptions
StageForInPlace
Staging
StandardFormat
StartAndWaitForServiceForUser
StartPage
startswith
StartsWith(*string*,prefix) error: Invalid type (%d)
StartsWith(string,*prefix*) error: Invalid type (%d)
Startup
startup
State
STATE_DEH_KEYWORD
STATE_LEFT_FROM_LAST_UNINSTALL
StateCreation
StateLock
StatementCache.Count
StatementCache.Hits
StatementCache.Lifespan
StatementCache.Misses
StatementCount
StatementPtr
StatementUsed
StatePaths
StateRepository.Core.dll
StateRepository.Database.Statistics
StateRepository.DatabaseCache.Statistics
StateRepository.FailFastBusySnapshot
StateRepository.FailFastBusySnapshot.BusyCount
StateRepository.FailFastBusySnapshot.DatabasePtr
StateRepository.FailFastBusySnapshot.FirstBusySQL
StateRepository.FailFastBusySnapshot.Statement#%u.ExpandedSQL
StateRepository.FailFastBusySnapshot.Statement#%u.Ptr
StateRepository.FailFastBusySnapshot.Statement#%u.SQL
StateRepository.FailFastBusySnapshot.StatementCount
StateRepository.FailFastBusySnapshot.StatementInProgress
StateRepository.log
StateRepository.ResourcePriority.Inadequate
StateRepositoryStatus
StateRoot
StateSchema
static_cast< InProcessActivatableClassRegistration_Impl* >(classInterface.Get())-> PendingWriteToStore(packageMoniker, registrationStoreContext)
static_cast<ExeServerRegistration_Impl*>(exeServer)->AddActivatableClass(activatableClassId)
static_cast<ExeServerRegistration_Impl*>(serverInterface.Get())-> PendingWriteToStore(incomingPackage, registrationStoreContext)
StatusToClear
statusToClear
StatusToClear
StatusToSet
statusToSet
StatusToSet
std::exception: %hs
StorageId
StorageItems
StoreName
strAppUserModelId.Initialize(appUserModelId)
strAppUserModelId.Initialize(appUserModelId.get())
strcmp
stream end
stream error
StreamingDataSourcePrefetchCanceled
String
string
String
string too long
string.Set(value)
String1
String2
String3
StringCchCat
StringCchCat %ws
StringCchCat APPDATA
StringCchCat APPDATA_LOCAL
StringCchCat LOCAL
StringCchCopy
StringCchCopy(collectedCharacters + collectedCharaterOffset, collectedCharacterCount - collectedCharaterOffset, sourceCharacters)
StringCchCopyN %zu root %ls
StringCchCopyN %zu systemStateRoot %ls
StringCchCopyW(s, length + 1, from)
StringCchLength %ls
StringCchLengthW(from, STRSAFE_MAX_CCH, &length)
StringCchPrintf
StringCchPrintf %ls %u
StringCchPrintf %ls %zu
StringCchPrintf %ls size %u
StringCchPrintf %u
StringCchPrintf %u %ws
StringCchPrintf %u root %ws
StringCchPrintf %u staging %ws
StringCchPrintf %ws
StringCchPrintf LOCAL %u
StringCchPrintf LOCALCACHE %u
StringCchPrintf ROAMING %u
StringCchPrintf TEMP %u
StringCchPrintf( xpath.get(), cchxpath, Internal::PackagedComConstants::interfaceFormat, interfaceToBeVerified.GetRawBuffer(nullptr), formatHelper, interfaceId.GetRawBuffer(nullptr), proxyStub.GetRawBuffer(nullptr))
StringCchPrintf( xpath.get(), cchxpath, Internal::PackagedComConstants::progIdWithClsidAndIdFormat, classId.GetRawBuffer(nullptr), classProgId)
StringCchPrintf( xpath.get(), cchxpath, Internal::PackagedComConstants::progIdWithIdFormat, ::WindowsGetStringRawBuffer(currentVersion, nullptr))
StringCchPrintf( xpath.get(), cchxpath, Internal::PackagedComConstants::progIdWithIdFormat, ::WindowsGetStringRawBuffer(versionIndependentProgId, nullptr))
StringCchPrintf( xpath.get(), cchxpath, Internal::PackagedComConstants::typeLibWithVersionNumberFormat, typeLibId.GetRawBuffer(nullptr), versionNumber)
StringCchPrintf(capabilitiesKeyPath, ARRAYSIZE(capabilitiesKeyPath), L"%s\\%s\\%s", userSidString.get(), BTC_REGKEY, package->GetPackageSidString())
StringCchPrintf(capabilitiesKeyPath, ARRAYSIZE(capabilitiesKeyPath), L"%s\\%s\\%s\\%s", userSidString.get(), BTC_REGKEY, package->GetPackageSidString(), DownloadUploadClassConstants::vpnPluginbackgroundTaskClassId)
StringCchPrintf(classXPath.get(), cchClassXPath, Internal::PackagedComConstants::classWithIdFormat, clsid)
StringCchPrintf(commandLine.get(), commandLineLength + 1, L"\"%ls\" %ls", executableAbsolutePath, arguments)
StringCchPrintf(commandLine.get(), commandLineLength + 1, L"\"%ls\"", executableAbsolutePath)
StringCchPrintf(inProcessHandlerClassXPath.get(), cchInProcessHandlerClassXPath, Internal::PackagedComConstants::inProcessHandlerClassWithIdFormat, clsid)
StringCchPrintf(inProcessServerClassXPath.get(), cchInProcessServerClassXPath, Internal::PackagedComConstants::inProcessServerClassWithIdFormat, clsid)
StringCchPrintf(m_string, ARRAYSIZE(m_string), L"%u", value)
StringCchPrintf(m_string, ARRAYSIZE(m_string), L"%x", value)
StringCchPrintf(managedInProcessServerClassXPath.get(), cchManagedInProcessServerClassXPath, Internal::PackagedComConstants::managedInProcessServerClassWithIdFormat, clsid)
StringCchPrintf(outofprocClassXPath.get(), cchOutofprocClassXPath, Internal::PackagedComConstants::outofprocClassWithIdFormat, clsid)
StringCchPrintf(serverIndexBuffer, length, L".%d", serverIndex)
StringCchPrintf(szSDDL, cchSDDL, SDDL_APPLIST_REGKEYS_FORMAT, pszUserSid, pszUserSid, SID_AUDIO_SERVICE, SID_BLUETOOTH_SUPPORT_SERVICE, SID_TIMEBROKER_SERVICE)
StringCchPrintf(treatAsClassXPath.get(), cchTreatAsClassXPath, Internal::PackagedComConstants::treatAsClassWithIdFormat, clsid)
StringCchPrintf(xpath.get(), cchxpath, Internal::PackagedComConstants::proxyStubWithIdFormat, proxyStubClsid)
StringCchPrintfW(key, cchKey, L"%s %I64d %s %s", userSidString.GetChars(), package, category, keyString)
StringCchPrintfW(packageDacl, length, comDACLFormat, packageSidString.GetChars())
StringFileInfo
StringFromCLSID
StringFromCLSID(clsid, &tempClsid)
StringFromCLSID(iid, &tempIid)
StringFromGUID2
StringFromGUID2(guid, m_string, ARRAYSIZE(m_string)) != ARRAYSIZE(m_string)
StringHasEmbeddedNull(value)
strings->get_Size(&valuesCount)
StripExtendedPathPrefixIfNecessary %ls
strPackageMoniker.Initialize(packageToParse->GetPackageMoniker())
strServerIndex.Initialize(serverIndexBuffer)
strValidatedCLSID.Initialize(tempClsid.get())
strValidatedIid.Initialize(tempIid.get())
SubDir %ls
SubDir %ls user %ls
SubDir %ls user %ls package %ls publisher %ls
Subkey %ls
Subkey %ls path %ls
SubmitActivatableClass(package, strServerIndex, fullServerName, DownloadUploadClassConstants::DownloadUploadServers[index].classes[classIndex].taskEntryPoint, DownloadUploadClassConstants::DownloadUploadServers[index].classes[classIndex].taskClassId)
SubmitActivatableClassRegistration(package, serverName, backgroundTaskEntryPoint, fullBackgroundTaskClassId)
SubmitActivatableClassRegistration(package, serverName, taskEntryPoint, fullTaskClassId)
SubmitBackgroundTasksExtension(package, fullTaskClassId)
SubmitBackgroundVpnPluginTasksExtension(package, fullBackgroundTaskClassId)
SubmitClassEntryPointRegistration(activatableClass, activatableClassEntryPoint)
SubmitClassEntryPointRegistration(activatableClass, entryPoint)
SubmitExeServerRegistration(package, isWwaBackgroundAudioTask)
SubmitOutOfProcessActivatableClassRegistration(package, pwszEntryPoint, isWwaBackgroundAudioTask)
SubmitVpnPluginActivatableClass(package, vpnPluginManifest, strServerIndex, fullServerName)
Subsystem
Summary
SummaryError
SupplierPackage
SupportedDataFormats
SupportedFileTypes
SupportedUsers
SupportsMultipleInstances
SupportsRemoteSystems
surrogateClass.query_to(&classReg)
surrogateClass.query_to(&outofprocClass)
surrogateClass.query_to(&registryCompatibility)
surrogateClass.query_to(&scope)
surrogateClass->SetPath(path.get())
surrogateClass->SetThreadingModel(threadingModel)
SurrogateServer
surrogateServer.query_to(&registryCompatibility)
surrogateServer.query_to(&scope)
surrogateServer.query_to(&server)
surrogateServer->SetAppId(appId)
surrogateServer->SetCustomSurrogateExecutable(customSurrogateExecutable.get(), FALSE)
surrogateServer->SetCustomSurrogateExecutable(systemSurrogateExecutable.get(), TRUE)
surrogateServer->SetCustomSurrogateSystemExecutableArchitecture( calculatedClassArchitecture)
SUVWATAUAVAWH
SUVWAVH
SUWAVAWH
SVWATAUAVAWH
SVWAVAWH
SVWAVH
synchronous
SynchronousInterface
sysfile
SYSTEM\CurrentControlSet\Control\Print\PSA\ExtensionAumids\
SystemAppData
systemDirectoryLength == 0
systemEvent
systemRegistrar
SystemSurrogate
SystemTimeToFileTime
SystemVolume
szSDDL
t D9Q
t"fA94$t
t$ D+
t$ E3
T$ E3
t$ E3
T$ E3
t$ E3
T$ E3
t$ E3
T$ E3
t$ E3
T$ E3
t$ E3
t$ H;
T$ H9
t$ UAVAWH
t$ UH
t$ UWATAUAVH
t$ UWATAUAWH
t$ UWATAVAWH
t$ UWAVH
t$ UWAWH
t$ WATAUAVAWH
t$ WAVAWH
t$ WH
T$@E3
t$@fH
t$@H#
t$@H+
T$@L;
T$`!\$`
T$`E3
T$`H9|$hu
t$`M;
t$0E3
T$0E3
t$0H;
T$0L+
t$0M+
t$8E3
t$8fH
t$8H;
t$8Hc
t$8Lc
t$d@8t$bt
T$DD!\$pD!]
T$DD!l$XA
T$dfD
t$fD9I
t$HD9d$0t`I
T$hE3
t$hE3
T$HE3
T$HH9|$X
T$pE3
T$PH;
T$PH+
t$PH9}8t^H
T$PL;
t$XE3
t$xH;s
T$XI;
t$XL9u
t%E90t M
t%f9_
t(@85
t)f9s
t,D8=
t,D8m
t.D9Y u
t:fA9(t4H
t;f9_
t@H;J
t[f9+tV
t\D8A
t]E8}
t^HcE
t+=D{
t+fA91t%L
t<Lc@
t=D93t8L
t0f9s
t1D8m
t2fD9Q
t2H;n
t3f9s
t49T$0u.H
t4D92t/H
t4E88t/H
t4f9_
t5f9s
t6D9J
t7fA99t1M
t89L$0u
t8H;_
t9fD9I
tA9^Ht<H
tAfD9+t.I;
tAfD92t;M
Target path %ls not found.
TargetDeviceFamily
TargetFilePath
TargetFileSize
TargetPackageFullName
targetPackageFullNameForRepair
TargetPlatform
TargetPlatformEnumMap
taskClassId.Concat(serverIndex, &fullTaskClassId)
taskClassId.Initialize(classId)
TaskEntryPoint
TASKH$
taskItems->get_item(idxTask, &taskItemNode)
tBf9_
tc@8sNt
tcL9f
t-D8m
tdh.dll
TdhEnumerateProviderFieldInformation
TdhFormatProperty
TdhGetEventInformation
TdhGetEventMapInformation
TEMP 
TEMP$
TEMP(
TEMP,
temp.Concat(arguments, &commandLine)
temp.Concat(quote, &temp)
temp.Concat(space, &temp)
TEMP.xml
TEMP@
TEMP\
temp_store
TEMP`
TEMP|
TEMP<
TEMP0
TEMP4
TEMP8
tempApplicationDisplayName.Set( displayNameBuffer.GetChars(), displayNameBuffer.GetLength())
tempApplicationId.Set( idBuffer.GetChars(), idBuffer.GetLength())
TEMPD
TEMPd
TEMPD
TEMPH
TEMPh
TEMPH
TEMPh
TEMPH
TEMPh
TEMPH
TEMPh
TEMPH
TEMPh
TEMPH
TEMPL
TEMPl
TEMPL
TEMPP
TEMPp
TEMPP
TEMPp
tempRelativePath.Set(buffer.GetChars(), buffer.GetLength())
TEMPT
TEMPt
TEMPT
TEMPt
TEMPT
TEMPt
TEMPT
TEMPt
TEMPX
TEMPx
TerminateProcess
text()
t-f9_
tG9)u
tH9_ t.
This should never occur
this->Add(key, value)
this->values.Add(newPair)
this->values.At(index)->SetValue(value)
threadId
ThreadingModel
Thumbnail
TileStore
timer
TitleId
tJD9u
tJf9+tEH
TlgAggregateSummary
TlsAlloc
TlsGetValue
TlsSetValue
tM9|$8tGH
token
too many length or distance symbols
ToolBoxBitmap32
ToolboxBitmap32
toolboxBitmapValue->Append(path.Get())
toolboxBitmapValue->Append(resourceId.Get())
Tools::GetLocalizedStringAttributeValueStringFromElement( _sourcePackage, node, attribute, &buffer, &attributeFound)
Tools::GetLocalizedStringAttributeValueStringFromQuery( _sourcePackage, Internal::PackagedComConstants::applicationVisualElementsChildXPath, applicationElement.Get(), Internal::PackagedComConstants::displayNameAttribute, &displayNameBuffer, &displayNameAttributeFound)
Tools::IsPackageDesktopWin8X(package, packageIsWin8X)
Tools::IsPackageDesktopWin8X(this->_sourcePackage, packageIsWin8X)
topic
TotalEntriesFlushed
Trace
TraceMessage
TransactionCallerID
TranslateMessage
Translation
TreatAs
treatAs.query_to(&registryCompatibility)
treatAs.query_to(&scope)
treatAs->SetAutoConvertTo(autoConvertToGuid)
treatAs->SetDisplayName(displayName.get())
treatAs->SetTreatAsWithSupportedArchitectures(treatAsGuid, supportedArchitectures)
TreatAsClass
treatAsClassXPath
treatAsList->Insert(currentTreatAsValue.Get(), nullptr, &replaced)
TreeResetNamedSecurityInfoW
TRUNCATE
TRUST_DEH_KEYWORD
TrustFlags
TryAcquireSRWLockExclusive
TryGetArchitectureOfSurrogateClass(classElement.get(), &calculatedClassArchitecture)
TryGetVisibility %ws publisher %ws threshold %u count %u
Trying to copy shared PRI to user specific PRI
Trying to DPL-protect encrypted %ls?
Trying to merge to user-specific merged PRI file
Trying to move shared PRI to user specific PRI
ttA9u0t9A
TTBLL`
ttffile
twelveHours
tXH;s
TypeLib
typeLib.query_to(&registryCompatibility)
typeLib.query_to(&scope)
typeLib->SetDisplayName(displayName.get())
typeLib->SetFlags(flags)
typeLib->SetHelpDirectory(helpDirectory.get())
typeLib->SetLocaleId(locale)
typeLib->SetWin32Path(path.get())
typeLib->SetWin64Path(path.get())
TypeOverlay
tZf97tUH
u!D9J
u"9Egu
u%I!C
u&D8x
u(H!GHH
u/H;q
U^='Y
u`H9;u
u`H9u
u{H9A
u~f;i
u+fD9Q
u=@8qMt7@8qNu1H
u7D9e
u8@:u@t
u8D95
u8D9J
U8H!}
U8u.H
u9L9e@u7H
uap4:SupportsMultipleInstances
uap7:Name
uap8:AllowOverride
UATAUAVAWH
UATAUH
UATAVH
UAVAWH
u'D9J
UInt32Add(collectedCharacterCount, lengthIncludingNullTerminator, &collectedCharacterCount)
UInt32Add(collectedCharaterOffset, sourceLength + 1, &collectedCharaterOffset)
UInt32Add(lengthWithoutTerminator, 1, &lengthIncludingTerminator)
Uint32HexString::Uint32HexString
UInt32Mult(lengthIncludingTerminator, sizeof(WCHAR), &byteCountIncludingTerminator)
Uint32String::Uint32String
UInt32Value
uLD9#uJH
UMgrEnumerateSessionUsers
UMgrFreeSessionUsers
UMgrQueryUserContext
UMgrQueryUserToken
Unable to delete file - added to purge list
Unable to link shared merged PRI file to user-specific path
Unable to revert protection level %u applied after a failed updated
Unable to stage pending writes to activation catalog.
uncompress
UncompressedSizeKB
Unexpected: optional package %ws has %llu main packages and is in a related set
UnhandledExceptionFilter
UniformResourceLocatorW
UniqueKey
unknown
unknown compression method
Unknown error
Unknown exception
Unknown File
Unknown RuntimeBehavior
Unknown SQLite datatype %d
Unknown TrustLevel
UnmapViewOfFile
unordered_map/set too long
UnregisteredForProfileRoaming
UnregisterStateChangeNotification
UnregisterStateChangeNotification %ls %u
UnregisterStateLock
UnregisterTraceGuids
up@8~
UPDATE %s SET _Created=changeid_next_value() WHERE _Created=-2 AND _WorkId=?;
UPDATE %s SET _Deleted=changeid_next_value() WHERE _WorkId=?;
UPDATE %s SET _Modified=changeid_next_value() WHERE _Modified=-2 AND _WorkId=?;
UPDATE %s SET _WorkId=0 WHERE _WorkId=? AND _WorkId<>0;
UPDATE %s SET _WorkId=0, _ShadowId=0 WHERE _WorkId=? AND _WorkId<>0;
UPDATE ApplicationExtension SET Activation=? WHERE _ApplicationExtensionID=? AND _WorkId=?;
UPDATE AppxManifest SET _Revision=?, _WorkId=?, Package=?, Xml=compress(?), _Dictionary=? WHERE _AppxManifestID=? AND _Revision=? AND (_WorkId=0 OR _WorkId=?);
UPDATE AppxManifest SET _Revision=?, _WorkId=?, Package=?, Xml=compress(?), _Dictionary=? WHERE _AppxManifestID=? AND _Revision=? AND _WorkId=0;
UPDATE DependencyGraph SET _IsMarkedForDeletion=0 WHERE _DependencyGraphID=? AND _WorkId=? AND _WorkId<>0 AND _IsMarkedForDeletion<>0 AND _ShadowId<>0;
UPDATE DependencyGraph SET _IsMarkedForDeletion=1 WHERE _DependencyGraphID=? AND _IsMarkedForDeletion=0 AND _WorkId=?;
UPDATE DependencyGraph SET _Revision=?1, _WorkId=?2, _ShadowId=?3, _IsMarkedForDeletion=?4, User=?5, DependentPackage=?6, "Index"=?7, SupplierPackage=?8, DependencyType=?9, _Dictionary=?10 WHERE (_DependencyGraphID=?11 AND _Revision=?12) AND _IsMarkedForDeletion=0 AND _WorkId=?13;
UPDATE DependencyGraph SET DependentPackage=? WHERE DependentPackage=? AND DependencyType=? AND "User"=? AND _WorkId=?;
UPDATE DependencyGraph SET SupplierPackage=? WHERE SupplierPackage=? AND "User"=? AND _WorkId=?;
UPDATE Package SET Flags=Flags&~0x400 WHERE (PackageType & 0x29!=0) AND _PackageID IN (SELECT _PackageID FROM PACKAGE WHERE PackageFamily IN (SELECT PackageFamily FROM Package WHERE (PackageType & 0x29!=0) AND _PackageID IN (SELECT Package FROM PackageUser WHERE _WorkId=?1 AND DeploymentState!=6 AND DeploymentState!=5)) AND _WorkId=0);
UPDATE Package SET Flags=Flags&~0x400 WHERE (PackageType&0x29!= 0) AND PackageFamily=? AND _WorkId=0;
UPDATE Package SET SourceBundle=? WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?);
UPDATE Package SET TargetDeviceFamily=? WHERE _PackageID=? AND (_WorkId=0 OR _WorkId=?);
UPDATE PackageLocation SET _Revision=?, _WorkId=?, Package=?, Volume=?, InstalledLocation=?, MutableLink=?, MutableLocation=?, ProjectionId=?, _Dictionary=? WHERE _PackageLocationID=? AND _Revision=? AND (_WorkId=0 OR _WorkId=?);
UPDATE PackageLocation SET _Revision=?, _WorkId=?, Package=?, Volume=?, InstalledLocation=?, MutableLink=?, MutableLocation=?, ProjectionId=?, _Dictionary=? WHERE _PackageLocationID=? AND _Revision=? AND _WorkId=0;
UPDATE PackageUser SET _Revision=?, _WorkId=?, Package=?, User=?, InstallTime=?, OSVersionWhenInstalled=?, WhenRestored=?, IsExplicitlyInstalled=?, DeploymentState=?, AppDataVolume=?, _Dictionary=? WHERE _PackageUserID=? AND _Revision=? AND (_WorkId=0 OR _WorkId=?);
UPDATE PackageUser SET _Revision=?, _WorkId=?, Package=?, User=?, InstallTime=?, OSVersionWhenInstalled=?, WhenRestored=?, IsExplicitlyInstalled=?, DeploymentState=?, AppDataVolume=?, _Dictionary=? WHERE _PackageUserID=? AND _Revision=? AND _WorkId=0;
UPDATE PackageUser SET DeploymentState=1 WHERE DeploymentState=6 AND Package IN (     SELECT _PackageID FROM Package      WHERE PackageOrigin =2);
UPDATE PackageUserStatus SET Status=?3 WHERE PackageIdentity IN (SELECT _PackageIdentityID FROM PackageIdentity WHERE PackageFullName=?2) AND User IN (SELECT _UserID FROM User WHERE UserSid=?1);
UPDATE Sequence SET LastValue=? WHERE Id=?;
UPDATE WowDependencyGraph SET _IsMarkedForDeletion=0 WHERE _WowDependencyGraphID=? AND _WorkId=? AND _WorkId<>0 AND _IsMarkedForDeletion<>0 AND _ShadowId<>0;
UPDATE WowDependencyGraph SET _IsMarkedForDeletion=1 WHERE _WowDependencyGraphID=? AND _IsMarkedForDeletion=0 AND _WorkId=?;
UPDATE WowDependencyGraph SET _Revision=?1, _WorkId=?2, _ShadowId=?3, _IsMarkedForDeletion=?4, User=?5, DependentPackage=?6, "Index"=?7, SupplierPackage=?8, DependencyType=?9, _Dictionary=?10 WHERE (_WowDependencyGraphID=?11 AND _Revision=?12) AND _IsMarkedForDeletion=0 AND _WorkId=?13;
UPDATE WowDependencyGraph SET SupplierPackage=? WHERE SupplierPackage=? AND "User"=? AND _WorkId=?;
UPDATE_MIGRATION_TASK_DEH_KEYWORD
UpdateActions
UpdatePackageStatus
UpdateStateLocations %u
UpdateStateLocations %u %ws %ws
UpdateStatistics
UpstreamDependentPackageFullName
UpstreamDependentPackageKey
uRH9K
urIc>3
UriTemplate
URL Protocol
Usage
useHalf
useLess
useMinimum
useMore
User %ls 0x%0x
User Choice set via Windows User Experience {D18B6DD5-6124-4341-9318-804003BAFA0B}
UserChoice
USERDATAACCESS_EXTENSION_KEYWORD
UserDataAvailability
UserDatabaseStatisticsLastUpdated
UserDataPlatformHelperUtil.dll
UserDataServiceOneCore\Server
UserDataSvc
UserDomain
USERENV.dll
UserName
USERS\
USERS\%s
USERS\%s\%s
UserSID
UserSid
userSid
UserSid
userSid
UserSid
userSid
UserSid
UseSystemMetadataPath
UseUniversalMarshaler
uSH;O
uSH9K
USVWATAUAVAWH
USVWATAUAVH
USVWATAVAWH
USVWAVAWH
USVWAVH
USWATAUAVAWH
USWAVH
UTF-8
UuidCreate
UuidFromString(const_cast<RPC_WSTR>(strCLSID.GetRawBuffer(nullptr)), &clsid)
UuidFromString(const_cast<RPC_WSTR>(strIid.GetRawBuffer(nullptr)), &iid)
UuidFromStringW
UuidToStringW
uvI!S
UVWATAUAVAWH
UVWATAVH
UVWATAWH
UVWAVAWH
UWATAUAVH
UWATAVAWH
UWATH
UWAUAVAWH
UWAVH
UWAWH
v I;^
v,L;J
v>H;K
v4H;y
VailProxy
valid
ValidateActivatableClassRegistrationWithDesktopApplicationPathAttribute(activatableClass)
Value
value != existingValue
Value %ls
valueFound
ValueName
ValueValue
VarFileInfo
variant
variantKind
vbefile
vBH;K
vbsfile
vb'vb'v
vector too long
Vector<HSTRING>::Make(&_dataFormats)
Vector<HSTRING>::Make(&conversionValues)
Vector<HSTRING>::Make(&dataFormatValues)
Vector<HSTRING>::Make(&defaultIconValues)
Vector<HSTRING>::Make(&toolboxBitmapValue)
Vector<HSTRING>::Make(&verbValues)
verb != existingVerb
verbKeyValuePair->get_Key(&verbId)
verbKeyValuePair->get_Value(&verbInspectable)
Verbose
verbPropertyValue->GetString(&verb)
Verbs
verbs->get_item(nodeIndex, &node)
verbs->get_length(&listLength)
verbValues->Append(appendMenuFlag.Get())
verbValues->Append(displayName.Get())
verbValues->Append(oleVerbFlag.Get())
VerifyClassProgId(root, progId.GetRawBuffer(nullptr))
VerifyIfAppDataFolderAlreadyExists %u
VerifyIfSecureSystemAppDataFolderAlreadyExists
VerifyIfStateChangeNotificationExists
VerifyIfStateLockExists %u
VerifyIfStateRootsAlreadyExist %u
VerifyIfSystemAppDataFolderAlreadyExists %u
VerifyIfSystemAppDataKeyAlreadyExists
VerifyInterface(root, false )
VerifyInterface(root, true )
VerifyInterfaceTypeLib(typeLib.get(), wil::str_raw_ptr(versionNumber))
VerifyPackageFullName
VerifyTreatAsChain(initialTreatAsElement.get(), nullptr , terminalClassElement)
VerifyTreatAsChain(root, &terminalClsid)
VerifyVersionIndependentProgId( root, versionIndependentProgId.Get())
VerifyVersionIndependentProgIdHelper( progId.Get(), currentVersion.Get(), classId.Get(), versionIndependentProgId)
Version
version->get_childNodes(&winNodes)
VersionIndependentProgId
VersionIndependentProgID
versionNode.query_to(&winElement)
versionNodes->get_item(nodeIndex, &node)
versionNodes->get_length(&listLength)
VersionNumber
versionNumberString.Set(versionNumber)
VetoReason
vFH;V
videosLibrary
vIH;O
Virtualization
VISUALELEMENTS_EXTENSION_KEYWORD
VMAP$
VMAP,
VMAP|
VMAP<
VMAP4
VMAPD
VMAPL
VolumeID
VolumeKey
VolumeMediaID
VolumeMountPoint
VolumeName
vpnClient
VpnClientPluginInstall
VpnClientPluginInstall( vpnPluginManifest->backgroundTaskAcid, package->GetPackageMoniker(), package->GetVisibleUser() )
VpnClientPluginManifestFind
VpnClientPluginUninstall
VQonecore\admin\appmodel\packagerepository\staterepository\repository.cpp
VR4/]
VS_VERSION_INFO
vVH;{
VWATAUAWH
VWATAVAWH
VWAUAVAWH
VWAVH
VWAWH
vXJ9<
W H;S
W H+W
w(twI
W`H+WXH
W2a')
W3^+`x
WaitForRequestsInUseTimeout
WaitForSingleObject
WaitForSingleObjectEx
WaitForThreadpoolTimerCallbacks
waitResult
WakeAllConditionVariable
WalkDirectoryTree %ls %u
WalkDirectoryTree %ls %u %u
WalkDirectoryTree %ls path %ls %u
Warning
WATAUAVAWH
WATAVH
WAVAWH
WCOSAdapterApp.App
wcschr
wcscmp
wcsrchr
wcsstr
WEB_ACCOUNT_PROVIDER_DEH_KEYWORD
WebAccountProvider extension does not support multiple applciations per package.
webcam
WebLink
WerRegisterCustomMetadata
WEVT_TEMPLATE
whileUnlocked
WideCharToMultiByte
wil::err_failfast_policy::HResult
wil::make_hstring_from_buffer_nothrow(wistd::move(multiStringBuffer), GetAddressOf())
wil::make_hstring_from_buffer_nothrow(wistd::move(stringBuffer), result)
wil::make_unique_string_nothrow
wilActivity
WilError_03
wilResult
WilStaging_02
win:Error
win:Info
win:Informational
win:ResponseTime
win:Start
win:Stop
win:Verbose
win:Warning
win32
win32App
Win32Path
win64
Win64Path
windowManagementSystem
windows
windows.
windows.activatableClass
windows.activatableClass.backgroundPlaybackClass
windows.activatableClass.collector
windows.activatableClass.downloadUpload
windows.activatableClass.inProcessServer
windows.activatableClass.outOfProcessServer
windows.activatableClass.proxyStub
windows.appExecutionAlias
windows.appExtension
windows.appExtensionHost
Windows.ApplicationModel.Core.DefaultInProcBackgroundTask
windows.applyDataExtension
windows.appointmentDataProvider
Windows.AppointmentDataProvider
windows.appointmentsProvider
Windows.AppointmentsProvider.AddAppointment
Windows.AppointmentsProvider.RemoveAppointment
Windows.AppointmentsProvider.ReplaceAppointment
Windows.AppointmentsProvider.ShowAppointmentDetails
Windows.AppointmentsProvider.ShowTimeFrame
windows.appService
Windows.AppService
windows.appService
windows.appUriHandler
Windows.AppUriHandler
windows.appUriHandler
windows.autoPlayHandler
windows.backgroundTasks
Windows.BackgroundTasks
Windows.BarcodeScannerPreviewProvider
windows.barcodeScannerPreviewProvider
Windows.BarcodeScannerProvider
windows.barcodeScannerProvider
Windows.CachedFileUpdater
windows.cachedFileUpdater
windows.capability
windows.certificates
windows.cloudFiles
windows.comInterface
Windows.CommandLineLaunch
Windows.ComponentUI
windows.comServer
windows.contactDataProvider
Windows.ContactDataProvider
windows.DefaultBackgroundTasks
windows.devicesflow_cw5n1h2txyewy
Windows.DialProtocol
windows.dialProtocol
Windows.DockingController_cw5n1h2txyewy
Windows.EmailDataProvider
windows.emailDataProvider
Windows.File
Windows.FileOpenPicker
windows.fileOpenPicker
Windows.FileSavePicker
windows.fileSavePicker
windows.fileTypeAssociation
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Guid, OSIntegration.DEH.ComInterfaceRegistration>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Guid, OSIntegration.DEH.ComProxyStubRegistration>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Guid, OSIntegration.DEH.ComTreatAsClassRegistration>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Guid, OSIntegration.DEH.Internal.ComClassRegistrationCombinedProperties>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<OSIntegration.DEH.Internal.ContractIdActivatableClassIdPair, Object>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Object>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, OSIntegration.DEH.ComProgIdRegistration>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, OSIntegration.DEH.ComTypeLibRegistration>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.IDllServerActivatableClassRegistration>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.IExeServerActivatableClassRegistration>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.IExeServerRegistration>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<UInt32, OSIntegration.DEH.IComServerRegistration>>
Windows.Foundation.Collections.IIterator`1<OSIntegration.DEH.Internal.FileOperationInfo>
Windows.Foundation.Collections.IIterator`1<String>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<Guid, OSIntegration.DEH.ComInterfaceRegistration>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<Guid, OSIntegration.DEH.ComProxyStubRegistration>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<Guid, OSIntegration.DEH.ComTreatAsClassRegistration>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<Guid, OSIntegration.DEH.Internal.ComClassRegistrationCombinedProperties>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<OSIntegration.DEH.Internal.ContractIdActivatableClassIdPair, Object>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Object>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, OSIntegration.DEH.ComProgIdRegistration>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, OSIntegration.DEH.ComTypeLibRegistration>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.IDllServerActivatableClassRegistration>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.IExeServerActivatableClassRegistration>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.IExeServerRegistration>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<UInt32, OSIntegration.DEH.IComServerRegistration>>
Windows.Foundation.Collections.IKeyValuePair`2<Guid, OSIntegration.DEH.ComInterfaceRegistration>
Windows.Foundation.Collections.IKeyValuePair`2<Guid, OSIntegration.DEH.ComProxyStubRegistration>
Windows.Foundation.Collections.IKeyValuePair`2<Guid, OSIntegration.DEH.ComTreatAsClassRegistration>
Windows.Foundation.Collections.IKeyValuePair`2<Guid, OSIntegration.DEH.Internal.ComClassRegistrationCombinedProperties>
Windows.Foundation.Collections.IKeyValuePair`2<OSIntegration.DEH.Internal.ContractIdActivatableClassIdPair, Object>
Windows.Foundation.Collections.IKeyValuePair`2<String, Object>
Windows.Foundation.Collections.IKeyValuePair`2<String, OSIntegration.DEH.ComProgIdRegistration>
Windows.Foundation.Collections.IKeyValuePair`2<String, OSIntegration.DEH.ComTypeLibRegistration>
Windows.Foundation.Collections.IKeyValuePair`2<String, String>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.IDllServerActivatableClassRegistration>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.IExeServerActivatableClassRegistration>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.IExeServerRegistration>
Windows.Foundation.Collections.IKeyValuePair`2<UInt32, OSIntegration.DEH.IComServerRegistration>
Windows.Foundation.Collections.IMap`2<Guid, OSIntegration.DEH.ComInterfaceRegistration>
Windows.Foundation.Collections.IMap`2<Guid, OSIntegration.DEH.ComProxyStubRegistration>
Windows.Foundation.Collections.IMap`2<Guid, OSIntegration.DEH.ComTreatAsClassRegistration>
Windows.Foundation.Collections.IMap`2<Guid, OSIntegration.DEH.Internal.ComClassRegistrationCombinedProperties>
Windows.Foundation.Collections.IMap`2<OSIntegration.DEH.Internal.ContractIdActivatableClassIdPair, Object>
Windows.Foundation.Collections.IMap`2<String, Object>
Windows.Foundation.Collections.IMap`2<String, OSIntegration.DEH.ComProgIdRegistration>
Windows.Foundation.Collections.IMap`2<String, OSIntegration.DEH.ComTypeLibRegistration>
Windows.Foundation.Collections.IMap`2<String, String>
Windows.Foundation.Collections.IMap`2<String, Windows.Foundation.IDllServerActivatableClassRegistration>
Windows.Foundation.Collections.IMap`2<String, Windows.Foundation.IExeServerActivatableClassRegistration>
Windows.Foundation.Collections.IMap`2<String, Windows.Foundation.IExeServerRegistration>
Windows.Foundation.Collections.IMap`2<UInt32, OSIntegration.DEH.IComServerRegistration>
Windows.Foundation.Collections.IMapView`2<Guid, OSIntegration.DEH.ComInterfaceRegistration>
Windows.Foundation.Collections.IMapView`2<Guid, OSIntegration.DEH.ComProxyStubRegistration>
Windows.Foundation.Collections.IMapView`2<Guid, OSIntegration.DEH.ComTreatAsClassRegistration>
Windows.Foundation.Collections.IMapView`2<Guid, OSIntegration.DEH.Internal.ComClassRegistrationCombinedProperties>
Windows.Foundation.Collections.IMapView`2<OSIntegration.DEH.Internal.ContractIdActivatableClassIdPair, Object>
Windows.Foundation.Collections.IMapView`2<String, Object>
Windows.Foundation.Collections.IMapView`2<String, OSIntegration.DEH.ComProgIdRegistration>
Windows.Foundation.Collections.IMapView`2<String, OSIntegration.DEH.ComTypeLibRegistration>
Windows.Foundation.Collections.IMapView`2<String, String>
Windows.Foundation.Collections.IMapView`2<String, Windows.Foundation.IDllServerActivatableClassRegistration>
Windows.Foundation.Collections.IMapView`2<String, Windows.Foundation.IExeServerActivatableClassRegistration>
Windows.Foundation.Collections.IMapView`2<String, Windows.Foundation.IExeServerRegistration>
Windows.Foundation.Collections.IMapView`2<UInt32, OSIntegration.DEH.IComServerRegistration>
Windows.Foundation.Collections.IVector`1<OSIntegration.DEH.Internal.FileOperationInfo>
Windows.Foundation.Collections.IVector`1<String>
Windows.Foundation.Collections.IVectorView`1<OSIntegration.DEH.Internal.FileOperationInfo>
Windows.Foundation.Collections.IVectorView`1<String>
Windows.Foundation.Collections.PropertySet
Windows.Foundation.DllServerActivatableClassRegistration
Windows.Foundation.ExeServerActivatableClassRegistration
Windows.Foundation.ExeServerRegistration
Windows.Foundation.PropertyValue
Windows.FullTrustApplication
windows.gadget
windows.geolocation
windows.hostRuntime
windows.immersivecontrolpanel_cw5n1h2txyewy
windows.installedLocationVirtualization
Windows.Internal.ApplicationDefaults.AppDefaultHelpers
Windows.Internal.CapabilityAccess.Management.CapabilityProvisioning
windows.internal.componentUI
Windows.Internal.FilePickerExperience
windows.internal.filePickerExperience
Windows.Internal.Security.Authentication.Web.WamProviderRegistration
Windows.Internal.ServiceWorker.ServiceWorkerBackgroundTask
Windows.Internal.StateRepository.Management.RepositoryManager
Windows.Internal.StateRepository.PrimaryTileUserNotificationChannel
Windows.Launch
windows.licensing
windows.loaderSearchPathOverride
windows.localExperiencePack
Windows.LockScreenComponent
windows.lockScreenComponent
windows.loopbackAccessRules
Windows.Media.BackgroundPlayback.BackgroundPlayer
Windows.Media.BackgroundPlayback.exe
Windows.Media.Playback.MediaPlayer
Windows.MiracastView_cw5n1h2txyewy
windows.MRT
Windows.MtcUvc_cw5n1h2txyewy
Windows.Networking.BackgroundTransfer.Internal.BackgroundTransferTask
Windows.Networking.BackgroundTransfer.Internal.BackgroundTransferTask.ClassId
Windows.Networking.BackgroundTransfer.Internal.NetworkChangeTask
Windows.Networking.BackgroundTransfer.Internal.NetworkChangeTask.ClassId
Windows.Networking.ContentPrefetcher.Internal.ContentPrefetcherTask
Windows.Networking.ContentPrefetcher.Internal.ContentPrefetcherTask.ClassId
Windows.Networking.Vpn.dll
Windows.Networking.Vpn.PluginBT.ClassId
windows.packageAndMachineCompliance
Windows.PartialTrustApplication
Windows.PersonalAssistant.Launch
windows.personalAssistantLaunch
windows.phoneCallActivation
Windows.PhoneCallActivation
Windows.PosPaymentConnector
windows.posPaymentConnector
windows.preCompilationExtension
windows.preInstalledConfigTask
Windows.PreInstalledConfigTask
Windows.PrintDialog_cw5n1h2txyewy
Windows.PrintDialog3D_cw5n1h2txyewy
Windows.PrintSupportExtension
windows.printSupportExtension
windows.printSupportJobUI
Windows.PrintSupportJobUI
Windows.PrintSupportSettingsUI
windows.printSupportSettingsUI
windows.printSupportWorkflow
Windows.PrintSupportWorkflow
windows.printWorkflowBackgroundTask
Windows.PrintWorkflowBackgroundTask
windows.printWorkflowForegroundTask
Windows.PrintWorkflowForegroundTask
windows.protocol
Windows.Protocol
windows.protocol
windows.publisherCacheFolders
windows.repositoryExtension
windows.repositoryExtension.remove
Windows.RestrictedLaunch
windows.restrictedLaunch
windows.runTime
windows.search
Windows.Search
Windows.Security.Authentication.OnlineId.OnlineIdServiceTicketRequest
Windows.Security.Authentication.OnlineId.OnlineIdSystemAuthenticator
Windows.Security.Authentication.Web.Core.BackgroundGetTokenTask.ClassId
windows.shareTarget
Windows.ShareTarget
windows.startupTask
Windows.StartupTask
windows.stateExtension
windows.stateExtension.remove
windows.uiAccess
windows.unsignedEnforcer
windows.updateTask
Windows.UpdateTask
windows.userDataAccess
Windows.UserDataAccountsProvider
windows.userDataAccountsProvider
windows.userDataTaskDataProvider
Windows.UserDataTaskDataProvider
windows.visualElements
windows.wcosAdapterApp
Windows.WCOSAdapterApp
Windows.WebAccountProvider
windows.webAccountProvider
Windows::Foundation::Collections::Internal::Vector<HSTRING>::Make(&classNames)
windowsApp
WindowsCompareStringOrdinal
WindowsConcatString
WindowsConcatString( Wrappers::HStringReference(typeLibIdString).Get(), versionNumber, typeLibKey.GetAddressOf())
WindowsCreateString
WindowsCreateString(firstNullTerminator, 1, GetAddressOf())
WindowsCreateStringReference
WindowsDeleteString
WindowsDeleteString(initializedElement->activatableClassId)
WindowsDeleteString(initializedElement->contractId)
WindowsDeleteString(uninitializedElement->contractId)
WindowsDeleteStringBuffer
WindowsDisplayLanguage
WindowsDuplicateString
WindowsDuplicateString( destinationOrDelete, &pUninitialized->DestinationOrDelete)
WindowsDuplicateString( sourceOrBackup, &pUninitialized->SourceOrBackup)
WindowsDuplicateString(currentTreatAsValue.Get(), terminalClsid)
WindowsDuplicateString(source.contractId, &uninitializedElement->contractId)
WindowsGetStringLen
WindowsGetStringRawBuffer
WindowsIsStringEmpty
WindowsPreallocateStringBuffer
WindowsPreallocateStringBuffer(collectedCharacterCount, &collectedCharacters, &multiStringBuffer)
WindowsPreallocateStringBuffer(valuesCharacterCount + valuesCount - 1, &collectedCharacters, &stringBuffer)
WindowsPromoteStringBuffer
WindowsStringHasEmbeddedNull
winElement->get_baseName(&bstrNodeName)
winNodes->get_item(winIndex, &versionNode)
winNodes->get_length(&winLength)
WITH BundleInfo(_PackageID, PackageType, BundleId, _PackageUserID, UserId, DeploymentState) AS(SELECT p._PackageID, p.PackageType, p.SourceBundle AS BundleId, pu._PackageUserID, pu.User, pu.DeploymentState FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.SourceBundle>0)INSERT OR IGNORE INTO PackageUser  (_Revision, _WorkId, Package, User, InstallTime, WhenRestored, IsExplicitlyInstalled, DeploymentState, AppDataVolume, _Dictionary)SELECT 1, 0, p._PackageID, UserId, now(), 0, 1, DeploymentState, 0, NULL  FROM Package AS p INNER JOIN (   SELECT BundleId, UserId, DeploymentState FROM BundleInfo AS t    WHERE BundleId NOT IN (        SELECT b.BundleId FROM BundleInfo AS b         WHERE b.PackageType=8           AND b.UserId=t.UserId       )   ) AS b ON b.BundleId=p.SourceBundle AND p.PackageType=8;
WITH BundleInfo(_PackageID, PackageType, BundleId, PackageUserId, UserId, DeploymentState) AS(SELECT p._PackageID, p.PackageType, p.SourceBundle AS BundleId, pu._PackageUserID, pu.User, pu.DeploymentState FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.SourceBundle>0)DELETE FROM PackageUser WHERE _PackageUserID IN (    SELECT PackageUserId FROM BundleInfo AS t     WHERE t.PackageType=8       AND NOT EXISTS(            SELECT 1 FROM Package AS p             INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID             WHERE pu.User=t.UserId AND p.SourceBundle=t.BundleId AND p.PackageType<>8           ));
WITH BundleInfo(_PackageID, PackageType, BundleId, PackageUserId, UserId, DeploymentState) AS(SELECT p._PackageID, p.PackageType, p.SourceBundle AS BundleId, pu._PackageUserID, pu.User, pu.DeploymentState FROM Package AS p INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID WHERE p.SourceBundle>0)SELECT * FROM BundleInfo AS t WHERE t.PackageType=8   AND NOT EXISTS(        SELECT 1 FROM Package AS p         INNER JOIN PackageUser AS pu ON pu.Package=p._PackageID         WHERE pu.User=t.UserId AND p.SourceBundle=t.BundleId AND p.PackageType<>8       );
WMIPROVIDER_EXTENSION_KEYWORD
WnfStateName
WorkId
workid
WorkId
WowDependencyGraph
WriteFile
Writesize
WriteStateContainerValue
WriteStateContainerValue %ls %ls %u
WriteStateContainerValue %ls (empty) %u
wsffile
wsfile
wshfile
WTSEnumerateSessionsW
WTSFreeMemory
WTSQueryUserToken
wwa.BackgroundPlaybackHost
WWAHost.exe
wwahost.exe
wWH;K
wyD8f@tMM
x ATAUAVAW3
x ATAVAWD
x ATAVAWH
x ATAVH
x AUAVAWH
x AVAW
x AVH
x AVL
x AW3
x AWH
x UATAUAVAWH
x UATAVH
x UAUAVH
x UAVAWH
x$f(d&B"B 
x$f(d&B"B J
x_^[]
X~zjgr
x>D8l$ 
x0M;~
x3D;t$@t
x86a64
xA_A^_^[]
XA_A^A]A\_^[]
xA_A^A]A\_^[]
xA_A^A]A\_^][
XA_A^A]A\_^][
xA_A^A]A\_^][
XapState
Xbox.DisplayTroubleshooter_cw5n1h2txyewy
Xbox.KinectTuner_cw5n1h2txyewy
xbox.live
xbox.live.
Xbox.NetworkTroubleshooter_cw5n1h2txyewy
Xbox.Oobe_cw5n1h2txyewy
Xbox.SystemUpdate_cw5n1h2txyewy
XboxPackage
XbVS>
Xhpr`
xjD8m
xlL9eHtfA
xNH;^
xpath
xpath.CopyFromString(xpathBackgroundTasksServerName)
xQD8}G
xw@8u(
XXnJK
y uDL
y&D9O
Y;\$8tQ
y<FQ1
yM@8yOt
yPD+y
Z Z$R&
z"h&X">$B
Z2b/8
zKonecore\admin\appmodel\osim\src\deh\uex\backgroundtasks\backgroundtaskshelper.cpp
ZwClose
ZwFlushBuffersFileEx
ZwOpenFile
ZwSetEaFile
