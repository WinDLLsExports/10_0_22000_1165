     
                        "__tag": true,
                        "key": "availabilityId",
                        "key": "devOfferId",
                        "key": "parentProductId",
                        "key": "productId",
                        "key": "skuId",
                        "type": "string"
                    "__tag": true,
                    "availabilityId": {
                    "devOfferId": {
                    "key": "deviceFamily",
                    "key": "deviceMoid",
                    "key": "deviceOemid",
                    "key": "deviceScmid",
                    "key": "languages",
                    "key": "market",
                    "productId": {
                    "quantity": "1",
                    "skuId": {
                    "type": "string"
                    }
                    },
                "__tag": true,
                "client": "UniversalStoreInApp",
                "defaultValue": 25
                "deviceFamily": {
                "deviceMoId": {
                "deviceOemId": {
                "deviceScmId": {
                "isOptional": true
                "key": "AppServiceName",
                "key": "bidRequest",
                "key": "consumableProductId",
                "key": "continuationToken",
                "key": "customDeveloperString",
                "key": "data",
                "key": "deviceFamily",
                "key": "DeviceId",
                "key": "deviceMoid",
                "key": "deviceOemid",
                "key": "deviceScmid",
                "key": "entitlementFilters",
                "key": "includeRelationship",
                "key": "locale",
                "key": "market",
                "key": "maxPageSize",
                "key": "Offer",
                "key": "optionalData",
                "key": "orderId",
                "key": "parameters",
                "key": "parentProductId",
                "key": "PFN",
                "key": "ProductId",
                "key": "productSkuIds",
                "key": "publisherUserId",
                "key": "quantity",
                "key": "relatedProductIds",
                "key": "serviceTicket",
                "key": "SkuId",
                "key": "StoreId",
                "key": "trackingId",
                "key": "type",
                "languages": {
                "market": {
                "type": "array",
                "type": "beneficiaryArray"
                "type": "goldenBeneficiary",
                "type": "goldenBeneficiaryArray"
                "type": "number",
                "type": "object"
                "type": "string"
                "type": "string",
                {
                }
                },
            "__tag": true,
            "alwaysEnforceDoublePurchasePolicy": true
            "applicationId": {
            "AppServiceName": {
            "beneficiaries": {
            "beneficiary": {
            "bidRequest": {
            "clientContext": {
            "continuationToken": {
            "customDeveloperString": {
            "data": {
            "deviceFamily": {
            "DeviceId": {
            "deviceMoid": {
            "deviceOemid": {
            "deviceScmid": {
            "enforceSellableBy": true,
            "entitlementFilters": {
            "includeRelationship": {
            "items": [
            "key": "attachRecordId",
            "key": "hostType",
            "key": "StoreId",
            "language": {
            "locale": {
            "market": {
            "maxPageSize": {
            "ModalFlow": "redeem",
            "ModalFlow": "smartInstall",
            "ModalFlow": "writeRatingsAndReview",
            "Offer": {
            "OptionalData": {
            "orderId": {
            "orderState": "Purchased",
            "parameters": {
            "ParentProductId": {
            "parentProductId": {
            "PFN": {
            "productId": {
            "ProductId": {
            "productSkuIds": [
            "productSkuIds": {
            "publisherUserId": {
            "relatedProductIds": {
            "removeQuantity": {
            "serviceTicket": {
            "SkuId": {
            "StoreId": {
            "storeSdkAttributes": {
            "trackingId": {
            "type": "string"
            "type": {
            "validityType": "Valid",
            ]
            ],
            }
            },
          "attachRecordId": {
          "hostType": {
          "isDigitalAttachment": true,
          "StoreId": {
          }
          },
        "__COMMENT__": "#0 - Get Parent Product",
        "__COMMENT__": "#0 purchase StoreID with extended response",
        "__COMMENT__": "#1 - Get User Collection for Parent Product",
        "__COMMENT__": "#1 invoke background task",
        "__COMMENT__": "#10 StoreList Query",
        "__COMMENT__": "#11 Search for products by query",
        "__COMMENT__": "#12 Given a set of product IDs, return the average ratings and counts",
        "__COMMENT__": "#13 ContentId/KeyId lookup by ProductId for ParentProduct",
        "__COMMENT__": "#14 ContentId/KeyId lookup by ProductId NO ParentProduct",
        "__COMMENT__": "#15 Invoke In App Redeem using Purchase Flow",
        "__COMMENT__": "#16 Invoke In App Rating & Review using Purchase Flow",
        "__COMMENT__": "#17 StoreList Query with previewStore",
        "__COMMENT__": "#18 Given a set of product IDs, return the average ratings and counts (previewStore)",
        "__COMMENT__": "#19 Ad SDK to get Mixer Ad data for Inline Purchase experience",
        "__COMMENT__": "#2 - Get User Collection for Products",
        "__COMMENT__": "#2 TVOD",
        "__COMMENT__": "#20 Get list of PTI devices for a user",
        "__COMMENT__": "#21 Push product to device",
        "__COMMENT__": "#22 AAD token based monetization apis - RS4+ Only",
        "__COMMENT__": "#23 SFDS Suggestion Service - RS5+ Only",
        "__COMMENT__": "#24 Invoking PurchaseApp (SXH) for the Smart Install scenario - RS5+ Only",
        "__COMMENT__": "#29 - Digital attach redeem",
        "__COMMENT__": "#3 - Get Products, No Parent (No license needed)",
        "__COMMENT__": "#3 purchase StoreID with force retail sandbox without license refresh",
        "__COMMENT__": "#4 - Get Products From Parent (Must have a valid license)",
        "__COMMENT__": "#4 Force license refresh for all online running licenses",
        "__COMMENT__": "#5 - Get User Collection for Parent Product by Family",
        "__COMMENT__": "#5 Acquire a device license - RS2+ Only",
        "__COMMENT__": "#6 - Consume Consumable",
        "__COMMENT__": "#6 Acquire a license token -  RS2+ Version",
        "__COMMENT__": "#7 - Get Customer Purchase Id",
        "__COMMENT__": "#7 Device token based monetization apis - RS2+ Only",
        "__COMMENT__": "#8 - Get Customer Collections Id",
        "__COMMENT__": "#8 Store User token based monetization apis",
        "__COMMENT__": "#9 - Get Products by Family from Parent",
        "__COMMENT__": "#9 Lookup ProductId from PackageFamilyName",
        "__COMMENT__": "Get campaign ID for device (RS4+)",
        "__COMMENT__": "Get campaign ID for user or device (RS5+)",
        "__COMMENT__": "Get Microsoft Accrued for device (RS4+)",
        "__COMMENT__": "Get Microsoft Accrued for user or device (RS5+)",
        "AnonymousRequest": true,
        "AuthType": 1,
        "AuthType": 2,
        "AuthType": 4
        "AuthType": 4,
        "BodyBufferMaxSize": 10000,
        "BodyBufferMaxSize": 1024,
        "BodyBufferMaxSize": 20000,
        "BodyBufferMaxSize": 300,
        "BodyTemplate": {
        "DoPost": true,
        "FallbackToDeviceAuth": true
        "ForceRetailSandbox": true,
        "Height": 384
        "Height": 560
        "Index": 0,
        "Index": 1,
        "Index": 10,
        "Index": 11,
        "Index": 12,
        "Index": 13,
        "Index": 14,
        "Index": 15,
        "Index": 16,
        "Index": 17,
        "Index": 18,
        "Index": 19,
        "Index": 2,
        "Index": 20,
        "Index": 21,
        "Index": 22,
        "Index": 23,
        "Index": 24,
        "Index": 25,
        "Index": 26,
        "Index": 27,
        "Index": 28,
        "Index": 29,
        "Index": 3,
        "Index": 4,
        "Index": 5,
        "Index": 6,
        "Index": 7,
        "Index": 8,
        "Index": 9,
        "InvokePurchaseFlow": true,
        "OmitAuthTokenPrefix": true
        "RefreshLicenses": true
        "RefreshLicenses": true,
        "RequiresCapability": "previewStore",
        "RequiresCapability": "storeAppInstallation",
        "RequiresCapability": "xboxXDK",
        "RequireValidLicense": false
        "RequireValidLicense": false,
        "URI": "https://adbroker.mp.dse.microsoft.com/v1/adbroker/srtb2",
        "URI": "https://collections.md.mp.microsoft.com/v7.0/collections/consume",
        "URI": "https://collections.md.mp.microsoft.com/v7.0/collections/sdkQuery",
        "URI": "https://collections.mp.microsoft.com/v7.0/beneficiaries/me/keys",
        "URI": "https://displaycatalog.mp.microsoft.com/v7.0/products/{parentProductId}{market:market}{languages:languages}{deviceMoid:moId}{deviceOemid:oemId}{deviceScmid:scmId}&fieldsTemplate=StoreSDK",
        "URI": "https://displaycatalog.mp.microsoft.com/v7.0/products/lookup{market:market}{languages:languages}{packageFamilyName:value}&fieldsTemplate=empty&alternateid=PackageFamilyName",
        "URI": "https://displaycatalog.mp.microsoft.com/v7/products/lookup{parentProductId:value}{market:market}{languages:languages}{itemCount:$top}{skipCount:$skip}{deviceMoid:moId}{deviceOemid:oemId}{deviceScmid:scmId}&fieldsTemplate=StoreSDK&actionFilter=Purchase&alternateId=SellableBy",
        "URI": "https://displaycatalog.mp.microsoft.com/v7/products{productIdsWithCommas:bigIds}{market:market}{languages:languages}{deviceMoid:moId}{deviceOemid:oemId}{deviceScmid:scmId}{actionFilter:actionFilter:OPTIONAL}&fieldsTemplate=StoreSDK",
        "URI": "https://licensing.mp.microsoft.com/v8.0/licenseToken",
        "URI": "https://manage.devcenter.microsoft.com/v1.0/my/storeextension/aad",
        "URI": "https://manage.devcenter.microsoft.com/v1.0/my/storeextension/device",
        "URI": "https://manage.devcenter.microsoft.com/v1.0/my/storeextension/user",
        "URI": "https://pti.store.microsoft.com/v1/pti/devices{market:market}{languages:languages}{productId:productId}{skuId:skuId}",
        "URI": "https://pti.store.microsoft.com/v1/pti/push{market:market}",
        "URI": "https://purchase.mp.microsoft.com/v7.0/users/me/keys",
        "URI": "https://purchase.mp.microsoft.com/v7.0/users/me/orders",
        "URI": "https://sfdataservice.microsoft.com/smartinstall/v1.0/suggestions/suggest",
        "URI": "https://storeedgefd.dsx.mp.microsoft.com/v8.0/campaigns/cid{parentProductId:productId}",
        "URI": "https://storeedgefd.dsx.mp.microsoft.com/v8.0/campaigns/isMicrosoftAccrued{parentProductId:productId}",
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/Sdk/products/contentId{market:market}{locale:locale}{languages:languages}{deviceFamily:deviceFamily}{parentProductId:parentProductId}{productIds:productIds}",
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/Sdk/products/contentId{market:market}{locale:locale}{languages:languages}{deviceFamily:deviceFamily}{productIds:productIds}&parentProductId=",
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/sdk/products/ratingsAverage{market:market}{locale:locale}{languages:languages}{deviceFamily:deviceFamily}{parentProductId:parentProductId}{productIds:productIds}{displayMode:displayMode}",
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/sdk/products/ratingsAverage{market:market}{locale:locale}{languages:languages}{deviceFamily:deviceFamily}{productIds:productIds}{displayMode:displayMode}&parentProductId=",
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/sdk/search{market:market}{languages:languages}{locale:locale}{deviceFamily:deviceFamily}{parentProductId:parentProductId}{top:$top}{continuationToken:continuationToken}{productKindFilter:productKindFilter}{categoryFilter:categoryFilter}{query:query}",
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/Sdk/StoreList/{storeListId}{market:market}{languages:languages}{locale:locale}{deviceFamily:deviceFamily}{parentProductId:parentProductId}{top:$top}{continuationToken:continuationToken}{storeListItemTypeFilter:storeListItemTypeFilter}{productKindFilter:productKindFilter}{categoryFilter:categoryFilter}{targetDeviceFamily:targetDeviceFamily}",
        "URI": "https://storesdk.dsx.mp.microsoft.com/v8.0/Sdk/StoreList/{storeListId}{market:market}{languages:languages}{locale:locale}{deviceFamily:deviceFamily}{top:$top}{continuationToken:continuationToken}{storeListItemTypeFilter:storeListItemTypeFilter}{productKindFilter:productKindFilter}{categoryFilter:categoryFilter}{targetDeviceFamily:targetDeviceFamily}&parentProductId=",
        "URIBufferMaxSize": 1024,
        "UseAuthIfAvailable": true
        "UseBackgroundTask": true,
        "UserTokenTypes": 3,
        "Width": 456,
        "Width": 640,
        }
        },
      %02u skuType = %s, productId = %s, title = %s, customDeveloperData = %s, price = %s%s (%s), extendedData = %s, description = %s
      }
      <no sku data>
    "LinkUriFormat": "https://www.microsoft.com/store/{idType}/{id}",
    "MDCollections": "https://collections.mp.microsoft.com/",
    "MDDisplayCatalog": "https://displaycatalog.mp.microsoft.com/",
    "MDGetAppReceiptsDesktop": "https://licensingwindows.mp.microsoft.com/Licensing/License/AcquireReceipt/6.2/0?productId={productId}&receiptType={receiptType}",
    "MDGetAppReceiptsMobile": "https://licensingphone.mp.microsoft.com/v9/purchases/appreceipts?os=8.10.12400.0&cc={cc}&lang={lang}&parentProductId={parentProductId}&installedPublisherId={installedPublisherId}",
    "MDGetOneProductReceiptMobile": "https://licensingphone.mp.microsoft.com/v9/purchases/receipts?os=8.10.12400.0&cc={cc}&lang={lang}&parentProductId={parentProductId}&featureName={featureName}&installedPublisherId={installedPublisherId}",
    "MDPurchase": "https://purchase.mp.microsoft.com"
    "OneStoreAuthenticationDomain": "www.microsoft.com",
    "smartInstall": {
    "writeRatingsAndReview": {
    %02u inAppOfferToken = %s, transId = %s, offerId = %s
    %02u offerToken = %s, productId = %s, name = %s, price = %s%s (%s), type = %u, isOnSale = %hs, tag = %s
    %02u productId = %s, offerId = %s, productType = %u, skuId = %s, isTrial = %hs, catalogId = %s, expires %u/%u/%u
    {
    }
    },
    <empty list>
  %02u inAppOfferToken = %s, productId = %s, transId = %s, offerId = %s
  %02u inAppOfferToken = %s, productId = %s, type = %u, price = %s, name = %s
  );g
  <empty list>
  <missing list>
  Description: %s%hs
  ExpirationDateTime: %u/%u/%u %02u:%02u:%02u
  InAppOfferArray: %hs
  IsActive: %hs, IsTrial: %hs, App type: %u, Listner count: %u
  IsOnSale: false
  IsOnSale: TRUE, Sale End Date: %u/%u/%u %02u:%02u:%02u
  IsUAP: %hs, Market: %s, Locale: %s, Age Rating: %u
  LicenseInstance: %hs
  LicenseManager: %hs
  Price: %s, Base Price: %s, Currency Symbol: %s, Currenty Code: %s
  Ticks until next check: %u
  UnfulfilledList: %hs
 !"#$%&'()*+,-./0123
 0*0>0D0I0\0s0}0
 040W0\0d0
 1J1t1
 7J7n7
 9>t#ShTi
 ChkAlloc(m_spStoreCommerceFactory)
 http://www.microsoft.com/windows0
 info
 Microsoft Corporation. All rights reserved.
 Operating System
 QVh<w
 SVW3
 WARN
 Windows
 Xg`I
!(storeId && packageFamilyName)
!*!N!r!
!*WPq
!_hInternet
!_pszServer
!0'0,060a0g0l0v0
!0P0m0
!jt1m
!m_userObject || IsUMgrGetConstrainedUserTokenPresent()
!storeProductId.IsValid() && "Shouldn't be a storeId yet in this scenario"
!This program cannot be run in DOS mode.
!vD*56
!Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreProductResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreProductResult *>,0>::DoWorkStub
"&"J"t"
"0)0;0
"Microsoft Window
"QWh(
"SY=nL
"z}!M
####-##-##T##:##:##S
##:##
#(#L#p#
#02070?0g0v0{0
#Vx"&6
$$$H$l$&"J"
$`2X`F
$Microsoft Ireland Operations Limited1
$Microsoft Ireland Operations Limited1&0$
$onecoreuap\enduser\winstore\licensing\winrt\lib\windows\getnextusercollection.cpp
$SVWj
% moa
%016llX
%04u-%02u-%02u%s%02u:%02u:%02u%s
%08lX-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X
%hs!%p: 
%hs(%d) tid(%x) %08X %ws
%hs(%u)\%hs!%p: 
%localappdata%\Microsoft\Windows\WER\ReportArchive
%localappdata%\Microsoft\Windows\WER\ReportQueue
%localappdata%\Packages\Microsoft.WindowsStore_8wekyb3d8bbwe\LocalState\store.etl
%s export "%s" "%s" /y
%s%02d:%02d:%09.6f
%s%d.%02d:%02d:%09.6f
%s%hs:%ws
%s-%s-%d-%s
%s:%s
%s:%s:%s
%windir%\Logs\dosvc
%windir%\Logs\SIH
%windir%\Logs\WindowsUpdate
%windir%\ServiceProfiles\NetworkService\AppData\Local\Microsoft\Windows\DeliveryOptimization\logs
%windir%\SoftwareDistribution\ReportingEvents.log
%windir%\System32\Config\SystemProfile\AppData\Local\packages\Microsoft.GamingServices_8wekyb3d8bbwe\LocalState
%windir%\System32\LogFiles\WMI
%WINDIR%\System32\reg.exe
%ws&$skip=%u
&_*q<|
&0,0D0Z0_0
&0/0F0O0l0u0
&080F0R0
&OL0O
&platformDependencyName=Windows.Universal
&platformDependencyName=Windows.Windows8x
&platformDependencyName=Windows.WindowsPhone8x
&PWSV
(((HRESULT)(hr)) < 0)
(((HRESULT)(spAsyncInfo->get_ErrorCode((&(__hr))))) >= 0)
(((HRESULT)(spAsyncInfo->get_Status(&status))) >= 0)
((_pszStringData == nullptr) && (_cchStringData == 0)) || ((_pszStringData == nullptr) && (_cchStringDataCapacity == s_cchUnknown)) || ((_pszStringData != nullptr) && (_cchStringData == ::wcslen(_pszStringData)))
((wcschr(pszUriBase, L'{')) == 0) && "On this overload, the uri base must be *clean*; no parameters allowed"
(_cchStringData <= _cchStringDataCapacity) || (_cchStringDataCapacity == s_cchUnknown)
(0x%08x)
(caller: %p) 
(invalid)
(kTOV
(PeOC
(QD)Qj
).)R)
)080=0E0
)6)Q|
)e5?%
)Microsoft Root Certificate Authority 20100
*.etl
*.w}`
,a$Cs
,ET/KmM6kidqRyWJOlaGtatDN4mJMAZzyPvO4+PuMig4=0Z
,L,|,
,SVW3
.  AppId: %s, Name: %s
.00cfg
.2.\.
.CRT$XCA
.CRT$XCU
.CRT$XCZ
.CRT$XIA
.CRT$XIAA
.CRT$XIZ
.CRT$XLA
.CRT$XLZ
.data
.data$brc
.didat$2
.didat$3
.didat$4
.didat$5
.didat$6
.didat$7
.edata
.gfids
.giats
.idata
.idata$2
.idata$3
.idata$4
.idata$5
.idata$6
.orpc
.pcQhhA{
.QSh\
.rdata
.rdata$brc
.rdata$sxdata
.rdata$T$brc
.rdata$voltmd
.rdata$zETW0
.rdata$zETW1
.rdata$zETW2
.rdata$zETW9
.rdata$zzzdbg
.report.wer.txt
.rsrc
.rsrc$01
.rsrc$02
.text
.text$di
.text$mn
.text$x
.text$yd
.tls$
.tls$ZZZ
.xdata$x
//ServiceEnvironment/Authentication
//ServiceEnvironment/StoreSDK
/i-Q07
/t0j._f;
/Z*Px
/Z/y<
/Z-[E
/Z{I<
/Z}7F
-/Z3l
/Z7i*
/Z8@b
/ZeOC
/ZhM{
/ZsOg
/ZsOg<
/ZUo~9@D
/ZW^6
/ZxqL
: :$:(:,:0:4:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
: :$:(:,:0:4:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
: :$:(:,:0:4:8:<:@:D:H:L:P:T:l:p:t:x:|:
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
: :$:(:,:0:4:8:<:@:D:H:L:T:X:\:`:d:h:l:p:t:x:|:
: :$:(:,:0:4:8:<:@:D:L:P:T:X:\:`:d:h:l:p:t:x:|:
: :$:(:,:0:4:8:<:D:H:L:P:T:X:\:`:d:h:l:p:t:|:
: :$:<:D:L:P:T:X:h:l:p:
: :$:8:<:@:D:L:P:X:\:t:x:
: :%:,:6:D:O:m:r:
: :%:+:/:5:;:A:E:K:O:U:[:a:e:k:o:u:{:
: :&:*:B:F:a:f:m:s:
: :(:0:4:<:@:\:`:h:l:p:x:
: :(:0:8:<:D:H:t:x:|:
: :*:/:G:U:Z:d:|:
: :*:D:
: :.:@:
: :/:T:`:j:
: :;:@:E:Z:k:p:z:
: :6:]:b:l:
: :m:
:!:[:
:!:+:0:X:
:!:+:A:j:t:y:
:!:1:I:Y:c:h:
:!;,;H;Q;z;
:":':/:Z:a:f:~:
:":-:2:::|:
:":=:j:
:":8:B:G:\:h:t:
:":B:Y:^:h:
:";/;t;y;
:#:(:0:
:#:3:>:K:Q:U:[:_:e:k:q:u:{:
:#:5:[:u:
:#;2;<;A;
:#;A;L;v;
:$:):/:3:8:=:B:G:W:c:s:w:~:
:$:,:
:$:/:::O:z:
:$:@:D:P:T:\:`:d:l:t:|:
:$:+:2:L:p:w:~:
:$;/;[;e;
:$;-;R;k;r;~;
:$;B;O;U;_;$<9<><K<b<g<l<y<
:$;C;J;Q;
:$;P;s;
:%:o:u:
:%:V:h:v:
:%;/;>;Y;
:%;2;&<[<`<
:&:+:N:[:i:o:t:z:
:&:1:7:=:C:I:O:
:&:2:7:<:C:M:_:
:&:A:t:
:&:U:k:
:&;0;5;q;
:&;8;F;
:&;8;F;R;
:&;9;f;
:(:,:0:4:D:L:P:h:l:t:x:
:(:2:7:_:n:
:(:6:d:z:
:(;-;7;y;
:):.:8:z:
:):8:=:E:g:|:
:):9:P:U:Z:y:
:):J:]:g:l:
:):S:g:v:
:);@;t;
:*:/:9:~:
:,:}:
:,:2:9:R:c:t:
:,:4:8:L:T:X:l:t:x:
:,:I:Q:X:_:e:|:
:.:D:
:.;6;=;D;J;a;g;
:/:6:L:S:Y:
:/;E;U;k;u;z;
:':,:1:>:^:e:p:
:::h:p:u:
:-:4:J:Q:W:(<2<D<
:-:C:i:
:-:H:c:
:':k:
:':U:~:
::wcslen(_pszStringData) == _cchStringData
::WindowsDuplicateString(_availabilityId.Get(), pValue)
::WindowsDuplicateString(_campaignId.Get(), pValue)
::WindowsDuplicateString(_Caption.Get(), pValue)
::WindowsDuplicateString(_currencyCode.Get(), pValue)
::WindowsDuplicateString(_customDeveloperData.Get(), pValue)
::WindowsDuplicateString(_description.Get(), pValue)
::WindowsDuplicateString(_devOfferId.Get(), pValue)
::WindowsDuplicateString(_extendedJsonData.Get(), pValue)
::WindowsDuplicateString(_formattedBasePrice.Get(), pValue)
::WindowsDuplicateString(_formattedPrice.Get(), pValue)
::WindowsDuplicateString(_formattedRecurrencePrice.Get(), pValue)
::WindowsDuplicateString(_fulfillmentType.Get(), pValue)
::WindowsDuplicateString(_inAppOfferToken.Get(), pValue)
::WindowsDuplicateString(_language.Get(), pValue)
::WindowsDuplicateString(_name.Get(), pValue)
::WindowsDuplicateString(_packageFamilyName.Get(), value)
::WindowsDuplicateString(_productId.Get(), pValue)
::WindowsDuplicateString(_productKind.Get(), pValue)
::WindowsDuplicateString(_Purpose.Get(), pValue)
::WindowsDuplicateString(_response.Get(), value)
::WindowsDuplicateString(_skuId.Get(), pValue)
::WindowsDuplicateString(_storeId.Get(), pValue)
::WindowsDuplicateString(_title.Get(), pValue)
::WindowsDuplicateString(_trialUniqueId.Get(), pValue)
:';.;5;
:;:A:L:Q:V:}:
:;:A:L:Q:V:u:
:;:B:I:
:';0;
:-;6;?;H;Q;Z;.<5<
:-;6;=;u;~;
:';i;
:?;Z;};
:@:E:
:\:c:
:\;a;
:^:e:l:v:
:_;h;
:+:;:?:E:J:O:T:v:
:+:;:K:[:k:{:
:+:0:::a:m:x:
:+:D:I:S:
:+;Y;a;h;o;u;
:+;Z;
:<:]:
:<:_:
:=:J:Q:X:j:u:|:
:>;i;x;};
:>;r;x;~;
:0:?:z:
:0:W:
:0A0F0P0~0
:1:6:=:C:S:q:v:}:
:2:I:N:U:b:g:q:
:3:::A:
:4;>;C;];e;x;
:4;>;D;T;_;v;
:5:::B:q:
:5:C:
:5:K:w:
:5:M:w:
:7;A;F;q;{;
:7;H;V;};
:7;J;R;
:8:?:D:L:
:8:U:
:8;H;V;
:9:\:
:9:m:
:9:x:}:
:A:u:z:
:A:W:~:
:D;J;W;m;|;
:d;k;r;y;
:E:J:o:t:|:
:F:X:f:
:F:X:f:r:
:f;x;
:G:V:[:c:
:G;p;
:H:b:
:H:O:T:\:
:H;b;
:I:l:
:J;O;o;~;
:J;O;W;
:J;y;
:K:a:
:K:R:\:a:
:K;{;
:L:j:t:y:
:l;q;{;
:N:W:
:O:V:]:s:
:P;w;
:Q;n;s;};
:T:j:x:
:U;w;C<
:V;_;f;
:Vh`S
:W:\:f:p:z:
:Y;p;
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;|;
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;t;x;|;
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;l;p;t;x;|;
; ;$;(;,;0;4;8;<;@;D;H;P;T;X;\;`;d;h;l;p;t;x;|;
; ;$;(;,;0;4;8;<;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
; ;$;(;,;0;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;x;|;
; ;$;(;,;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
; ;$;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
; ;%;C;Q;n;|;
; ;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
; ;;;M;\;r;
; ;+;8;?;F;M;`;i;u;|;
; ;<;@;D;H;L;X;`;h;l;t;x;
; ;6;Q;h;
; ;i;p;u;};
; <5<T<s<
; <7<B<r<
; <E<
;!;&;-;3;C;a;f;m;s;
;!;&;0;Z;l;{;
;!;(;:;D;O;V;
;!;;;@;`;e;m;
;!<u<
;";);
;";,;9;@;
;";';<;u;z;
;";<;f;m;t;
;";p<
;";S;
;#;(;0;w;~;
;#;';-;4;:;>;D;J;P;V;
;#;;;j;
;#;];j;q;x;
;#<(<0<O<Z<
;#<)<Y<
;#<t<
;$;(;,;0;4;<;@;D;T;X;\;`;h;l;t;x;
;$;,;1;8;a;i;n;
;$;,;7;N;W;
;$;5;y;
;%;;;Y;f;m;
;%;+;4;;;B;I;[;|;
;%;3;=;B;W;e;s;x;
;%;7;<;F;|;
;%;P;W;\;d;
;%;V;h;v;
;%<,<6<
;%<=<O<\<
;&;-;4;;;B;I;P;W;^;e;l;s;z;
;&;+;\;k;
;&;+;J;Q;\;
;&;Q;W;\;f;
;&;T;j;
;&<8<F<R<
;(;,;<;D;P;T;\;`;d;
;(;,;4;8;<;@;D;H;\;d;l;
;(;-;F;\;k;
;(;I;
;(;m;
;(;m;r;|;
;(<7<H<i<q<{<
;(<X<
;);.;R;Y;w;};
;);0;7;>;E;L;S;
;);3;8;A;F;P;h;r;w;
;);E;
;*;5;B;y;
;*;K;R;\;
;,;?;[;z;
;,;<;L;\;l;|;
;,;4;8;L;T;X;p;x;
;,;5;S;a;n;{;
;,;6;;;|;
;,;8;=;G;Y;^;f;
;,<3<8<_<
;,<5<f<x<
;.;8;=;R;b;m;
;.;8;D;K;R;
;.;D;a;
;/;5;>;E;V;j;y;
;/;E;q;
;/;Q;W;z;
;/;W;^;c;m;
;:;Y;g;|;
;:<E<\<n<
;:<H<|<
;';<;A;F;v;
;;<@<i<n<
;-;6;<;I;b;q;
;';8;Y;a;k;p;
;';B;];
;?;S;Z;g;l;v;
;@<G<
;[<l<v<{<
;]<w<~<
;^<h<m<
;^<o<y<~<
;_;t;
;_<i<
;}<b=
;+;9;>;F;R;W;b;g;q;
;+;W;f;p;u;
;+<:<_<n<
;<;A;K;q;
;<<I<
;-<6<T<
;>;T;
;><f<
;0;=;d;
;0;9;m;
;0<z<
;0E0J0|0
;0L0p0~0
;1;6;=;C;S;q;v;};
;1;6;T;c;h;p;
;1;8;
;2;7;?;W;i;n;
;2;k;
;3;:;?;F;U;[;d;k;r;y;
;3<B<L<Q<u<
;4;C;
;4<A<N<U<[<n<{<
;5;S;b;l;q;
;6;D;R;`;n;|;
;6<m<H=
;7;M;f;
;7<@<d<n<
;7<F<P<U<
;7<Y<e<
;8;B;o;v;{;
;9;f;
;A<I<R<k<t<
;b;s;x;~;
;B;X;_;i;n;
;C;O;c;t;
;c<h<m<
;D;c;v;
;e;o;t;
;e;q;z;
;F;U;
;F;X;f;
;H;W;\;d;
;H;Z;k;u;z;
;H@t&
;H@t?
;H0t&
;H0t*
;H0t?
;H0tES
;I;d;t;
;j;o;
;K@t(
;K@t<
;K0t(
;K0t<
;M<b<
;O;\;
;O<V<
;P;U;
;Q@t'
;Q@t=
;Q@t2
;Q@t3
;Q@tU
;Q0t'
;Q0t=
;Q0t1
;Q0t2
;Q0t3
;Q0tC
;Q0tR
;Q0tU
;T$ r
;T;m;y;
;U;[;z;
;V;k;v;
;W$s>
;w(s/
;Y;x;
;Y<a<z<
? ?$?(?,?0?4?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
? ?$?(?,?0?4?<?@?H?L?`?d?h?|?
? ?$?(?,?0?4?8?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?t?x?|?
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?h?l?p?t?x?|?
? ?$?(?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
? ?$?8?<?@?P?T?X?h?l?p?t?|?
? ?%?<?L?Y?g?v?
? ?(?,?4?8?L?P?T?h?p?x?
? ?*?5?<?
? ?;?D?Z?_?
? ?;?I?
? ?<?E?X?]?i?o?x?
? ?2?R?\?
? ?h?o?t?|?
? ?T?^?e?
?!?(?/?6?
?!?C?K?V?f?
?"?,?1?F?T?r?
?"?'?1?b?
?"?'?1?F?U?
?"?'?G?L?l?q?
?"?2?=?J?^?n?{?
?"?2?B?R?b?r?
?"?7?O?
?"?O?w?
?"?T?
?#?-???h?w?
?#?G?\?w?
?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
?$?(?0?4?L?P?T?X?\?`?d?h?l?p?t?x?|?
?$?)?f?
?$?*?0?9?{?
?$?,?x?
?$?4?@?O?S?Y?_?e?k?
?$?C?
?%?,?2?E?N?[?a?
?%?|?
?%?6?E?V?]?g?}?
?%?h?
?%?V?h?v?
?&?,?C?I?n?u?|?
?&?0?D?I?P?V?\?d?
?&?T?j?
?&?Y?f?s?z?
?(?-?7?M?`?x?
?(?_?
?(?c?
?(?G?R?
?(?u?z?
?(?V?l?
?)?8?=?E?Z?q?v?
?)?9?F?T?i?p?
?)?K?Z?
?,?:?T?b?
?,?0?4?D?H?L?\?`?d?t?x?|?
?,?3?:?A?
?,?4?8?L?T?X?p?t?x?|?
?.?M?y?
?:?P?U?Z?a?h?
?;?Y?^?h?
?'?,?6?
???N?S?h?n?s?
?'?-?T?
??_V@YAXPAX@Z
?-?4?
?-?7?<?a?n?{?
?'?H?S?t?
?'?V?
?@?F?[?
?[?a?l?q?v?
?[?h?{?
?`?e?j?
?=?I?U?a?m?y?
?0?>?V?h?u?
?0?5???c?n?x?
?0L0S0Y0l0u0
?1???D?N?f?k?u?
?1?6?N?S?h?m?u?
?1?8?p?y?
?2?8?F?V?
?2?c?p?
?456789:;<=
?6???F?K?\?l?
?9?\?
?B?Q?
?B?U?Z?
?C?Q?
?d?{?
?D?I?|?
?D?N?T?d?o?
?F?X?f?
?g?l?v?
?G?L?V?
?H?O?Y?^?
?H?R?W?
?J?O?Y?
?K?a?
?k?x?
?Q?^?
?Q?a?o?
?q?v?
?R?[?r?
?S?X?b?
?U?_?
?U?_?d?
?W?l?
?Windows::ApplicationModel::Store::ReportConsumableFulfillmentOperationServer::RuntimeClassInitialize
?X?g?
?Y?f?m?
?Z?j?x?
@.didat
@.reloc
@:#W8
@0n0w0
@9D$,
@d;A(t
[%hs(%hs)]
[%hs]
[0b0b1i1u1z1
[0b0i0p0w0~0
[CV:%2]
[QVh4
\$ t)
\$ WVP
\$(9T$8
\$09\$4vw
\$4Pj
\$DPj$h
\$DPV
\\?\S:\Deployment\DeliveryOptimization\Logs
\\?\T:\Windows\System32\Logfiles\WMI\RtBackup\StoreOperational.etl
\X<B.kX
^'(Z{
^Wh E
^Wh(<
^Wh(r
^Wh,,
^Wh\x
^Wh\z
^WhDt
^Whhq
^WhL0
^WhLu
^Whlw
^WhT?
^Wht`
^Wht2
^WhtT
_^[Y]
__CxxFrameHandler3
__dllonexit
__FIAsyncOperation_1___FIVectorView_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewProductInfo
__FIAsyncOperation_1___FIVectorView_1_Windows__CApplicationModel__CStore__CPreview__CStoreSystemFeature
__FIAsyncOperation_1___FIVectorView_1_Windows__CApplicationModel__CStore__CUnfulfilledConsumable
__FIAsyncOperation_1___FIVectorView_1_Windows__CServices__CStore__CStorePackageUpdate
__FIAsyncOperation_1___FIVectorView_1_Windows__CServices__CStore__CStoreQueueItem
__FIAsyncOperation_1_Windows__CApplicationModel__CStore__CFulfillmentResult
__FIAsyncOperation_1_Windows__CApplicationModel__CStore__CLicenseManagement__CLicenseSatisfactionResult
__FIAsyncOperation_1_Windows__CApplicationModel__CStore__CListingInformation
__FIAsyncOperation_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewPurchaseResults
__FIAsyncOperation_1_Windows__CApplicationModel__CStore__CPurchaseResults
__FIAsyncOperation_1_Windows__CServices__CStore__CStoreAcquireLicenseResult
__FIAsyncOperation_1_Windows__CServices__CStore__CStoreAppLicense
__FIAsyncOperation_1_Windows__CServices__CStore__CStoreCanAcquireLicenseResult
__FIAsyncOperation_1_Windows__CServices__CStore__CStoreConsumableResult
__FIAsyncOperation_1_Windows__CServices__CStore__CStoreProductPagedQueryResult
__FIAsyncOperation_1_Windows__CServices__CStore__CStoreProductQueryResult
__FIAsyncOperation_1_Windows__CServices__CStore__CStoreProductResult
__FIAsyncOperation_1_Windows__CServices__CStore__CStorePurchaseResult
__FIAsyncOperation_1_Windows__CServices__CStore__CStoreRateAndReviewResult
__FIAsyncOperation_1_Windows__CServices__CStore__CStoreSendRequestResult
__FIAsyncOperation_1_Windows__CServices__CStore__CStoreUninstallStorePackageResult
__FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewProductInfo
__FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CApplicationModel__CStore__CPreview__CStoreSystemFeature
__FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CApplicationModel__CStore__CUnfulfilledConsumable
__FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CServices__CStore__CStorePackageUpdate
__FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CServices__CStore__CStoreQueueItem
__FIAsyncOperationCompletedHandler_1_Windows__CApplicationModel__CStore__CFulfillmentResult
__FIAsyncOperationCompletedHandler_1_Windows__CApplicationModel__CStore__CLicenseManagement__CLicenseSatisfactionResult
__FIAsyncOperationCompletedHandler_1_Windows__CApplicationModel__CStore__CListingInformation
__FIAsyncOperationCompletedHandler_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewPurchaseResults
__FIAsyncOperationCompletedHandler_1_Windows__CApplicationModel__CStore__CPurchaseResults
__FIAsyncOperationCompletedHandler_1_Windows__CServices__CStore__CStoreAcquireLicenseResult
__FIAsyncOperationCompletedHandler_1_Windows__CServices__CStore__CStoreAppLicense
__FIAsyncOperationCompletedHandler_1_Windows__CServices__CStore__CStoreCanAcquireLicenseResult
__FIAsyncOperationCompletedHandler_1_Windows__CServices__CStore__CStoreConsumableResult
__FIAsyncOperationCompletedHandler_1_Windows__CServices__CStore__CStoreProductPagedQueryResult
__FIAsyncOperationCompletedHandler_1_Windows__CServices__CStore__CStoreProductQueryResult
__FIAsyncOperationCompletedHandler_1_Windows__CServices__CStore__CStoreProductResult
__FIAsyncOperationCompletedHandler_1_Windows__CServices__CStore__CStorePurchaseResult
__FIAsyncOperationCompletedHandler_1_Windows__CServices__CStore__CStoreRateAndReviewResult
__FIAsyncOperationCompletedHandler_1_Windows__CServices__CStore__CStoreSendRequestResult
__FIAsyncOperationCompletedHandler_1_Windows__CServices__CStore__CStoreUninstallStorePackageResult
__FIAsyncOperationProgressHandler_2_Windows__CServices__CStore__CStorePackageUpdateResult_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIAsyncOperationWithProgress_2_Windows__CServices__CStore__CStorePackageUpdateResult_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIAsyncOperationWithProgressCompletedHandler_2_Windows__CServices__CStore__CStorePackageUpdateResult_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIIterable_1___FIKeyValuePair_2_HSTRING_EventRegistrationToken
__FIIterable_1___FIKeyValuePair_2_HSTRING_Windows__CApplicationModel__CStore__CLicenseManagement__CLicenseSatisfactionInfo
__FIIterable_1___FIKeyValuePair_2_HSTRING_Windows__CApplicationModel__CStore__CProductLicense
__FIIterable_1___FIKeyValuePair_2_HSTRING_Windows__CApplicationModel__CStore__CProductListing
__FIIterable_1___FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CInternal__CIStorePackageLicenseLostCallback
__FIIterable_1___FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CStoreLicense
__FIIterable_1___FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIIterable_1___FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CStoreProduct
__FIIterable_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewProductInfo
__FIIterable_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewSkuInfo
__FIIterable_1_Windows__CApplicationModel__CStore__CPreview__CStoreSystemFeature
__FIIterable_1_Windows__CApplicationModel__CStore__CUnfulfilledConsumable
__FIIterable_1_Windows__CServices__CStore__CInternal__CStoreContentIdKeyIdItem
__FIIterable_1_Windows__CServices__CStore__CStoreAvailability
__FIIterable_1_Windows__CServices__CStore__CStoreCollectionData
__FIIterable_1_Windows__CServices__CStore__CStoreImage
__FIIterable_1_Windows__CServices__CStore__CStoreLicense
__FIIterable_1_Windows__CServices__CStore__CStorePackageUpdate
__FIIterable_1_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIIterable_1_Windows__CServices__CStore__CStoreProduct
__FIIterable_1_Windows__CServices__CStore__CStoreQueueItem
__FIIterable_1_Windows__CServices__CStore__CStoreSku
__FIIterable_1_Windows__CServices__CStore__CStoreVideo
__FIIterator_1___FIKeyValuePair_2_HSTRING_EventRegistrationToken
__FIIterator_1___FIKeyValuePair_2_HSTRING_Windows__CApplicationModel__CStore__CLicenseManagement__CLicenseSatisfactionInfo
__FIIterator_1___FIKeyValuePair_2_HSTRING_Windows__CApplicationModel__CStore__CProductLicense
__FIIterator_1___FIKeyValuePair_2_HSTRING_Windows__CApplicationModel__CStore__CProductListing
__FIIterator_1___FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CInternal__CIStorePackageLicenseLostCallback
__FIIterator_1___FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CStoreLicense
__FIIterator_1___FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIIterator_1___FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CStoreProduct
__FIIterator_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewProductInfo
__FIIterator_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewSkuInfo
__FIIterator_1_Windows__CApplicationModel__CStore__CPreview__CStoreSystemFeature
__FIIterator_1_Windows__CApplicationModel__CStore__CUnfulfilledConsumable
__FIIterator_1_Windows__CServices__CStore__CInternal__CStoreContentIdKeyIdItem
__FIIterator_1_Windows__CServices__CStore__CStoreAvailability
__FIIterator_1_Windows__CServices__CStore__CStoreCollectionData
__FIIterator_1_Windows__CServices__CStore__CStoreImage
__FIIterator_1_Windows__CServices__CStore__CStoreLicense
__FIIterator_1_Windows__CServices__CStore__CStorePackageUpdate
__FIIterator_1_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIIterator_1_Windows__CServices__CStore__CStoreProduct
__FIIterator_1_Windows__CServices__CStore__CStoreQueueItem
__FIIterator_1_Windows__CServices__CStore__CStoreSku
__FIIterator_1_Windows__CServices__CStore__CStoreVideo
__FIKeyValuePair_2_HSTRING_EventRegistrationToken
__FIKeyValuePair_2_HSTRING_Windows__CApplicationModel__CStore__CLicenseManagement__CLicenseSatisfactionInfo
__FIKeyValuePair_2_HSTRING_Windows__CApplicationModel__CStore__CProductLicense
__FIKeyValuePair_2_HSTRING_Windows__CApplicationModel__CStore__CProductListing
__FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CInternal__CIStorePackageLicenseLostCallback
__FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CStoreLicense
__FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIKeyValuePair_2_HSTRING_Windows__CServices__CStore__CStoreProduct
__FIMap_2_HSTRING_EventRegistrationToken
__FIMap_2_HSTRING_Windows__CApplicationModel__CStore__CLicenseManagement__CLicenseSatisfactionInfo
__FIMap_2_HSTRING_Windows__CApplicationModel__CStore__CProductLicense
__FIMap_2_HSTRING_Windows__CApplicationModel__CStore__CProductListing
__FIMap_2_HSTRING_Windows__CServices__CStore__CInternal__CIStorePackageLicenseLostCallback
__FIMap_2_HSTRING_Windows__CServices__CStore__CStoreLicense
__FIMap_2_HSTRING_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIMap_2_HSTRING_Windows__CServices__CStore__CStoreProduct
__FIMapView_2_HSTRING_EventRegistrationToken
__FIMapView_2_HSTRING_Windows__CApplicationModel__CStore__CLicenseManagement__CLicenseSatisfactionInfo
__FIMapView_2_HSTRING_Windows__CApplicationModel__CStore__CProductLicense
__FIMapView_2_HSTRING_Windows__CApplicationModel__CStore__CProductListing
__FIMapView_2_HSTRING_Windows__CServices__CStore__CInternal__CIStorePackageLicenseLostCallback
__FIMapView_2_HSTRING_Windows__CServices__CStore__CStoreLicense
__FIMapView_2_HSTRING_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIMapView_2_HSTRING_Windows__CServices__CStore__CStoreProduct
__FITypedEventHandler_2_Windows__CServices__CStore__CStoreContext_IInspectable
__FITypedEventHandler_2_Windows__CServices__CStore__CStorePackageLicense_IInspectable
__FITypedEventHandler_2_Windows__CServices__CStore__CStoreQueueItem_IInspectable
__FITypedEventHandler_2_Windows__CServices__CStore__CStoreQueueItem_Windows__CServices__CStore__CStoreQueueItemCompletedEventArgs
__FIVector_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewProductInfo
__FIVector_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewSkuInfo
__FIVector_1_Windows__CApplicationModel__CStore__CPreview__CStoreSystemFeature
__FIVector_1_Windows__CApplicationModel__CStore__CUnfulfilledConsumable
__FIVector_1_Windows__CServices__CStore__CInternal__CStoreContentIdKeyIdItem
__FIVector_1_Windows__CServices__CStore__CStoreAvailability
__FIVector_1_Windows__CServices__CStore__CStoreCollectionData
__FIVector_1_Windows__CServices__CStore__CStoreImage
__FIVector_1_Windows__CServices__CStore__CStoreLicense
__FIVector_1_Windows__CServices__CStore__CStorePackageUpdate
__FIVector_1_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIVector_1_Windows__CServices__CStore__CStoreProduct
__FIVector_1_Windows__CServices__CStore__CStoreQueueItem
__FIVector_1_Windows__CServices__CStore__CStoreSku
__FIVector_1_Windows__CServices__CStore__CStoreVideo
__FIVectorView_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewProductInfo
__FIVectorView_1_Windows__CApplicationModel__CStore__CPreview__CStorePreviewSkuInfo
__FIVectorView_1_Windows__CApplicationModel__CStore__CPreview__CStoreSystemFeature
__FIVectorView_1_Windows__CApplicationModel__CStore__CUnfulfilledConsumable
__FIVectorView_1_Windows__CServices__CStore__CInternal__CStoreContentIdKeyIdItem
__FIVectorView_1_Windows__CServices__CStore__CStoreAvailability
__FIVectorView_1_Windows__CServices__CStore__CStoreCollectionData
__FIVectorView_1_Windows__CServices__CStore__CStoreImage
__FIVectorView_1_Windows__CServices__CStore__CStoreLicense
__FIVectorView_1_Windows__CServices__CStore__CStorePackageUpdate
__FIVectorView_1_Windows__CServices__CStore__CStorePackageUpdateStatus
__FIVectorView_1_Windows__CServices__CStore__CStoreProduct
__FIVectorView_1_Windows__CServices__CStore__CStoreQueueItem
__FIVectorView_1_Windows__CServices__CStore__CStoreSku
__FIVectorView_1_Windows__CServices__CStore__CStoreVideo
__tag
__TlgCV__
__x_Windows_CApplicationModel_CStore_CICurrentApp
__x_Windows_CApplicationModel_CStore_CICurrentApp2Statics
__x_Windows_CApplicationModel_CStore_CICurrentAppSimulator
__x_Windows_CApplicationModel_CStore_CICurrentAppSimulatorStaticsWithFiltering
__x_Windows_CApplicationModel_CStore_CICurrentAppSimulatorWithCampaignId
__x_Windows_CApplicationModel_CStore_CICurrentAppSimulatorWithConsumables
__x_Windows_CApplicationModel_CStore_CICurrentAppStaticsWithFiltering
__x_Windows_CApplicationModel_CStore_CICurrentAppWithCampaignId
__x_Windows_CApplicationModel_CStore_CICurrentAppWithConsumables
__x_Windows_CApplicationModel_CStore_CILicenseChangedEventHandler
__x_Windows_CApplicationModel_CStore_CILicenseInformation
__x_Windows_CApplicationModel_CStore_CIListingInformation
__x_Windows_CApplicationModel_CStore_CIListingInformation2
__x_Windows_CApplicationModel_CStore_CInternal_CIAuthenticationExtension
__x_Windows_CApplicationModel_CStore_CInternal_CIConsumableProduct
__x_Windows_CApplicationModel_CStore_CInternal_CILicenseInformationPrivate
__x_Windows_CApplicationModel_CStore_CInternal_CILicenseInformationPrivateWithConsumables
__x_Windows_CApplicationModel_CStore_CInternal_CIMessageDialogHelper
__x_Windows_CApplicationModel_CStore_CInternal_CIMessageDialogHelper2
__x_Windows_CApplicationModel_CStore_CInternal_CIProductLicensePrivate
__x_Windows_CApplicationModel_CStore_CInternal_CIProductLicensePrivateWithConsumables
__x_Windows_CApplicationModel_CStore_CInternal_CIProductListingPrivate
__x_Windows_CApplicationModel_CStore_CInternal_CIStoreCommerce
__x_Windows_CApplicationModel_CStore_CInternal_CIStoreCommerce2
__x_Windows_CApplicationModel_CStore_CInternal_CIStoreCommercePreview
__x_Windows_CApplicationModel_CStore_CInternal_CIStoreCommerceSimulator
__x_Windows_CApplicationModel_CStore_CInternal_CIStoreCommerceSimulatorWithConsumables
__x_Windows_CApplicationModel_CStore_CInternal_CIStoreCommerceWithConsumables
__x_Windows_CApplicationModel_CStore_CInternal_CITestingFrameworkState
__x_Windows_CApplicationModel_CStore_CInternal_CITestingFrameworkStateChangedEventHandler
__x_Windows_CApplicationModel_CStore_CIProductLicense
__x_Windows_CApplicationModel_CStore_CIProductLicenseWithFulfillment
__x_Windows_CApplicationModel_CStore_CIProductListing
__x_Windows_CApplicationModel_CStore_CIProductListing2
__x_Windows_CApplicationModel_CStore_CIProductListingWithConsumables
__x_Windows_CApplicationModel_CStore_CIProductListingWithMetadata
__x_Windows_CApplicationModel_CStore_CIProductPurchaseDisplayProperties
__x_Windows_CApplicationModel_CStore_CIProductPurchaseDisplayPropertiesFactory
__x_Windows_CApplicationModel_CStore_CIPurchaseResults
__x_Windows_CApplicationModel_CStore_CIUnfulfilledConsumable
__x_Windows_CApplicationModel_CStore_CLicenseManagement_CILicenseManagerStatics
__x_Windows_CApplicationModel_CStore_CLicenseManagement_CILicenseManagerStatics2
__x_Windows_CApplicationModel_CStore_CLicenseManagement_CILicenseSatisfactionInfo
__x_Windows_CApplicationModel_CStore_CLicenseManagement_CILicenseSatisfactionResult
__x_Windows_CApplicationModel_CStore_CPreview_CIStoreConfigurationStatics
__x_Windows_CApplicationModel_CStore_CPreview_CIStoreConfigurationStatics2
__x_Windows_CApplicationModel_CStore_CPreview_CIStoreConfigurationStatics3
__x_Windows_CApplicationModel_CStore_CPreview_CIStoreConfigurationStatics4
__x_Windows_CApplicationModel_CStore_CPreview_CIStoreConfigurationStatics5
__x_Windows_CApplicationModel_CStore_CPreview_CIStoreHardwareManufacturerInfo
__x_Windows_CApplicationModel_CStore_CPreview_CIStorePreview
__x_Windows_CApplicationModel_CStore_CPreview_CIStorePreviewProductInfo
__x_Windows_CApplicationModel_CStore_CPreview_CIStorePreviewPurchaseResults
__x_Windows_CApplicationModel_CStore_CPreview_CIStorePreviewSkuInfo
__x_Windows_CApplicationModel_CStore_CPreview_CIWebAuthenticationCoreManagerHelper
__x_Windows_CServices_CStore_CInternal_CIGetNextStoreProductOperation
__x_Windows_CServices_CStore_CInternal_CIStoreContentIdKeyIdItem
__x_Windows_CServices_CStore_CInternal_CIStoreContentIdKeyIdResponse
__x_Windows_CServices_CStore_CInternal_CIStoreContextCallerData
__x_Windows_CServices_CStore_CInternal_CIStoreContextLicensesChangedCallback
__x_Windows_CServices_CStore_CInternal_CIStoreContextServer
__x_Windows_CServices_CStore_CInternal_CIStoreContextServer2
__x_Windows_CServices_CStore_CInternal_CIStoreContextServer3
__x_Windows_CServices_CStore_CInternal_CIStorePackageLicenseLostCallback
__x_Windows_CServices_CStore_CInternal_CIStorePackageUpdatePrivate
__x_Windows_CServices_CStore_CIStoreAcquireLicenseResult
__x_Windows_CServices_CStore_CIStoreAppLicense
__x_Windows_CServices_CStore_CIStoreAppLicense2
__x_Windows_CServices_CStore_CIStoreAvailability
__x_Windows_CServices_CStore_CIStoreCanAcquireLicenseResult
__x_Windows_CServices_CStore_CIStoreCollectionData
__x_Windows_CServices_CStore_CIStoreConsumableResult
__x_Windows_CServices_CStore_CIStoreContext
__x_Windows_CServices_CStore_CIStoreContext2
__x_Windows_CServices_CStore_CIStoreContext3
__x_Windows_CServices_CStore_CIStoreContext4
__x_Windows_CServices_CStore_CIStoreContextStatics
__x_Windows_CServices_CStore_CIStoreImage
__x_Windows_CServices_CStore_CIStoreLicense
__x_Windows_CServices_CStore_CIStorePackageInstallOptions
__x_Windows_CServices_CStore_CIStorePackageLicense
__x_Windows_CServices_CStore_CIStorePackageUpdate
__x_Windows_CServices_CStore_CIStorePackageUpdateResult
__x_Windows_CServices_CStore_CIStorePackageUpdateResult2
__x_Windows_CServices_CStore_CIStorePrice
__x_Windows_CServices_CStore_CIStoreProduct
__x_Windows_CServices_CStore_CIStoreProductOptions
__x_Windows_CServices_CStore_CIStoreProductPagedQueryResult
__x_Windows_CServices_CStore_CIStoreProductQueryResult
__x_Windows_CServices_CStore_CIStoreProductResult
__x_Windows_CServices_CStore_CIStorePurchaseProperties
__x_Windows_CServices_CStore_CIStorePurchasePropertiesFactory
__x_Windows_CServices_CStore_CIStorePurchaseResult
__x_Windows_CServices_CStore_CIStoreQueueItem
__x_Windows_CServices_CStore_CIStoreQueueItem2
__x_Windows_CServices_CStore_CIStoreQueueItemCompletedEventArgs
__x_Windows_CServices_CStore_CIStoreQueueItemStatus
__x_Windows_CServices_CStore_CIStoreRateAndReviewResult
__x_Windows_CServices_CStore_CIStoreRequestHelperStatics
__x_Windows_CServices_CStore_CIStoreSendRequestResult
__x_Windows_CServices_CStore_CIStoreSendRequestResult2
__x_Windows_CServices_CStore_CIStoreSku
__x_Windows_CServices_CStore_CIStoreSubscriptionInfo
__x_Windows_CServices_CStore_CIStoreUninstallStorePackageResult
__x_Windows_CServices_CStore_CIStoreVideo
_amsg_exit
_AppendToDataBuffer failed
_AreAllDownloadsComplete
_availabilities->GetView(ppValue)
_BuildBeneficiaryArrayJSON
_BuildBeneficiaryJSON
_BuildGoldenBeneficiaryArrayJSON
_BuildGoldenBeneficiaryJSON
_callnewh
_CheckOptionalPackageIsValid
_ConstructRequestBody
_contentIds->GetView(value)
_ConvertAppInstallState
_ConvertStoreQueueState
_CreateConnectionAndSendRequest(pszServerName, pszUrl, fUseSecure, fUsePut ? L"PUT" : L"POST", _GetStreamSize(pUploadDataStream), port, 0, fUseAuthentication)
_DownloadData()
_errno
_except_handler4_common
_extendedJsonData.Set(value)
_FilterProductsJson
_fInitialized
_ftol2
_ftol2_sse
_GetProxyInfoForUrl(pszServerName, pszUrl, fUseSecure, &pszProxyList, &pszProxyByPass, &dwAccessType)
_hCancelInternal
_hRequest
_hRequest == 0
_hRequest == hRequest
_images->GetView(ppValue)
_initterm
_IsNetworkMetered
_items->GetView(value)
_itow_s
_keyIds->GetView(value)
_keywords->GetView(ppValue)
_licenseLostEvent.Add(pHandler, pToken)
_licenseLostEvent.Remove(token)
_lock
_mapView.CopyTo(ppValue)
_modalManager != nullptr
_name.Set(name)
_name.Set(value)
_onexit
_ParseGetProductsByKinds
_ParseLicenseInstance( spLicenseInstance, isActive, isTrial, isTrialOwnedByThisUser, trialUniqueId.GetAddressOf(), isDiscLicense, expirationDate, trialTimeRemaining, package)
_pConnection == nullptr
_pPackage.CopyTo(ppPackage)
_pPackage->get_Id(packageId.GetAddressOf())
_pPackageLicense.CopyTo(ppValue)
_productId.CopyTo(value)
_productStoreId.Set(productStoreId)
_pszStringData == nullptr
_purchaseStatus == ProductPurchaseStatus_NotPurchased
_purecall
_ReceiveResponse failed
_request.CopyTo(json)
_response.CopyTo(json)
_response.Set(json)
_s/Z{I<
_SendJsonToURLWithHttpClientForStringResponse
_set_errno
_SetProxyForCurrentRequest(pszCurrProxy, pszProxyBypass, dwAccessType)
_ShouldFilterByRelationship
_skus->GetView(ppValue)
_snwprintf_s
_spPreviewImage.CopyTo(ppValue)
_spStoreContextServer.As(&result)
_storeContextServer->SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::GetUserCollectionForProducts, _spCV, jsonCollectionsParameters.Get(), nullptr, collectionsJsonString.GetAddressOf())
_transactionId.IsValid()
_unlock
_videos->GetView(ppValue)
_vsnprintf
_vsnwprintf
_WaitForLastAsyncCompletion failed
_wcsdup
_wcsicmp
_wcstoi64
_wcstoui64
_wcsupr
_WinStoreSDK_Receipt_Cache
_wtof
_wtoi
_wtol
_XcptFilter
`.data
`/ZQl
{"status": "aborted"}
{>Eu$
{268761a2-03f3-40df-8a8b-c3db24145b6b}
{client}
{d6d5a677-0872-4ab0-9442-bb792fce85c5}
{featureName}
{idType}
{installedPublisherId}
{lang}
{languages}
{market}
{marketCode}
{parentProductId}
{platformDependencyNameParam}
{productId}
{receiptType}
|$<PQ
|$49L$4
|$4PV
|$8PW
|$lPj
|hK,_
} QVhx
~/ZxqL
+>+b+
+4i'R+
+ykA'
< <$<(<,<0<4<8<<<@<D<H<L<P<T<\<`<d<h<l<p<t<x<|<
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<t<x<|<
< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<p<t<x<|<
< <$<(<,<0<4<8<<<@<D<H<P<T<X<\<`<d<h<l<p<t<x<|<
< <$<(<,<D<H<P<T<X<\<d<h<
< <(<,<0<4<8<<<@<D<H<L<P<T<X<\<`<d<h<l<p<t<x<|<
< <*</<E<t<
< <'<2<{<
< <0<<<A<G<b<g<l<
< <4<<<@<X<`<d<h<l<
< <B<G<S<h<m<|<
< =%=0=5=@=E=P=U=`=e=m=
< =+=`=m=z=
<!<+<_<n<
<!<7<`<x<
<!<8<K<Q<[<o<
<!<E<U<a<h<
<!<r<
<!='=?=L=c=r=
<!=Q=
<!=U=d=
<"<&<,<0<5<:<@<D<I<N<S<X<
<"</<U<a<w<
<"=R=
<#<3<C<S<r<}<
<#<3<Z<_<i<
<#<E<J<O<{<
<#<O<_<m<
<#<V<p<
<$<(<,<0<4<8<<<@<D<H<L<P<T<X<`<d<h<p<t<x<|<
<$<1<8<><P<X<a<h<}<
<$<B<
<$<v<{<
<$=>=
<$=>=n=
<%<*<1<@<F<O<V<]<d<v<
<%<,<
<%<7<<<D<^<d<v<{<
<%=+=5=K=
<%=g=
<&<T<c<h<
<&=D=I=S=
<&=Q=n=
<(<,<0<4<8<D<L<P<T<X<p<t<
<(<2<7<
<(<6<@<E<[<
<)<.<[<i<w<
<)<.<6<e<t<y<
<)<:<\<b<l<
<)<@<
<)=H=a=
<)=j=y=~=
<*<|<
<*<><
<,<0<8<<<@<D<L<P<d<h<l<
<,<4<8<L<P<T<X<`<h<
<,<4<8<P<X<\<d<h<
<.<@<O<T<^<x<}<
<.<x<
<.=W=q=|=
</<><H<M<l<
</<4<9<X<
</<p<
<:<B<[<g<l<v<
<:=A=K=P=~=
<;<e<r<
<;=D=w=
<;=k=
<??YzU
<?=v=
<'?i?
<@<J<O<n<
<@=h=
<\=t=~=
<^<p<
<^=c=m=
<^BI+
<+<<<A<K<h<n<x<
<+=;=A=F=
<'<-<2<8<A<r<
<<<Y<v<
<<=H=X=\=b=g=l=q=
<<=N=X=]=
<'<3<;<Q<Y<
<'<9<><b<n<}<
<-<B<
<-<c=o={=
<'<d<j<
<'<X<c<
<==`=y=
<'===M=f=
<'=G=
<><C<M<
<0<L<W<d<k<r<
<0b0h0
<0r0=1"2
<1<<<i<q<|<
<1<6<R<W<e<w<|<
<1<P<U<_<
<1=;=K=d=
<2=Q=W=\=
<3<><
<4<;<B<^<f<m<t<z<
<4<9<C<j<
<4<A<
<4<C<h<|<
<5<_<o<}<
<6=[=x=
<6=D=N=`=k=
<6=H=V=b=
<7<h<q<
<7<w<
<7<W<g<
<7=>=D=K=
<8<D<j<x<
<8=<=@=D=p=t=x=|=
<9<><H<r<
<A<G<L<V<
<A<K<P<e<s<x<
<a<l<s<}<
<B<Q<V<`<
<B=f=u=
<C<R<~<
<c=p=w=}=
<D=K=R=
<F<X<f<
<G<L<T<
<G<m<
<G=\=n=
<g=~=
<G=O=T=_=
<J<v<
<K<a<
<L<[<e<j<
<l=u=
<M<f<|<
<N<s<
<P<[<`<e<r<
<P<Z<q<x<
<pqBJ
<Q<e<l<q<
<Q=b=
<R=`=j=|=
<T<s<z<
<U=[=}=
<X<h<v<
<X=_=d=n=
<y<~<
<Z<d<j<
= =$=(=,=0=4=8=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
= =$=(=,=0=4=8=<=@=D=H=L=P=T=`=d=h=l=p=t=x=|=
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=|=
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
= =$=(=,=0=4=8=<=@=D=H=L=P=X=\=`=d=h=l=p=t=x=|=
= =$=(=,=0=4=8=P=T=X=\=`=d=h=l=p=t=x=|=
= =$=(=,=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
= =$=(=,=4=8=<=@=D=H=L=P=T=X=\=`=d=l=p=t=x=|=
= =$=4=8=<=L=T=X=p=t=x=|=
= =%=-=
= =%=-=_=
= =,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
= =<=A=K=
= =2=9=Z=w=
= =f=
= =M=\=a=k=
= =T=
= =V=x=
= >/>`>
= >3>`>|>
=!=9=m=s=y=~=
="=(=g=q=
="=*=2=>=D=J=P=_=v=
="=2=B=R=b=r=
="=E=
="=g=m=
=">'>1>
=#=(=-=4=>=^=e=
=#=)=-=3=:=@=D=J=N=T=[=a=e=k=o=u={=
=#=-=
=#=-=2=[=z=
=#=1=F=
=#=3=A=
=#=A=F=M=S=c=
=#>H>
=$=(=,=@=H=d=h=l=p=t=
=$=)=1=R=^=j=n=t=y=~=
=$=0=O=l=q=v=
=$=3=8=@=W=d=
=$=5=y=
=$=6=>=Q=a=s={=
=$>?>
=%=,=6=M=
=%=+=1=5=;=?=E=K=Q=U=[=_=e=k=q=u={=
=%=3=a=w=
=%=E=O=|=
=&=-=@=\=g=t={=
=&>,>O>T>t>
=&>0>5>[>
=&>8>F>R>
=&>Q>s>
=(=,=4=8=<=@=D=H=\=`=h=l=
=(=/=n=u=|=
=(=6=i=
=(=7=S=b=
=(>Y>
=)=@=
=)=`=;>S>`>g>n>
=)=4=;=O=T=g=
=)=5=q=
=)>>>L>]>
=)>4>T>Y>c>
=*=/=7=c=h=p=
=,=1=
=,=1=;=
=,=3=:=@=S=^=
=,=6=B=I=P=
=,>1>6>c>
=,>2>T>Y>c>
=,>5>P>
=,>Z>p>
=.=;=@=J=b=l=q=
=.=;=G=N=Y=x=
=.=4=M=T=[=w=
=.=5=
=.=z=x>
=.>?>}>
=.>8>=>e>z>
=/=6=<=
=/=7=<=F=
=/=9=>=T=~=
=/=X=g=x=
=/>9>>>
=/>r>
=:=D=I=s=
=:=E=L=Y=
=:>G>N>U>\>c>j>p>
=?=O=]=
=?>D>a>p>u>}>
=?>J>
=@=g=
=@=J=O=a=
=@=O=Y=^=
=\=g=
=\>e>
=_>h>
=_>r>w>
=~&WF
=+=]=b=l=
=+=>=K=m=
=+=4=@=G=N=U=_=i=
=+>2><>
=+>2>7>>>M>S>\>c>j>q>
=+>g>
=-=\>e>
===|=
===R=d=
=-=>=a=g=n=x=
=-=3===g=l=q=x=
='=5=C=H=R=j=t=y=
='=E=T=|=
=>=E=L=S=i=
=>=Q=X=b=
=>=X=
=0>>>H>Z>e>
=1=@=x=
=1=v=}=
=1>^>c>m>
=1>7><>D>q>w>|>
=2=B=P=~=
=2=r=
=2>C>H>N>h>
=2>w>
=3=A=F=K=b=
=3>k>u>z>
=4=8=<=@=D=T=X=`=d=h=x=
=4=D=R=
=5=:=k=p=
=6=H=V=
=6=O=\=s=
=7=<=F=
=8=s=|=
=8>?>D>L>u>{>
=9=?=Y=k=w=
=9=H=g=
=9=O=
=A={=
=a={=
=A=P=y=
=a>h>r>w>
=AWindows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<struct HSTRING__ *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<struct HSTRING__ *>,0>::DoWorkStub
=B=j=q={=
=b=o=v=|=
=B>Q>[>`>
=c=~=
=C=H=M=i={=
=c=u=}=
=C>t>
=D=_=k=z=~=
=E=J=d=u=
=f=m=r=
=F=X=f=$>E>
=f>x>
=G=Z=y=
=H=O=T=\=
=H=W=h=
=h>m>r>y>
=I>c>
=J>Q>V>^>
=K=P=
=L>U>
=l>u>
=L>U>
=O=\=c=i=|=
=o>t>~>
=R=h=o=y=~=
=R=X=]=u=z=
=V>h>v>
=Z=a=g=
=Z>t>
> ?*?A?H?
> ?7?Q?b?
> >$>(>,>0>4>8><>@>D>H>L>P>T>\>`>d>h>l>p>t>x>|>
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>p>x>|>
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>l>p>t>x>|>
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>p>t>x>|>
> >$>(>,>0>4>8><>@>D>H>L>T>X>\>`>d>h>l>p>t>x>|>
> >$>(>,>0>8><>@>D>H>L>P>T>X>\>`>d>h>p>t>x>|>
> >$>(>,>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
> >$>(>,>4>8><>@>D>H>L>P>T>X>\>`>d>l>p>t>x>|>
> >&>*>0>6><>@>F>L>R>X>h>s>
> >(>,>4>8>T>X>`>d>h>l>t>x>
> >(>,>D>L>P>X>\>p>x>|>
> >(>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
> >(>4>8>@>D>H>T>X>`>d>h>p>x>
> >'>.>C>N>S>x>
> >0>4>8>L>T>\>`>d>h>l>t>x>|>
> >A>F>P>
> >f>
>!?6?i?r?y?
>!>(>/>A>L>S>Z>a>v>
>"?B?c?
>"?G?L?V?
>">,>B>s>x>
>">2>B>R>b>r>
>">9>@>J>O>x>
>">A>Q>a>q>
>">N>^>l>
>#?2?7?A?n?w?
>#?9?
>#>)><>G>Y>`>
>#>*>1>8>?>F>X>q>}>
>#>=>^>e>l>
>#>->E>h>m>w>
>#>A>F>M>S>c>
>$?2?i?
>$>)>E>
>$>/>F>b>i>o>v>
>$>_>d>
>$>J>c>s>
>%>*>4>`>o>t>~>
>%>,>2>E>P>y>
>%>3>Y>e>u>
>%>D>Z>_>i>
>%>V>]>d>z>
>%>x>
>&?8?F?t?
>&?9?
>&>/><>C>
>&>+>F>Q>[>l>
>&>0>;>H>O>V>]>p>
>&>0>K>R>W>a>
>&>2>
>&>D>
>(?>?j?z?
>(?5?<?C?U?`?g?n?
>(>/?8?
>(>->7>
>(>6>
>(>B>P>
>)?\?i?p?v?
>)?V?
>)>.>Z>
>)>@>
>)>1>;>@>U>
>)>6>S>k>
>*?/?7?v?{?
>,?|?
>,>1>F>O>b>g>
>,>3>:>L>W>^>e>z>
>,>8>b>n>
>,>g>l>t>
>.>3>=>P>_>w>|>
>.>8>C>J>z>
>.>h>
>/?6?
>'?.?3?;?h?m?
>'?1?6?I?R?]?
>'?V?]?
>^?u?
>`>v>
>+?0?;?@?K?P?[?`?k?p?x?
>+>a>s>~>
><>g>v>{>
>=?L?
>=>W>w>
>>?K?R?d?o?v?
>'>3>
>'>3>?>K>W>
>->7><>
>'>8>Y>a>k>p>
>->a>
>0?5???
>0?5???f?u?|?
>0?I?q?
>0>I>P>\>
>0>T>
>1?\?r?w?
>1?6?y?~?
>1?8?
>2?7?A?r?
>2?G?
>3?<?G?
>3?Y?j?
>3>`>e>}>
>3>N>U>b>o>
>4><>A>K>m>r>|>
>4>9>C>r>
>4>C>[>`>e>z>
>4>L>Q>[>p>y>
>4>V>i>x>
>6?a?
>6>_>o>}>
>6>H>U>t>~>
>6>H>V>
>6>H>V>b>n>
>7?X?
>8>?>
>b?l?~?
>B?M?`?e?o?
>b>g>o>
>C?I?P?Z?
>C?R?W?a?
>c>n>
>e?x?
>E>[>
>f?x?
>F>j>
>f>m>r>
>g?l?
>G?P?U?
>G>g>
>H>N>S>
>H>U>v>
>http://www.microsoft.com/pki/certs/MicCodSigPCA_2010-07-06.crt0
>http://www.microsoft.com/pki/certs/MicRooCerAut_2010-06-23.crt0
>http://www.microsoft.com/pki/certs/MicTimStaPCA_2010-07-01.crt0
>I?V?c?j?q?x?
>I>Y>g>
>K?x?
>K>Q>\>a>f>
>L?]?
>M?R?\?|?
>N>[>r>w>
>N>T>x>
>P>e>
>P>Y>
>QSh4
>S>i>n>
>U>Z>d>
>V>|>
>V>h>v>
>X>h>v>
>Y?c?h?
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0t0x0|0
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0l0p0t0x0|0
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0d0h0
0 0$0(0,0004080<0@0D0H0L0T0X0\0`0d0h0l0p0t0x0|0
0 0$0(0,0004080<0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
0 0$0(0,00080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
0 0$0(0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0|0
0 0$0,0004080<0@0D0H0L0P0T0X0\0d0h0l0p0t0x0|0
0 0(0,04080
0 0(0,0D0L0T0X0\0`0t0|0
0 0*0/0D0q0w0|0
0 0;0n0
0 0]0f0u0z0
0 01060@0e0n0
0 0f0
0 0J0O0Y0
0 1'1.1n1u1|1
0 191_1
0 1C1
0 1R1{1
0!0+0_0d0i0
0!0'0:0M0T0j0q0w0
0!090Q0c0p0
0!0X0o0|0
0!0Z0b0g0q0
0!101\1k1u1z1
0!181b1g1q1
0!1C1b1
0"0)0/060=0D0K0^0i0
0"0)0-02070=0A0F0K0P0U0s0
0"0.0:0S0_0d0n0
0"0/0K0
0"020B0R0b0r0
0"0j0
0"1)13181e1
0"1'1=1P1s1
0#0(010
0#0*0J0Q0V0^0
0#0-020
0#030Q0V0]0c0s0
0#0B0
0#0S0
0#1?1D1f1k1s1
0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
0$0(0,0T0X0\0`0d0p0x0
0$0(00040L0T0\0d0h0l0p0
0$0*020Q0q0
0$0*040A0F0P0
0$0,0004080H0L0P0X0\0`0d0h0l0p0x0|0
0$0[0j0
0$040?0V0
0$040R0]0r0}0
0$090@0
0%0[0u0
0%0K0{0
0%0Y0s0
0%1;1
0%101P1Y1
0%14191^1c1~1
0%1G1z1
0%1r1
0&0=0G0L0
0&030:0A0H0[0d0p0w0~0
0&0C0i0
0&0D0U2e2s2
0&0F0K0U0
0&0F0L0n0z0
0&11161
0(0/1U1\1c1
0(050<0C0J0P0c0n0
0(060B0
0(0J0O0
0(171A1F1
0(171H1i1q1{1
0(1S1q1|1
0)1.131S1`1m1z1
0*1/171o1
0,0<0J0X0b0g0
0,04080@0D0\0d0h0p0t0
0,151
0,1b1
0,1D1N1V1b1g1l1s1}1
0,1L1
0.0:0Q0_0m0r0|0
'0.030;0h0m0
0.1=1B1L1
0.1E1
0/040_0d0
0/050:0L0a0o0y0~0
0/0i0
0:0D0S0
0:0E0
0:0I0N0X0
0;0@0f0k0s0
0;0A0R0[0h0m0w0
0?1D1N1n1t1
0[1d2
0\1e1p1
0^0n0|0
0_1d1l1
0`1l1
0~uz)
0+000:0_0o0}0
0+010R0W0a0
0+070D0K0R0Y0`0g0n0
0+0D0I0Q0
0+1I1N1X1
0<0C0b0
0<0R0W0r0x0~0
0<1r1
0=1I1p1u1
0>0N0\0
0>0T0
0>1g1
0-0:0?0G0h0o0v0
0-0]0c0t0}0
0'0>0J0
000~0
000A0
000i0
001:1Q1X1
001P1
0-070y0
0'080Y0a0k0p0
010L0
010P0o0
011D1I1N1m1
011F1Q1~1
021A1f1u1
030:0D0I0n0u0
030@0~0
030>0E0L0p0
030B0L0Q0w0
040>0C0
040>0F0R0W0\0c0m0
040904B0
040J0k0x0
050B0I0P0W0]0p0{0
051C1O1k1w1
060;0E0^0
-060@0F0M0W0n0
060a0R1c1
060H0V0
061;1C1
070B0K0Z0_0g0
070Q0\0
071A1F1x1
071v1
080?0D0K0Z0`0i0p0w0~0
080F0P0U0r0
081B1G1u1
090T0^0c0
090T0p0
091t(P
0A0F0`0i0
0a0g0l0t0
0A1G1L1V1
0B0f0
0B0R0`0
0b0s0x0~0
0b1l1~1
0b1l1~1&2
0B1S1b1i1
0C0J0Q0X0n0
0D0^0
0d0z0
0F0v0}0
0F0X0f0r0
0g0l0r0
0G1Q1\1i1p1w1~1
0G1s1
0H0y0
0H1l1
0I0S0^0k0r0y0
0I0X0b0g0
0J0R0Y0`0f0
0J0W0^0e0w0
0J1|1
0K1Z1_1w1|1
0L0h0y0
0L1U1
0L1V1[1
0m102D2
0M1l1w1}1
0N0S0X0
0P0k0?1H1v1
'0P0t0
0P0U0
0Q0e0q0
0QSh 
0QSh0
0s0x0
0SVW3
0V0h0v0
0W0^0c0k0
0w0~0
0xABBACAB
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1x1|1
1 1$1(1,1014181<1@1D1H1L1P1X1\1`1d1h1l1p1t1x1|1
1 1$1(1,10181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
1 1$1(1,14181<1@1D1H1L1P1T1X1\1`1d1l1p1t1x1|1
1 1$1,14181<1@1D1L1P1T1\1`1d1h1p1t1x1|1
1 1$181<1@1P1X1\1t1x1|1
1 1(1>1T1\1u1
1 1*1/1D1T1b1l1q1
1 1*1^1m1r1|1
1 1014181<1D1H1P1T1h1p1t1
1 1F1
1 1N1d1
1 272Q2d2i2o2
1 2O2Y2^2
1 2Y2|2
1!1,11161R1_1
1!1+101E1
1!191Q1c1p1
1"1)101C1N1`1g1
1"1,1f1
1"121B1R1b1r1
1"141D1u1
1"212h2
1"222@2n2
1"2L2|2
1#1+1>1F1Y1m1u1
1#131Q1V1]1c1s1
1#161I1n1s1{1
1#1N1h1}1
1$1(10141H1P1T1h1p1t1
1$1.131r1
1$1@1D1H1L1P1\1d1l1p1x1|1
1$1{1
1$1-1=1F1P1
1$1C1J1h1m1w1
1$1R1a1
1$q#lPd
1%1*1H1c1h1p1
1%1,13191
1%1,131H1|1
1%1?1[1
1%1+1
1%121M1
1%2i2v2
1%2K2n2
1%2V2[2
1&1;1E1O1\1v1
1&1^1y1
1&1-1?1_1i1
1&121
1&2+2T2]2
1&2-222E2R2W2_2
1&282F2
1&2T2a2
1(0&0
1(1/1X1]1w1
1(1014181<1L1T1X1t1x1
1(161<1T1x1
1)1@1
1)1>1J1O1Y1
1)131>1E1
1)181B1G1]1m1w1}1
1)2.262P2p2u2}2
1)2=2J2d2q2
1)282I2`2j2t2
1*1/191X1`1e1o1
1*111;1@1g1n1
1*11181M1
1*1B1Z1u1
1*22272?2
1*22272A2z2
1*2n2
1.131V1m1
1.2;2B2N2\2|2
1.232C2I2O2V2g2l2z2
1.2v2
1/0-0
1/1?1M1{1
1/161@1U1Z1_1q1
1/Zfj
1:1A1H1O1e1
1:2"363%4;4E4P4]4d4k4r4
1;2G2Z2
1?1I1N1}1
1[1w1
1+222]3d3
1<1~1
1<1K1P1Z1
1<2E2_3h3
1<2E2v2
1<2G2L2Q2[2{2
1=2B2b2g2x2
1>1_1n1
1>1K1a1f1
1>2N2\2
10.0.22000.1
10.0.22000.1 (WinBuild.160101.0800)
100701213655Z
100706204017Z
10181<1P1T1X1\1`1d1h1l1p1t1x1
102J2[2
1'1,171<1D1X1^1c1
1-1;1I1W1n1
1-1=1J1^1n1~1
111;1@1k1y1
111V1q1
112<2C2M2
113A3Z3
1-14191U1Z1j1
1'161
1'1s1x1
1'2.252;2
1'2.282
121^1
121^1e1l1s1
1-2R2o2z2
1'2X2g2
131@1S1\1
141<1`1d1h1l1
14191i1
142>2C2t2
151:1W1\1d1
151?1b1
151<1C1~1
151<1N1Y1{1
151H1Y1j1{1
151X1]1h1
161H1V1b1
171b1j1t1
172>2D2K2s2{2
182Y2q2
191G1\1n1{1
192F2M2T2Z2m2v2
1A1^1s1|1
1b2i2s2
1C1P1q1
1C1Y1
1C2N2`2
1E1g1}1
1E2Z2
1F1`1
1G1f1v1
1g1l1t1
1http://www.microsoft.com/PKI/docs/CPS/default.htm0@
1I1N1V1v1
1I2`2
1K2V2b2i2s2
1L1Q1
1L2d2n2v2
1M1p1
1M1V1m1
1N1{1
1O1\1c1i1|1
1O1t1
1O1Y1^1
1O2Z2v2
1Q1,2s2z2
1Q1c1
1R1x1
1T1^1d1t1
1T1c1h1r1
1T2j2
1U1}1
1V1e1j1
1V2a2}2
1Y1h1o1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
2 2$2(2,2024282<2@2D2H2L2P2X2\2`2d2h2l2p2t2x2|2
2 2$2(2<2@2D2H2X2`2d2x2|2
2 2$2(2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
2 2$2*2.242:2@2D2J2N2T2Z2`2d2j2n2t2z2
2 2$2,242<2@2D2H2L2T2X2\2`2d2l2p2t2x2
2 2$282<2@2D2T2X2\2p2x2
2 2%2*2/24292D2K2q2
2 2%2@2N2]2n2|2
2 2%2=2B2J2
2 2%2>2P2^2v2
2 2(2,2@2D2H2X2`2d2|2
2 2(2,2@2H2L2d2h2l2p2t2x2|2
2 2.232A2F2Q2V2^2v2
2 2;2A2
2 2'2-2@2I2V2]2t2
2 3>3F3S3e3{3
2!2&2Q2[2`2
2!2(2r2y2
2!292K2Y2j2o2y2
2!2p2z2
2!2x2
2!30353?3
2"2)2.262M2Z2i2n2v2
2"2/2k2q2|2
2"2'212I2S2r2w2
2"252H2O2e2l2r2
2"2a2f2
2"33383>3X3
2"3T3
2#2*2<2G2N2U2j2f4
2#2,2^2w2
2#20272>2E2L2S2Z2a2s2
2#2-2_2w2
2#262
2#2A2F2M2S2c2
2#2k2q2|2
2#3*34393y3
2#3;3H3x3
2$2*2/262<2B2H2N2S2Z2`2f2l2r2w2~2
2$2S2
2$2W2c2t2
2$3?3c3
2%2*2:2?2O2T2\2y2}2
2%2*222
2%2d2n2t2
2%2F2N2g2s2x2
2%2V2h2v2
2%3*3D3Q3V3^3
2%3/343Q3_3d3n3
2%3h3m3
2&2<2K2]2y2
2&383F3
2(2,202D2L2T2\2d2l2p2x2|2
2(23292Q2e2j2|2
2(262D2I2S2
2(2h2u2
2(2i2
2(3-373_3d3i3
2)282=2E2\2
2)2l2q2y2
2)2Z2
2)3@3p3
2)33383Y3g3l3t3
2*21282?2F2M2T2Z2b3
2*2a2l2
2*2v2
2,2:2?2I2^2
2,2L2R2\2d2~2
2.232;2\2r2w2
2.232=2X2m2r2w2
2.23282?2I2
2.2a2
2.2O2
2.3H3
2/2:2O2a2f2n2
2/2?2O2_2o2|2
2/2<2`2j2o2
2/2>2g2
2/242o2t2
2/2R2n2
2/343<3
2/363@3E3^3p3~3
2/3J3
2;2Q2
2?2O2]2
2?3K3[3_3f3j3p3v3|3
2@2I2
2[2`2j2
2\2k2p2z2
2`3o3t3~3
2+242D2M2]2f2
2+252:2
2+2F2
2+2L2Q2V2
2<3E3v3
2<3F3K3s3
2<3z3
2>2O2
2>2Q2
201015172822Z
201215212420Z
20210605020458.818Z0
20210605094909Z
20210606094909Z0w0=
20282<2@2D2T2X2\2p2x2
202R2W2a2
203V3
211202212420Z0t1
21262{2
21262=2C2S2q2v2}2
212h2
212I2}2
212T2w2
2'2,262W2\2f2
2'2/2;2p2w2~2
220112172822Z0
2'21262y2
223@3L3X3
223^3c3m3
2'232]2n2u2
223S3
230865+4631340
233B3c3h3m3
233d3q3x3~3
233G3V3g3q3v3
2'363O3^3h3m3
242_2
243=3H3x3
243A3H3O3a3k3v3}3
250701214655Z0|1
250706205017Z0~1
253S3_3
262H2V2
262H2V2b2
263J3
272C2K2X2h2r2
282S2n2
292B2S2X2]2d2n2
2A2p2y2
2A2W2
2A3F3N3
2B2I2P2W2h2
2B2L2W2d2k2r2y2
2B2R2`2
2B3S3X3^3x3
2d3I5
2d3k3r3y3
2D3Y3j3
2E2L2Q2X2g2m2v2}2
2E3T3y3
2f3x3
2F3X3f3r3~3
2g2v2{2
2H2r2
2H2W2h2
2h2x2
2I3`3
2J2d2u2
2J2O2Y2
2j3u3
2K2P2p2u2
2K2Q2g2n2x2}2
2k2w2
2K3R3W3_3
2l3u3
2m2z2
2m3s3x3
2N3}3
2N3d344J4
2o2z2
2P3Z3_3
2S2\2g2
2S2`2j2
2W3\3f3}3
2X2_2d2l2
2X3w3
2Z2a2f2p2
3 3$3(3,3034383@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3p3t3x3|3
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3l3p3t3x3|3
3 3$3(3<3D3`3d3h3l3t3x3
3 3$3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
3 3$3<3D3L3P3X3\3t3x3
3 3$3P3T3X3\3`3d3h3
3 3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
3 3(3,3D3L3P3X3\3x3|3
3 3(30383@3D3H3L3P3X3`3d3h3l3
3 3(34383@3D3H3P3X3\3d3h3
3 303@3P3`3m3
3 3Q3
3 4(4A4M4R4\4
3 4D4g4
3!3&3C3R3Z3l3|3
3!3(333a3m3t3
3!3+303E3
3!3+3R3p3u3
3!343T3~3
3!363i3z3
3!3h3o3t3|3
3!3i3x3
3!4(4
3!4+4<4B4N4_4l4v4
3"3)3
3"3/3l3w3|3
3"323B3R3b3r3
3"3g3
3"4,4
3"424@4n4
3"484=4G4h4~4
3"4f4m4r4
3#3(3@3N3S3]3
3#3)3<3G3n3u3
3#30353?3T3Y3c3x3}3
3#3'3,31363;3\3|3
3#3A3F3M3S3c3
3#5x5&6
3$3(3,303@3D3H3X3\3`3t3x3|3
3$3)353:3B3
3$3*3.33383=3B3i3v3
3$323`3v3
3$3R3h3
3$4-494A4b4
3$494J4
3$4j4u4
3%3,333:3L3
3%3=3D3
3%343p3u3
3%3V3h3v3
3%4*4N4S4u4z4
3&313<3]3b3l3
3&4-424E4R4W4_4
3&484F4
3&484F4R4
3(3:3M3n3s3}3
3(3~3
3(3=3B3J3{3
3(3-373M3g3t3{3
3(4a4f4p4
3)30353U3Z3b3
3)3I3
3)3W3m3
3)4D4P4c4h4p4
3*3[3~3
3*3>3T3b3
3*313N3
3*373L3Z3`3
3*3J3Z3
3*44494^4
3*4I4d4n4s4
3,454f4x4
3,515N5S5[5
3.3Z3j3x3
3/343>3V3v3
3/3E3q3
3/3k3
3/3Q3p3
3/3X3g3x3
3/474>4E4K4b4h4
3:3F3R3Z3{3
3:3G3M3T3[3u3~3
3?3D3V3c3w3
3?3O3V3[3e3w3|3
3?4F4
3@4p4
3[3`3s3
3\3e3
3_3i3n3
3+353:3R3n3t3
3+383>3Q3d3k3
3<3I3X3]3h3m3x3}3
3<4G4}4
3>3N3\3
3>4H4M4
3>4R4X4^4h4r4
30<0G0
30>0C0Y0
30393`3
30474<4D4
31363=3C3S3q3v3}3
31464@4
323?3{3
323c3l3
32474?4l4{4
32474<4C4M4{4
324C4H4N4h4
324Q4[4`4
334=4B4h4
3'343=3B3L3q3
334B4e4l4v4{466@6m6t6y6
3'363?3E3J3h3q3}3
3-363I3N3X3p3
3-383?3L3V3[3
3-3P3\3
3'3V3h3v3
343J3
3'444;4B4H4[4f4
3'464>4
3-474L4
354I4e4t4
363_3o3}3
363L3Q3
373?3R3]3b3
373F3v3
373L3R3h3u3z3
383=3d3
383G3L3V3
383X3]3g3
3A3c3
3A3n3
3A4G4L4T4
3A9 t
3b3q3
3B4d4v4
3C4W4^4c4k4
3d4z4
3G3a3n3u3|3
3G3V3o3~3
3G4[4g4l4v4
3g4n4t4{4
3GOZ+
3h3o3t3|3
3H3Q3h3
3H4`4g4s4
3H4O4j4u4
3H4X4f4
3I3R3e3j3r3
3I4Y4g4
3j3q3x3
3K4k4~4
3L3S3Z3
3L3V3a3n3u3|3
3M4W4b4o4v4}4
3P3f3k3u3
3P3Y3
3P4.585O5V5
3Q3`3
3R3c3h3n3
3R4\4n4
3SVmn
3X3w3
3Y3_3f3p3
3Y3c3
4 4$4(4,4044484<4@4D4H4L4P4T4\4`4d4h4l4p4t4x4|4
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4x4|4
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4p4t4x4|4
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4h4l4p4t4x4|4
4 4$4(4,4044484<4@4D4H4L4T4X4\4`4d4h4l4p4t4x4|4
4 4%4/4w4
4 4%4-4
4 4(40444<4@4T4\4`4x4
4 4,484g4n4s4{4
4 40484<4P4X4\4p4x4|4
4 444<4@4T4X4\4p4x4|4
4 444P4T4X4\4`4d4h4l4p4t4x4|4
4 4d4~4
4 4V4h4v4
4 5*5A5H5
4 585K5T5^5c5
4!4&404F4K4S4
4!4&4B4O4
4!4(4/4A4K4W4^4e4
4!4,41464_4
4!4.4=4I4
4!4+404W4^4~4
4!4+4h4n4
4!414>4R4b4r4
4!464@4E4f4s4
4"4)4
4"424B4H4N4b4r4
4"424K4o4
4"5H5Y5
4#4(4K4P4r4w4
4#4)4.4=4C4X4p4
4#4@4
4#4A4F4M4S4c4
4#4A4k4
4#4w4}4
4#5(5-545>5i5{5
4#5<5K5d5
4#595
4$4*4K4P4z4
4$4/4F4o4
4$4@4H4P4X4`4h4p4x4
4$4C4R4
4$4P4[4a4
4$5.545D5O5f5
4$5b5q5
4%4*4/4S4n4}4
4%4D4^4c4
4%4O4
4%4V4h4v4
4%5C5I5N5n5~5
4%5G5
4&424
4&4-4
4&4-4K4X4_4f4m4s4
4&4j4
4(4,44484<4X4\4`4h4l4
4(4:4C4V4g4
4(4?4F4~4
4(444@4L4l4
4(4-454O4p4u4
4(464
4(4L4[4o4
4(4P4e4
4(5d5m5x5
4)40474I4S4^4e4
4)454<4_4
4)474C4Q4Y4_4z4
4)4E4T4^4c4
4)5.585f5t5
4)565C5
4*4@4E4M4e4r4
4*41474r4
4*4M4o4
4,4;4E4J4
4,4;4O4
4,40444H4P4T4X4\4p4x4
4,4G4_4
4.494B4J4P4\4f4
4.4g4q4|4
4.4j4w4
4/4\4g4n4u4|4
4/444<4\4h4t4x4
4/44494X4i4x4}4
4/5d5i5q5
4/5I5S5X5
4/5m5
4/5O5e5{5C6
4:4?4G4]4t4|4
4:4O4
4:5b5i5
4:5c5p5w5~5
4:5I5b5
4;4@4E4K4U4
4;4B4K4
4;4Q4
4?4P4j4
4@5I5P5i5t5z5
4[5b5h5r5
4\4e4
4\4l4z4
4]5d5
4+4L4Q4_4t4y4
4+5U5\5c5
4<5d5m5
4<5I5P5W5]5p5{5
4=4J4Q4X4j4u4|4
4>4C4^4c4k4
4>4M4R4s4
404@4N4|4
40454?4b4n4
40474Q4Z4c4
404C4J4`4g4m4
405C5H5`5i5
405H5R5W5w5
405w5
4090C0j0
41464=4C4S4q4v4}4
41484p4y4
415]5b5{5
424V4e4y4+5J5{5
435<5G5
4-4@4
4-434T4n4t4
444D5p5
4'484I4Z4k4u4z4
4'4b4
4'4D4I4s4x4
4'4k4
4-4V4e4o4t4
4'5,5n5w5
4-5:5A5H5O5V5]5d5j5|5
4-5<5A5I5
4-5<5A5K5u5
4'5=5b5
4-525:5o5
454:4B4
455:5B5
455C5T5Z5f5
455M5T5
464<4B4G4V4\4q4h8q8|8
465=5[5j5t5y5
474d4
484|4
485{5
494C4H4^4}4
4A4U4\4a4i4
4b4k4s4
4b4s4x4~4
4b4w4
4b4z4
4B5L5^5
4B6S6m6
4C4s4
4E4J4T4
4es`O
4F4]4l4v4{4
4F4X4f4r4,555f5x5
4F5X5f5r5~5
4H5O5T5\5
4i5p5z5
4j5v6
4K4a4
4K5T6
4L4S4]4b4y4
4l5v5{5
4m4|4
4M4V4t4P5`5n5
4m5}5
4N:c:t:
4O4T4^4
4Q5^5
4q5v5
4-RZKD[
4U5k5
4V4`4e4
4X5b5}5
4Y4`4e4m4
5 5$5(5,50545@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
5 5$5(5,5054585@5D5L5P5h5p5t5|5
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5d5h5l5p5t5x5|5
5 5$5(5,5054585<5@5D5H5L5P5T5X5`5d5h5l5p5t5x5|5
5 5$5(5,5054585<5@5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
5 5$5(5,5054585<5@5P5X5\5d5h5p5t5|5
5 5$5(585@5D5p5t5x5|5
5 5%5-5Q5V5m5r5
5 5%5-5x5
5 5(50585@5H5P5X5`5h5p5x5
5 5)565D5g5w5
5 5@5D5H5L5P5X5\5`5p5t5x5
5 5L5\5j5
5!5?5e5
5!6)6.686y6
5"525B5R5b5x5
5"5'5O5
5"5c5w5~5
5"5F5^5x5
5"696G6X6`6v6~6
5"6Z6|6
5#5(5.525@5L5R5Z5`5f5l5
5#5.5<5C5I5
5#5-5_5n5x5}5
5#5A5F5P5V5f5
5#6X6
5$5,505D5L5P5d5h5l5|5
5$5,5x5
5$5/565
5$5+51585
5$5=5
5$515W5^5i5
5$5S5
5$6o6
5%5,535:5A5G5`5k5s5z5
5%505s5z5
5%5A5O5_5
5%5F5K5S5t5y5
5%5V5h5v5
5%6*626P6U6g6l6x6
5%6:6F6t6
5%62696@6R6]6d6k6
5&5/595B5L5^5
5&5<5l5
5&5>5D5K5U5
5&505K5|5
5&525z5
5&545b5x5
5&5G5L5V5}5
5&6,666X6
5&6-626<6R6y6
5&686F6R6
5(5@5u5
5(5<5S5a5
5(565B5
5(575<5F5]5
5(626I6
5)5;5[5
5)5|5
5)515H5
5)646J6S6a6g6s6z6
5)6L6
5*6@6
5*606A6a6
5*696I6N6X6
5*6V6k6
5,5;5K5u5z5
5,50545D5L5P5d5l5p5
5,6B6n6~6
5.5]5n5
5/6z6
5;6A6L6Q6V6r6
5?#Q+
5?6D6N6z6
5@5J5O5r5~5
5@5M5s5y5
5[6`6
5_5n5x5}5
5_5x5}5
5+5>5|5
5+515T5Y5c5
5+52595L5U5f5m5
5+595g5}5
5+5t5
5+616<6A6F6e6r6
5<5A5\5a5i5
5<6E6v6
5=5\5
5=5B5b5g5
5>5N5\5
50?0m0|0
51565@5}5
51565=5C5S5q5v5}5
51565K5R5e5j5}5
535@5T5h5
53686
546;6S6i6
5'5,5:5H5W5\5{5
5'5,515>5\5c5n5
5'545h5o5t5~5
555?5D5Y5j5z5
555P5h5n5
5-575<5_5k5~5
5-6>6H6
5'62696@6J6
565H5V5b5
565L5x5
576J6h6r6w6
595>5T5v5{5
595A5K5P5e5
596P6
5A5J5a5
5B5Y5n5s5{5
5b6l6q6
5C5]5j5o5y5
5D5Q5
5D5S5X5b5
5D6V6a6f6
5E5K5c5l5
5E5O5d5w5
5f6k6p6
5i5s5
5j6t6
5j6u6
5L5U5
5L6U6
5M5s5
5M5V5q5
5N5a5
5O5_5s5
5O5r5w5
5O5Y5^5
5O6z6
5P6y6
5R5c5h5n5
5R6^6k6p6z6
5R6`6l6x6
5S5\5g5
5T5Y5o5y5
5T5z5
5T6a6n6u6{6
5uS-C
5w5~5
5W5c5w5
6 6$6(6,60646<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6|6
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
6 6$6(6,6064686<6@6D6H6P6T6X6\6`6d6h6l6p6t6x6|6
6 6$6(6,6064686<6@6D6L6P6T6X6\6`6d6h6l6p6t6x6|6
6 6$6(6,64686L6P6T6h6p6x6
6 6$6(6064686<6@6D6H6L6P6T6X6\6`6h6l6p6t6x6|6
6 6$6(686<6@6P6X6\6p6t6x6
6 6$646<6@6T6\6`6|6
6 6%6,646M6_6l6r6y6
6 6%6U6_6d6
6 6(6
6 6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
6 6(60686D6H6P6T6X6`6l6p6x6|6
6 6-6>6C6M6z6
6 6T6
6 7)7r7
6!6&6B6O6
6!6(646
6!6_6
6!6=6n6
6!7U7b7i7{7
6"61666>6c6
6"626;6V6a6}6
6"686H6V6x6
6"6E6R6b6
6"6N6Z6j6n6t6y6~6
6"7(7H7b7p7
6"7N7Z7a7m7y7
6#6\6
6#616?6M6R6\6
6#6-6
6#6'6-63696?6q6w6|6
6#6A6F6K6P6U6Z6_6q6v6}6
6#6F6{6
6#6H6W6e6j6t6
6#6K6Y6
6#6N6Y6{6
6#6O6
6#6Q6g6
6$6,606H6P6T6\6`6t6x6|6
6$6,6w6~6
6$676D6X6h6x6
6$7)7<7j7u7
6$7+7
6$7>7D7r7:8
6%6*646T6o6t6~6
6%6*6X6j6
6%6Q6V6`6
6%6R6W6m6|6
6%7/7\7c7h7o7~7
6%7=7D7
6&6,6=6E6K6W6d6p6x6~6
6&626
6&626z6
6&6-6C6J6P6
6&6T6j6
6&70757_7n7
6&7-727E7R7W7_7
6&7-7H7R7W7
6&787F7R7
6&7Z7f7z7
6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
6(6_6d6n6
6(646@6d6p6
6(6-626?6]6d6o6
6(666B6
6(6F6
6(6H6h6
6(707:7H7N7X7r7
6(7-757v7}7
6)6.6
6)6@6
6)6<6C6Y6`6f6
6)646;6B6f6
6)686@6P6U6e6s6
6)7.787r7
6)767<7C7u7z7
6*6/696d6}6
6*61686?6Q6[6g6n6u6
6*737>7p7y7
6*74797f7u7
6*757b7
6*Z*~*J(
6,6>6P6]6j6{6
6.6;6L6o6{6
6.696F6L6P6V6Z6`6f6l6p6v6|6
6.6Z6j6x6
6.737;7
6/6E6\6z6
6/767=7S7
6/7u7
6;7A7L7Q7V7r7
6?7D7_7d7l7
6?9H9
6@6F6M6W6j6o6y6
6@6s6
6\:e:
6\6g6l6q6~6
6`6x6
6+6;6I6w6
6+666I6a6l6
6+686=6G6p6
6+7{7
6+7N7y7
6<6C6J6_6
6<6K6P6X6
6<6R6
6<7Z7a7h7
6>6L6n6s6x6
60;0C0x0
606@6l6
607e7
607i7
60H0V0b0
616:6b6g6
61666=6C6S6q6v6}6
61696
62686U6[6x6~6
627?7F7M7_7j7q7x7
627?7N7S7[7
627C7H7N7h7
627G7R7
636A6I6U6d6
646>6C6
64696A6n6}6
646h6o6t6~6
646q7y7~7
646W6
647?7R7k7p7z7
647F7Q7V7}7
656>6S6o6z6
656u6
6'6,6
6-6[6q6
6-6=6B6T6Y6k6p6}6
6'61686b6t6
6-636=6G6d6i6n6
6-656F6N6_6
666[6a6
667_7
667=7B7L7b7
667Y7p7
6'686I6Z6k6
668m8
6'6c6r6|6
6'6L6a6k6
6-6S6r6
6'7.747;7b7
6-72777P7a7p7
6-737<7H7
676F6k6
6-787T7]7
6'7N7^7x7
686]6l6q6{6
686H6l6x6
696@6
696N6T6m6
696p6K7r7
697B7Y7
6A7d7}7
6A7P7U7_7
6C6L6W6
6C7J7O7W7
6d6h6p6x6
6D7J7`7g7q7v7
6E6q6v6
6E6w6
6F6M6R6q6v6~6
6G6]6
6G6V6
6h7~7
6H7X7f7
6I6e6r6
6I7N7X7
6I7P7U7_7
6J6Q6u6
6J6r6
6J7P7
6K6P6Z6
6O6T6
6o7v7
6Q6`6e6
6R7a7f7n7
6S6.7U7
6S6y6~6
6V7e7j7t7
6X6c6
6X6h6v6
6Y6k6y6
6Z6c6n6
7 7$7(7,7<7D7H7\7`7d7x7|7
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
7 7$7(7,7074787<7@7D7H7L7P7T7X7`7d7h7l7p7t7x7|7
7 7$7(7,74787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
7 7$7(7,74787<7@7H7L7P7T7\7`7d7h7p7t7x7|7
7 7$7(70747<7@7l7p7t7x7|7
7 7$7(787<7@7T7\7d7h7p7t7
7 7$7*7.747:7@7D7J7N7S7X7^7b7h7l7q7v7|7
7 7$7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7|7
7 7$7,707D7L7P7d7h7l7|7
7 7$74787<7L7T7X7l7p7t7x7
7 7_7r7
7 787>7D7J7P7V7]7d7k7r7y7
7 8*8/8T8f8
7 808>8l8
7!7&7+707l7
7!7&7B7O7
7!7'7+71777=7A7G7M7S7Y7
7!7v7{7
7!8&8N8]8b8j8
7!9?9D9N9{9
7"7@7
7"7>7M7]7
7"787N7S7[7
7"7d7
7"7P7f7
7#737Q7V7]7c7s7
7#787a7p7
7#8:8S8`8e8
7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
7$7(7-72787<7B7F7L7R7X7\7b7f7l7r7x7|7
7$7)737P7]7d7q7v7
7$7.767B7G7L7S7]7o7
7$7\7k7p7x7
7$7\7v7{7
7$757p7
7$797F7[7`7e7
7$7M7R7Z7|7
7%7*7?7x7
7%7F7
7%82888?8F8M8g8p8y8
7%84898C8
7&7^7}7
7&7+7G7L7}7
7&70757V7r7
7&8-8K8Z8d8i8
7(727<7D7K7R7Y7`7g7
7(767B7
7(7-777
7(7-7E7T7Y7a7
7(7G7O7T7^7
7(888F8t8
7)787U7[7s7
7)8G8V8_8e8s8
7*7;7L7]7n7
7*7<7C7
7*7d7q7x7
7,7074787H7L7P7T7\7d7l7t7|7
7,858@8
7,w6^"k>
7.7g7
7.7V7e7
7/747>7_7n7
7/8?8Y8p8
7/848T8Y8t8y8
7/8n8
7/8w8
7:7L7a7
7:7T7e7r7
7;7J7T7Y7
7;8A8L8Q8V8r8
7?7{7
7?8H8}8
7@7O7
7[7p7
7\8t8~8
7]7y7
7`7e7s7|7
7<7A7I7^7c7n7s7{7
7<8E8v8
7=8I8\8
7>8g8
7>8S8^8
70757=7]7
70J0O0Y0{0
70T0y0
71767=7C7S7q7v7}7
717h7
718:8?8
71878
718d8
727@7h7o7v7}7
728<8N8
737;7B7I7O7|7
73787B7Z7
737C7Q7
738b8
738G8L8V8
747|7
747Q7\7k7t7
757?7D7~7
757S7t7
767H7p7
767H7V7
767T7_7
768H8V8b8
7'7,747L7X7w7
7-727<7T7Y7c7
7-747G7T7
777U7Z7_7l7
778n8v8
7-7O7\7j7~7
7-7Y7
7'868;8C8i8x8}8
787?7o7
787=7G7
787=7X7i7n7z7
787h7
788?8D8N8z8
797b7g7q7
797H7M7
797j7s7
798~8
798U8[8i8
7A8e8
7a8k8
7B7M7s7
7B7p7
7b7s7x7~7
7C7Y7l7|7
7D7_7m7
7D7I7Q7
7d8{8
7D8c8j8q8
7D8Q8^8e8k8~8
7E7[7
7E7k7
7f7m7t7{7
7F8M8R8\8r8
7H7^7\8e8
7h7o7t7|7
7H8O8T8\8
7I8V8]8o8z8
7j8o8
7l7u7
7p7v7
7P8U8]8
7Q7`7e7m7
7Q7e7l7q7
7V8[8`8
7Y7`7e7m7
7Y7p7
7Z>@B1
7Z8b8p8
8 8$8(8,8084888<8@8D8H8L8P8T8`8d8h8l8p8t8x8|8
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8l8p8t8x8|8
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8h8p8x8
8 8$8(8,8084888<8@8D8H8L8T8X8\8`8d8h8l8p8t8x8|8
8 8$8(8,8084888<8@8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
8 8$8(8,84888<8@8D8H8P8T8X8l8t8|8
8 8$8(8084888<8@8D8H8L8P8T8X8\8`8h8l8p8t8x8|8
8 8&8*80868<8@8F8J8P8V8\8`8f8j8p8v8|8
8 8*8m8w8|8
8 8,84888@8D8p8t8x8|8
8 80888<8P8T8X8l8t8x8|8
8 838N8Z8_8i8{8
8 8L8t8
8 9&9;9J9O9W9
8!8&8+808g8
8!8+8K8{8
8!848;8Q8X8^8
8!888E8R8X8k8w8}8
8!9(9/9w9
8"80858?8U8o8t8~8
8"8'8O8^8c8k8
8"8A8P8Z8_8t8
8"8C8o8
8"8p8u8z8
8"9(9
8"9,919a9
8#8)868@8E8j8s8
8#8*81888?8F8X8q8~8
8#8,898C8H8]8q8~8
8#8=8
8#838Q8V8]8c8s8
8#8J8W8^8d8w8
8#9-9
8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
8$8)8O8
8$8O8b8
8%8*848s8x8
8%8?8N8X8]8
8%848
8%858C8
8%8D8
8%8V8h8v8
8%9*9/9S9|9
8%939?9F9P9
8&8/8H8Y8
8&8_8{8
8&8+858s8
8&8E8
8&8T8j8
8&8T8n8
8&9+959
8(8,84888P8X8d8h8p8t8x8
8(8=8G8R8_8f8m8t8
8(8V8l8f9
8(9/999>9j9y9
8(9o9
8)8.8Q8`8
8)848G8_8j8q8~8
8)898N8i8
8)8l8q8{8
8)8R8[8g8t8
8)9@9
8)9>9o9
8)9h9
8)9S9X9
8*8v9
8*979D9K9R9Y9`9g9n9u9
8,8:8T8b8
8,80888<8@8D8L8P8d8l8p8
8,8C8N8
8,9:9A9K9j9
8.8=8G8L8
8.888O8V8
8.8Z8f8}8
8/8:8
8/9=9I9P9Z9
8/989C9|9
8:8P8
8:9?9l9
8;8@8|8
8;9A9L9Q9V9r9
8?8c8h8t8y8
8?8L8S8Z8l8w8~8
8?9D9\9g9
8@8^8m8
8@8E8d8s8x8
8[8a8l8q8v8
8\$ u
8\9e9
8\9s9
8^)uY
8+808f8l8
8+989k9y9
8<8{8
8<8R8'999
8<9E9v9
8<9F9K9w9
8=8C8[8h8m8u8
8=8L8Q8Y8~8
808_8o8}8
808=8f8
808>8R8u8
809i9
818;8@8n8}8
818;8C8I8Q8W8o8v8
81868=8C8S8q8v8}8
81888>8y8
81888T8j8o8
81979<9D9x9
819G9R9
82979A9n9}9
829H9O9Y9^9
838P8
83989B9
848<8@8D8H8X8`8d8|8
848J8v8
848u8
849=9T9
858:8c8h8
858:8D8_8
858M8X8b8z8
868?8h8v8
868b8
868H8V8
878<8D8
878>8_8d8i8
878D8o8
878T8
879E9
8'8,848g8(9-9
8'8,868N8S8[8q8
8'8\8
8'81868
8'838?8l8
889\9}9
8-8b8u8
8-8G8Q8V8l8|8
8-8n8s8{8
8'969W9f9
898{8
898Y8e8
8B8b8l8q8
8C8M8R8g8
8C9J9O9n9u9
8D$(u
8D$;Q
8D$8u
8d9q9x9~9
8E8a8l8
8E8L8S8Z8
8F(u:
8f8x8
8G9N9T9[9?:F:
8g9w9
8H8O8T8\8
8H9|9
8I8]8b8
8I8M8Q8U8Y8]8a8e8i8m8q8u8y8
8I8X8]8g8
8I9y9
8J9O9]9b9j9
8K8Q8\8a8f8
8L9z9
8m9R:
8P8]8
8p8}8
8Q9^9
8T$ u
8T$(u
8T$`u
8T$0u
8T$Pu
8T8Y8g8}8
8T9]9
8T9m9
8T9x9
8v839
8V9h9v9
8W9^9
8Y:L<
8Y8h8
8Z8e8|8
8Z9f9
9 :i:~:
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9|9
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9x9|9
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9h9l9p9t9x9|9
9 9$9(9,9094989<9@9D9H9L9P9T9X9`9d9h9l9p9t9x9|9
9 9$9(9,9094989<9@9D9H9L9P9X9\9`9d9h9l9p9t9x9
9 9$9,94989@9D9\9|9
9 9$989@9D9X9`9d9|9
9 9$9L9P9T9X9\9d9l9p9
9 9%9/9E9d9i9n9
9 9%9C9Z9i9x9
9 9&9*90969<9@9F9J9P9V9\9`9f9j9p9v9|9
9 9(9,94989L9P9T9d9h9l9|9
9 9(9,9D9L9T9\9d9l9p9x9|9
9 9'9.9
9 9T9
9!:;:v:
9!9&9-979R9
9!9(9:9R9\9g9t9{9
9!9.9?9k9x9}9
9!9.9N9U9`9
9!909:9O9j9w9|9
9":P:h:x:~:
9"9(949a9u9
9"9)90979>9Q9
9"9,979>9
9"9+9
9"939A9P9
9"9'919I9
9"9N9V9g9
9#9*919C9b9h9u9|9
9#939Q9V9]9c9s9
9#9D9I9Q9o9
9$:+:0:7:F:L:U:\:c:j:|:
9$:j:u:
9$9,9x9
9$90959?9Q9V9h9o9x9
9$929`9v9
9$93989B9n9}9
9$979@9Q9X9f9
9$9B9R9k9
9$9p9
9%9V9h9v9
9&9+9@9
9&9+9c9r9w9
9&929a9h9o9?:
9&939G9T9h9u9
9&9-9C9|9
9&9W9{9
9(999J9V9b9n9
9(9F9
9(9P9[9t9
9):/:F:U:_:d:
9):L:
9)9.9U9Z9
9)919;9@9U9
9)969=9C9J9]9i9q9w9~9
9)9J9
9)9L9U9
9)9T9Y9a9
9*999>9F9b9g9
9*9J9O9X9r9w9
9,:1:;:h:
9,:C:N:}:
9,9O9{9
9.989=9c9r9
9.9P9
9.u1h
9/:6:
9/9X9g9x9
9::F:V:Z:`:e:j:o:
9:9?9R9W9|9
9;:A:W:^:h:m:
9?:j:
9?:O:]:
9?9]9w9
9@9a9
9@9y9
9[9i9
9\$(t
9\$0u/
9\$pu&Q
9\$Pw&Q
9]9n9x9
9]9r9
9^,t&h`S
9^:c:m:
9^0u;
9_ tv
9_(s-j
9_@u*Q
9_@u'Q
9|$8u~
9+9;9D9
9+929;9|9
9<:E:v:
9<9@9D9H9L9T9X9\9l9t9x9
9<9{9
9<9E9i9s9
9<9L9Z9
9=9F9\9a9
9=9R9^9n9
9>:E:J:R:
9>:M:
9>9M9r9
90:5:=:k:z:
909M9W9\9t9
909z9
91:7:<:D:p:}:
91969=9C9S9q9v9}9
919J9]9b9j9
92:8:c:i:
939@9U9l9
939<9C9\9
939C9Q9
94:}:
94:=:H:z:
94:>:D:T:_:v:
949>9C9l9
95:E:L:U:\:c:j:q:x:
95:X:
959?9J9W9^9e9l9
96:;:Q:
969C9V9p9y9
969v9
97:D:K:R:d:
97:W:f:k:
98:B:G:a:j:}:
9'9?9P9Y9`9s9
9'9\9
9-929<9a9j9
9'92979^9t9
9-959B9
9'9-949>9]9b9
9'9H9S9`9f9j9p9t9z9
9-9P9]9
9A:]:
9a:i:w:
9a:n:v:
9A9i9
9A9W9
9B9N9
9c:h:
9D$ t#R
9D$Hv6
9e:q:
9e9j9
9E9O9T9
9g:*;
9g9t9
9G9Y9d9i9
9H:O:T:\:
9I9q9
9I9X9b9g9
9J:]:
9J;T;k;r;
9K;g;
9K9Z9
9M9V9t9
9N9\9
9N9Y9
9O9c9
9S:a:o:t:~:
9S9`9
9T:d:r:
9U:]:k:z:
9V$v)
9V9e9j9r9
9w4ud
9W9f9k9s9
9wHud
9wlu&h
9X$vC
9X9_9d9l9
9x9}9
9Y:i:w:
A ;B0t
A0;B@t
A0PRQ
AADAuthority
AADResource
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
aborted
Accept:application/json
AcquiredDate
AcquireSRWLockExclusive
AcquireSRWLockShared
actionFilter
actionFilters
Actions
ActivateInstance(RuntimeClassAppInstallManager.Get(), &_appInstallManager)
activatibleClassId
Added header %s
addend
AddFileToCab
Adding calling package = %s for productId = %s
Adding optional package = %s
Add-On Product Infos (CV = %hs):
AddOnKeyword
addOnParent
AllocateAndInitializeSid
AllowImpersonation
AlreadyPurchased
AlternateIds
AlwaysPromptBeforePurchase
AnonymousRequest
ApiInvoked
api-ms-win-appmodel-runtime-l1-1-0.dll
api-ms-win-appmodel-runtime-l1-1-1.dll
api-ms-win-core-apiquery-l1-1-0.dll
api-ms-win-core-com-l1-1-0.dll
api-ms-win-core-com-l1-1-1.dll
api-ms-win-core-debug-l1-1-0.dll
api-ms-win-core-delayload-l1-1-0.dll
api-ms-win-core-delayload-l1-1-1.dll
api-ms-win-core-errorhandling-l1-1-0.dll
api-ms-win-core-file-l1-1-0.dll
api-ms-win-core-file-l1-2-2.dll
api-ms-win-core-file-l1-2-4.dll
api-ms-win-core-handle-l1-1-0.dll
api-ms-win-core-heap-l1-1-0.dll
api-ms-win-core-heap-l2-1-0.dll
api-ms-win-core-heap-obsolete-l1-1-0.dll
api-ms-win-core-kernel32-legacy-l1-1-0.dll
api-ms-win-core-libraryloader-l1-2-0.dll
api-ms-win-core-localization-l1-2-0.dll
api-ms-win-core-localization-l2-1-0.dll
api-ms-win-core-path-l1-1-0.dll
api-ms-win-core-processenvironment-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-1.dll
api-ms-win-core-profile-l1-1-0.dll
api-ms-win-core-registry-l1-1-0.dll
api-ms-win-core-registry-l1-1-1.dll
api-ms-win-core-shlwapi-legacy-l1-1-0.dll
api-ms-win-core-string-l1-1-0.dll
api-ms-win-core-synch-l1-1-0.dll
api-ms-win-core-synch-l1-2-0.dll
api-ms-win-core-sysinfo-l1-1-0.dll
api-ms-win-core-threadpool-l1-2-0.dll
api-ms-win-core-threadpool-legacy-l1-1-0.dll
api-ms-win-core-timezone-l1-1-0.dll
api-ms-win-core-url-l1-1-0.dll
api-ms-win-core-util-l1-1-0.dll
api-ms-win-core-winrt-error-l1-1-0.dll
api-ms-win-core-winrt-error-l1-1-1.dll
api-ms-win-core-winrt-l1-1-0.dll
api-ms-win-core-winrt-string-l1-1-0.dll
api-ms-win-eventing-legacy-l1-1-0.dll
api-ms-win-eventing-provider-l1-1-0.dll
api-ms-win-security-base-l1-1-0.dll
api-ms-win-security-base-l1-2-0.dll
api-ms-win-security-capability-l1-1-0.dll
api-ms-win-security-sddl-l1-1-0.dll
api-ms-win-shcore-stream-l1-1-0.dll
api-ms-win-shcore-stream-winrt-l1-1-0.dll
api-ms-win-shcore-taskpool-l1-1-0.dll
ApiSetQueryApiSetPresence
AppDownloadLimit
Application
application/json
AppServiceName
AppServiceResponseStatus
aq~2<.
args->SetMemInfo(experienceToken, modalManager)
array
Assert (%s): %s
AsyncActionCompletedHandler
AsyncOperationCompletedHandler`1
AsyncOperationCompletedHandler`1<Boolean>
AsyncOperationCompletedHandler`1<String>
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.FulfillmentResult>
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult>
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.ListingInformation>
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults>
AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.PurchaseResults>
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>>
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>>
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>>
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>>
AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>>
AsyncOperationCompletedHandler`1<Windows.Security.Authentication.Web.Core.WebTokenRequestResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreAcquireLicenseResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreAppLicense>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreCanAcquireLicenseResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreConsumableResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductPagedQueryResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductQueryResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StorePurchaseResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreRateAndReviewResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreSendRequestResult>
AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreUninstallStorePackageResult>
AsyncOperationCompletedHandler`1<Windows.Storage.Streams.IRandomAccessStreamReference>
AsyncOperationCompletedHandler`1<Windows.UI.Popups.IUICommand>
AsyncOperationProgressHandler`2
AsyncOperationProgressHandler`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
AsyncOperationWithProgressCompletedHandler`2
AsyncOperationWithProgressCompletedHandler`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
Attached event handler for item %s
Attempting to set the install order to: %hs
aUs \v@
authority
Authorization
authTicket.IsValid()
AuthToken
AuthType
Availabilities
AvailabilityId
B)*Gv
b/+6(
b0g0l0
Bearer 
BeginOperation
beneficiaries
beneficiary
beneficiaryArray
BigId
BigIds
bNdb#
BodyBufferMaxSize
BodyForcePrompt
BodyPromptSettings
BodyTemplate
buffer != nullptr
Build Name
BuildStoreInAppInfo
BuildStoreInAppSkuInfo
BundledSkus
C:\data\systemdata\etw\StoreOperational.etl
C;\$ 
C0PVQ
C0W0i0{0
C3R/Z
C8PVQ
CABINET
Cabinet.dll
callContext
CallContext:[%hs] 
callerModule
callerReturnAddressOffset
campaignId
CampaignId
Canceling redirect for 0x%08x
CapabilityCheck
Caption
Catalog failure looking for BigCatId.
CatalogServiceProxyV6::AddOnsIterator::GetNext
CatalogServiceProxyV6::AddOnsIterator::GetNextBatch
CatalogServiceProxyV6::AddOnsIterator::Initialize
CatalogServiceProxyV6::GetB2BKey
CatalogServiceProxyV6::GetCustomerCollectionsId
CatalogServiceProxyV6::GetCustomerPurchaseId
CatalogServiceProxyV6::GetProduct
CatalogServiceProxyV6::QueryCatalogForBigCatIdByPackageFullName
CatalogServiceProxyV6::QueryCatalogForBigCatIdByPackageFullNameAndType
cbStatus >= sizeof(DWORD)
cbStatus >= sizeof(WINHTTP_ASYNC_RESULT)
cchRemaining < urlLength && "We should have copied *something*"
CClientSTAHelper::AppPurchase
CClientSTAHelper::DoWork
CClientSTAHelper::GetAddOnProduct
CClientSTAHelper::GetBigCatIds
CClientSTAHelper::ProductPurchase
CClientSTAHelper::ProductPurchaseViaInAppOfferToken
CClientSTAHelper::ProductPurchaseViaInAppOfferTokenWithDisplayData
CClientSTAHelper::ProductPurchaseViaInAppOfferTokenWithResults
CHANh
CheckTokenMembershipEx
ChkAlloc(_releaseLicenseTimer)
ChkAlloc(_results)
ChkAlloc(_spCV)
ChkAlloc(_spInAppOffers)
ChkAlloc(cv.Get())
ChkAlloc(hashMap)
ChkAlloc(licenseBuffer)
ChkAlloc(m_timer)
ChkAlloc(pwszUppercaseRegion)
ChkAlloc(spbResponseData)
ChkAlloc(spInAppOffer)
ChkAlloc(spInAppOffer->pInAppSkuList)
ChkAlloc(spInAppSkuInfo)
ChkAlloc(spListingInformation)
ChkAlloc(spManufacturerInfo)
ChkAlloc(spNewProductLicense)
ChkAlloc(spOperation)
ChkAlloc(spProductInfo)
ChkAlloc(spProductLicense)
ChkAlloc(spPurchaseResults)
ChkAlloc(spReceiptData)
ChkAlloc(spRequestProductPurchaseWithDisplayPropertiesInfo)
ChkAlloc(spSkuInfo = Make<StorePreviewSkuInfoServer>())
ChkAlloc(spStoreAppInfo)
ChkAlloc(spStoreAppInfo->pInAppOfferList)
ChkAlloc(spszDestBuffer = new WCHAR[cchDestBuffer])
ChkAlloc(spszFormattedPrice)
ChkAlloc(spUnfulfilledConsumable)
ChkAlloc(tag)
ChkAlloc(tokenUser)
ChkArg(_messageDialogHelper)
ChkArg(action)
ChkArg(appId)
ChkArg(authResponse)
ChkArg(balanceRemaining)
ChkArg(cchFolder)
ChkArg(ContentIdentifiers)
ChkArg(context)
ChkArg(getAppReceiptOperation)
ChkArg(getCollectionsIdOperation)
ChkArg(getProductReceiptOperation)
ChkArg(getPurchaseIdOperation)
ChkArg(hstrUri)
ChkArg(items)
ChkArg(keywords)
ChkArg(lpszURL)
ChkArg(operation)
ChkArg(package)
ChkArg(pAppId)
ChkArg(pAppInfo)
ChkArg(pAppInformation)
ChkArg(pcbResponseData)
ChkArg(pCoreWindow)
ChkArg(pCustomerCollectionsId)
ChkArg(pCustomerPurchaseId)
ChkArg(pFulfillmentResult)
ChkArg(pHandler)
ChkArg(pHresult)
ChkArg(phWndCurrent)
ChkArg(pInAppInformation)
ChkArg(pInAppOffer)
ChkArg(pInAppSkuInformation)
ChkArg(pLinkUri)
ChkArg(pMandatory)
ChkArg(pOptionalPackage)
ChkArg(ppAppLicense)
ChkArg(ppAppReceiptOperation)
ChkArg(ppbResponseData)
ChkArg(ppData)
ChkArg(ppGetCollectionsIdOperation)
ChkArg(ppGetPurchaseIdOperation)
ChkArg(ppGetUnfulfilledConsumablesOperation)
ChkArg(ppLinkUri)
ChkArg(ppListingInformation)
ChkArg(ppLoadAddOnProductInfosOperation)
ChkArg(ppLoadListingOperation)
ChkArg(ppOperation)
ChkArg(ppPackage)
ChkArg(ppProductReceiptOperation)
ChkArg(ppPurchaseResults)
ChkArg(ppQueueItems)
ChkArg(ppReportConsumableFulfillmentOperation)
ChkArg(ppRequestAppPurchaseOperation)
ChkArg(ppRequestProductPurchaseOperation)
ChkArg(ppRequestProductPurchaseWithResultsOperation)
ChkArg(ppRequestPurchaseBySkuIdOperation)
ChkArg(ppResults)
ChkArg(pProductPurchaseStatus)
ChkArg(ppStoreContext)
ChkArg(ppStoreProductQueryResult)
ChkArg(ppStoreProductResult)
ChkArg(ppszUri)
ChkArg(ppUpdateList)
ChkArg(ppUpdateStatuses)
ChkArg(ppUri)
ChkArg(ppValue)
ChkArg(pReceipt)
ChkArg(pResult)
ChkArg(pResults)
ChkArg(productIds)
ChkArg(productKinds)
ChkArg(productStoreId)
ChkArg(pStorePackageUpdateResult)
ChkArg(pStorePackageUpdates)
ChkArg(pszBuffer)
ChkArg(pToken)
ChkArg(publisherUserId)
ChkArg(pUnfulfilledList)
ChkArg(pUpdateState)
ChkArg(pUser)
ChkArg(pValue)
ChkArg(result)
ChkArg(results)
ChkArg(serviceTicket)
ChkArg(spJsonArray)
ChkArg(status)
ChkArg(storeId || packageFamilyName)
ChkArg(storeIds)
ChkArg(storePurchaseProperties)
ChkArg(trackingId)
ChkArg(transactionId)
ChkArg(uri < UriHelper::UriMax)
ChkArg(uri < UriHelperV7::UriMax)
ChkArg(uri >= 0)
ChkArg(uriBase < UriHelper::UriMax)
ChkArg(user)
ChkArg(value)
ChkBool(!!cHasCurrent, ((HRESULT)0x80070057L))
ChkBool(!_hstrUri.IsValid(), HRESULT_FROM_WIN32(1247L))
ChkBool(!hasEmbeddedNull, ((HRESULT)0x80070057L))
ChkBool(!WindowsIsStringEmpty(productId.Get()), ((HRESULT)0x80070057L))
ChkBool(!WindowsIsStringEmpty(storeId), ((HRESULT)0x80070057L))
ChkBool((_productStoreId.IsValid() || ClientProcessUtils::IsDataMartApplication()), ((HRESULT)0x803F6107L))
ChkBool((nullptr != *ppProduct), ((HRESULT)0x803F6102L))
ChkBool((nullptr != productId), ((HRESULT)0x803F6103L))
ChkBool((quantity > 0), ((HRESULT)0x80070057L))
ChkBool(*entry != nullptr, HRESULT_FROM_WIN32(1168L))
ChkBool(*last == ':', ((HRESULT)0x80070057L))
ChkBool(_hstrUri.IsValid(), HRESULT_FROM_WIN32(1003L))
ChkBool(_productStoreId.IsValid(), ((HRESULT)0x803F6107L))
ChkBool(_productStoreId.IsValid(), ((HRESULT)0x803F6108L))
ChkBool(_spNextQueryOperation != nullptr, ((HRESULT)0x8000FFFFL))
ChkBool(_spNextQueryOperation == nullptr, ((HRESULT)0x8000FFFFL))
ChkBool(_spNextQueryOperation == nullptr, ((HRESULT)0x803F6107L))
ChkBool(_storeContext == nullptr, ((HRESULT)0x8000FFFFL))
ChkBool(asterisk == nullptr, ((HRESULT)0x80070057L))
ChkBool(callingProcessId == hwndProcessId, ((HRESULT)0x80070005L))
ChkBool(cchCurrency != 0, LR2HR(GetLastError()))
ChkBool(colon == nullptr, ((HRESULT)0x80070057L))
ChkBool(commandId == OkCommandId, ((HRESULT)0x80004004L))
ChkBool(filterCount < 2, ((HRESULT)0x80070057L))
ChkBool(filterSize < 2, ((HRESULT)0x80070057L))
ChkBool(found, ((HRESULT)0x80070005L))
ChkBool(found, ((HRESULT)0x80070057L))
ChkBool(hasCurrent, ((HRESULT)0x80070057L))
ChkBool(hstrProductId.IsValid() && hstrSkuId.IsValid() && hstrAvailabilityId.IsValid(), (_apiType == ClientApiType_AppPurchase) ? ((HRESULT)0x803F6101L) : ((HRESULT)0x803F6102L))
ChkBool(hwnd != 0, HRESULT_FROM_WIN32(1168L))
ChkBool(itemCount != 0, ((HRESULT)0x803F6107L))
ChkBool(last == pchEnd, ((HRESULT)0x80070057L))
ChkBool(length >= (count * 2), ((HRESULT)0x80070057L))
ChkBool(LoadStringW(g_hinst, uId, szUnformattedString, (sizeof(*RtlpNumberOf(szUnformattedString)))), HRESULT_FROM_WIN32(GetLastError()))
ChkBool(maxItemsToRetrieve > 0, ((HRESULT)0x80070057L))
ChkBool(nullptr != _storeContext, ((HRESULT)0x803F6107L))
ChkBool(packageCount > 0, ((HRESULT)0x80004005L))
ChkBool(packageFamilyName.IsValid(), ((HRESULT)0x803F6107L))
ChkBool(packageFamilyNameToUninstall.IsValid(), ((HRESULT)0x803F6107L))
ChkBool(pCallerData != nullptr, ((HRESULT)0x803F610BL))
ChkBool(pCallerData != nullptr, HRESULT_FROM_WIN32(1400L))
ChkBool(pCommand != nullptr, ((HRESULT)0x80004004L))
ChkBool(pProductIdCache != nullptr, ((HRESULT)0x803F6107L))
ChkBool(productCount > 0, HRESULT_FROM_WIN32(1168L))
ChkBool(productId.IsValid(), ((HRESULT)0x80070057L))
ChkBool(productKind.IsValid(), HRESULT_FROM_WIN32(1168L))
ChkBool(productsLength > 0, HRESULT_FROM_WIN32(1168L))
ChkBool(provider == AccountProviderType::MSA, ((HRESULT)0x8000FFFFL))
ChkBool(pszCloseBrace != 0, ((HRESULT)0x80004005L))
ChkBool(size <= 3, ((HRESULT)0x80070057L))
ChkBool(size == 1, ((HRESULT)0x803F6107L))
ChkBool(sizeResult == 1, ((HRESULT)0x803F6107L))
ChkBool(sizeResult > 0, ((HRESULT)0x803F6107L))
ChkBool(spLicenseInfoServer != nullptr, ((HRESULT)0x803F6107L))
ChkBool(spLicenseInstance != nullptr, ((HRESULT)0x803F6107L))
ChkBool(spPropertyValue != nullptr, ((HRESULT)0x80004004L))
ChkBool(StringHelpers::AreEqualCaseInsensitive(productKind.Get(), ConsumableKind.Get()) || StringHelpers::AreEqualCaseInsensitive(productKind.Get(), UnmanagedConsumableKind.Get()), HRESULT_FROM_WIN32(1168L))
ChkBool(tagComponentsSize != 0, ((HRESULT)0x80070057L))
ChkBool(tagComponentsSize <= 3, ((HRESULT)0x80070057L))
ChkBool(ticketCount == 1, ((HRESULT)0x803F6107L))
ChkBool(uReceiptNodeChildrenLength > 0, HRESULT_FROM_WIN32(1168L))
ChkBool(uReceiptNodesLength > 0, HRESULT_FROM_WIN32(1168L))
ChkBool(wuResults != nullptr, ((HRESULT)0x80004003L))
ChkHr(((HRESULT) (((unsigned long)(1)<<31) | ((unsigned long)(25)<<16) | ((unsigned long)(httpRequest.GetRequestStatusCode()))) ))
ChkHr(((HRESULT) ((RtlQueryWnfStateData( &initialChangeStamp, WNF_LM_CONTENT_LICENSE_CHANGED, _WnfLicenseStateChangeCallback, nullptr, nullptr)) | 0x10000000)))
ChkHr(((HRESULT) ((RtlQueryWnfStateData( &initialChangeStamp, WNF_LM_CONTENT_LICENSE_CHANGED, WnfLicenseStateChangeCallback, nullptr, nullptr)) | 0x10000000)))
ChkHr(((HRESULT) ((RtlQueryWnfStateData( &initialChangeStamp, WNF_LM_OPTIONAL_PACKAGE_SUSPEND_REQUIRED, OnEventCallback, nullptr , nullptr )) | 0x10000000)))
ChkHr(((HRESULT) ((RtlSubscribeWnfStateChangeNotification( &_subscription, WNF_LM_OPTIONAL_PACKAGE_SUSPEND_REQUIRED, initialChangeStamp, OnEventCallback, reinterpret_cast<PVOID>(this), nullptr , 0 , 0x00000004UL)) | 0x10000000)))
ChkHr(((HRESULT) ((RtlSubscribeWnfStateChangeNotification( &_wnfLicenseChanged, WNF_LM_CONTENT_LICENSE_CHANGED, initialChangeStamp, _WnfLicenseStateChangeCallback, context, nullptr, 0, 0x00000001UL)) | 0x10000000)))
ChkHr(((HRESULT) ((RtlSubscribeWnfStateChangeNotification( &m_wnfLicenseChanged, WNF_LM_CONTENT_LICENSE_CHANGED, initialChangeStamp, WnfLicenseStateChangeCallback, context, nullptr, 0, 0x00000001UL)) | 0x10000000)))
ChkHr(((HRESULT)0x8000000BL))
ChkHr(((HRESULT)0x80004001L))
ChkHr(((HRESULT)0x80004005L))
ChkHr(((HRESULT)0x8000FFFFL))
ChkHr(((HRESULT)0x80070005L))
ChkHr(((HRESULT)0x8007000EL))
ChkHr(((HRESULT)0x80070057L))
ChkHr(((HRESULT)0x80190194L))
ChkHr(((HRESULT)0x80270254L))
ChkHr(((HRESULT)0x803F6101L))
ChkHr(((HRESULT)0x803F6103L))
ChkHr(((HRESULT)0x803F6107L))
ChkHr(((HRESULT)0x803F6108L))
ChkHr(((HRESULT)0x803F6109L))
ChkHr(((HRESULT)0x803F610BL))
ChkHr(((HRESULT)0x803F610CL))
ChkHr(((HRESULT)0x803F610DL))
ChkHr(((HRESULT)0x803F610EL))
ChkHr(((HRESULT)0x83750007L))
ChkHr((AgileHashMap<HSTRING, IStorePackageLicenseLostCallback*>::Make(&_pOptionalPfnToCallbackMap)))
ChkHr((AgileHashMap<HSTRING, ProductListing*,StringUpperCaseHash, StringCaseInsensitiveEquals>::Make(&_spInAppOffers)))
ChkHr((hrGetProduct == ((HRESULT)0x80190194L)) ? ((HRESULT)0x803F6101L) : hrGetProduct)
ChkHr((MakeAndInitialize<LicenseInformationServer, LicenseInformationServer>(spLicenseInformationServerSingleton.GetAddressOf())))
ChkHr((static_cast<HRESULT>(__hr)))
ChkHr(::ActivateInstance( StoreContextServerClassId.Get(), storeContextServer.GetAddressOf()))
ChkHr(::ActivateInstance(StoreContextServerClassId.Get(), storeContextServer.GetAddressOf()))
ChkHr(::ActivateInstance(StringReference(RuntimeClass_Windows_Internal_Shell_ModalExperience_ModalExperienceOptions).Get(), &modalExperienceOptions))
ChkHr(::ParseReceiptResponse(pbResponse, cbResponse, &tmpReceiptData, &cbReceiptData))
ChkHr(::WindowsDuplicateString(_collectionsId.Get(), pCustomerCollectionsId))
ChkHr(::WindowsDuplicateString(_extendedJsonData.Get(), pValue))
ChkHr(::WindowsDuplicateString(_purchaseId.Get(), pCustomerPurchaseId))
ChkHr(::WindowsDuplicateString(_skuStoreId.Get(), pValue))
ChkHr(::WindowsDuplicateString(_storeId.Get(), pValue))
ChkHr(::WindowsDuplicateString(productId, storeId))
ChkHr(::WindowsDuplicateString(productIdSkuId.Get(), storeId))
ChkHr(::WindowsDuplicateString(publisherUserId, &publisherUserIdCopy))
ChkHr(::WindowsDuplicateString(serviceTicket, &serviceTicketCopy))
ChkHr(::WindowsStringHasEmbeddedNull(inputString, &hasEmbeddedNull))
ChkHr(::WindowsSubstringWithSpecifiedLength( str, count, length - (count * 2), resultString))
ChkHr(::WindowsTrimStringEnd(trimmedStart.Get(), Space.Get(), trimmedString.GetAddressOf()))
ChkHr(::WindowsTrimStringStart(timeSpanString, Space.Get(), trimmedStart.GetAddressOf()))
ChkHr(__winrt_hr__)
ChkHr(_addOnLicenses->get_Size(&count))
ChkHr(_addOnLicenses->GetAt(i, license.GetAddressOf()))
ChkHr(_appInstallItem.As(&item2))
ChkHr(_appInstallItem->add_Completed(completedHandler.Get(), &_completedToken))
ChkHr(_appInstallItem->add_StatusChanged(statusChangedHandler.Get(), &_statusChangedToken))
ChkHr(_appInstallItem->get_InstallType(&installType))
ChkHr(_appInstallItem->get_PackageFamilyName(packageFamilyName.GetAddressOf()))
ChkHr(_appInstallItem->get_PackageFamilyName(value))
ChkHr(_appInstallItem->get_ProductId(value))
ChkHr(_appInstallItem->GetCurrentStatus(&appInstallStatus))
ChkHr(_appInstallItem->GetCurrentStatus(&status))
ChkHr(_appName.Set(appName))
ChkHr(_AttachAllEventHandlers(_queueItems.Get()))
ChkHr(_availabilities.As(&inspectableProducts))
ChkHr(_availabilities->First(&availabilityIter))
ChkHr(_availabilities->First(&iter))
ChkHr(_availabilities->get_Size(&size))
ChkHr(_availabilities->GetAt(index, &currentAvailability))
ChkHr(_availabilities->RemoveAt(bestIndex))
ChkHr(_bigIds->First(&spIter))
ChkHr(_bigIds->get_Size(&size))
ChkHr(_BuildBeneficiaryArrayJSON(user, accountProviderType, promptType, hwnd, forceRetailSandbox, jsonBeneficiaries))
ChkHr(_BuildBeneficiaryJSON( tickets[index].m_providerType, tickets[index].m_ticket.Get(), tickets[index].m_webAccountId.Get(), jsonBeneficiary))
ChkHr(_BuildBeneficiaryJSON(providerType, authTicket.Get(), DefaultWebAccountIdString.Get(), jsonBeneficiary))
ChkHr(_BuildGoldenBeneficiaryArrayJSON(user, jsonBeneficiaries))
ChkHr(_BuildGoldenBeneficiaryJSON(user, beneficiary))
ChkHr(_BuildGoldenBeneficiaryJSON(user, jsonBeneficiary))
ChkHr(_BuildModalExperienceOptions(modalExperienceOptions, _size))
ChkHr(_bundledSkuIds->GetView(ppValue))
ChkHr(_cachedLicenseJson.CopyTo(result))
ChkHr(_ChangeStatusStringToEnumValue())
ChkHr(_CheckOptionalPackageIsValid(optionalPackageName, _user))
ChkHr(_CheckOptionalPackageIsValid(packageIdentifier, _user))
ChkHr(_ClearEventHandler(item))
ChkHr(_ClearEventHandler(item.Get()))
ChkHr(_collectionData.CopyTo(ppValue))
ChkHr(_collectionData->First(&iter))
ChkHr(_completedEvent.Add(handler, token))
ChkHr(_completedEvent.InvokeAll(this, args.Get()))
ChkHr(_completedEvent.Remove(token))
ChkHr(_ConstructRequestBody( jsonBody, _user, static_cast<WinStoreAuth::AccountProviderType>(requestParams.userTokenTypes), userAuthPromptType, hwnd, requestParams.forceRetailSandbox, jsonInternalParameters))
ChkHr(_ConstructRequestBody(childObject, user, accountProviderType, promptType, hwnd, forceRetailSandbox, jsonParameters))
ChkHr(_ConstructRequestBody(jsonElement, user, accountProviderType, promptType, hwnd, forceRetailSandbox, jsonParameters))
ChkHr(_contextString.CopyTo(value))
ChkHr(_continuationToken.Set(continuationToken))
ChkHr(_ConvertAppInstallState(appInstallState, isStaged, isDownloaded, &state, &extendedState))
ChkHr(_ConvertDuration(_billingPeriodUnitType.Get(), _billingPeriod, &_billingPeriodUnit))
ChkHr(_ConvertDuration(_trialPeriodUnitType.Get(), _trialPeriod, &_trialPeriodUnit))
ChkHr(_ConvertStoreQueueState(extendedState, &packageStatus.PackageUpdateState))
ChkHr(_CreatePurchaseResultsInformation( productPurchaseStatus, &_spPurchaseResults))
ChkHr(_CreatePurchaseResultsInformation( productPurchaseStatus, transactionId, receipt.Get(), &_spPurchaseResults))
ChkHr(_CreateUnfulfilledConsumable( inAppOfferTokenString.Get(), transactionId, offerIdString.Get(), &consumable))
ChkHr(_currentBatch->GetObjectAt(_currentItemIndex, ppJsonIAP))
ChkHr(_cv.Set(cv))
ChkHr(_data->get_Size(&dataSize))
ChkHr(_data->GetAt(index, data.GetAddressOf()))
ChkHr(_extendedJsonData.Set(extendedJsonData))
ChkHr(_FillTheRequestWithRequiredParameters())
ChkHr(_FilterProductsJson(productJsonString, CatalogRelationshipType::AddOnParent, _productStoreId.Get()))
ChkHr(_FilterProductsJson(productJsonString, relationshipFilter, _productStoreId.Get()))
ChkHr(_FindUriWithIndex(requestIndex, spJsonUriArray, entry))
ChkHr(_GetCurrencyFormatter(currencyCode, userLocale.Get(), region, &spNumberFormatter))
ChkHr(_GetPackageLocalAppDataPath(szPackageFamilyName, pszFolder, cchFolder))
ChkHr(_GetRawStringFromOS(uri, data.GetAddressOf()))
ChkHr(_hresultOfOperation)
ChkHr(_hstrCurrencyCode.CopyTo(pValue))
ChkHr(_hstrCurrencyCode.Set(pAppInfo->PricingInfo.CurrencyCode))
ChkHr(_hstrCurrencyCode.Set(pInAppOffer->PricingInfo.CurrencyCode))
ChkHr(_hstrCurrencyCode.Set(pInAppSkuInformation->PricingInfo.CurrencyCode))
ChkHr(_hstrCurrentMarket.CopyTo(pValue))
ChkHr(_hstrCurrentMarket.Set(pAppInfo->Market))
ChkHr(_hstrCustomDeveloperData.CopyTo(pValue))
ChkHr(_hstrDescription.CopyTo(hstrValue))
ChkHr(_hstrDescription.CopyTo(pValue))
ChkHr(_hstrDescription.Set(hstrValue))
ChkHr(_hstrDescription.Set(pAppInfo->Description))
ChkHr(_hstrDescription.Set(pInAppInformation->Description))
ChkHr(_hstrDescription.Set(pInAppOffer->Description))
ChkHr(_hstrDescription.Set(pInAppSkuInformation->Description))
ChkHr(_hstrDevOfferId.Set(devOfferId))
ChkHr(_hstrExtendedData.CopyTo(pValue))
ChkHr(_hstrFormattedBasePrice.CopyTo(pValue))
ChkHr(_hstrFormattedListPrice.CopyTo(pValue))
ChkHr(_hstrFormattedPrice.CopyTo(pValue))
ChkHr(_hstrHardwareManufacturerId.CopyTo(value))
ChkHr(_hstrHardwareManufacturerId.Set(value))
ChkHr(_hstrImageUri.Set(pInAppOffer->ImageUri))
ChkHr(_hstrInAppOfferToken.CopyTo(pValue))
ChkHr(_hstrInAppOfferToken.Set(inAppOfferToken))
ChkHr(_hstrInAppOfferToken.Set(pInAppOffer->InAppOfferToken))
ChkHr(_hstrLocale.Set(pAppInfo->Locale))
ChkHr(_hstrManufacturerName.CopyTo(value))
ChkHr(_hstrManufacturerName.Set(value))
ChkHr(_hstrModelName.CopyTo(value))
ChkHr(_hstrModelName.Set(value))
ChkHr(_hstrName.CopyTo(hstrValue))
ChkHr(_hstrName.CopyTo(pValue))
ChkHr(_hstrName.Set(hstrName))
ChkHr(_hstrName.Set(hstrValue))
ChkHr(_hstrName.Set(pAppInfo->Name))
ChkHr(_hstrName.Set(pInAppOffer->Name))
ChkHr(_hstrOfferId.CopyTo(hstrOfferId))
ChkHr(_hstrOfferId.CopyTo(offerId))
ChkHr(_hstrOfferId.Set(offerId))
ChkHr(_hstrProductId.CopyTo(hstrProductId))
ChkHr(_hstrProductId.CopyTo(pValue))
ChkHr(_hstrProductId.Set(pInAppInformation->InAppProductId))
ChkHr(_hstrProductId.Set(productId))
ChkHr(_hstrProductTag.CopyTo(pValue))
ChkHr(_hstrProductTag.Set(pInAppOffer->ProductTag))
ChkHr(_hstrProductType.CopyTo(pValue))
ChkHr(_hstrProductType.Set(L"Consumable"))
ChkHr(_hstrProductType.Set(L"Durable"))
ChkHr(_hstrProductType.Set(L"Unknown"))
ChkHr(_hstrReceipt.CopyTo(pValue))
ChkHr(_hstrReceiptXml.CopyTo(hstrReceiptXml))
ChkHr(_hstrReceiptXml.Set(receiptXml))
ChkHr(_hstrSkuId.CopyTo(pValue))
ChkHr(_hstrSkuId.Set(pInAppSkuInformation->SkuId))
ChkHr(_hstrSkuId.Set(skuId))
ChkHr(_hstrSkuType.CopyTo(pValue))
ChkHr(_hstrSkuType.Set(pInAppSkuInformation->SkuType))
ChkHr(_hstrStoreContentModifierId.CopyTo(value))
ChkHr(_hstrStoreContentModifierId.Set(value))
ChkHr(_hstrTitle.CopyTo(pValue))
ChkHr(_hstrTitle.Set(pInAppInformation->Name))
ChkHr(_hstrTitle.Set(pInAppSkuInformation->Title))
ChkHr(_inAppOfferToken.Set(inAppOfferToken))
ChkHr(_Initialize( packageFullName, "StoreContext.RequestDownloadAndInstallStorePackagesAsync", storeIds, nullptr , nullptr , true , true , false , pszCV, pMessageDialogHelper, asyncId))
ChkHr(_Initialize( packageFullName, pszOperationName, nullptr , nullptr , pStorePackageUpdates, install, shouldPromptForConsent, totallySilent, pszCV, pMessageDialogHelper, asyncId))
ChkHr(_Initialize( packageFullName, pszOperationName, storeIds, storePackageInstallOptions, nullptr , true , shouldPromptForConsent, totallySilent, pszCV, pMessageDialogHelper, asyncId))
ChkHr(_IsNetworkMetered(&onMeteredNetwork))
ChkHr(_jsonData.Set(jsonData))
ChkHr(_jsonRequest.Set(jsonRequest))
ChkHr(_jsonResponse.CopyTo(pValue))
ChkHr(_jsonResponse.Set(LR"({"status": "aborted"})"))
ChkHr(_jsonValue.SetReference(json))
ChkHr(_keywords->Append(keyword.Get()))
ChkHr(_keywords->GetView(&spVectorView))
ChkHr(_licensableSku.Set(licensableSku))
ChkHr(_LoadLicenseJson(spLicenseInstance))
ChkHr(_MakeDefaultLicenseResponse(package))
ChkHr(_mapView.CopyTo(ppValue))
ChkHr(_messageDialogFactory->CreateWithTitle(content.Get(), title.Get(), &spMessageDialog))
ChkHr(_messageDialogHelper.As(&messageDialogHelper))
ChkHr(_newOrder->Append(productId.Get()))
ChkHr(_offlineLicensesChangedEvent.Add(pHandler, pToken))
ChkHr(_offlineLicensesChangedEvent.Remove(token))
ChkHr(_optionalPackageLicenseWatcher.AddOptionalPackageToWatch(optionalPackageName, pOptionalPackageLicense))
ChkHr(_optionalPackageLicenseWatcher.Initialize())
ChkHr(_optionalPackageLicenseWatcher.RemoveOptionalPackageToWatch(optionalPackageName))
ChkHr(_package.CopyTo(ppPackage))
ChkHr(_package->get_Id(packageId.GetAddressOf()))
ChkHr(_packageFamilyName.Set(packageFamilyName))
ChkHr(_packageFamilyNameToUninstall.Set(packageFamilyNameToUninstall))
ChkHr(_packageFullName.Set(packageFullName))
ChkHr(_packageFullName.Set(PFN))
ChkHr(_packageIdentifier.Set(packageIdentifier))
ChkHr(_ParseGetProductsByKinds(hydrateResult.Get(), products.GetAddressOf()))
ChkHr(_ParseGetProductsByKinds(productJsonString.Get(), products.GetAddressOf()))
ChkHr(_PFN.Set(PFN))
ChkHr(_pOptionalPfnToCallbackMap->HasKey(optionalPackageFullName, &foundOptionalPackage))
ChkHr(_pOptionalPfnToCallbackMap->Insert(optionalPackageFullName, storePackageLicenseCallback, &replaced))
ChkHr(_pOptionalPfnToCallbackMap->Remove(optionalPackageFullName))
ChkHr(_pPackage->get_Id(packageId.GetAddressOf()))
ChkHr(_price.CopyTo(ppValue))
ChkHr(_productId.Set(productId))
ChkHr(_productId.Set(value))
ChkHr(_productIdTable->HasKey(inAppOfferToken, &hasKey))
ChkHr(_productIdTable->Insert(inAppOfferToken, productId, &dontCare))
ChkHr(_productKinds.As(&productKinds))
ChkHr(_products.As(&inspectableProducts))
ChkHr(_products.CopyTo(spProducts.GetAddressOf()))
ChkHr(_products->get_Size(&count))
ChkHr(_products->get_Size(&countOfProducts))
ChkHr(_products->GetAt(0, &_product))
ChkHr(_productStoreId.Set(productStoreId))
ChkHr(_pStoreContextServer.As(&storeContextServer2))
ChkHr(_publisherUserId.Set(publisherUserId))
ChkHr(_queueItems.CopyTo(result))
ChkHr(_queueItems->get_Size(&size))
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_Canceled, true ))
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_Completed, false ))
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_Completed, true ))
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_OtherError, false ))
ChkHr(_RefreshAllStatusesAndOverallState(_queueItems.Get(), StorePackageUpdateState_Pending, false ))
ChkHr(_RefreshStatus(item, true ))
ChkHr(_RefreshStatus(item.Get(), raiseEvent))
ChkHr(_request.Set(jsonRequest))
ChkHr(_request->SetNamedValue(HStringReference(g_DoNotLogTheseValues[i]).Get(), nullptr))
ChkHr(_RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync( cv, __FSTREXP __FUNCTION__  , storeIds, false, false, nullptr, operation))
ChkHr(_RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync(cv, __FSTREXP __FUNCTION__  , pStoreIds, true , false , nullptr , ppOperation))
ChkHr(_RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync(cv, __FSTREXP __FUNCTION__  , storeIds, true , false , storePackageInstallOptions, operation))
ChkHr(_RequestPurchase( pCallerData, nullptr, nullptr, body.Get(), cv.GetHStringReference().Get(), InvokedApi_SendStoreRequest.Get(), jsonResponse))
ChkHr(_response.Set(jsonInitialResponse))
ChkHr(_response.Set(response))
ChkHr(_results.CopyTo(ppResults))
ChkHr(_results.CopyTo(ppStoreProductQueryResult))
ChkHr(_RetrieveHWNDFromCallerData(pCallerData, &hwnd))
ChkHr(_serviceTicket.Set(serviceTicket))
ChkHr(_ShouldFilterByRelationship(product, relationshipType, parentProductId, &remove))
ChkHr(_skuId.CopyTo(pValue))
ChkHr(_skuId.Set(skuId))
ChkHr(_skus.As(&inspectableProducts))
ChkHr(_skus->First(&iter))
ChkHr(_skus->get_Size(&size))
ChkHr(_skus->GetAt(i, &sku))
ChkHr(_skus->GetAt(index, &currentSku))
ChkHr(_skus->RemoveAt(bestIndex))
ChkHr(_SortAvailabilities())
ChkHr(_SortSkus())
ChkHr(_spAppLicense.CopyTo(ppResults))
ChkHr(_spDisplayProperties->get_Name(nameOverride.GetAddressOf()))
ChkHr(_spImageUri.CopyTo(pValue))
ChkHr(_spInAppOffers->GetView(ppValue))
ChkHr(_spInAppOffers->Insert( pInAppOffer->InAppOfferToken, spProductListing.Get(), &replaced ))
ChkHr(_spLicenseInformationInternal.CopyTo(__uuidof(**(value)), IID_PPV_ARGS_Helper(value)))
ChkHr(_spLicenseInformationInternal->GetProductId(_appCatalogId.GetAddressOf()))
ChkHr(_spLicenseManager.As(&appLicenseManager2))
ChkHr(_spNextQueryOperation.CopyTo(spNextPagedOperation.GetAddressOf()))
ChkHr(_spNextQueryOperation->GetNextAsync( productJson.GetAddressOf(), nextOp.GetAddressOf()))
ChkHr(_spNextQueryOperation->GetNextAsync( productJsonString.GetAddressOf(), nextOp.GetAddressOf()))
ChkHr(_spNextQueryOperation->HasMorePages(&hasMorePages))
ChkHr(_spNextQueryOperation->HasMorePages(hasMorePages))
ChkHr(_spQueueItems.CopyTo(ppQueueItems))
ChkHr(_spStoreCommerceServer->GetExclusiveLockForProduct(productId.Get(), &pendingPurchaseOperationForProduct))
ChkHr(_spStoreContextServer->CaptureStoreContextCallerData(reinterpret_cast<UINT64>(hwnd), &callerData))
ChkHr(_spUnfulfilledList->GetView(pUnfulfilledList))
ChkHr(_spUri.CopyTo(ppValue))
ChkHr(_statusChangedEvent.Add(handler, token))
ChkHr(_statusChangedEvent.InvokeAll(this, nullptr))
ChkHr(_statusChangedEvent.Remove(token))
ChkHr(_statusChangedTokenMap->get_Size(&size))
ChkHr(_statusChangedTokenMap->HasKey(packageFamilyName.Get(), &hasKey))
ChkHr(_statusChangedTokenMap->Insert(packageFamilyName.Get(), regToken, &replaced))
ChkHr(_statusChangedTokenMap->Lookup(packageFamilyName.Get(), &regToken))
ChkHr(_statusChangedTokenMap->Remove(packageFamilyName.Get()))
ChkHr(_storeContext->AssociateWithStoreContext(inspectableProducts))
ChkHr(_storeContext->GetIsAnySkuInstalledAsync(_storeId.Get(), ppOperation))
ChkHr(_storeContext->GetIsAnySkuInstalledAsync(storeId.Get(), ppOperation))
ChkHr(_storeContext->RequestPurchaseAsync(storeId.Get(), ppOperation))
ChkHr(_storeContext->RequestPurchaseWithPurchasePropertiesAsync(storeId.Get(), storePurchaseProperties, ppOperation))
ChkHr(_storeContextServer->SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::GetProductsByFamilyFromParent, _spCV, jsonCatalogParameters.Get(), nullptr, productJsonString.GetAddressOf()))
ChkHr(_storeContextServer->SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::GetProductsNoParent, _spCV, jsonCatalogParameters.Get(), &statusCode, jsonCatalogString.GetAddressOf()))
ChkHr(_storeContextServer->SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::GetUserCollectionForParentProductByFamily, _spCV, jsonCollectionsParameters.Get(), &statusCode, jsonCollectionsString.GetAddressOf()))
ChkHr(_storeId.Set(storeId))
ChkHr(_storeIds.As(&storeIds))
ChkHr(_storePackageUpdates.As(&updates))
ChkHr(_storeQueueItem->get_IsMandatory(&_mandatory))
ChkHr(_subscriptionInfo.CopyTo(ppValue))
ChkHr(_updateStatusMap->First(&iterator))
ChkHr(_updateStatusMap->Insert(packageFamilyName.Get(), newStatus, &replaced))
ChkHr(_uriRuntimeClass.CopyTo(ppValue))
ChkHr(actionFilters->get_Size(&filterSize))
ChkHr(actionFilters->GetAt(0, actionFilter.GetAddressOf()))
ChkHr(ActivateInstance( HStringReference(RuntimeClass_Windows_Management_Deployment_PackageManager).Get(), &spPackageManager))
ChkHr(ActivateInstance(AppServiceConnectionRef.Get(), &pdConnection))
ChkHr(ActivateInstance(HStringReference(RuntimeClass_Windows_Data_Xml_Dom_XmlDocument).Get(), &spXMLResponse))
ChkHr(ActivateInstance(HStringReference(RuntimeClass_Windows_Web_Http_Filters_HttpBaseProtocolFilter).Get(), &filter))
ChkHr(ActivateInstance(RuntimeClassAppInstallOptions.Get(), &appInstallOptions))
ChkHr(ActivateInstance(RuntimeClassWindowsManagementDeploymentPackageManager.Get(), &packageManager))
ChkHr(ActivateInstance(RuntimeClassWindowsXboxSystemInternalDeploymentAvailablePackageProvider.Get(), &packageProvider))
ChkHr(ActivateInstance(ValueSetRef.Get(), &message))
ChkHr(activationFactory.As(&uriFactory))
ChkHr(AddCommands(hr, spMessageDialog.Get()))
ChkHr(AddItem(inAppOfferToken.Get(), productId.Get()))
ChkHr(addOns.GetNext(&jsonIAP))
ChkHr(addOns.GetNext(&spProduct))
ChkHr(addOns.Initialize(_spStoreCommerceServer.Get(), _pCV))
ChkHr(addOns.Initialize(pStoreCommerceServer, pCV))
ChkHr(AgileVector<HSTRING>::Make(&_actionFilters))
ChkHr(AgileVector<HSTRING>::Make(&_keywords))
ChkHr(AgileVector<HSTRING>::Make(&_newOrder))
ChkHr(AgileVector<HSTRING>::Make(&contentIds))
ChkHr(AgileVector<HSTRING>::Make(&foundProductIds))
ChkHr(AgileVector<HSTRING>::Make(&keyIds))
ChkHr(AgileVector<HSTRING>::Make(&outputs))
ChkHr(AgileVector<HSTRING>::Make(&productIdsInAppInstallQueue))
ChkHr(AgileVector<HSTRING>::Make(&pVector))
ChkHr(AgileVector<StorePackageUpdate*>::Make(&updates))
ChkHr(AgileVector<StorePreviewProductInfo*>::Make(&spProductInfosList))
ChkHr(AgileVector<StorePreviewSkuInfo*>::Make(&spSkuInfoList))
ChkHr(AgileVector<StoreQueueItem*>::Make(&queuedItemResults))
ChkHr(AgileVector<StoreQueueItem*>::Make(&queueItems))
ChkHr(AllowImpersonation(appLicenseManager2.Get()))
ChkHr(AllowImpersonation(m_spLicenseManager.Get()))
ChkHr(alm->LoadLicenseWithBytes(AppType_UniversalApp, licenseBufferLength, licenseBuffer, L"", licenseInstance.GetAddressOf()))
ChkHr(alm->RefreshLicenses(refreshPolicy))
ChkHr(alternateIds->GetObjectAt(iId, &altId))
ChkHr(appInstallItem->get_ProductId(appInstallItemProductId.GetAddressOf()))
ChkHr(appInstallItem2->CancelWithTelemetry(cv.GetHStringReference().Get()))
ChkHr(appInstallItem2->PauseWithTelemetry(cv.GetHStringReference().Get()))
ChkHr(appInstallItem2->RestartWithTelemetry(cv.GetHStringReference().Get()))
ChkHr(appInstallItems->get_Size(&size))
ChkHr(appInstallItems->GetAt(index, &item))
ChkHr(appInstallManager.As(&appInstallManager2))
ChkHr(appInstallManager.As(&appInstallManager5))
ChkHr(appInstallManager.As(&appInstallManagerInternal))
ChkHr(appInstallManager->get_AppInstallItems(&appInstallItems))
ChkHr(appInstallManager->get_AutoUpdateSetting(&autoUpdates))
ChkHr(appInstallManager5->SetQueueOrder(cvIn, productIds))
ChkHr(appInstallManager5->StartProductInstallWithOptionsForUserAsync( _user.Get(), productId.Get(), nullptr, nullptr, true, downloadOnAnyNetwork, cv.GetHStringReference().Get(), appInstallOptions.Get(), &asyncOp))
ChkHr(appInstallManagerInternal->GetAppInstallItemsForUser(_user.Get(), &appInstallItems))
ChkHr(appInstallManagerInternal->SearchForUpdatesWithPausedAddAsync( _user.Get(), appModelPackagesVV.Get(), true , cv.GetHStringReference().Get(), appInstallItemsOp.GetAddressOf()))
ChkHr(appInstallOptions->put_AllowForcedAppRestart(allowForcedAppRestart))
ChkHr(appInstallStatus.As(&appInstallStatus3))
ChkHr(appInstallStatus.As(&appInstallStatusInternal))
ChkHr(appInstallStatus->get_BytesDownloaded(&packageStatus.PackageBytesDownloaded))
ChkHr(appInstallStatus->get_DownloadSizeInBytes(&packageStatus.PackageDownloadSizeInBytes))
ChkHr(appInstallStatus->get_ErrorCode(&errorCode))
ChkHr(appInstallStatus->get_InstallState(&appInstallState))
ChkHr(appInstallStatus->get_PercentComplete(&percentComplete))
ChkHr(appInstallStatus3->get_IsStaged(&isStaged))
ChkHr(appInstallStatusInternal->get_IsDownloaded(&isDownloaded))
ChkHr(appLicenseManager2->GetOfflineLicenseForInstalledPackage( WindowsGetStringRawBuffer(packageFullName, nullptr), AppContentType::AppType_Unknown, license.GetAddressOf()))
ChkHr(appmodelPackages->Append(spAppmodelPackage.Get()))
ChkHr(appmodelPackages->Append(supplement.Get()))
ChkHr(appmodelPackages->get_Size(&packagesSize))
ChkHr(appmodelPackages->GetAt(packagesIndex, &package))
ChkHr(appmodelPackages->GetView(appModelPackagesVV.GetAddressOf()))
ChkHr(appProductId.Set(_spStoreCommerceServer->GetAppCatalogId(_pCV)))
ChkHr(args->get_JsonResponse(jsonResponse.GetAddressOf()))
ChkHr(args->get_ResultCode(&hr))
ChkHr(args->RuntimeClassInitialize( jsonRequestString.Get(), jsonIntialResponse.Get(), _size))
ChkHr(arrAdditionalHeaders.Append(dhStr))
ChkHr(AsAgile(pMessageDialogHelper, &_messageDialogHelper))
ChkHr(AsAgile(productKinds, &_productKinds))
ChkHr(AsAgile(pStorePackageUpdates, &_storePackageUpdates))
ChkHr(AsAgile(spLicenseManager.Get(), &_spLicenseManager))
ChkHr(AsAgile(storeIds, &_storeIds))
ChkHr(AskWuWhichHardwareIsAvailable(guidArray, availableArray))
ChkHr(AsWeak(pStorePackageLicense, &_wrStorePackageLicense))
ChkHr(AsyncBase::CheckValidStateForResultsCall())
ChkHr(AuthenticationInternal::GetStorePrimaryAccountTicket( 0, AuthenticationEndpoint::OneStore, PromptType::Silent, false, nullptr, authTicket.GetAddressOf(), providerType, spWebTokenRequestResult.GetAddressOf()))
ChkHr(availabilities->GetObjectAt(0, &availability))
ChkHr(availabilities->GetObjectAt(iAvailability, &availability))
ChkHr(availability.As(&availabilityPrivate))
ChkHr(availability->get_Price(ppValue))
ChkHr(availabilityIter->get_Current(&availability))
ChkHr(availabilityIter->get_HasCurrent(&hasCurrent))
ChkHr(availabilityIter->MoveNext(&hasCurrent))
ChkHr(availabilityPrivate->set_ProductIdSkuId(_productId.Get(), _skuId.Get()))
ChkHr(BackgroundPurchaseDialogTask(body.Get(), cv.GetHStringReference().Get(), jsonResponse))
ChkHr(basePrice->Stringify(&pricingInfo->BasePrice))
ChkHr(bestSku.As(&skuPrivate))
ChkHr(bigIds->Append(_productStoreId.Get()))
ChkHr(BlockOnCompletion(spAsyncOperation.Get(), COWAIT_WAITALL))
ChkHr(BlockOnCompletion(spPagedOperation.Get()))
ChkHr(BlockOnCompletionAndGetResults(appInstallItemsOp.Get(), &appInstallItems))
ChkHr(BlockOnCompletionAndGetResults(asyncOp.Get(), &installItemVector))
ChkHr(BlockOnCompletionAndGetResults(deploymentOperation.Get(), &deploymentResult))
ChkHr(BlockOnCompletionAndGetResults(messageDialogOperation.Get(), &command))
ChkHr(BlockOnCompletionAndGetResults(openOperation.Get(), &status))
ChkHr(BlockOnCompletionAndGetResults(operation.Get(), jsonResponse))
ChkHr(BlockOnCompletionAndGetResults(purchaseOperation.Get(), jsonResponse))
ChkHr(BlockOnCompletionAndGetResults(purchaseOperation.Get(), jsonResponse.GetAddressOf()))
ChkHr(BlockOnCompletionAndGetResults(readOperation.Get(), phstrContent))
ChkHr(BlockOnCompletionAndGetResults(requestOperation.Get(), &responseMessage))
ChkHr(BlockOnCompletionAndGetResults(sendMessageOperation.Get(), &response))
ChkHr(bstr.Initialize(L"", 0))
ChkHr(BuildKnownFeatureAndGuidArrays(systemFeatures, guidArray, knownFeaturesArray))
ChkHr(BuildStoreInAppSkuInfo(skuAvailability.Get(), &spInAppSkuInformation))
ChkHr(cacheStatics->GetPackageByFullName(packageFullNameToUninstall.Get(), internalPackage.GetAddressOf()))
ChkHr(callingPackage->get_Dependencies(dependencies.GetAddressOf()))
ChkHr(CanSilentlyDownloadStorePackageUpdates(cv.GetHStringReference().Get(), &canSilentlyDownload))
ChkHr(CatalogServiceProxyV6::GetProduct( _inAppProductId.Get(), _pCV, &spProduct))
ChkHr(CatalogServiceProxyV6::GetProduct(pStoreCommerceServer->GetAppCatalogId(pCV), pCV, &product))
ChkHr(CatalogServiceProxyV6::GetProduct(pStoreCommerceServer->GetAppCatalogId(pCV), pCV, &spJsonObject))
ChkHr(CatalogServiceProxyV6::QueryCatalogForBigCatIdByPackageFullNameAndType( _packageFullName.Get(), _appType, pCV, _appCatalogId.GetAddressOf()))
ChkHr(ChangeStatusStringToEnumValue())
ChkHr(ClientProcessUtils::CheckMultipleUserSupport(usedMultiUser))
ChkHr(ClientProcessUtils::GetAppContentTypeForInstalledPackage(_packageFullName.Get(), &_appType))
ChkHr(ClientProcessUtils::GetCallerTokenFromComCall(&hToken))
ChkHr(ClientProcessUtils::GetCallingAppName(appName.GetAddressOf()))
ChkHr(ClientProcessUtils::GetCallingAppPackage(_user.Get(), callingPackage.GetAddressOf()))
ChkHr(ClientProcessUtils::GetCallingAppPackage(_user.Get(), spAppmodelPackage.GetAddressOf()))
ChkHr(ClientProcessUtils::GetCallingAppPackage(user.Get(), &parentPackage))
ChkHr(ClientProcessUtils::GetCallingAppPackageFamilyName(packageFamilyName.GetAddressOf()))
ChkHr(ClientProcessUtils::GetCallingAppPackageFullName(_packageFullName.GetAddressOf()))
ChkHr(ClientProcessUtils::GetCallingAppPackageFullName(packageFullName.GetAddressOf()))
ChkHr(ClientProcessUtils::GetCallingAppWindowHandle(&hwndOwner))
ChkHr(ClientProcessUtils::GetModalExperienceManager(&modalManager))
ChkHr(ClientProcessUtils::GetSidForUser(_user.Get(), sidString.GetAddressOf()))
ChkHr(ClientProcessUtils::GetSidForUser(_user.Get(), userSid.GetAddressOf()))
ChkHr(ClientProcessUtils::GetSidForUser(user.Get(), userSid.GetAddressOf()))
ChkHr(ClientProcessUtils::IsCallerERA(&_isERA))
ChkHr(ClientProcessUtils::IsCallerERA(&isERA))
ChkHr(CMiscHelpers::ConvertTextBlob2WideChar(spbReceipt, cbReceipt, &shReceipt))
ChkHr(CMiscHelpers::StringToGuid(transactionIdString.GetRawBuffer(nullptr), &transactionId))
ChkHr(CMiscHelpers::StringToGuid(WindowsGetStringRawBuffer(pAppInfo->Id, nullptr), &_id))
ChkHr(CoCreateInstance( __uuidof(ApplicationLicenseManager), nullptr, (CLSCTX_INPROC_SERVER|CLSCTX_LOCAL_SERVER|CLSCTX_REMOTE_SERVER), __uuidof(**(&m_spLicenseManager)), IID_PPV_ARGS_Helper(&m_spLicenseManager)))
ChkHr(CoCreateInstance( __uuidof(ApplicationLicenseManager), nullptr, (CLSCTX_INPROC_SERVER|CLSCTX_LOCAL_SERVER|CLSCTX_REMOTE_SERVER), __uuidof(**(&spLicenseManager)), IID_PPV_ARGS_Helper(&spLicenseManager)))
ChkHr(CoCreateInstance(__uuidof(ApplicationLicenseManager), nullptr, CLSCTX_LOCAL_SERVER, __uuidof(**(alm.GetAddressOf())), IID_PPV_ARGS_Helper(alm.GetAddressOf())))
ChkHr(CoCreateInstance(__uuidof(InstallServiceUserBroker), nullptr, CLSCTX_INPROC_SERVER, __uuidof(**(&pinToHelper)), IID_PPV_ARGS_Helper(&pinToHelper)))
ChkHr(CoCreateInstance(__uuidof(XboxDevelopmentPackageManager), nullptr, CLSCTX_LOCAL_SERVER, __uuidof(**(&packageManager)), IID_PPV_ARGS_Helper(&packageManager)))
ChkHr(CoCreateInstance(CLSID_HardwareCapability, nullptr, (CLSCTX_INPROC_SERVER|CLSCTX_LOCAL_SERVER|CLSCTX_REMOTE_SERVER), __uuidof(**(&spHardwareCapability)), IID_PPV_ARGS_Helper(&spHardwareCapability)))
ChkHr(CoCreateInstance(CLSID_SLSClient, nullptr, CLSCTX_INPROC_SERVER, __uuidof(**(&spSLSClient2)), IID_PPV_ARGS_Helper(&spSLSClient2)))
ChkHr(CoGetCallContext(__uuidof(**(&spCallingProcessInfo)), IID_PPV_ARGS_Helper(&spCallingProcessInfo)))
ChkHr(CoGetCallerTID(&_callerThreadId))
ChkHr(CoGetCallerTID(&callerThreadId))
ChkHr(collectionData.As(&collectionDataPrivate))
ChkHr(collectionDataArray->GetObjectAt(collectionIndex, &collectionItem))
ChkHr(collectionDataPrivate->get_ProductId(productId.GetAddressOf()))
ChkHr(collectionDataPrivate->get_SkuId(skuId.GetAddressOf()))
ChkHr(CollectionsServiceProxyV6::ConsumeConsumable(itemProductId.Get(), itemTransactionId.Get(), cv.Get()))
ChkHr(CollectionsServiceProxyV6::GetUnfulfilledConsumables(bigCatId, pCV, items))
ChkHr(CollectionsServiceProxyV6::GetUnfulfilledConsumables(GetAppCatalogId(cv.Get()), cv.Get(), items))
ChkHr(CollectionsServiceProxyV6::GetUnfulfilledConsumables(parentProductId, pCV, items))
ChkHr(componentLauncher->RequestTokenWithUIElementHostingAndWebAccountAsync(request, account, uiElement, asyncInfo))
ChkHr(componentLauncher->RequestTokenWithUIElementHostingAsync(request, uiElement, asyncInfo))
ChkHr(ComposeLegacyXboxContentIdFromInstalledContentId(WindowsGetStringRawBuffer(packageIdentifier, nullptr), contentId.addressof()))
ChkHr(connectionProfile->GetConnectionCost(&cost))
ChkHr(contentFactory->CreateFromStringWithEncodingAndMediaType( requestJsonString.Get(), Windows::Storage::Streams::UnicodeEncoding::UnicodeEncoding_Utf8, HStringReference(L"application/json").Get(), &requestContent))
ChkHr(contentFactory->CreateFromStringWithEncodingAndMediaType( requestJsonString.Get(), Windows::Storage::Streams::UnicodeEncoding::UnicodeEncoding_Utf8, JsonMediaType.Get(), &requestContent))
ChkHr(contentId.CopyTo(packageFamilyNameToUninstall.GetAddressOf()))
ChkHr(ContentIdentifiers->First(&spContentIdsIter))
ChkHr(contentIdKeyIdItem->get_ContentIds(&contentIds))
ChkHr(contentIdKeyIdItem->get_KeyIds(&keyIds))
ChkHr(contentIdResponse->get_Items(&items))
ChkHr(contentIds->Append(contentId.Get()))
ChkHr(contentIds->Append(HStringReference(szGuid).Get()))
ChkHr(contentIds->Append(packageIdentifier))
ChkHr(contentIds->get_Size(&contentIdSize))
ChkHr(contentIds->get_Size(&contentIdsSize))
ChkHr(contentIds->get_Size(&contentSize))
ChkHr(contentIds->get_Size(&size))
ChkHr(contentIds->get_Size(&sizeOfContentIds))
ChkHr(contentIds->GetAt(contentIdIndex, contentId.GetAddressOf()))
ChkHr(contentIds->GetAt(i, contentId.GetAddressOf()))
ChkHr(contentIds->GetView(&contentIdsVectorView))
ChkHr(contentInfo->GetCatalogId(&storeIdFromLicense))
ChkHr(ConvertJsonObjectToPropertySet(jsonDataObj, message))
ChkHr(ConvertPropertySetToJsonObject(responseMessage, jsonOutput))
ChkHr(ConvertWebAccountIdFromAppToRealIdForUser(user, AccountProviderType::AAD, callingAppPfn, webAccountId, realId.GetAddressOf()))
ChkHr(ConvertWebAccountIdFromAppToRealIdForUser(user, AccountProviderType::MSA, callingAppPfn, webAccountId, realId.GetAddressOf()))
ChkHr(ConvertWebAccountIdFromRealIdToAppForUser(user, AccountProviderType::AAD, callingAppPfn, realId.Get(), pWebAccountId))
ChkHr(ConvertWebAccountIdFromRealIdToAppForUser(user, AccountProviderType::MSA, callingAppPfn, realId.Get(), pWebAccountId))
ChkHr(CopyToNotNull(_productReceipt, pReceipt))
ChkHr(CopyToNotNull(_receipt, pReceipt))
ChkHr(CopyToNotNull(spLicenseInformationServerSingleton, value))
ChkHr(CopyToNotNull(spProductInfos, ppValue))
ChkHr(coreApp->get_MainView(coreAppView.GetAddressOf()))
ChkHr(coreAppView->get_CoreWindow(coreWindow.GetAddressOf()))
ChkHr(CoreQueryApplicationService(processId, __uuidof(ICoreApplication), __uuidof(**(&spCoreAppPrivate)), IID_PPV_ARGS_Helper(&spCoreAppPrivate)))
ChkHr(coreWindow.As(&coreWinInterop))
ChkHr(coreWindowStatic->GetForCurrentThread(coreWindow.GetAddressOf()))
ChkHr(coreWinInterop->get_WindowHandle(&hwnd))
ChkHr(cost->get_NetworkCostType(&costType))
ChkHr(cost->get_Roaming(&isRoaming))
ChkHr(CoSwitchCallContext(nullptr, &oldCtx))
ChkHr(CoSwitchCallContext(nullptr, &pOldCtx))
ChkHr(CoSwitchCallContext(pOldCtx, &pTmpCtx))
ChkHr(CreateCommand( 1020, Microsoft::WRL::Callback<Windows::UI::Popups::IUICommandInvokedHandler>( [](Windows::UI::Popups::IUICommand *) -> HRESULT { HRESULT __hr = ((HRESULT)0L);; { ComPtr<IUriRuntimeClass> spUri; { { __hr = (IAPUtils::CreateUri(HStringReference(L"ms-windows-store://signin").Get(), &spUri)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\messagedialoghelper.cpp", 138, __FSTREXP __FUNCTION__  , "ChkHr(IAPUtils::CreateUri(HStringReference(L\"ms-windows-store://signin\").Get(), &spUri))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<ILauncherStatics> spLauncherStatics; { { __hr = (GetActivationFactory(StringReference(RuntimeClass_Windows_System_Launcher).Get(), &spLauncherStatics)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\messagedialoghelper.cpp", 138, __FSTREXP __FUNCTION__  , "ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_System_Launcher).Get(), &spLauncherStatics))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<IAsyncOperation<bool>> spAsyncOperation; { { __hr = (spLauncherStatics->LaunchUriAsync(spUri.Get(), &spAsyncOperation)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\messagedialoghelper.cpp", 138, __FSTREXP __FUNCTION__  , "ChkHr(spLauncherStatics->LaunchUriAsync(spUri.Get(), &spAsyncOperation))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; } goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }).Get(), &spCommand))
ChkHr(CreateCommand( 1022, nullptr, &spCommand))
ChkHr(CreateCommand( uLabelId, pHandler, spCommand.GetAddressOf()))
ChkHr(CreateCommandWithInt32Id( 2002, OkCommandId, nullptr, spCommand.GetAddressOf()))
ChkHr(CreateCommandWithInt32Id( 2003, DenyCommandId, nullptr, spCommand.GetAddressOf()))
ChkHr(CreateGetItemsRequest(authTicket.GetRawBuffer(nullptr), &request))
ChkHr(CreateGuid(&guidCorrelationId))
ChkHr(CreateGuid(&guidRequestId))
ChkHr(CreateHttpClient(&httpClient))
ChkHr(CreateListingInformation( _spStoreCommerceServer.Get(), cv.Get(), _hCancelEvent, _inAppOfferTokens.Get(), _keywords.Get(), &_spListingInformation))
ChkHr(CreateMessageDialogHelper(hwnd, dialogHelper))
ChkHr(CreateRandomAccessStreamOverStream(stream, BSOS_OPTIONS::BSOS_DEFAULT, __uuidof(**(&randAccStream)), IID_PPV_ARGS_Helper(&randAccStream)))
ChkHr(CreateStoreContextServer(pUser, _spStoreContextServer))
ChkHr(cryptoFactory->DecodeFromBase64String( encodedString, &spHashBuffer))
ChkHr(CSP6Internal::CreateCatalogHttpClient(&_httpClient))
ChkHr(CSP6Internal::CreateCatalogHttpClient(&httpClient))
ChkHr(currentAvailability.As(&currentAvailabilityPrivate))
ChkHr(currentAvailabilityPrivate->get_Rank(&currentRank))
ChkHr(CurrentEraTitleInfo::GetAppId(pfnBuff, pfnLength))
ChkHr(CurrentEraTitleInfo::GetProxyAppPid(&pid))
ChkHr(currentOperation->GetNextAsync(productJson, nextOperation))
ChkHr(currentOperation->GetNextAsync(productJsonResponse, nextOperation))
ChkHr(currentPair->get_Key(keyName.GetAddressOf()))
ChkHr(currentPair->get_Key(tag->destinationKey.GetAddressOf()))
ChkHr(currentPair->get_Value(jsonValue.GetAddressOf()))
ChkHr(currentPair->get_Value(value.GetAddressOf()))
ChkHr(currentSku.As(&currentSkuPrivate))
ChkHr(currentSkuPrivate->get_Rank(&currentRank))
ChkHr(customPolicyDecoded.Set(customPolicyEncoded))
ChkHr(CWSHttpHelper::AddTHAdditionalHeaders(arrRequestHeaders))
ChkHr(CWSHttpHelper::AddTHAdditionalRequestHeader(arrAdditionalHeaders, L"MS-CorrelationId", wszCorrelationId))
ChkHr(CWSHttpHelper::AddTHAdditionalRequestHeader(arrAdditionalHeaders, L"MS-RequestId", wszRequestId))
ChkHr(CWSHttpHelper::AddTHAdditionalRequestHeader(arrRequestHeaders, L"MS-CV", cv.GetUnicode()))
ChkHr(CWSHttpHelper::AddTHAdditionalRequestHeader(arrRequestHeaders, L"MS-SiteName", WindowsGetStringRawBuffer(authDomain, nullptr)))
ChkHr(data->pThis->GetContentIdKeyIdsForProductIds(spIds.Get(), cv.Get(), &response))
ChkHr(dataReaderFactory->FromBuffer(licenseBuffer.Get(), licenseReader.GetAddressOf()))
ChkHr(dependencies.As(&dependenciesIteratable))
ChkHr(dependencies->get_Size(&size))
ChkHr(dependencies->GetAt(index, &package))
ChkHr(dependenciesIteratable->First(&dependenciesIterator))
ChkHr(dependenciesIterator->get_Current(&dependentPackage))
ChkHr(dependenciesIterator->get_HasCurrent(&hasCurrentDependencies))
ChkHr(dependenciesIterator->MoveNext(&hasCurrentDependencies))
ChkHr(dependentPackage.As(&dependentPackage4))
ChkHr(dependentPackage->get_Id(&dependentPackageId))
ChkHr(dependentPackage4->get_SignatureKind(&signatureKindDependent))
ChkHr(dependentPackageId->get_FullName(dependentPackageFullName.GetAddressOf()))
ChkHr(deploymentResult->get_ExtendedErrorCode(&deploymentResultCode))
ChkHr(deploymentResultCode)
ChkHr(dialogHelper->put_ContextString(packageDisplayName.Get()))
ChkHr(dialogHelper->ShowDialogWithResultsAsync( ((HRESULT)0x803F6209L), nullptr, messageDialogOperation.GetAddressOf()))
ChkHr(displaySkuAvailabilities->GetObjectAt(0, &firstSkuAvail))
ChkHr(displaySkuAvailabilities->GetObjectAt(iSku, &item))
ChkHr(displaySkuAvailabilities->GetObjectAt(iSkuAvailability, &skuAvailability))
ChkHr(EnsureWindowFromCallingProcess(*phwndOwner))
ChkHr(EventTokenHashMap::Make(&_statusChangedTokenMap))
ChkHr(extendedError)
ChkHr(factory->Create(filter.Get(), &httpClient))
ChkHr(FileTimeToString(strTime, 200, UINT64_TO_FILETIME(value.UniversalTime)))
ChkHr(filter.As(&filter2))
ChkHr(filter2->put_MaxVersion(Windows::Web::Http::HttpVersion_Http11))
ChkHr(FilterUnsupportedFeaturesInternal(spPotentialSystemFeatures.Get(), resultsView))
ChkHr(FormatNameValuePairs(pszFinalUri, urlLength, pszInitialUri, nameValuePairs, cNameValuePairs, encodeParameters))
ChkHr(FormatNameValuePairs(pszRemaining, cchRemaining, pathFormat, nameValuePairs, cNameValuePairs, false))
ChkHr(FormatStrings(L"%1\n[CV:%2]", ppszFormattedString, pszMessage, WindowsGetStringRawBuffer(cv, nullptr)))
ChkHr(foundProductIds.As(&foundProductIdsIVector))
ChkHr(foundProductIds->Append(productId.Get()))
ChkHr(get_StoreId(storeId.GetAddressOf()))
ChkHr(GetActivationFactory( CryptographicBufferRuntimeClassName.Get(), &cryptoFactory))
ChkHr(GetActivationFactory( HStringReference(RuntimeClass_Windows_Internal_StateRepository_Package).Get(), &spPackageStatics))
ChkHr(GetActivationFactory( HStringReference(RuntimeClass_Windows_Internal_StateRepository_PackageResourceResolver).Get(), &spPackageResolverStatics))
ChkHr(GetActivationFactory( NetworkingConnectivityNetworkInformation.Get(), &netInfoStatics))
ChkHr(GetActivationFactory( StateRepositoryPackageClassId.Get(), &spPackageStatics))
ChkHr(GetActivationFactory( StateRepositoryUserClassId.Get(), &spUserStatics))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_ApplicationModel_Core_CoreApplication).Get(), coreApp.GetAddressOf()))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonValue).Get(), &spJsonValueStatics))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Foundation_PropertyValue).Get(), spPropValueFactory.GetAddressOf()))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Internal_StateRepository_Package).Get(), &spPackageStatics))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Internal_StateRepository_TargetDeviceFamily).Get(), &spTargetDeviceFamilyStatics))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Security_Authentication_Web_Core_WebAuthenticationCoreManager).Get(), &componentLauncher))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Storage_Streams_RandomAccessStreamReference).Get(), &spStreamReferenceStatics))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Web_Http_HttpClient).Get(), &factory))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Web_Http_HttpMethod).Get(), &methodStatics))
ChkHr(GetActivationFactory(HStringReference(RuntimeClass_Windows_Web_Http_HttpRequestMessage).Get(), &requestFactory))
ChkHr(GetActivationFactory(PropertyValueRef.Get(), &propertyValueFactory))
ChkHr(GetActivationFactory(RuntimeClassWindowsXboxApplicationModelStateInternalStateHelperCache.Get(), cacheStatics.GetAddressOf()))
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_System_Launcher).Get(), &spLauncherStatics))
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_System_UserProfile_GlobalizationPreferences).Get(), &spGlobalizationPreferences))
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_UI_Core_CoreWindow).Get(), &spCoreWindowStatic))
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_UI_Core_CoreWindow).Get(), coreWindowStatic.GetAddressOf()))
ChkHr(GetActivationFactory(StringReference(RuntimeClass_Windows_UI_Popups_MessageDialog).Get(), &_messageDialogFactory))
ChkHr(GetActivationFactory(WindowsFoundationUri.Get(), &uriEscapeStatics))
ChkHr(GetAddOnProduct(&spProduct))
ChkHr(GetALM(alm.GetAddressOf()))
ChkHr(GetAppName(szArgument, (sizeof(*RtlpNumberOf(szArgument)))))
ChkHr(GetB2BKey(collectionKeysUri.Get(), serviceTicket, publisherUserId, pCV, collectionsId))
ChkHr(GetB2BKey(purchaseKeysUri.Get(), serviceTicket, publisherUserId, pCV, purchaseId))
ChkHr(GetBigCatIds(productId.GetAddressOf(), skuId.GetAddressOf(), availabilityId.GetAddressOf(), productType.GetAddressOf()))
ChkHr(GetCallingAppPackageFullName(fullName.GetAddressOf()))
ChkHr(GetCallingAppPackageFullName(packageFullName.GetAddressOf()))
ChkHr(GetCallingAppSupportsMultipleUser(&supportsMultipleUsers))
ChkHr(GetContentId(szPackageFamilyName, cpt, &guidContentId))
ChkHr(GetContentId(WindowsGetStringRawBuffer(packageIdentifier, nullptr), CPT_UNIVERSAL_APP, &guidContentId))
ChkHr(GetContentIdKeyIdsForProductIds( productIdsIter.Get(), cv.Get(), &contentIdResponse))
ChkHr(GetContentIdKeyIdsForProductIds(ids.Get(), cv.Get(), &response))
ChkHr(GetContentIdKeyIdsForProductIds(spIds.Get(), cv.Get(), &response))
ChkHr(GetCurrentStatus(&status))
ChkHr(GetDeviceContextId(L"MOID", szEncodedMoId, (sizeof(szEncodedMoId)/sizeof(szEncodedMoId[0]))))
ChkHr(GetDeviceContextId(L"OEMID", szEncodedOemId, (sizeof(szEncodedOemId)/sizeof(szEncodedOemId[0]))))
ChkHr(GetDeviceContextId(L"SCMID", szEncodedScmId, (sizeof(szEncodedScmId)/sizeof(szEncodedScmId[0]))))
ChkHr(GetEnterpriseStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), pValue))
ChkHr(GetEnterpriseStoreWebAccountIdInternal(user, packageFamilyName.Get(), pValue))
ChkHr(GetERAPackageFullNameByAumid(pfnBuff, wil::out_param(callerPackageFullName)))
ChkHr(GetFormattedPriceUsingCurrencyFormatter( dblPrice, currencyCode, locale, region, formattedPrice))
ChkHr(GetFormattedPriceUsingCurrencyFormatter( price, currencyCode, language.Get(), HStringReference((const WCHAR*)pwszUppercaseRegion).Get(), formattedPrice))
ChkHr(GetFormattedPriceUsingCurrencyFormatter( priceValue, pStorePricingInfo->CurrencyCode, locale, HStringReference(pwszUppercaseRegion).Get(), formattedPrice))
ChkHr(GetHardwareManufacturerInfoInternal(value))
ChkHr(GetHttpResponse( pHttpClient, hstrURL, verb, pCV, requestContent.Get(), pStatusCode, hstrResponse))
ChkHr(GetJsonFromURLWithHttpClient(httpClient.Get(), hstrURL, pCV, ppJsonObject))
ChkHr(GetNamedString(spJson, pszName, timeString.GetAddressOf()))
ChkHr(GetNextBatch())
ChkHr(GetPackageFamilyNameFromPackage(pOptionalPackage, packageFamilyName))
ChkHr(GetPackageFamilyNameFromToken(spProcessToken, &pkgFamilyNameSize, pkgFamilyName))
ChkHr(GetPhoneReceiptFilepath(geoId, language, eReceiptType, featureName, packageFullName, szCacheFileFullPath, (sizeof(*RtlpNumberOf(szCacheFileFullPath)))))
ChkHr(GetPriceInfo(product, &spInAppOffer->PricingInfo))
ChkHr(GetPriceInfo(product, &spStoreAppInfo->PricingInfo))
ChkHr(GetPriceInfoFromAvailability(availability, &spInAppSkuInfo->PricingInfo))
ChkHr(GetPriceInfoFromAvailability(availability, pricingInfo))
ChkHr(getProcessPackageResult)
ChkHr(GetProducts(productKinds, storeIds.Get(), cv.GetHStringReference().Get(), productJson))
ChkHr(GetProductsByKinds( nullptr, ids.Get(), nullptr, cv.Get(), CatalogRelationshipType::All, hydrateResult.GetAddressOf()))
ChkHr(GetProductsByKinds( nullptr, productIdsInAppInstallQueue.Get(), nullptr, cv.Get(), CatalogRelationshipType::SellableBy, hydrateResult.GetAddressOf()))
ChkHr(GetProductsByKinds( nullptr, spIds.Get(), nullptr, cv.Get(), CatalogRelationshipType::SellableBy, hydrateResult.GetAddressOf()))
ChkHr(GetProductsByKinds( productKinds.Get(), productIds.Get(), nullptr, cv.Get(), CatalogRelationshipType::AddOnParent, productJsonString.GetAddressOf()))
ChkHr(GetProductsByKinds(productKinds, storeIds, nullptr, cv.Get(), CatalogRelationshipType::SellableBy, productJson))
ChkHr(GetProductsByKinds(productKinds, storeIds, storeProductOptions, cv.Get(), CatalogRelationshipType::SellableBy, productJson))
ChkHr(GetPublisherId(pStoreCommerceServer, pCV, hstrPublisherId.GetAddressOf()))
ChkHr(GetReceiptCacheFileName(geoId, language, eReceiptType, featureName, szCacheFileName, (sizeof(*RtlpNumberOf(szCacheFileName)))))
ChkHr(GetReceiptCacheFolder(packageFullName, pszCacheFilepath, cchCacheFilepath))
ChkHr(GetRequiredEkbFromContentId(contentId.get(), keyId.addressof()))
ChkHr(GetSidForUser(user, sidString.GetAddressOf()))
ChkHr(GetStoreCommerce(&spStoreCommerce))
ChkHr(GetStoreCommerce(&spStoreCommerceWithConsumables))
ChkHr(GetStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), pValue))
ChkHr(GetStoreWebAccountIdInternal(user, packageFamilyName.Get(), pValue))
ChkHr(GetStringFromURLWithHttpClient(pHttpClient, hstrURL, pCV, nullptr, jsonString.GetAddressOf()))
ChkHr(GetText(hr, cv, content.GetAddressOf(), title.GetAddressOf()))
ChkHr(GetUnfulfilledConsumablesOperationServer::GetUnfulfilledConsumablesSync( m_productId.Get(), pCV, nullptr, spUnfulfilledList.Get()))
ChkHr(GetUnfulfilledConsumablesSync( _spStoreCommerceServer->GetAppCatalogId(cv.Get()), cv.Get(), _spStoreCommerceServer->GetProductIdCache(), _spUnfulfilledList.Get()))
ChkHr(GetWindowHandle(spCoreWindow.Get(), &hwnd))
ChkHr(GuidToStringWithoutBraces(&anid, szAnid))
ChkHr(GuidToStringWithoutBraces(&guidContentId, szContentId))
ChkHr(GuidToStringWithoutBraces(&guidContentId, szGuid))
ChkHr(GuidToStringWithoutBraces(&guidCorrelationId, wszCorrelationId))
ChkHr(GuidToStringWithoutBraces(&guidRequestId, wszRequestId))
ChkHr(GuidToStringWithoutBraces(&pStoreCommerceServer->GetAppId(), szProductIdGuid))
ChkHr(GuidToStringWithoutBraces(&pStoreCommerceServer->GetAppId(), wszAppId))
ChkHr(hashMap.As(&_productIdTable))
ChkHr(hashMap->GetView(&_addOnLicensesMap))
ChkHr(hashMap->GetView(ppMapView))
ChkHr(hashMap->Insert(skuStoreId.Get(), license.Get(), &replaced))
ChkHr(hashMap->Insert(storeId.Get(), product.Get(), &replaced))
ChkHr(headers.As(&headersMap))
ChkHr(headers->Append(HStringReference(L"MS-SiteName").Get(), authDomain))
ChkHr(headers->Append(HStringReference(L"X-WP-ANID").Get(), HStringReference(szAnid).Get()))
ChkHr(headers->get_UserAgent(&userAgent))
ChkHr(headers->TryAppendWithoutValidation( HStringReference(L"Authorization").Get(), formattedAuthToken.Get(), &succeeded))
ChkHr(headers->TryAppendWithoutValidation( HStringReference(L"Authorization").Get(), ticket, &succeeded))
ChkHr(headers->TryAppendWithoutValidation(HStringReference(L"Authorization").Get(), authTicket, &b))
ChkHr(headersMap->Insert(HStringReference(L"MS-CV").Get(), cv.GetHStringReference().Get(), &replaced))
ChkHr(hr)
ChkHr(hrCallContext)
ChkHr(hrCommerceOp)
ChkHr(hrCopy)
ChkHr(hrEntry)
ChkHr(hresult)
ChkHr(HRESULT_FROM_RPC(hr))
ChkHr(HRESULT_FROM_RPC(OptionalPackageRundownNotification( rpcHandle, appPfn.GetRawBuffer(nullptr), sessionId, sidString.GetRawBuffer(nullptr), WindowsGetStringRawBuffer(optionalPackageName, nullptr))))
ChkHr(HRESULT_FROM_RPC(RpcBindingFromStringBindingW(rpcStringBinding, &rpcHandle)))
ChkHr(HRESULT_FROM_RPC(RpcBindingSetAuthInfoExW( rpcHandle, nullptr, 6, 10, 0, 0, reinterpret_cast<RPC_SECURITY_QOS *>(&qos))))
ChkHr(HRESULT_FROM_RPC(RpcStringBindingComposeW(nullptr, reinterpret_cast<RPC_WSTR>(L"ncalrpc"), nullptr, nullptr, nullptr, &rpcStringBinding)))
ChkHr(HRESULT_FROM_WIN32(::RegGetValueW(hKey, nullptr, valueName, 0x00000002, nullptr, pszBuffer, &cbData)))
ChkHr(HRESULT_FROM_WIN32(::RegOpenKeyExW(root, subKey, 0, ((((0x00020000L)) | (0x0001) | (0x0008) | (0x0010)) & (~(0x00100000L))), &hKey)))
ChkHr(HRESULT_FROM_WIN32(::RegSetKeyValueW(root, subKey, valueName, ( 11ul ), &value, sizeof(value))))
ChkHr(HRESULT_FROM_WIN32(::RegSetKeyValueW(root, subKey, valueName, ( 1ul ), value, dwSize)))
ChkHr(HRESULT_FROM_WIN32(1168L))
ChkHr(HRESULT_FROM_WIN32(122L))
ChkHr(HRESULT_FROM_WIN32(1244L))
ChkHr(HRESULT_FROM_WIN32(13L))
ChkHr(HRESULT_FROM_WIN32(1400L))
ChkHr(HRESULT_FROM_WIN32(15861L))
ChkHr(HRESULT_FROM_WIN32(15862L))
ChkHr(HRESULT_FROM_WIN32(1630L))
ChkHr(HRESULT_FROM_WIN32(50L))
ChkHr(HRESULT_FROM_WIN32(5L))
ChkHr(HRESULT_FROM_WIN32(erf.erfOper))
ChkHr(HRESULT_FROM_WIN32(error))
ChkHr(HRESULT_FROM_WIN32(GetLastError()))
ChkHr(HRESULT_FROM_WIN32(rc))
ChkHr(HRESULT_FROM_WIN32(RtlNtStatusToDosError(status)))
ChkHr(hrFamilies)
ChkHr(hrFetch)
ChkHr(hrGetAllAccounts)
ChkHr(hrGetPackage)
ChkHr(hrGetPackageFamilyName)
ChkHr(hrGetString)
ChkHr(hrGoldenTicket)
ChkHr(hrHttp)
ChkHr(hrImpersonate)
ChkHr(hrInfo)
ChkHr(hrInfosIter)
ChkHr(hrInnerIter)
ChkHr(hrItemIter)
ChkHr(hrIter)
ChkHr(hrJoin)
ChkHr(hrJoinActionFilters)
ChkHr(hrJoinStoreIds)
ChkHr(hrKinds)
ChkHr(hrMake)
ChkHr(hrModalAsUser)
ChkHr(hrOp)
ChkHr(hrOperation)
ChkHr(hrPackage)
ChkHr(hrPost)
ChkHr(hrProductsIter)
ChkHr(hrRequest)
ChkHr(hstrContent.Set(pszContent))
ChkHr(hstrEntitlementId.Set(entitlementId))
ChkHr(hstrPreferredSkuId.Set(_inAppProductSkuId.Get()))
ChkHr(hstrProductId.Set(_spStoreCommerceServer->GetAppCatalogId(_pCV)))
ChkHr(hstrTitle.Set(pszTitle))
ChkHr(httpClient->get_DefaultRequestHeaders(&headers))
ChkHr(httpRequest.Initialize (0))
ChkHr(httpRequest.SetAuthorizationHeader(authResponse))
ChkHr(httpRequest.UploadAndFetchResourceByUrl ( lpszURL, 0, 0, 1, 1 ))
ChkHr(IAPUtils::BuildEntitlementFiltersJSON(jsonEntitlementFilters, _productKinds.Get()))
ChkHr(IAPUtils::BuildEntitlementFiltersJSON(jsonEntitlementFilters, productKinds))
ChkHr(IAPUtils::BuildEntitlementFiltersJSON(jsonEntitlementFilters, productKinds.Get()))
ChkHr(IAPUtils::BuildStoreId( _productId.Get(), _skuId.Get(), _availabilityId.Get(), _storeId.GetAddressOf()))
ChkHr(IAPUtils::BuildStoreId( _productId.Get(), _skuId.Get(), nullptr, _skuStoreId.GetAddressOf()))
ChkHr(IAPUtils::BuildStoreId( _productId.Get(), _skuId.Get(), nullptr, _storeId.GetAddressOf()))
ChkHr(IAPUtils::BuildStoreId( productId.Get(), skuId.Get(), nullptr, storeId.GetAddressOf()))
ChkHr(IAPUtils::BuildStoreId(productId.Get(), skuId.Get(), availabilityId.Get(), storeId.GetAddressOf()))
ChkHr(IAPUtils::CheckProductKinds(productKinds))
ChkHr(IAPUtils::CombineProductsAndCollectionsJson( jsonCatalogString.Get(), jsonCollectionsString.Get(), productJsonResponse))
ChkHr(IAPUtils::CombineProductsAndCollectionsJson( productJsonString.Get(), collectionsJsonString.Get(), productJson))
ChkHr(IAPUtils::CombineProductsAndCollectionsJson( productJsonString.Get(), collectionsJsonString.Get(), productJsonResponse))
ChkHr(IAPUtils::ConstructSlsUri(requestParams.uriToFormat.Get(), requestParams.cchUriMax, jsonInternalParameters, uri.GetAddressOf()))
ChkHr(IAPUtils::CreateHttpClient(&httpClient))
ChkHr(IAPUtils::CreateHttpClient(httpClient.GetAddressOf()))
ChkHr(IAPUtils::CreateHttpClient(ppHttpClient))
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader( authToken.Get(), false, httpClient.GetAddressOf()))
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader( ticket.Get(), false, ppHttpClient))
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader(authTicket.Get(), false, &httpClient))
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader(authTicket.Get(), true, &httpClient))
ChkHr(IAPUtils::CreateHttpClientWithAuthHeader(ticket.Get(), true, ppHttpClient))
ChkHr(IAPUtils::CreateHttpClientWithAuthIfAvailable(_user.Get(), &httpClient, requestParams.forceRetailSandbox))
ChkHr(IAPUtils::CreateUri(_hstrImageUri.Get(), &_spImageUri))
ChkHr(IAPUtils::CreateUri(HStringReference(L"ms-windows-store://signin").Get(), &spUri))
ChkHr(IAPUtils::CreateUri(hstrLinkUri.Get(), ppLinkUri))
ChkHr(IAPUtils::CreateUri(hstrUri.Get(), &_uriRuntimeClass))
ChkHr(IAPUtils::CreateUri(uri.Get(), &_spUri))
ChkHr(IAPUtils::CreateUri(uriString.Get(), ppValue))
ChkHr(IAPUtils::GetDeviceContextId(L"MOID", szEncodedMoId, (sizeof(szEncodedMoId)/sizeof(szEncodedMoId[0]))))
ChkHr(IAPUtils::GetDeviceContextId(L"OEMID", szEncodedOemId, (sizeof(szEncodedOemId)/sizeof(szEncodedOemId[0]))))
ChkHr(IAPUtils::GetDeviceContextId(L"SCMID", szEncodedScmId, (sizeof(szEncodedScmId)/sizeof(szEncodedScmId[0]))))
ChkHr(IAPUtils::GetDeviceContextString(deviceContextString.GetAddressOf()))
ChkHr(IAPUtils::GetDeviceIds(moid, oemid, scmid))
ChkHr(IAPUtils::GetFormattedPrice(_basePrice, _currencyCode.Get(), _formattedBasePrice.GetAddressOf()))
ChkHr(IAPUtils::GetFormattedPrice(_listPrice, _currencyCode.Get(), _formattedPrice.GetAddressOf()))
ChkHr(IAPUtils::GetFormattedPrice(_recurrencePrice, _currencyCode.Get(), _formattedRecurrencePrice.GetAddressOf()))
ChkHr(IAPUtils::GetJsonFromURL(hstrUri.Get(), pCV, &jsonObject))
ChkHr(IAPUtils::GetJsonFromURLWithHttpClient( _httpClient.Get(), HStringReference(szNextUrl).Get(), _spCV, &jsonIAPs))
ChkHr(IAPUtils::GetJsonFromURLWithHttpClient(httpClient.Get(), hstrUri.Get(), pCV, spJsonObject.GetAddressOf()))
ChkHr(IAPUtils::GetLanguage(hstrLanguage.GetAddressOf()))
ChkHr(IAPUtils::GetLanguage(language.GetAddressOf()))
ChkHr(IAPUtils::GetLanguage(temp.GetAddressOf()))
ChkHr(IAPUtils::GetLanguages(&spLanguages))
ChkHr(IAPUtils::GetLanguagesString(languages.GetAddressOf()))
ChkHr(IAPUtils::GetMarket(hstrGeoId.GetAddressOf()))
ChkHr(IAPUtils::GetMarket(hstrMarket.GetAddressOf()))
ChkHr(IAPUtils::GetMarket(market.GetAddressOf()))
ChkHr(IAPUtils::GetMarket(temp.GetAddressOf()))
ChkHr(IAPUtils::GetTimeSpanDifference(dtTrialTimeRemaining, &trialTimeRemaining))
ChkHr(IAPUtils::GetTimeSpanDifference(expirationDate, &trialTimeRemaining))
ChkHr(IAPUtils::IsCallingProcessAppContainer(&_isAppContainer))
ChkHr(IAPUtils::IsCallingProcessAppContainer(&isAppContainer))
ChkHr(IAPUtils::ParseStoreId( productStoreId, productId.GetAddressOf(), nullptr, nullptr))
ChkHr(IAPUtils::ParseStoreId( storeId, productId.GetAddressOf(), nullptr, nullptr))
ChkHr(IAPUtils::ParseStoreId( storeId.Get(), productId.GetAddressOf(), nullptr, nullptr))
ChkHr(IAPUtils::ParseStoreId(data->storeIdToRefresh.Get(), productId.GetAddressOf(), nullptr, nullptr))
ChkHr(IAPUtils::ParseStoreId(storeId.Get(), productId.GetAddressOf(), nullptr , nullptr ))
ChkHr(IAPUtils::SetDateTime(ftAddOnExpirationTime, &addOnExpirationTime))
ChkHr(IAPUtils::SetDateTime(ftExpirationTime, &expirationDate))
ChkHr(IAPUtils::SetDateTime(ftExpirationTime, &m_dtExpiration))
ChkHr(IAPUtils::SetDateTime(ftExpireTime, &m_dtExpiration))
ChkHr(IAPUtils::SetDateTime(ftTrialTimeRemaining, &dtTrialTimeRemaining))
ChkHr(IAPUtils::SetMaxDateTime(&_expirationDate))
ChkHr(IAPUtils::SetMaxDateTime(&expirationDate))
ChkHr(IAPUtils::SetMaxDateTime(&m_dtExpiration))
ChkHr(IAPUtils::TimeSpanToString(value, timeSpanString.GetAddressOf()))
ChkHr(ids->Append(productId.Get()))
ChkHr(images->GetObjectAt(iImage, &image))
ChkHr(impersonator.Impersonate())
ChkHr(inAppOfferTokens->get_Size(&cInAppOfferTokens))
ChkHr(inAppOfferTokens->GetAt(p, temp.GetAddressOf()))
ChkHr(info->get_IsSatisfied(&isSatisfied))
ChkHr(infos.As(&infosIterable))
ChkHr(infos->get_Size(&sizeResult))
ChkHr(infosIterable->First(&infosIterator))
ChkHr(infosIterator->get_Current(&keyValuePair))
ChkHr(infosIterator->get_HasCurrent(&hasCurrent))
ChkHr(Initialize())
ChkHr(InitializeIdsFromLicense())
ChkHr(initWithWindow->Initialize(_hwnd))
ChkHr(inspectable.As(&productPrivate))
ChkHr(installItemVector->get_Size(&installVectorSize))
ChkHr(installOptions->get_AllowForcedAppRestart(&allowForcedAppRestart))
ChkHr(installStatus->get_PackageInstallExtendedState(&entendedQueueState))
ChkHr(installStatus->get_PackageInstallExtendedState(&extendedState))
ChkHr(installStatus->get_PackageInstallState(&queueState))
ChkHr(installStatus->get_UpdateStatus(&newStatus))
ChkHr(internalPackage->get_DisplayName(displayName.GetAddressOf()))
ChkHr(IsCallerERA(&isERA))
ChkHr(IsStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), webAccountId, *value))
ChkHr(IsStoreWebAccountIdInternal(user, packageFamilyName.Get(), webAccountId, *value))
ChkHr(it.As(&spWebTokenRequestResult))
ChkHr(item->add_StatusChanged( Microsoft::WRL::Callback<ITypedEventHandler<StoreQueueItem*, IInspectable*>>( this, &DownloadAndInstallStorePackagesOperation::_OnStoreQueueItemStatusChanged).Get(), &regToken))
ChkHr(item->get_ContentIds(&contentIds))
ChkHr(item->get_KeyIds(&keyIds))
ChkHr(item->get_PackageFamilyName(packageFamilyName.GetAddressOf()))
ChkHr(item->get_PackageFamilyName(packageFamilyName.ReleaseAndGetAddressOf()))
ChkHr(item->get_ProductId(productId.GetAddressOf()))
ChkHr(item->GetCurrentStatus(installStatus.GetAddressOf()))
ChkHr(item->remove_StatusChanged(regToken))
ChkHr(item2->get_Mandatory(value))
ChkHr(Items.Append(item))
ChkHr(items->get_Size(&count))
ChkHr(items->get_Size(&itemCount))
ChkHr(items->get_Size(&size))
ChkHr(items->GetAt(0, &contentIdKeyIdItem))
ChkHr(items->GetAt(0, item.GetAddressOf()))
ChkHr(items->GetAt(i, inspectable.GetAddressOf()))
ChkHr(items->GetAt(index, &item))
ChkHr(items->GetAt(index, item.GetAddressOf()))
ChkHr(items->GetObjectAt(i, &item))
ChkHr(iter->get_Current(&availability))
ChkHr(iter->get_Current(&collectionData))
ChkHr(iter->get_Current(&item))
ChkHr(iter->get_Current(&sku))
ChkHr(iter->get_HasCurrent(&hasCurrent))
ChkHr(iter->MoveNext(&hasCurrent))
ChkHr(iterator->get_Current(&status))
ChkHr(iterator->get_HasCurrent(&hasCurrent))
ChkHr(iterator->MoveNext(&hasCurrent))
ChkHr(json.As(&jsonObjectIterable))
ChkHr(jsonArray->GetObjectAt(i, jsonElement.GetAddressOf()))
ChkHr(JsonHelpers::AppendObject(authTokensArray, jsonBeneficiary))
ChkHr(JsonHelpers::AppendObject(jsonBeneficiaries, beneficiary))
ChkHr(JsonHelpers::AppendObject(jsonProductSkuIds, productSku))
ChkHr(JsonHelpers::AppendObject(productSkuIds, productSku))
ChkHr(JsonHelpers::AppendObject(spBeneficiaryArray, spBeneficiary))
ChkHr(JsonHelpers::AppendString(jsonEntitlementFilters, entitlementFilter.Get()))
ChkHr(JsonHelpers::AppendString(productTypes, L"Application"))
ChkHr(JsonHelpers::AppendString(productTypes, L"UnmanagedConsumable"))
ChkHr(JsonHelpers::CreateJsonArray(&addOns))
ChkHr(JsonHelpers::CreateJsonArray(&authTokensArray))
ChkHr(JsonHelpers::CreateJsonArray(&jsonBeneficiaries))
ChkHr(JsonHelpers::CreateJsonArray(&jsonEntitlementFilters))
ChkHr(JsonHelpers::CreateJsonArray(&jsonProductSkuIds))
ChkHr(JsonHelpers::CreateJsonArray(&products))
ChkHr(JsonHelpers::CreateJsonArray(&productSkuIds))
ChkHr(JsonHelpers::CreateJsonArray(&productTypes))
ChkHr(JsonHelpers::CreateJsonArray(&spBeneficiaryArray))
ChkHr(JsonHelpers::CreateJsonObject(&_request))
ChkHr(JsonHelpers::CreateJsonObject(&_response))
ChkHr(JsonHelpers::CreateJsonObject(&beneficiary))
ChkHr(JsonHelpers::CreateJsonObject(&includeRelationship))
ChkHr(JsonHelpers::CreateJsonObject(&jsonCatalogParameters))
ChkHr(JsonHelpers::CreateJsonObject(&jsonCollectionsParameters))
ChkHr(JsonHelpers::CreateJsonObject(&jsonInternalParameters))
ChkHr(JsonHelpers::CreateJsonObject(&jsonOutput))
ChkHr(JsonHelpers::CreateJsonObject(&jsonParameters))
ChkHr(JsonHelpers::CreateJsonObject(&jsonResultObject))
ChkHr(JsonHelpers::CreateJsonObject(&newResults))
ChkHr(JsonHelpers::CreateJsonObject(&package))
ChkHr(JsonHelpers::CreateJsonObject(&previewResultJson))
ChkHr(JsonHelpers::CreateJsonObject(&productSku))
ChkHr(JsonHelpers::CreateJsonObject(&request))
ChkHr(JsonHelpers::CreateJsonObject(&spBeneficiary))
ChkHr(JsonHelpers::CreateJsonObject(&spRequest))
ChkHr(JsonHelpers::CreateJsonObject(&userAuth))
ChkHr(JsonHelpers::CreateJsonObject(jsonTemp.GetAddressOf()))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(_currentBatch, &_currentBatchCount))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(alternateIds, &count))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(availabilities, &countAvailabilities))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(collectionDataArray, &collectionSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(displaySkuAvailabilities, &count))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(displaySkuAvailabilities, &countSkuAvailabilities))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(images, &countImages))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(items, &count))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(jsonArray, &count))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(jsonSKUAvailabilities, &cchSKUAvailablilities))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(jsonUriArray, &countUris))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(localizedProperties, &count))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(marketProperties, &count))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(productAddOns, &addOnSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(products, &productsSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(productsArray, &productSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(relatedProducts, &relatedProductsSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(searchTitles, &countTitles))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(skuAvailabilities, &skuAvailabilitySize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(skuLocalizedProperties, &count))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(spActions, &actionsSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(spAlternateIds, &alternateIdsSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(spAvailabilities, &availabilitiesSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(spDisplaySkuAvailabilities, &displaySkuAvailabilitiesSize))
ChkHr(JsonHelpers::GetArraySizeFromJsonArray(storeProductArray, &productCount))
ChkHr(JsonHelpers::GetNamedArray(collectionData, L"items", &collectionDataArray))
ChkHr(JsonHelpers::GetNamedArray(customPolicyObject, L"packages", &packages))
ChkHr(JsonHelpers::GetNamedArray(displayProductSearchResult, L"Products", &_currentBatch))
ChkHr(JsonHelpers::GetNamedArray(displayProductSearchResult, L"Products", &products))
ChkHr(JsonHelpers::GetNamedArray(item, L"Availabilities", &availabilities))
ChkHr(JsonHelpers::GetNamedArray(jsonResult, L"Products", &products))
ChkHr(JsonHelpers::GetNamedArray(marketProperty, L"RelatedProducts", &relatedProducts))
ChkHr(JsonHelpers::GetNamedArray(package, L"productAddOns", &productAddOns))
ChkHr(JsonHelpers::GetNamedArray(product, L"AlternateIds", &alternateIds))
ChkHr(JsonHelpers::GetNamedArray(product, L"DisplaySkuAvailabilities", &displaySkuAvailabilities))
ChkHr(JsonHelpers::GetNamedArray(product, L"DisplaySkuAvailabilities", &skuAvailabilities))
ChkHr(JsonHelpers::GetNamedArray(product, L"LocalizedProperties", &localizedProperties))
ChkHr(JsonHelpers::GetNamedArray(product, L"MarketProperties", &marketProperties))
ChkHr(JsonHelpers::GetNamedArray(productsResultObject, L"Products", &productsArray))
ChkHr(JsonHelpers::GetNamedArray(properties, L"Images", &images))
ChkHr(JsonHelpers::GetNamedArray(properties, L"SearchTitles", &searchTitles))
ChkHr(JsonHelpers::GetNamedArray(response, L"items", &items))
ChkHr(JsonHelpers::GetNamedArray(sku, L"LocalizedProperties", &skuLocalizedProperties))
ChkHr(JsonHelpers::GetNamedArray(skuAvailability, L"Availabilities", &availabilities))
ChkHr(JsonHelpers::GetNamedArray(spAvailability, L"Actions", &spActions))
ChkHr(JsonHelpers::GetNamedArray(spDisplaySkuAvailability, L"Availabilities", &spAvailabilities))
ChkHr(JsonHelpers::GetNamedArray(spJson, L"DisplaySkuAvailabilities", &displaySkuAvailabilities))
ChkHr(JsonHelpers::GetNamedArray(spProduct, L"AlternateIds", &spAlternateIds))
ChkHr(JsonHelpers::GetNamedArray(spProduct, L"DisplaySkuAvailabilities", &spDisplaySkuAvailabilities))
ChkHr(JsonHelpers::GetNamedDateTime(conditions, L"EndDate", &pricingInfo->SaleEndDate))
ChkHr(JsonHelpers::GetNamedInteger(customPolicyObject, L"version", &version))
ChkHr(JsonHelpers::GetNamedInteger(displayProductSearchResult, L"TotalResultCount", &totalResultCount))
ChkHr(JsonHelpers::GetNamedInteger(displayProductSearchResult, L"TotalResultCount", (int *)&count))
ChkHr(JsonHelpers::GetNamedInteger(marketProperty, L"MinimumUserAge", &rating))
ChkHr(JsonHelpers::GetNamedObject(availability, L"Properties", &availabilityProperties))
ChkHr(JsonHelpers::GetNamedObject(firstSkuAvail, L"Sku", &firstSkuAvailSku))
ChkHr(JsonHelpers::GetNamedObject(firstSkuAvailSku, L"Properties", &firstSkuAvailSkuProperties))
ChkHr(JsonHelpers::GetNamedObject(jsonIAPs, L"DisplayProductSearchResult", &displayProductSearchResult))
ChkHr(JsonHelpers::GetNamedObject(jsonObject, L"DisplayProductSearchResult", &displayProductSearchResult))
ChkHr(JsonHelpers::GetNamedObject(jsonObject, L"DisplaySkuSearchResult", &displayProductSearchResult))
ChkHr(JsonHelpers::GetNamedObject(orderManagementData, L"Price", &price))
ChkHr(JsonHelpers::GetNamedObject(productResult, L"Product", &product))
ChkHr(JsonHelpers::GetNamedObject(sku, L"Properties", &skuProperties))
ChkHr(JsonHelpers::GetNamedObject(skuAvailability, L"Sku", &sku))
ChkHr(JsonHelpers::GetNamedObject(skuProperties, L"LicensingData", &skuLicensingData))
ChkHr(JsonHelpers::GetNamedObject(spAvailability, L"Conditions", &conditions))
ChkHr(JsonHelpers::GetNamedObject(spAvailability, L"OrderManagementData", &orderManagementData))
ChkHr(JsonHelpers::GetNamedObject(spDisplaySkuAvailability, L"Sku", &spSku))
ChkHr(JsonHelpers::GetNamedObject(spJsonObject, L"Product", ppJsonObject))
ChkHr(JsonHelpers::GetNamedString(altId, L"IdType", type.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(altId, L"Value", &spInAppOffer->InAppOfferToken))
ChkHr(JsonHelpers::GetNamedString(availability, L"SkuId", skuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(collectionItem, L"productId", collectionProductId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(collectionItem, L"skuId", collectionSkuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(firstProduct, L"ProductId", bigCatId))
ChkHr(JsonHelpers::GetNamedString(firstProduct, L"ProductId", bigCatIdOut))
ChkHr(JsonHelpers::GetNamedString(firstSkuAvailSkuProperties, L"CustomDeveloperData", &spInAppOffer->ProductTag))
ChkHr(JsonHelpers::GetNamedString(image, L"ImagePurpose", purpose.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(image, L"Uri", &spInAppOffer->ImageUri))
ChkHr(JsonHelpers::GetNamedString(item, L"inAppOfferToken", inAppOfferToken.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"inAppOfferToken", inAppOfferTokenString.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"inAppOfferToken", itemInAppOfferToken.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"productId", itemProductId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"productId", productId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"productId", productIdString.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"skuType", skuType.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"transactionId", itemTransactionId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(item, L"transactionId", transactionIdString.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(jsonDataObj, L"AppServiceName", appServiceName.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(jsonParameters, L"AuthToken", authToken.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(jsonResponse, L"key", result))
ChkHr(JsonHelpers::GetNamedString(package, L"skuId", _skuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(pagingInfo, L"continuationToken", ContinuationToken))
ChkHr(JsonHelpers::GetNamedString(price, L"CurrencyCode", &pricingInfo->CurrencyCode))
ChkHr(JsonHelpers::GetNamedString(product, L"ProductId", &spInAppOffer->InAppProductId))
ChkHr(JsonHelpers::GetNamedString(product, L"ProductId", currentProductId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(product, L"ProductId", productId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(product, L"ProductType", productType.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(productAddOn, L"productId", addOnProductId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(productAddOn, L"skuId", addOnSkuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(properties, L"ProductDescription", &spInAppOffer->Description))
ChkHr(JsonHelpers::GetNamedString(properties, L"ProductDescription", &spStoreAppInfo->Description))
ChkHr(JsonHelpers::GetNamedString(properties, L"ProductTitle", &spInAppOffer->Name))
ChkHr(JsonHelpers::GetNamedString(properties, L"ProductTitle", &spStoreAppInfo->Name))
ChkHr(JsonHelpers::GetNamedString(relatedProduct, L"RelatedProductId", relatedProductId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(relatedProduct, L"RelationshipType", type.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(response, L"key", key))
ChkHr(JsonHelpers::GetNamedString(sku, L"SkuId", &spInAppSkuInfo->SkuId))
ChkHr(JsonHelpers::GetNamedString(sku, L"SkuId", skuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(sku, L"SkuType", &spInAppSkuInfo->SkuType))
ChkHr(JsonHelpers::GetNamedString(skuFirstLocalizedProperties, L"SkuDescription", &spInAppSkuInfo->Description))
ChkHr(JsonHelpers::GetNamedString(skuFirstLocalizedProperties, L"SkuTitle", &spInAppSkuInfo->Title))
ChkHr(JsonHelpers::GetNamedString(skuLicensingData, L"ProductId", &spInAppSkuInfo->ProductId))
ChkHr(JsonHelpers::GetNamedString(skuProperties, L"CustomDeveloperData", &spInAppSkuInfo->CustomDeveloperData))
ChkHr(JsonHelpers::GetNamedString(spAlternateId, L"IdType", alternateIdType.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(spAlternateId, L"Value", alternateIdValue.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(spAvailability, L"AvailabilityId", hstrAvailabilityId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(spJson, L"PreferredSkuId", preferredSkuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(spProduct, L"PreferredSkuId", hstrPreferredSkuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(spProduct, L"ProductId", hstrProductId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(spProduct, L"ProductType", hstrProductType.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(spSku, L"SkuId", hstrSkuId.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(title, L"SearchTitleString", searchTitleString.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedString(title, L"SearchTitleType", titleType.GetAddressOf()))
ChkHr(JsonHelpers::GetNamedValue(price, L"ListPrice", &listPrice))
ChkHr(JsonHelpers::GetNamedValue(price, L"MSRP", &basePrice))
ChkHr(JsonHelpers::ParseToJsonArray(data.GetRawBuffer(nullptr), &spJsonUriArray))
ChkHr(JsonHelpers::ParseToJsonArray(data.GetRawBuffer(nullptr), spJsonUriArray.ReleaseAndGetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(::WindowsGetStringRawBuffer(collectionsJson, nullptr), &collectionData))
ChkHr(JsonHelpers::ParseToJsonObject(::WindowsGetStringRawBuffer(productsJson, nullptr), &productsResultObject))
ChkHr(JsonHelpers::ParseToJsonObject(_jsonRequest.GetRawBuffer(nullptr), jsonDataObj.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(customPolicyDecoded.GetRawBuffer(nullptr), &customPolicyObject))
ChkHr(JsonHelpers::ParseToJsonObject(jsonBodyString.GetRawBuffer(nullptr), &jsonResult))
ChkHr(JsonHelpers::ParseToJsonObject(jsonResponse.GetRawBuffer(nullptr), _response.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(jsonResponseString.GetRawBuffer(nullptr), &jsonResponse))
ChkHr(JsonHelpers::ParseToJsonObject(modalFlowSizes.GetRawBuffer(nullptr), modalFlowJsonData.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(productJsonString.GetRawBuffer(nullptr), &productResult))
ChkHr(JsonHelpers::ParseToJsonObject(productJsonString.GetRawBuffer(nullptr), &spResults))
ChkHr(JsonHelpers::ParseToJsonObject(results.GetRawBuffer(nullptr), &spResults))
ChkHr(JsonHelpers::ParseToJsonObject(tmp.GetRawBuffer(nullptr), _request.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(WindowsGetStringRawBuffer(jsonDataString, nullptr), jsonData.GetAddressOf()))
ChkHr(JsonHelpers::ParseToJsonObject(WindowsGetStringRawBuffer(overrideJsonRequest, nullptr), &_request))
ChkHr(JsonHelpers::ParseToJsonObject(WindowsGetStringRawBuffer(parametersAsJson, nullptr), &jsonObject))
ChkHr(JsonHelpers::RemoveAt(products, static_cast<UINT32>(index)))
ChkHr(JsonHelpers::SetNamedArray(jsonCollectionsParameters, L"entitlementFilters", jsonEntitlementFilters))
ChkHr(JsonHelpers::SetNamedArray(jsonCollectionsParameters, L"productSkuIds", jsonProductSkuIds))
ChkHr(JsonHelpers::SetNamedArray(jsonCollectionsParameters, L"productSkuIds", productSkuIds))
ChkHr(JsonHelpers::SetNamedArray(jsonInput, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), substituteArray))
ChkHr(JsonHelpers::SetNamedArray(jsonParameters, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), jsonBeneficiaries))
ChkHr(JsonHelpers::SetNamedArray(newResults.Get(), L"Products", products))
ChkHr(JsonHelpers::SetNamedArray(package, L"productAddOns", addOns))
ChkHr(JsonHelpers::SetNamedArray(request, L"productSkuIds", productSkuIds))
ChkHr(JsonHelpers::SetNamedArray(request, L"productTypes", productTypes))
ChkHr(JsonHelpers::SetNamedArray(spRequest, L"beneficiaries", spBeneficiaryArray))
ChkHr(JsonHelpers::SetNamedArray(userAuth, userSid.GetRawBuffer(nullptr), authTokensArray))
ChkHr(JsonHelpers::SetNamedBool(_request, L"HasPreviewCapability", hasPreviewCapability))
ChkHr(JsonHelpers::SetNamedBool(json, keyName.GetRawBuffer(nullptr), boolValue))
ChkHr(JsonHelpers::SetNamedBool(package, L"isActive", !!isActive))
ChkHr(JsonHelpers::SetNamedBool(package, L"isDiscLicense", isDiscLicense))
ChkHr(JsonHelpers::SetNamedBool(package, L"isTrial", !!isTrial))
ChkHr(JsonHelpers::SetNamedBool(package, L"isTrialOwnedByThisUser", isTrialOwnedByThisUser))
ChkHr(JsonHelpers::SetNamedBool(productAddOn, L"isActive", true))
ChkHr(JsonHelpers::SetNamedBool(spRequest, L"expandSatisfyingItems", false))
ChkHr(JsonHelpers::SetNamedDateTime(package, L"expiration", expirationDate))
ChkHr(JsonHelpers::SetNamedDateTime(productAddOn, L"expiration", addOnExpirationTime))
ChkHr(JsonHelpers::SetNamedNumber(_response, L"error", hrPurchase))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), byteValue))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), doubleValue))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), floatValue))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), int16Value))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), int32Value))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), static_cast<double>(int64Value)))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), static_cast<double>(uint64Value)))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), uint16Value))
ChkHr(JsonHelpers::SetNamedNumber(json, keyName.GetRawBuffer(nullptr), uint32Value))
ChkHr(JsonHelpers::SetNamedNumber(jsonCollectionsParameters, L"maxPageSize", _maxItems))
ChkHr(JsonHelpers::SetNamedNumber(jsonCollectionsParameters, L"quantity", quantity))
ChkHr(JsonHelpers::SetNamedNumber(jsonInput, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), substituteNumber))
ChkHr(JsonHelpers::SetNamedNumber(jsonOutput, L"AppServiceResponseStatus", responseStatus))
ChkHr(JsonHelpers::SetNamedNumber(jsonResultObject, L"NewQuantity", 0))
ChkHr(JsonHelpers::SetNamedNumber(jsonResultObject, L"NewQuantity", isInUserCollection ? 1 : 0))
ChkHr(JsonHelpers::SetNamedNumber(previewResultJson, L"licensableStatus", licenseQueryStatus))
ChkHr(JsonHelpers::SetNamedObject(jsonCollectionsParameters, L"includeRelationship", includeRelationship))
ChkHr(JsonHelpers::SetNamedObject(jsonInput, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), substituteObject))
ChkHr(JsonHelpers::SetNamedObject(request, L"beneficiary", spBeneficiary))
ChkHr(JsonHelpers::SetNamedObject(sku, L"CollectionData", collectionItem.Get()))
ChkHr(JsonHelpers::SetNamedString( jsonCatalogParameters.Get(), L"productIdsWithCommas", storeIdsWithCommas.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString( jsonCatalogParameters.Get(), L"productKinds", productKindsWithCommas.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(_request, L"CV", cv.GetUnicode()))
ChkHr(JsonHelpers::SetNamedString(_request, L"DeviceContext", deviceContextString.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(_request, L"InvokedApi", invokedApi))
ChkHr(JsonHelpers::SetNamedString(_request, L"Name", tmp.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(_request, L"ParentProductId", WindowsGetStringRawBuffer(appProductId, nullptr)))
ChkHr(JsonHelpers::SetNamedString(_request, L"StoreId", storeProductId.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(_request, L"UserId", realId.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(_request, L"Version", hstrPurchaseAppAPIVersion.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(_response, L"purchaseStatus", L"AlreadyPurchased"))
ChkHr(JsonHelpers::SetNamedString(_response, L"purchaseStatus", L"NetworkError"))
ChkHr(JsonHelpers::SetNamedString(_response, L"purchaseStatus", L"NotPurchased"))
ChkHr(JsonHelpers::SetNamedString(_response, L"purchaseStatus", L"ServerError"))
ChkHr(JsonHelpers::SetNamedString(beneficiary, L"identityType", L"Aad"))
ChkHr(JsonHelpers::SetNamedString(beneficiary, L"identityType", L"Msa"))
ChkHr(JsonHelpers::SetNamedString(beneficiary, L"identityValue", ::WindowsGetStringRawBuffer(token, nullptr)))
ChkHr(JsonHelpers::SetNamedString(beneficiary, L"localTicketReference", ::WindowsGetStringRawBuffer(accountId, nullptr)))
ChkHr(JsonHelpers::SetNamedString(includeRelationship, L"relatedProductId", _productStoreId.Get()))
ChkHr(JsonHelpers::SetNamedString(includeRelationship, L"relationshipType", SellableBy.Get()))
ChkHr(JsonHelpers::SetNamedString(json, keyName.GetRawBuffer(nullptr), stringValue.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters, L"actionFilter", actionFilter.Get()))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters, L"productIdsWithCommas", productId))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters, L"productIdsWithCommas", storeIdsWithCommas.Get()))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters, L"productKinds", productKindsWithCommas.Get()))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters.Get(), L"itemCount", maxItemsAsHstring.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters.Get(), L"productKinds", productKindsWithCommas.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonCatalogParameters.Get(), L"skipCount", skipCountAsHString.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonCollectionsParameters, L"consumableProductId", productId))
ChkHr(JsonHelpers::SetNamedString(jsonCollectionsParameters, L"continuationToken", _continuationToken.Get()))
ChkHr(JsonHelpers::SetNamedString(jsonCollectionsParameters, L"trackingId", HStringReference(szTrackingId).Get()))
ChkHr(JsonHelpers::SetNamedString(jsonDataObj, L"CV", _cv.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInput, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), substituteString.Get()))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"deviceFamily", deviceFamily.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"deviceMoid", moid.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"deviceOemid", oemid.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"deviceScmid", scmid.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"languages", languages.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"locale", language.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"market", market.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"parentProductId", _productStoreId.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonInternalParameters.Get(), L"PFN", _packageFullName.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(jsonParameters, L"publisherUserId", publisherUserId))
ChkHr(JsonHelpers::SetNamedString(jsonParameters, L"serviceTicket", serviceTicket))
ChkHr(JsonHelpers::SetNamedString(jsonTemp, L"DevOfferId", _devOfferId.Get()))
ChkHr(JsonHelpers::SetNamedString(jsonTemp, L"StoreId", storeId.Get()))
ChkHr(JsonHelpers::SetNamedString(package, L"productId", _productStoreId.Get()))
ChkHr(JsonHelpers::SetNamedString(package, L"skuId", _skuId.Get()))
ChkHr(JsonHelpers::SetNamedString(package, L"trialUniqueId", trialUniqueId.Get()))
ChkHr(JsonHelpers::SetNamedString(previewResultJson, L"licensableSku", licensableSku.Get()))
ChkHr(JsonHelpers::SetNamedString(productSku, L"productId", productId))
ChkHr(JsonHelpers::SetNamedString(productSku, L"productId", productId.Get()))
ChkHr(JsonHelpers::SetNamedString(request, L"AuthToken", HStringReference(L"").Get()))
ChkHr(JsonHelpers::SetNamedString(request, L"continuationToken", continuationToken.Get()))
ChkHr(JsonHelpers::SetNamedString(request, L"parentProductId", ParentProductId))
ChkHr(JsonHelpers::SetNamedString(request, L"productId", catalogProductId))
ChkHr(JsonHelpers::SetNamedString(request, L"productIds", productIdsString.Get()))
ChkHr(JsonHelpers::SetNamedString(request, L"publisherUserId", publisherUserId))
ChkHr(JsonHelpers::SetNamedString(request, L"serviceTicket", serviceTicket))
ChkHr(JsonHelpers::SetNamedString(request, L"transactionId", transactionId))
ChkHr(JsonHelpers::SetNamedString(spBeneficiary, L"identityType", L"msa"))
ChkHr(JsonHelpers::SetNamedString(spBeneficiary, L"identityValue", authTicket.GetRawBuffer(nullptr)))
ChkHr(JsonHelpers::SetNamedString(spBeneficiary, L"identityValue", MsaTicket))
ChkHr(JsonHelpers::SetNamedString(spBeneficiary, L"localTicketReference", L"0"))
ChkHr(JsonHelpers::SetNamedString(spRequest, L"market", market.Get()))
ChkHr(JsonHelpers::SetNamedString(spRequest, L"validityType", L"Valid"))
ChkHr(JsonHelpers::SetNamedTimeSpan(package, L"trialTimeRemaining", trialTimeRemaining))
ChkHr(JsonHelpers::Stringify(_jsonValue, _stringifiedValue.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(_request, jsonRequest.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(_request, jsonRequestString.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(_response, jsonIntialResponse.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(_response, jsonResponse.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(entry, entryJson.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(jsonBody.Get(), body.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(jsonObject, cleansedParameterAsJson.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(jsonOutput, _jsonResponse.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(jsonResult, jsonBodyString.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(jsonResultObject, jsonResult))
ChkHr(JsonHelpers::Stringify(jsonTemp, overrideJsonRequest.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(newResults, productJsonString.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(package, _cachedLicenseJson.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(pRequest, requestJsonString.GetAddressOf()))
ChkHr(JsonHelpers::Stringify(previewResultJson, licenseSatisfactionResultJson))
ChkHr(JsonHelpers::Stringify(request, requestJson.GetAddressOf()))
ChkHr(jsonInput.As(&jsonObjectIterable))
ChkHr(jsonInput->SetNamedValue(jsonSubstitutionList->destinationKey.Get(), jsonSubstitutionList->defaultValue.Get()))
ChkHr(jsonLegacyWindowsPhoneLicensingData->GetNamedString(HStringReference(L"PublisherId").Get(), strPublisherId.GetAddressOf()))
ChkHr(jsonLicensingData->GetNamedObject(HStringReference(L"LegacyWindowsPhoneLicensingData").Get(), &jsonLegacyWindowsPhoneLicensingData))
ChkHr(jsonObject->SetNamedValue(HStringReference(g_DoNotLogTheseValues[i]).Get(), nullptr))
ChkHr(jsonObjectIterable->First(&jsonObjectIterator))
ChkHr(jsonObjectIterator->get_Current(&currentPair))
ChkHr(jsonObjectIterator->get_HasCurrent(&hasCurrent))
ChkHr(jsonObjectIterator->MoveNext(&hasCurrent))
ChkHr(jsonObjectStatics->Parse(jsonString, &jsonObject))
ChkHr(jsonObjectStatics->Parse(jsonString.Get(), &jsonObject))
ChkHr(jsonObjectStatics->Parse(responseJsonString.Get(), &responseJson))
ChkHr(JsonParser::ParseJSONStringToObject( _jsonResponse, this, requestStoreRateAndReviewTable))
ChkHr(JsonParser::ParseJSONStringToObject( _response, this, purchaseResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( jsonCollectionsString, this, collectionQueryResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( jsonResponse, this, purchaseResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( jsonString, this, itemsTable))
ChkHr(JsonParser::ParseJSONStringToObject( jsonString, this, queryResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( licenseSatisfactionResult, this, previewLicenseResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( productJson, this, productQueryResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( productJson, this, queryResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( productJsonString, &results, getProductsByKindsResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( productJsonString, this, productQueryResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( productJsonString, this, queryResultsTable))
ChkHr(JsonParser::ParseJSONStringToObject( scope, &requestParams, responseTable))
ChkHr(JsonParser::ParseJSONToObject( childObject, tag, responseTable))
ChkHr(JsonParser::ParseJSONToObject( entry, &requestParams, responseTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, AppLicenseTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, AvailabilityRootTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, DisplaySkuAvailabilitiesTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, imageTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, itemTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, LicenseTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, OrderManagementDataTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, ProductTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, RecurrenceTable))
ChkHr(JsonParser::ParseJSONToObject( json, this, videoTable))
ChkHr(jsonProperties->GetNamedObject(HStringReference(L"LicensingData").Get(), &jsonLicensingData))
ChkHr(jsonSKU->GetNamedObject(HStringReference(L"Properties").Get(), &jsonProperties))
ChkHr(jsonSKUAvailabilities->GetObjectAt(0, &jsonSKUAvailability))
ChkHr(jsonSKUAvailability->GetNamedObject(HStringReference(L"Sku").Get(), &jsonSKU))
ChkHr(jsonSubstitutionList->defaultValue->get_ValueType(&defaultValueType))
ChkHr(jsonSubstitutionList->defaultValue->Stringify(defaultValueString.GetAddressOf()))
ChkHr(jsonSubstitutionList->destinationKey.CopyTo(jsonSubstitutionList->sourceKey.GetAddressOf()))
ChkHr(jsonUriArray->GetObjectAt(index, &object))
ChkHr(jsonValue->get_ValueType(&jsonType))
ChkHr(jsonValue->get_ValueType(&type))
ChkHr(jsonValue->get_ValueType(&valueType))
ChkHr(jsonValue->GetArray(jsonArray.GetAddressOf()))
ChkHr(jsonValue->GetBoolean(&value))
ChkHr(jsonValue->GetNumber(&value))
ChkHr(jsonValue->GetObjectW(&childObject))
ChkHr(jsonValue->GetObjectW(jsonObject.GetAddressOf()))
ChkHr(jsonValue->GetString(value.GetAddressOf()))
ChkHr(jsonValue->Stringify(value.GetAddressOf()))
ChkHr(KeyIdentifiers->First(&spKeyIdsIter))
ChkHr(keyIds->Append(HStringReference(keyId.get()).Get()))
ChkHr(keyIds->Append(keyId.Get()))
ChkHr(keyIds->get_Size(&keySize))
ChkHr(keyIds->GetAt(i, keyId.GetAddressOf()))
ChkHr(keyIds->GetView(&keyIdsVectorView))
ChkHr(keyValuePair->get_Value(&info))
ChkHr(keywords->get_Size(&cKeywords))
ChkHr(keywords->GetAt(k, filterKeyword.GetAddressOf()))
ChkHr(license->get_SkuStoreId(skuStoreId.GetAddressOf()))
ChkHr(license->GetContentInfo(__uuidof(**(contentInfo.GetAddressOf())), IID_PPV_ARGS_Helper(contentInfo.GetAddressOf())))
ChkHr(License->GetIsTrial(&isTrial))
ChkHr(License->GetLicenseGrantReason(&_grantReason))
ChkHr(licensedProducts.As(&products))
ChkHr(licensedProducts->Append(productId.Get()))
ChkHr(licensedProducts->get_Size(&size))
ChkHr(licenseInfo->get_IsTrial(&isTrial))
ChkHr(LicenseInformationServer::CreateInstance( _packageFullName.Get(), _appType, cv.Get(), &_spLicenseInformationInternal))
ChkHr(licenseManager->GetSatisfactionInfos( contentIds.Get(), keyIds.Get(), &licenseSatisfactionResult))
ChkHr(licenseManager->GetSatisfactionInfos( contentIdsVectorView.Get(), keyIdsVectorView.Get(), &licenseSatisfactionResult))
ChkHr(licenseManager->GetSatisfactionInfos( contentIdsVectorView.Get(), nullptr, &licenseSatisfactionResult))
ChkHr(LicenseParseReceiptResponse(spbReceiptResponse, cbReceiptResponse, &spbReceipt, &cbReceipt))
ChkHr(licenseReader->get_UnconsumedBufferLength(&licenseBufferLength))
ChkHr(licenseReader->ReadBytes(licenseBufferLength, licenseBuffer))
ChkHr(licenseSatisfactionInfoForAll->Clear())
ChkHr(licenseSatisfactionInfoForAll->GetView(&licenseSatisfactionInfoReadOnlyForAll))
ChkHr(licenseSatisfactionInfoForAll->Insert(contentId.Get(), leinfo.Get(), &replaced))
ChkHr(licenseSatisfactionResult.As(&licenseSatisfactionResultInternal))
ChkHr(licenseSatisfactionResult->get_ExtendedError(&extendedError))
ChkHr(licenseSatisfactionResult->get_LicenseSatisfactionInfos(&infos))
ChkHr(listPrice->Stringify(&pricingInfo->Price))
ChkHr(LoadFormattedString( uLabelId, nullptr, &pszContent))
ChkHr(LoadFormattedString( uTitleId, nullptr, &pszTitle, &szArgument))
ChkHr(LoadFormattedString(uContentId, cv, &pszContent, &szArgument, &szArgument2))
ChkHr(LocalAllocArray(cchBuffer, &pszBuffer))
ChkHr(LocalAllocBytes(cbData, &pszBuffer))
ChkHr(LocalAllocBytes(cbReceipt, &pbReceipt))
ChkHr(localizedProperties->GetObjectAt(0, &properties))
ChkHr(m_evtLicenseStatusChangedEvent.Add(pHandler, pCookie))
ChkHr(m_evtLicenseStatusChangedEvent.InvokeAll())
ChkHr(m_evtLicenseStatusChangedEvent.Remove(iCookie))
ChkHr(m_hstrProductId.CopyTo(pValue))
ChkHr(m_hstrProductId.Set(featureId))
ChkHr(m_hstrProductId.Set(pszProductId))
ChkHr(m_pProductLicenseMap.CopyTo(ppValue))
ChkHr(m_productId.Set(bigCatId))
ChkHr(m_spHashMap.As(&m_spIterable))
ChkHr(m_spHashMap->get_Size(pcItems))
ChkHr(m_spHashMap->GetView(&spHashView))
ChkHr(m_spHashMap->GetView(view))
ChkHr(m_spHashMap->HasKey(hstrKey, pfHasKey))
ChkHr(m_spHashMap->Insert(strProductId.Get(), spProductLicense.Get(), &replaced))
ChkHr(m_spIterable->First(ppIterator))
ChkHr(m_spPackageFullName.Set(packageFullName))
ChkHr(m_spStoreCommerce.As(spRef))
ChkHr(m_spStoreCommerceFactory->CreateStoreCommerceServer(&spStoreCommerce))
ChkHr(MakeAndInitialize<AcquireStoreLicenseForOptionalPackageOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), pOptionalPackage, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<BackgroundTaskOperation>(&operation, jsonRequest, cv.GetHStringReference().Get()))
ChkHr(MakeAndInitialize<BulkHydrateOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, storeIds, nullptr, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<BulkHydrateOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, storeIds, storeProductOptions, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( operation, _packageFullName.Get(), pszOperationName, this, storeIds, storePackageInstallOptions, shouldPromptForConsent, totallySilent, cv.GetAnsi(), dialogHelper.Get(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, pStorePackageUpdates, false, false, false, cv.GetAnsi(), nullptr, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, pStorePackageUpdates, false, true, false, cv.GetAnsi(), dialogHelper.Get(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, pStorePackageUpdates, true, false, true, cv.GetAnsi(), nullptr, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, pStorePackageUpdates, true, true, false, cv.GetAnsi(), dialogHelper.Get(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<DownloadAndInstallStorePackagesOperation>( ppOperation, this, _packageFullName.Get(), pStoreIds, cv.GetAnsi(), messageDialogHelper.Get(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<FindStoreProductForPackageOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, package, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetAppAndSupplementalStorePackageUpdatesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetAssociatedStoreProductsOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetAssociatedStoreProductsPagedOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, maxItemsToRetrieve, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetAssociatedStoreProductsPagedOperation>( spPagedOperation.GetAddressOf(), _PFN.Get(), nullptr, _storeContext.Get(), cv.GetAnsi(), productKinds.Get(), -1, asyncId ))
ChkHr(MakeAndInitialize<GetAssociatedStoreQueueItemsOperation>( operation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, items, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetAssociatedStoreQueueItemsOperation>( operation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, nullptr, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetConsumableBalanceRemainingOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productStoreId, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetCustomerCollectionsIdOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), serviceTicket, publisherUserId, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetCustomerPurchaseIdOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), serviceTicket, publisherUserId, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetIsAnySkuInstalledOperation>( ppOperation, productStoreId, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetNextAssociatedStoreProducts>( &currentOperation, this, _productStoreId.Get(), productKinds, 0, maxItems, true, _user.Get(), cv.GetAnsi(), nullptr ))
ChkHr(MakeAndInitialize<GetNextAssociatedStoreProducts>( &nextOperation, _storeContextServer.Get(), _productStoreId.Get(), _productKinds.Get(), _skipCount + _maxItems, _maxItems, _hasMorePages, _user.Get(), szCV, _httpClient.Get()))
ChkHr(MakeAndInitialize<GetNextUserCollection>( &currentOperation, this, _productStoreId.Get(), productKinds, nullptr, maxPageSize, _user.Get(), cv.GetAnsi(), nullptr))
ChkHr(MakeAndInitialize<GetNextUserCollection>( &nextOperation, _storeContextServer.Get(), _productStoreId.Get(), _productKinds.Get(), _continuationToken.Get(), _maxItems, _user.Get(), szCV, _httpClient.Get()))
ChkHr(MakeAndInitialize<GetOfflineLicensesOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetStoreProductOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetStoreQueueItemsOperation>( operation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), storeIds, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetUnfulfilledConsumablesOperationServer>( &spCheckConsumables, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_receiptRequestId)))
ChkHr(MakeAndInitialize<GetUserCollectionOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetUserCollectionPagedOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productKinds, maxItemsToRetrievePerPage, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<GetUserCollectionPagedOperation>( spPagedOperation.GetAddressOf(), _PFN.Get(), nullptr, _storeContext.Get(), _szCV, productKinds.Get(), -1, asyncId ))
ChkHr(MakeAndInitialize<LicenseSatisfactionInfo>( &leinfo, license))
ChkHr(MakeAndInitialize<LicenseSatisfactionResult>( result, licenseSatisfactionInfoReadOnlyForAll, hrOperation, skuId ? HStringReference(skuId).Get() : nullptr))
ChkHr(MakeAndInitialize<MessageDialogHelper>(&messageDialogHelper, appName.Get(), (HWND)0 ))
ChkHr(MakeAndInitialize<MessageDialogHelper>(&spMessageDialogHelper, nullptr , hwnd))
ChkHr(MakeAndInitialize<MessageDialogHelper>(&spMessageDialogHelper, nullptr, hwnd))
ChkHr(MakeAndInitialize<ProductIdCache>(&_spProductIdCache))
ChkHr(MakeAndInitialize<ProductReceiptRetrievalOperationServer>( &spLoadAsyncInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_receiptRequestId), productId ))
ChkHr(MakeAndInitialize<PurchaseOperation>( &purchaseOperation, _packageFullName.Get(), _productStoreId.Get(), storeId, storePurchaseProperties, overrideJsonRequest, _user.Get(), cv.GetHStringReference().Get(), hwnd, _hasPreviewCapability, invokedApi ))
ChkHr(MakeAndInitialize<PurchaseOperation>( &purchaseOperation, _PFN.Get(), appProductId.Get(), storeId.Get(), storePurchaseProperties.Get(), overrideJsonRequest.Get(), nullptr, cv.GetHStringReference().Get(), _parentHwnd, _hasPreviewCapability, InvokedApi_RequestPurchase.Get() ))
ChkHr(MakeAndInitialize<ReceiptRetrievalOperationServer>( &spLoadAsyncInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_receiptRequestId) ))
ChkHr(MakeAndInitialize<ReportConsumableFulfillmentOperationServer>( &spReportProdFulfillOp, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_fulfillRequestId), productId, transactionId ))
ChkHr(MakeAndInitialize<ReportConsumableOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, cv.GetAnsi(), productStoreId, quantity, trackingId, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<RequestAppPurchaseOperationServer>( &spRequestAppPurchaseInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestAppPurchaseId), fIncludeReceipt, hwndOwner, pMessageDialogHelper ))
ChkHr(MakeAndInitialize<RequestProductPurchaseBySkuIdOperationServer>( &spRequestPurchaseBySkuIdOperation, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestProductPurchaseId), productId, skuId, hasPreviewCapability, hwndOwner, pMessageDialogHelper ))
ChkHr(MakeAndInitialize<RequestProductPurchaseOperationServer>( &spRequestProductPurchaseInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestProductPurchaseId), productId, fIncludeReceipt, hwndOwner, pMessageDialogHelper ))
ChkHr(MakeAndInitialize<RequestProductPurchaseWithResultsOperationServer>( &spRequestProductPurchaseWithResultsInfo, _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestProductPurchaseId), productId, hwndOwner, pMessageDialogHelper ))
ChkHr(MakeAndInitialize<RequestPurchaseOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, callerData.Get(), cv.GetAnsi(), storeId, nullptr, nullptr, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<RequestPurchaseOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, callerData.Get(), cv.GetAnsi(), storeId, storePurchaseProperties, nullptr, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<RequestStoreRateAndReviewOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, callerData.Get(), cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<StoreAcquireLicenseResult>( ppResults, _pStorePackageLicense.Get(), _hresultOfOperation ))
ChkHr(MakeAndInitialize<StoreAppLicense>(&_spAppLicense,  spResults))
ChkHr(MakeAndInitialize<StoreCanAcquireLicenseResult>( ppResults, _licenseQueryStatus, _licensableSku.Get(), _hresultOfOperation ))
ChkHr(MakeAndInitialize<StoreConsumableResult>( ppResults, _trackingId, _consumableStatus, _balanceRemaining, _hresultOfOperation ))
ChkHr(MakeAndInitialize<StoreConsumableResult>( ppResults, GUID_NULL, _consumableStatus, _quantity, _hresultOfOperation ))
ChkHr(MakeAndInitialize<StoreContentIdKeyIdResponse>(response, responseJson.Get()))
ChkHr(MakeAndInitialize<StoreContext>(ppStoreContext, cv.GetAnsi(), nullptr, packageFullName.Get()))
ChkHr(MakeAndInitialize<StoreContext>(ppStoreContext, cv.GetAnsi(), pUser, packageFullName.Get()))
ChkHr(MakeAndInitialize<StoreContextCallerData>(ppCallerData, appWindowHandle))
ChkHr(MakeAndInitialize<StoreContextLicenseChangedCallback>(&_spLicenseChangedCallback, this))
ChkHr(MakeAndInitialize<StorePackageLicense>( &_pStorePackageLicense, _pOptionalPackage.Get(), _storeContext.Get() ))
ChkHr(MakeAndInitialize<StorePackageLicenseLostCallback>(&spStorePackageLicenseLostCallback, this))
ChkHr(MakeAndInitialize<StorePackageUpdate>(&storePackageUpdate, package.Get(), storeQueueItem.Get()))
ChkHr(MakeAndInitialize<StorePackageUpdateResult>( pStorePackageUpdateResult, _overallState, _updateStatuses.Get(), _queueItems.Get()))
ChkHr(MakeAndInitialize<StoreProduct>(&spStoreProduct,  storeProductJson))
ChkHr(MakeAndInitialize<StoreProductResult>( ppStoreProductResult, _products, _hResultOfOperation))
ChkHr(MakeAndInitialize<StoreProductResult>(ppResults, _products, _hresultOfOperation))
ChkHr(MakeAndInitialize<StorePurchaseProperties>(&storePurchaseProperties, _nameOverride.Get()))
ChkHr(MakeAndInitialize<StorePurchaseProperties>(ppData, name))
ChkHr(MakeAndInitialize<StorePurchaseProperties>(ppData, nullptr))
ChkHr(MakeAndInitialize<StorePurchaseResult>(ppResults, _status, _hresultOfOperation))
ChkHr(MakeAndInitialize<StoreQueueItem>(&queueItem, installItem.Get(), cv.GetAnsi()))
ChkHr(MakeAndInitialize<StoreQueueItem>(&storeQueueItem, appInstallItem.Get(), cv.GetAnsi()))
ChkHr(MakeAndInitialize<StoreQueueItem>(&storeQueueItem, item.Get(), cv.GetAnsi()))
ChkHr(MakeAndInitialize<StoreQueueItemCompletedEventArgs>(&args, status.Get()))
ChkHr(MakeAndInitialize<StoreQueueItemStatus>(&status, state, extendedState, packageStatus, errorCode))
ChkHr(MakeAndInitialize<StoreRateAndReviewResult>( ppResults, _status, _jsonResponse.Get(), _wasUpdated, _hresultOfOperation))
ChkHr(MakeAndInitialize<StoreRequestOperation>( ppOperation, _packageFullName.Get(), __FSTREXP __FUNCTION__  , this, callerData.Get(), cv.GetAnsi(), requestKind, parametersAsJson, _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAndInitialize<StoreSendRequestResult>( ppResults, _jsonResponse.Get(), _hresultOfOperation, _statusCode))
ChkHr(MakeAndInitialize<StoreUninstallStorePackageResult>( &result, _resultCode, _resultStatus ))
ChkHr(MakeAndInitialize<UninstallStorePackageOperation>( operation, _packageFullName.Get(), function, storeId, packageFamilyName, shouldPrompt, dialogHelper.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_asyncIds)))
ChkHr(MakeAsyncAction<AsyncCausalityOptions<AddLicenseAsyncActionName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), Action, TrustLevel::BaseTrust, [licenseBuffer](CNoResult &) -> HRESULT { HRESULT __hr = ((HRESULT)0L);; { ComPtr<IDataReaderStatics> dataReaderFactory; { { __hr = (Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Storage_Streams_DataReader).Get(), &dataReaderFactory)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Storage_Streams_DataReader).Get(), &dataReaderFactory))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<IDataReader> licenseReader; { { __hr = (dataReaderFactory->FromBuffer(licenseBuffer.Get(), licenseReader.GetAddressOf())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(dataReaderFactory->FromBuffer(licenseBuffer.Get(), licenseReader.GetAddressOf()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; UINT32 licenseBufferLength; { { __hr = (licenseReader->get_UnconsumedBufferLength(&licenseBufferLength)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(licenseReader->get_UnconsumedBufferLength(&licenseBufferLength))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; SP_CPP_ARRAY<BYTE> licenseBuffer; licenseBuffer = new BYTE[licenseBufferLength]; { if (!(licenseBuffer)) { Windows::Foundation::Diagnostics::OriginateError(((HRESULT)0x8007000EL), nullptr); } { if (!(licenseBuffer)) { { __hr = (((HRESULT)0x8007000EL)); }; ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkAlloc(licenseBuffer)", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; }; { { __hr = (licenseReader->ReadBytes(licenseBufferLength, licenseBuffer)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(licenseReader->ReadBytes(licenseBufferLength, licenseBuffer))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<IApplicationLicenseManager3> alm; { { __hr = (GetALM(alm.GetAddressOf())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(GetALM(alm.GetAddressOf()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; ComPtr<ILicenseInstance> licenseInstance; { { __hr = (alm->LoadLicenseWithBytes(AppType_UniversalApp, licenseBufferLength, licenseBuffer, L"", licenseInstance.GetAddressOf())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 81, __FSTREXP __FUNCTION__  , "ChkHr(alm->LoadLicenseWithBytes(AppType_UniversalApp, licenseBufferLength, licenseBuffer, L\"\", licenseInstance.GetAddressOf()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; } goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(MakeAsyncAction<AsyncCausalityOptions<CancelInstallAsyncOperationName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), action, TrustLevel::BaseTrust, [spThis](CNoResult &) -> HRESULT { CVHelperIncrementOnce cv(spThis->_cv); HRESULT __hr = ((HRESULT)0L);; ComPtr<IAppInstallItem2> appInstallItem2; { { __hr = (spThis->_appInstallItem.As(&appInstallItem2)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 392, __FSTREXP __FUNCTION__  , "ChkHr(spThis->_appInstallItem.As(&appInstallItem2))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (appInstallItem2->CancelWithTelemetry(cv.GetHStringReference().Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 392, __FSTREXP __FUNCTION__  , "ChkHr(appInstallItem2->CancelWithTelemetry(cv.GetHStringReference().Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(MakeAsyncAction<AsyncCausalityOptions<PauseInstallAsyncOperationName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), action, TrustLevel::BaseTrust, [spThis](CNoResult &) -> HRESULT { CVHelperIncrementOnce cv(spThis->_cv); HRESULT __hr = ((HRESULT)0L);; ComPtr<IAppInstallItem2> appInstallItem2; { { __hr = (spThis->_appInstallItem.As(&appInstallItem2)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 417, __FSTREXP __FUNCTION__  , "ChkHr(spThis->_appInstallItem.As(&appInstallItem2))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (appInstallItem2->PauseWithTelemetry(cv.GetHStringReference().Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 417, __FSTREXP __FUNCTION__  , "ChkHr(appInstallItem2->PauseWithTelemetry(cv.GetHStringReference().Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(MakeAsyncAction<AsyncCausalityOptions<RefreshLicensesAsyncActionName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), Action, TrustLevel::BaseTrust, [refreshPolicy](CNoResult &) -> HRESULT { HRESULT __hr = ((HRESULT)0L);; ComPtr<IApplicationLicenseManager3> alm; { { __hr = (GetALM(alm.GetAddressOf())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 206, __FSTREXP __FUNCTION__  , "ChkHr(GetALM(alm.GetAddressOf()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (alm->RefreshLicenses(refreshPolicy)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\winrtapi.cpp", 206, __FSTREXP __FUNCTION__  , "ChkHr(alm->RefreshLicenses(refreshPolicy))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(MakeAsyncAction<AsyncCausalityOptions<ResumeInstallAsyncOperationName>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), action, TrustLevel::BaseTrust, [spThis](CNoResult &) -> HRESULT { CVHelperIncrementOnce cv(spThis->_cv); HRESULT __hr = ((HRESULT)0L);; ComPtr<IAppInstallItem2> appInstallItem2; { { __hr = (spThis->_appInstallItem.As(&appInstallItem2)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 442, __FSTREXP __FUNCTION__  , "ChkHr(spThis->_appInstallItem.As(&appInstallItem2))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (appInstallItem2->RestartWithTelemetry(cv.GetHStringReference().Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storequeueitem.cpp", 442, __FSTREXP __FUNCTION__  , "ChkHr(appInstallItem2->RestartWithTelemetry(cv.GetHStringReference().Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit: CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(MakeAsyncOperation<CHSTRINGResult>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), getCollectionsIdOperation, BaseTrust, [spThisKeepAlive, serviceTicketCopy, publisherUserIdCopy, cv](CHSTRINGResult& result) mutable -> HRESULT { CVHelperExtend cvExtend(cv.GetAnsi()); AutoThreadActivityIdFromCV actid(cvExtend); HString collectionsId; HRESULT hrOperation = CatalogServiceProxyV6::GetCustomerCollectionsId( serviceTicketCopy, publisherUserIdCopy, cvExtend.Get(), collectionsId.GetAddressOf()); if ((((HRESULT)(hrOperation)) >= 0)) { result.Set(collectionsId.Get()); } Telemetry::EndOperation("CurrentApp.GetCustomerCollectionsIdAsync", hrOperation, cv.GetAnsi(), spThisKeepAlive->_packageFullName.Get(), "serviceTicket", serviceTicketCopy, "publisherUserId", publisherUserIdCopy); ::WindowsDeleteString(serviceTicketCopy); ::WindowsDeleteString(publisherUserIdCopy); return hrOperation; }))
ChkHr(MakeAsyncOperation<CHSTRINGResult>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), getPurchaseIdOperation, BaseTrust, [spThisKeepAlive, serviceTicketCopy, publisherUserIdCopy, cv](CHSTRINGResult& result) mutable -> HRESULT { CVHelperExtend cvExtend(cv.GetAnsi()); AutoThreadActivityIdFromCV actid(cvExtend); HString purchaseId; HRESULT hrOperation = CatalogServiceProxyV6::GetCustomerPurchaseId( serviceTicketCopy, publisherUserIdCopy, cvExtend.Get(), purchaseId.GetAddressOf()); if ((((HRESULT)(hrOperation)) >= 0)) { result.Set(purchaseId.Get()); } Telemetry::EndOperation("CurrentApp.GetCustomerPurchaseIdAsync", hrOperation, cv.GetAnsi(), spThisKeepAlive->_packageFullName.Get(), "serviceTicket", serviceTicketCopy, "publisherUserId", publisherUserIdCopy); ::WindowsDeleteString(serviceTicketCopy); ::WindowsDeleteString(publisherUserIdCopy); return hrOperation; }))
ChkHr(MakeAsyncOperation<CHSTRINGResult>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), ppOperation, BaseTrust, [spThisKeepAlive, cv](CHSTRINGResult& result) mutable -> HRESULT { CVHelperExtend cvExtend(cv.GetAnsi()); AutoThreadActivityIdFromCV actid(cvExtend); HString campaignId; HRESULT hrOperation = CollectionsServiceProxyV6::GetCampaignId( spThisKeepAlive->GetAppCatalogId(cvExtend.Get()), cvExtend.Get(), campaignId.GetAddressOf()); if ((((HRESULT)(hrOperation)) >= 0)) { result.Set(campaignId.Get()); } Telemetry::EndOperation("CurrentApp.GetAppPurchaseCampaignIdAsync", hrOperation, cv.GetAnsi(), spThisKeepAlive->_packageFullName.Get()); return hrOperation; }))
ChkHr(MakeAsyncOperation<CMarshaledInterfaceResult<IVectorView<StorePreviewProductInfo*>>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), ppLoadAddOnProductInfosOperation, BaseTrust, [spThisKeepAlive, cv](CMarshaledInterfaceResult<IVectorView<StorePreviewProductInfo*>>& result) mutable { CVHelperExtend cvExtend(cv.GetAnsi()); AutoThreadActivityIdFromCV actid(cvExtend); ComPtr<IVectorView<StorePreviewProductInfo*>> spProductInfos; HRESULT hrOperation = spThisKeepAlive->LoadAddOnProductInfos(cvExtend.Get(), &spProductInfos); if ((((HRESULT)(hrOperation)) >= 0)) { result.Set(spProductInfos.Get()); } Telemetry::EndOperation("StorePreview.LoadAddOnProductInfosAsync", hrOperation, cv.GetAnsi(), spThisKeepAlive->_packageFullName.Get()); return hrOperation; }))
ChkHr(MakeAsyncOperation<CMarshaledInterfaceResult<IVectorView<StoreSystemFeature>>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), operation, TrustLevel::PartialTrust, [spThisKeepAlive, spPotentialSystemFeatures, cv](CMarshaledInterfaceResult<IVectorView<StoreSystemFeature>> & results) mutable -> HRESULT { HRESULT __hr = ((HRESULT)0L);; ComPtr<IVectorView<StoreSystemFeature>> resultsView; { { __hr = (FilterUnsupportedFeaturesInternal(spPotentialSystemFeatures.Get(), resultsView)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storeconfigurationserver.cpp", 229, __FSTREXP __FUNCTION__  , "ChkHr(FilterUnsupportedFeaturesInternal(spPotentialSystemFeatures.Get(), resultsView))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (results.Set(resultsView.Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storeconfigurationserver.cpp", 229, __FSTREXP __FUNCTION__  , "ChkHr(results.Set(resultsView.Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit:; Telemetry::EndOperation("StoreConfigurationServer::FilterUnsupportedSystemFeaturesAsync", (static_cast<HRESULT>(__hr)), cv.GetAnsi(), spThisKeepAlive->_PFN.Get()); CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(MakeAsyncOperation<CMarshaledInterfaceResult<Windows::Storage::Streams::IRandomAccessStreamReference>>( ::Windows::Internal::ComTaskPoolHandler(::Windows::Internal::TaskApartment::Any, ::Windows::Internal::TaskOptions::SyncNesting), operation, TrustLevel::PartialTrust, [spThisKeepAlive, options, cv](CMarshaledInterfaceResult<Windows::Storage::Streams::IRandomAccessStreamReference>& results) mutable -> HRESULT { HRESULT __hr = ((HRESULT)0L);; ComPtr<Windows::Storage::Streams::IRandomAccessStreamReference> resultsView; { { __hr = (WSCollector::CollectStoreLog(options, resultsView)); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storeconfigurationserver.cpp", 338, __FSTREXP __FUNCTION__  , "ChkHr(WSCollector::CollectStoreLog(options, resultsView))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; { { __hr = (results.Set(resultsView.Get())); }; if ((((HRESULT)((static_cast<HRESULT>(__hr)))) < 0)) { ; (void)TraceHR( "onecoreuap\\enduser\\winstore\\licensing\\winrt\\lib\\windows\\storeconfigurationserver.cpp", 338, __FSTREXP __FUNCTION__  , "ChkHr(results.Set(resultsView.Get()))", __hr, false ); CBreakOnFailure::CheckToBreakOnFailure(__hr); goto Exit; } }; goto Exit; Exit:; Telemetry::EndOperation("StoreConfigurationServer::GetStoreLogDataAsync", (static_cast<HRESULT>(__hr)), cv.GetAnsi(), spThisKeepAlive->_PFN.Get()); CChkMacroETWLogger::LogHResultEvent(__hr); return __hr;;; }))
ChkHr(marketProperties->GetObjectAt(0, &marketProperty))
ChkHr(memStatics->GetModalExperienceManager(modalExperienceManager))
ChkHr(message->put_Content(pRequestContent))
ChkHr(messageDialogHelper->ShowDialogWithResultsAsync( onMeteredNetwork ? ((HRESULT)0x803F6206L) : ((HRESULT)0x803F6203L), nullptr, messageDialogOperation.GetAddressOf()))
ChkHr(methodStatics->get_Head(&method))
ChkHr(methodStatics->get_Options(&method))
ChkHr(methodStatics->get_Patch(&method))
ChkHr(modalExperienceOptions->put_AllowWin32Owner(true))
ChkHr(modalExperienceOptions->put_Centered(true))
ChkHr(modalExperienceOptions->put_ExperienceDefaultSize(size))
ChkHr(modalExperienceOptions->put_ExperienceMaximumSize(size))
ChkHr(modalExperienceOptions->put_ExperienceMinimumSize(size))
ChkHr(modalExperienceOptions->put_ExperienceTitle((nameOverride == nullptr ? HStringReference(L" ").Get() : nameOverride.Get())))
ChkHr(modalExperienceOptions->put_SuspendExemptionType(static_cast<UINT32>(PLM_TASKCOMPLETION_CATEGORY_FLAGS::PT_TC_NONE)))
ChkHr(moId.Set(szEncodedMoId))
ChkHr(nameOverride.Set(L""))
ChkHr(netInfoStatics->GetInternetConnectionProfile(&connectionProfile))
ChkHr(newOrder->First(&iter))
ChkHr(nextOp.CopyTo(_spNextQueryOperation.ReleaseAndGetAddressOf()))
ChkHr(oemId.Set(szEncodedOemId))
ChkHr(optionalPackageId->get_FamilyName(packageFamilyName.GetAddressOf()))
ChkHr(optionalPackageId->get_FullName(packageFullName.GetAddressOf()))
ChkHr(outputBuffer.Preallocate(uriBufferMax, &pszDest))
ChkHr(outputBuffer.Promote(output.GetAddressOf()))
ChkHr(outputs->Append(inputString))
ChkHr(outputs->Append(output.Get()))
ChkHr(outputs->GetView(outputStrings))
ChkHr(outValue.Set(pszBuffer))
ChkHr(package.As(&package2))
ChkHr(package.As(&package4))
ChkHr(package->get_EffectiveSupportedUsers(&supportedUsers))
ChkHr(package->get_Id(&optionalPackageId))
ChkHr(package->get_Id(&packageId))
ChkHr(package->get_PackageType(&packageType))
ChkHr(package->get_TargetDeviceFamily(&foreignKey))
ChkHr(package->GetDisplayNameLocalized(appName))
ChkHr(package2->get_PackageFullName(packageFullNameToUninstall.GetAddressOf()))
ChkHr(package4->get_IsOptional(&isOptional))
ChkHr(package4->get_IsOptional(&isOptionalPackage))
ChkHr(package4->get_SignatureKind(&signatureKind))
ChkHr(packageFamilyName.Set(requestorFamilyName))
ChkHr(packageFamilyNameToUninstall.Set(packageFamilyName))
ChkHr(packageFullName.Set(bstr.Get()))
ChkHr(packageFullName.Set(requestorFullName))
ChkHr(packageId->get_FamilyName(packageFamilyName.GetAddressOf()))
ChkHr(packageId->get_FamilyName(packageFamilyName.ReleaseAndGetAddressOf()))
ChkHr(packageId->get_FullName(optionalPfn.GetAddressOf()))
ChkHr(packageId->get_FullName(packageFullName.GetAddressOf()))
ChkHr(packageId->get_Name(packageName.GetAddressOf()))
ChkHr(packageManager->FindPackagesByUserSecurityIdPackageFamilyName(userSid.Get(), packageFamilyNameToUninstall.Get(), packages.GetAddressOf()))
ChkHr(packageManager->RemovePackageAsync(packageFullName.Get(), &deploymentOperation))
ChkHr(packageManager->UninstallPackage(packageFullNameToUninstall.GetRawBuffer(nullptr)))
ChkHr(packageProvider->FindAvailablePackage(packageFamilyNameToUninstall.Get(), AvailablePackageIdentityType_ContentId, &package))
ChkHr(packages->First(&packagesIterator))
ChkHr(packages->GetObjectAt(0, &package))
ChkHr(packagesIterator->get_Current(&package))
ChkHr(packagesIterator->get_HasCurrent(&hasCurrent))
ChkHr(packagesIterator->MoveNext(&hasCurrent))
ChkHr(pAppAddOn->GetExpireTime(&ftExpireTime))
ChkHr(pAppAddOn->GetProductId(&pszProductId))
ChkHr(pAppAddOn->GetProductType(&m_eAddOnType))
ChkHr(parentPackage->get_Dependencies(&dependencies))
ChkHr(pArgs->get_State(&state))
ChkHr(ParseJSONToObject( jsonObject, pObj, entry.pChildren))
ChkHr(ParseJSONToObject( jsonObject, pObj, table))
ChkHr(ParseSLSJson(onestoreClientData.GetRawBuffer(nullptr), UriHelper::s_rghstrUris, UriHelper::s_rgpszUriNames, (sizeof(*RtlpNumberOf(UriHelper::s_rghstrUris))), true))
ChkHr(ParseSLSJson(pszJson, UriHelper::s_rghstrUris, UriHelper::s_rgpszUriNames, (sizeof(*RtlpNumberOf(UriHelper::s_rghstrUris))), false))
ChkHr(ParseSLSJson(pszJson, UriHelperV7::s_rghstrUrisSLS, UriHelperV7::s_rgpszUriNames, (sizeof(*RtlpNumberOf(UriHelperV7::s_rghstrUrisSLS))), false))
ChkHr(ParseUriSubstitutionTag(tag.Get(), tagKey.GetAddressOf(), tagName.GetAddressOf(), tagMeta.GetAddressOf()))
ChkHr(PathCchAddExtension(pszCacheFileName, cchCacheFileName, L".dat"))
ChkHr(PathCchAppendEx(pszCacheFilepath, cchCacheFilepath, szCacheFileName, 0))
ChkHr(PathCchAppendEx(pszFolder, cchFolder, L"_WinStoreSDK_Receipt_Cache", 0))
ChkHr(pCallerData->QueryInterface(__uuidof(**(&spCallerDataPrivate)), IID_PPV_ARGS_Helper(&spCallerDataPrivate)))
ChkHr(pCommand->get_Id(&spPropertyValue))
ChkHr(pdConnection->OpenAsync(&openOperation))
ChkHr(pdConnection->put_AppServiceName(appServiceName.Get()))
ChkHr(pdConnection->put_PackageFamilyName(PurchaseDialogPFNRef.Get()))
ChkHr(pdConnection->SendMessageAsync(message.Get(), sendMessageOperation.GetAddressOf()))
ChkHr(pHttpClient->DeleteAsync(uri.Get(), &requestOperation))
ChkHr(pHttpClient->get_DefaultRequestHeaders(&headers))
ChkHr(pHttpClient->GetAsync(uri.Get(), &requestOperation))
ChkHr(pHttpClient->PostAsync(uri.Get(), pRequestContent, &requestOperation))
ChkHr(pHttpClient->PutAsync(uri.Get(), pRequestContent, &requestOperation))
ChkHr(pHttpClient->SendRequestAsync(message.Get(), &requestOperation))
ChkHr(pickle->SetBlanket( punk, 0xFFFFFFFFL, 0xffffffff, ( ( OLECHAR * )( INT_PTR )-1 ), 0, 4, nullptr, EOAC_DEFAULT))
ChkHr(pInAppInfo->spKeywords->get_Size(&cInAppOfferListKeywords))
ChkHr(pInAppInfo->spKeywords->GetAt(i, inAppKeyword.GetAddressOf()))
ChkHr(pInAppOffer->spKeywords->get_Size(&cKeywords))
ChkHr(pInAppOffer->spKeywords->GetAt(i, keyword.GetAddressOf()))
ChkHr(pInAppOfferTokens->get_Size(&cInAppOfferTokens))
ChkHr(pinToHelper->PinToShell(WindowsGetStringRawBuffer(appPackageFamilyName, nullptr), 0x02000000u))
ChkHr(pKeywords->get_Size(&cKeywords))
ChkHr(pkIter->get_Current(requestedProductKind.GetAddressOf()))
ChkHr(pkIter->get_HasCurrent(&hasCurrent))
ChkHr(pkIter->MoveNext(&hasCurrent))
ChkHr(pLicenseInstance->GetIsActive(&isActive))
ChkHr(pMessageDialog->get_Commands(&spCommands))
ChkHr(pMessageDialogHelper->ShowDialogWithResultsAsync( message, nullptr, messageDialogOperation.GetAddressOf()))
ChkHr(pObject->SetNamedValue(HStringReference(pszName).Get(), spJsonValue.Get()))
ChkHr(pObject->SetNamedValue(HStringReference(pszName).Get(), spValue.Get()))
ChkHr(pProductIdCache->AddItem( _inAppOfferToken.Get(), hstrProductId.Get()))
ChkHr(pProductIdCache->AddItem(inAppOfferTokenString.Get(), productIdString.Get()))
ChkHr(pProductIdCache->ProductIdFromInAppOfferToken( _inAppOfferToken.Get(), _spStoreCommerceServer->GetAppCatalogId(cv.Get()), cv.Get(), productId.GetAddressOf()))
ChkHr(previewLicenses.CopyTo(&_mapView))
ChkHr(product->get_ProductKind(actualProductKind.GetAddressOf()))
ChkHr(product->get_StoreId(productId.GetAddressOf()))
ChkHr(product->get_StoreId(storeId.GetAddressOf()))
ChkHr(productAddOns->GetObjectAt(i, &productAddOn))
ChkHr(ProductIdFromInAppOfferTokenTable(inAppOfferToken, productId))
ChkHr(ProductIdHashMap::Make(&hashMap))
ChkHr(productIds.As(&productIdsIter))
ChkHr(productIds->Append(productId))
ChkHr(productIds->Append(productId.Get()))
ChkHr(productIdsInAppInstallQueue->Append(appInstallItemProductId.Get()))
ChkHr(productIdsInAppInstallQueue->get_Size(&size))
ChkHr(productJsonString.CopyTo(productJson))
ChkHr(productJsonString.CopyTo(productJsonResponse))
ChkHr(productKindHashMap->HasKey(actualProductKind.Get(), &found))
ChkHr(productKindHashMap->Insert(requestedProductKind.Get(), true, &replaced))
ChkHr(productKinds->Append(ConsumableKind.Get()))
ChkHr(productKinds->Append(UnmanagedConsumableKind.Get()))
ChkHr(productKinds->First(&pkIter))
ChkHr(productKinds->First(&spIter))
ChkHr(ProductLicenseHashMap::Make(&m_spHashMap))
ChkHr(productPrivate->SetStoreContext(this))
ChkHr(products.As(&productsIVector))
ChkHr(products.CopyTo(&_products))
ChkHr(products.CopyTo(_products.GetAddressOf()))
ChkHr(products->get_Size(&count))
ChkHr(products->get_Size(&productCount))
ChkHr(products->get_Size(&productsLength))
ChkHr(products->GetAt(0, spStoreProduct.GetAddressOf()))
ChkHr(products->GetAt(i, product.GetAddressOf()))
ChkHr(products->GetObjectAt(0, &firstProduct))
ChkHr(products->GetObjectAt(static_cast<UINT32>(index), &product))
ChkHr(productsArray->GetObjectAt(productIndex, &product))
ChkHr(propertySet.As(&propertySetIterable))
ChkHr(propertySet.As(&propertySetMap))
ChkHr(propertySetIterable->First(&propertySetIterator))
ChkHr(propertySetIterator->get_Current(&currentPair))
ChkHr(propertySetIterator->get_HasCurrent(&hasCurrent))
ChkHr(propertySetIterator->MoveNext(&hasCurrent))
ChkHr(propertySetMap->Insert(keyName.Get(), propValue.Get(), &replaced))
ChkHr(propertyValueFactory->CreateBoolean(value, propValue.GetAddressOf()))
ChkHr(propertyValueFactory->CreateDouble(value, propValue.GetAddressOf()))
ChkHr(propertyValueFactory->CreateEmpty(propValue.GetAddressOf()))
ChkHr(propertyValueFactory->CreateString(value.Get(), propValue.GetAddressOf()))
ChkHr(propValue->get_Type(&type))
ChkHr(propValue->GetBoolean(&boolValue))
ChkHr(propValue->GetDouble(&doubleValue))
ChkHr(propValue->GetInt16(&int16Value))
ChkHr(propValue->GetInt32(&int32Value))
ChkHr(propValue->GetInt64(&int64Value))
ChkHr(propValue->GetSingle(&floatValue))
ChkHr(propValue->GetString(stringValue.GetAddressOf()))
ChkHr(propValue->GetUInt16(&uint16Value))
ChkHr(propValue->GetUInt32(&uint32Value))
ChkHr(propValue->GetUInt64(&uint64Value))
ChkHr(propValue->GetUInt8(&byteValue))
ChkHr(pStorePackageUpdates->First(&updateIterator))
ChkHr(pStrings->First(spIter.GetAddressOf()))
ChkHr(pThis->_pOptionalPfnToCallbackMap->Lookup(HStringReference(pData->OptionalPackageFullName).Get(), callback.GetAddressOf()))
ChkHr(pUnfulfilledConsumable->get_ProductId(m_hstrProductId.GetAddressOf()))
ChkHr(pUnfulfilledList->Append(consumable.Get()))
ChkHr(pUnfulfilledList->get_Size(&size))
ChkHr(pUnfulfilledList->GetAt(lProduct, spUnfulfilledConsumable.GetAddressOf()))
ChkHr(pValue.As(&spJsonValue))
ChkHr(pVector.As(&pIVector))
ChkHr(pVector->Append(hstrCurrent.Get()))
ChkHr(quantityParts->get_Size(&partsSize))
ChkHr(quantityParts->GetAt(1, newQuantity.GetAddressOf()))
ChkHr(queuedItemResults->Append(storeQueueItem.Get()))
ChkHr(queuedItemResults->GetView(queuedItems))
ChkHr(queueItems->Append(queueItem.Get()))
ChkHr(queueItems->Append(storeQueueItem.Get()))
ChkHr(queueItems->GetView(&_spQueueItems))
ChkHr(queueItems->GetView(queuedItems))
ChkHr(ReceiptHelpers::FetchReceipt( _PFN.Get(), _spStoreCommerceServer.Get(), _pCV, IAPReceiptType_App, nullptr, authTicket.Get(), spWebTokenRequestResult.Get(), _pReceipt))
ChkHr(ReceiptHelpers::FetchReceipt( _PFN.Get(), _spStoreCommerceServer.Get(), _pCV, IAPReceiptType_OneProduct, _inAppOfferToken.Get(), authTicket.Get(), spWebTokenRequestResult.Get(), _pReceipt))
ChkHr(ReceiptHelpers::FetchReceipt( _PFN.Get(), _spStoreCommerceServer.Get(), cv.Get(), IAPReceiptType_App, nullptr, authTicket.Get(), spWebTokenRequestResult.Get(), _receipt.GetAddressOf()))
ChkHr(ReceiptHelpers::FetchReceipt( _PFN.Get(), _spStoreCommerceServer.Get(), cv.Get(), IAPReceiptType_OneProduct, _productId.Get(), authTicket.Get(), spWebTokenRequestResult.Get(), _productReceipt.GetAddressOf()))
ChkHr(ReceiptHelpers::GetFormattedPrice( locale, market, &pInAppSkuInformation->PricingInfo, false , _hstrFormattedListPrice.GetAddressOf()))
ChkHr(ReceiptHelpers::GetFormattedPrice(locale, market, &pInAppOffer->PricingInfo, false , _hstrFormattedPrice.GetAddressOf()))
ChkHr(ReceiptHelpers::GetFormattedPrice(locale, market, &pInAppOffer->PricingInfo, true , _hstrFormattedBasePrice.GetAddressOf()))
ChkHr(ReceiptHelpers::GetFormattedPrice(pAppInfo->Locale, pAppInfo->Market, &pAppInfo->PricingInfo, false , _hstrFormattedPrice.GetAddressOf()))
ChkHr(ReceiptHelpers::GetFormattedPrice(pAppInfo->Locale, pAppInfo->Market, &pAppInfo->PricingInfo, true , _hstrFormattedBasePrice.GetAddressOf()))
ChkHr(RefreshInternalState(false, pCV))
ChkHr(RefreshInternalState(true, pCV))
ChkHr(RefreshTableFromService(parentProductId, pCV))
ChkHr(RegistryHelper::SetQwordValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"AppDownloadLimit", actualAppDownloadLimit))
ChkHr(RegistryHelper::SetQwordValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"OEMDiscoveryTTL", systemConfigurationExpiration.UniversalTime))
ChkHr(RegistryHelper::SetQwordValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"UpdateDownloadLimit", actualUpdateDownloadLimit))
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000001) ), RegistryHelper::STORE_CURRENTIDENTITY_REGISTRY_PATH, L"StoreAADAccountId", realId.GetRawBuffer(nullptr)))
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000001) ), RegistryHelper::STORE_REGISTRY_PATH, L"PrimaryWebAccountId", realId.GetRawBuffer(nullptr)))
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"Hardware", WindowsGetStringRawBuffer(catalogHardwareDescriptor, nullptr)))
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"MOID", WindowsGetStringRawBuffer(mobileOperatorId, nullptr)))
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"OEMID", WindowsGetStringRawBuffer(catalogHardwareManufacturerId, nullptr)))
ChkHr(RegistryHelper::SetStringValue((( HKEY ) (ULONG_PTR)((LONG)0x80000002) ), RegistryHelper::STORE_CONFIGURATION_REGISTRY_PATH, L"SCMID", WindowsGetStringRawBuffer(catalogStoreContentModifierId, nullptr)))
ChkHr(relatedProducts->GetObjectAt(relatedIndex, &relatedProduct))
ChkHr(request->get_ClientId(clientId.GetAddressOf()))
ChkHr(request->get_Scope(scope.GetAddressOf()))
ChkHr(requestFactory->Create(method.Get(), uri.Get(), &message))
ChkHr(response->get_Items(&items))
ChkHr(response->get_Message(&responseMessage))
ChkHr(response->get_Status(&responseStatus))
ChkHr(responseContent->ReadAsStringAsync(&readOperation))
ChkHr(responseContent->TryComputeLength(&responseSizeBytes, &tryComputeLengthSucceeded))
ChkHr(responseMessage->EnsureSuccessStatusCode(&responseSuccess))
ChkHr(responseMessage->get_Content(&responseContent))
ChkHr(responseMessage->get_StatusCode(&httpStatusCode))
ChkHr(result.CopyTo(results))
ChkHr(result.Set(licenseSatisfactionResult.Get()))
ChkHr(ResultFromLastError())
ChkHr(results.Products.CopyTo(products))
ChkHr(results.Set(resultsView.Get()))
ChkHr(RetrieveJsonResponseFromResources(L"JSON_RESPONSE_INTERNAL_STORE_ENDPOINT_EXTENSION_URLS", UriHelperV7::s_rghstrUris[UriHelperV7::InternalStoreEndpointExtensionUrls].GetAddressOf()))
ChkHr(RetrieveJsonResponseFromResources(L"JSON_RESPONSE_MODAL_FLOW_SIZES", UriHelperV7::s_rghstrUris[UriHelperV7::ModalFlowSizes].GetAddressOf()))
ChkHr(RetrieveJsonResponseFromResources(L"JSON_RESPONSE_ONE_STORE_CLIENT_DATA_URLS", onestoreClientData.GetAddressOf()))
ChkHr(RetrieveJsonResponseFromResources(L"JSON_RESPONSE_STORE_ENDPOINT_EXTENSION_URLS", UriHelperV7::s_rghstrUris[UriHelperV7::StoreEndpointExtensionUrls].GetAddressOf()))
ChkHr(RoFileTimeToDateTime(fileTime, pDateTime))
ChkHr(RpcHelpers::GetRpcHandle(&rpcHandle))
ChkHr(scmId.Set(szEncodedScmId))
ChkHr(searchTitles->GetObjectAt(iTitle, &title))
ChkHr(SendStoreRequest( nullptr, _hasPreviewCapability ? 14 : 13, cv.GetHStringReference().Get(), requestJson.Get(), &status, responseJson.GetAddressOf()))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetCustomerCollectionsId, cv.Get(), jsonParameters.Get(), nullptr, jsonResponseString.GetAddressOf()))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetCustomerPurchaseId, cv.Get(), jsonParameters.Get(), nullptr, jsonResponseString.GetAddressOf()))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetParentProduct, cv.Get(), nullptr, nullptr, productJsonString.GetAddressOf()))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetProductsFromParent, cv.Get(), jsonCatalogParameters.Get(), nullptr, productJsonString.GetAddressOf()))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetUserCollectionForProducts, cv.Get(), jsonCollectionsParameters.Get(), nullptr, jsonResult))
ChkHr(SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, uriId, cv, jsonCatalogParameters.Get(), nullptr, productJsonString.GetAddressOf()))
ChkHr(SendStoreRequestWithUris( pCallerData, UriHelperV7::StoreEndpointExtensionUrls, requestKind, cv.Get(), jsonData.Get(), statusCode, jsonResponse))
ChkHr(SetEnterpriseStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), webAccountId))
ChkHr(SetEnterpriseStoreWebAccountIdInternal(user, packageFamilyName.Get(), webAccountId))
ChkHr(SetMaxDateTime(&maxDateTime))
ChkHr(SetMaxDateTime(pDateTime))
ChkHr(SetMobileOperatorConfigurationInternal(mobileOperatorId, appDownloadLimitInMegabytes, updateDownloadLimitInMegabytes))
ChkHr(SetStoreWebAccountIdInternal(nullptr , packageFamilyName.Get(), webAccountId))
ChkHr(SetStoreWebAccountIdInternal(user, packageFamilyName.Get(), webAccountId))
ChkHr(SetSystemConfigurationInternal(catalogHardwareManufacturerId, catalogStoreContentModifierId, systemConfigurationExpiration, catalogHardwareDescriptor))
ChkHr(ShouldRestrictToEnterpriseStoreOnlyInternal(nullptr , value))
ChkHr(ShouldRestrictToEnterpriseStoreOnlyInternal(user, value))
ChkHr(signInMgr->GetHandleForUser(_user.Get(), &userContextToken))
ChkHr(signInMgr->GetHandleForUser(user, &userContextToken))
ChkHr(sku.As(&skuPrivate))
ChkHr(sku->get_IsInUserCollection(&isInCollection))
ChkHr(sku->get_Price(ppValue))
ChkHr(skuAvailabilities->GetObjectAt(skuAvailabilityIndex, &skuAvailability))
ChkHr(skuLocalizedProperties->GetObjectAt(0, &skuFirstLocalizedProperties))
ChkHr(skuPrivate->get_FulfillmentType(fulfillmentType.GetAddressOf()))
ChkHr(skuPrivate->set_ProductId(_storeId.Get()))
ChkHr(sortedAvailabilities->Append(bestAvailability.Get()))
ChkHr(sortedSkus->Append(bestSku.Get()))
ChkHr(spActions->GetStringAt(k, action.GetAddressOf()))
ChkHr(spAlternateIds->GetObjectAt(i, &spAlternateId))
ChkHr(spAnalyticsInfo->get_VersionInfo(&spVersionInfo))
ChkHr(spAppAddOn->GetCatalogId(&licenseAddOnCatalogId))
ChkHr(spAppAddOn->GetExpireTime(&ftAddOnExpirationTime))
ChkHr(spAppAddOn->GetProductId(&pszProductId))
ChkHr(spAppAddOn->GetSKUId(&licenseAddOnSkuId))
ChkHr(spAppContentInfo->GetCatalogId(&bigCatId))
ChkHr(spAppContentInfo->GetCatalogId(&productStoreId))
ChkHr(spAppContentInfo->GetWindowsStoreAppId(&m_appId))
ChkHr(spApplicationContentInfo->GetAddOnAtPosition(lProduct, spAppAddOn.GetAddressOf()))
ChkHr(spApplicationContentInfo->GetAddOnCount(&nCount))
ChkHr(spApplicationContentInfo->GetCustomPolicy(&customPolicyLengthInBytes, reinterpret_cast<BYTE**>(&customPolicyEncoded)))
ChkHr(spApplicationContentInfo->GetEntitlementId(&entitlementId))
ChkHr(spApplicationContentInfo->GetTrialTimeRemaining(&ftTrialTimeRemaining))
ChkHr(spApplicationContentInfo->GetUserId(&lmUserId))
ChkHr(spAppmodelPackage->get_Dependencies(supplementalPackages.GetAddressOf()))
ChkHr(spAppmodelPackage->get_Id(&packageId))
ChkHr(spArray.As(&spJsonVector))
ChkHr(spAvailabilities->GetObjectAt(j, &spAvailability))
ChkHr(spBufferAsBytes->Buffer(reinterpret_cast<BYTE**>(&pDecodedBuffer)))
ChkHr(spCallerDataPrivate->GetAppWindowHandle(&appWindowHandle))
ChkHr(spCallingProcessInfo->OpenCallerProcessHandle((0x1000), &callingProcessHandle))
ChkHr(spCommand->put_Id(spPropertyValue.Get()))
ChkHr(spCommand->put_Invoked(pHandler))
ChkHr(spCommand->put_Label(HStringReference((const WCHAR*)pszContent).Get()))
ChkHr(spCommands->Append(spCommand.Get()))
ChkHr(spContentIdsIter->get_Current(contentId.GetAddressOf()))
ChkHr(spContentIdsIter->get_HasCurrent(&cHasCurrent))
ChkHr(spContentIdsIter->MoveNext(&cHasCurrent))
ChkHr(spCoreAppPrivate->GetAppDisplayName(appName.GetAddressOf()))
ChkHr(spCoreAppPrivate->GetWindowFromThreadId(callerThreadId, &spCoreWindow))
ChkHr(spCoreWindow.As(&spCoreWinInterop))
ChkHr(spCoreWindowStatic->GetForCurrentThread(&spCoreWindow))
ChkHr(spCoreWinInterop->get_WindowHandle(&hwnd))
ChkHr(spCoreWinInterop->get_WindowHandle(phWndCurrent))
ChkHr(spDisplayData->Initialize(hstrName))
ChkHr(spDisplayData->Initialize(nullptr))
ChkHr(spDisplaySkuAvailabilities->GetObjectAt(i, &spDisplaySkuAvailability))
ChkHr(spGlobalizationPreferences->get_Languages(ppLanguages))
ChkHr(spHardwareCapability->EvaluateHardwareCapabilities( GUID_WinStoreServiceID, arraySize, rawGuidArray, &wuResults, &hrOnlineCheck))
ChkHr(spHashBuffer.As(&spBufferAsBytes))
ChkHr(spHashBuffer->get_Length(&decodedBufferLength))
ChkHr(spHashView->Split(firstPartition, secondPartition))
ChkHr(spIds->Append(productId.Get()))
ChkHr(spIter->get_Current(hstrCurrent.GetAddressOf()))
ChkHr(spIter->get_Current(productKind.GetAddressOf()))
ChkHr(spIter->get_Current(storeId.GetAddressOf()))
ChkHr(spIter->get_Current(value.GetAddressOf()))
ChkHr(spIter->get_HasCurrent(&fHasCurrent))
ChkHr(spIter->get_HasCurrent(&hasCurrent))
ChkHr(spIter->MoveNext(&fHasCurrent))
ChkHr(spIter->MoveNext(&hasCurrent))
ChkHr(spIterator->get_Current(&feature))
ChkHr(spIterator->get_HasCurrent(&hasCurrent))
ChkHr(spIterator->MoveNext(&hasCurrent))
ChkHr(spJsonArray.As(&spJsonVector))
ChkHr(spJsonArrayStatics->Parse(HStringReference(pszJson).Get(), &spJsonArray))
ChkHr(spJsonObject.As(&spJsonValue))
ChkHr(spJsonObject->GetNamedArray(HStringReference(L"DisplaySkuAvailabilities").Get(), &jsonSKUAvailabilities))
ChkHr(spJsonObjectStatics->Parse(HStringReference(pszJson).Get(), &spJsonObject))
ChkHr(spJsonStatics->Parse(HStringReference(pszJson).Get(), &spJsonObject))
ChkHr(spJsonValue->Stringify(hJsonString))
ChkHr(spJsonValueStatics->CreateBooleanValue(fValue, &spValue))
ChkHr(spJsonValueStatics->CreateNullValue(&spValue))
ChkHr(spJsonValueStatics->CreateNumberValue(fValue, &spValue))
ChkHr(spJsonValueStatics->CreateStringValue(HStringReference((const WCHAR*)strTime).Get(), &spValue))
ChkHr(spJsonValueStatics->CreateStringValue(HStringReference(pszValue).Get(), &spValue))
ChkHr(spJsonValueStatics->CreateStringValue(hValue, &spValue))
ChkHr(spJsonValueStatics->CreateStringValue(timeSpanString.Get(), &spValue))
ChkHr(spJsonVector->Append(spJsonValue.Get()))
ChkHr(spJsonVector->Append(spValue.Get()))
ChkHr(spJsonVector->RemoveAt(index))
ChkHr(spKeyIdsIter->get_Current(keyId.GetAddressOf()))
ChkHr(spKeyIdsIter->get_HasCurrent(&eHasCurrent))
ChkHr(spKeyIdsIter->MoveNext(&eHasCurrent))
ChkHr(spLanguages->get_Size(&size))
ChkHr(spLanguages->GetAt(0, pLanguage))
ChkHr(spLanguages->GetAt(i, language.GetAddressOf()))
ChkHr(spLauncherStatics->LaunchUriAsync(spUri.Get(), &spAsyncOperation))
ChkHr(spLicenseInformationServerSingleton->Initialize(lpszPackageFullName, eAppType, pCV))
ChkHr(spLicenseInfoServer.As(&licenseInfo))
ChkHr(spLicenseInstance->GetContentInfo(__uuidof(**(&spAppContentInfo)), IID_PPV_ARGS_Helper(&spAppContentInfo)))
ChkHr(spLicenseInstance->GetExpirationDateTime(&ftExpirationTime))
ChkHr(spLicenseInstance->GetIsActive(&m_bActive))
ChkHr(spLicenseInstance->GetIsTrial(&isTrial))
ChkHr(spLicenseInstance->GetIsTrial(&m_bIsTrial))
ChkHr(spLicenseInstance->GetLicenseGrantReason(&grantReason))
ChkHr(spLicenseManager->EnsureLicenseForApplicationDeployment(contentId.GetRawBuffer(nullptr), nullptr , nullptr ))
ChkHr(spListingInformation->Initialize(spStoreAppInfo))
ChkHr(spManufacturerInfo->put_HardwareManufacturerId(buffer.Get()))
ChkHr(spManufacturerInfo->put_ManufacturerName(buffer.Get()))
ChkHr(spManufacturerInfo->put_ModelName(buffer.Get()))
ChkHr(spManufacturerInfo->put_StoreContentModifierId(buffer.Get()))
ChkHr(spMessageDialog.As(&initWithWindow))
ChkHr(spMessageDialog->ShowAsync(&spAsyncOperation))
ChkHr(spMessageDialog->ShowAsync(ppMessageDialogOperation))
ChkHr(spNewProductLicense->InitializeInvalid(hstrKey))
ChkHr(spNextQueryOperation.CopyTo(_spNextQueryOperation.GetAddressOf()))
ChkHr(spNumberFormatter->FormatDouble(price, formattedPrice))
ChkHr(spOperation->BeginWork(1))
ChkHr(spPackageManager->FindPackageByPackageFullName(fullName.Get(), ppPackage))
ChkHr(spPackageManager->FindPackageByUserSecurityIdPackageFullName(sidString.Get(), fullName.Get(), ppPackage))
ChkHr(spPackageResolver->GetDisplayNameLocalized(appName.GetAddressOf()))
ChkHr(spPackageResolverStatics->Create(spPackage.Get(), &spPackageResolver))
ChkHr(spPackages->get_Size(&packageCount))
ChkHr(spPackages->GetAt(0, &spPackage))
ChkHr(spPackageStatics->ExistsByPackageFamilyName( packageFamilyName.Get(), pValue))
ChkHr(spPackageStatics->ExistsByUserAndPackageFamilyName( spUser.Get(), packageFamilyName.Get(), pValue))
ChkHr(spPackageStatics->FindByPackageFamilyNameAndPackageType( HStringReference(pkgFamilyName).Get(), PackageType_Main | PackageType_Xap, &spPackages))
ChkHr(spPackageStatics->GetByPackageFullName(packageFullName.Get(), package.GetAddressOf()))
ChkHr(spPagedOperation->GetResults( &hresult, &hasMoreResults, products, spNextQueryOperation))
ChkHr(spProductInfo->Initialize( spStoreAppInfo->Locale, spStoreAppInfo->Market, spStoreAppInfo, pInAppOffer))
ChkHr(spProductInfosList->Append(spProductInfo.Get()))
ChkHr(spProductInfosList->GetView(&spProductInfos))
ChkHr(spProductLicense->Initialize(spAppAddOn.Get()))
ChkHr(spProductLicense->Initialize(spUnfulfilledConsumable.Get()))
ChkHr(spProductLicenseMap->Initialize(spLicenseInstance.Get(), spUnfulfilledList.Get()))
ChkHr(spProductListing->Initialize(_hstrLocale.Get(), _hstrCurrentMarket.Get(), pAppInfo->IsUAP, pInAppOffer))
ChkHr(spPropertyValue->GetInt32(&commandId))
ChkHr(spPropValueFactory->CreateInt32(id, &spPropertyValue))
ChkHr(spPurchaseResults->Initialize( productPurchaseStatus, transactionId, pszReceipt, _hstrDevOfferId.Get()))
ChkHr(spPurchaseResults->Initialize(productPurchaseStatus, transactionId, pszReceipt, nullptr))
ChkHr(spPurchaseResults->Initialize(static_cast<StorePreviewProductPurchaseStatus>(productPurchaseStatus)))
ChkHr(spReceiptContent.As(&spXmlNodeSerializer))
ChkHr(spReceiptNode->get_ChildNodes(&spReceiptNodeChildren))
ChkHr(spReceiptNodeChildren->get_Length(&uReceiptNodeChildrenLength))
ChkHr(spReceiptNodeChildren->Item(0, &spReceiptContent))
ChkHr(spReceiptNodes->get_Length(&uReceiptNodesLength))
ChkHr(spReceiptNodes->Item(0, &spReceiptNode))
ChkHr(spRequestAppPurchaseInfo.As(&spAsyncInfo))
ChkHr(spRequestProductPurchaseWithDisplayPropertiesInfo->RuntimeClassInitialize( _packageFullName.Get(), this, cv.GetAnsi(), _InterlockedIncrement(&_requestProductPurchaseId), productId, hwndOwner, devOfferId, pDisplayProperties, pMessageDialogHelper ))
ChkHr(spResults->GetNamedArray(HStringReference(L"Products").Get(), &storeProductArray))
ChkHr(spSkuInfo->Initialize( locale, market, pAppInformation, pInAppInformation, pInAppSku))
ChkHr(spSkuInfoList->Append(spSkuInfo.Get()))
ChkHr(spSkuInfoList->GetView(&_spSkuInfoList))
ChkHr(spSLSClient2->GetSLSDataChunk(GUID_StoreFrontServiceID, 0, L"//ServiceEnvironment/StoreSDK", &pszJson, &lastModified))
ChkHr(spStoreCommerce->GetAppId(&m_appID))
ChkHr(spStoreCommerce->GetAppPurchaseCampaignIdAsync(cv.GetHStringReference().Get(), ppOperation))
ChkHr(spStoreCommerce->GetAppReceiptAsync(cv.GetHStringReference().Get(), getAppReceiptOperation))
ChkHr(spStoreCommerce->GetCustomerCollectionsIdAsync( cv.GetHStringReference().Get(), serviceTicket, publisherUserId, ppGetCollectionsIdOperation))
ChkHr(spStoreCommerce->GetCustomerPurchaseIdAsync( cv.GetHStringReference().Get(), serviceTicket, publisherUserId, ppGetPurchaseIdOperation))
ChkHr(spStoreCommerce->GetLicenseInformation(ppAppLicense))
ChkHr(spStoreCommerce->GetLinkUri(hstrLinkUri.GetAddressOf()))
ChkHr(spStoreCommerce->GetProductReceiptAsync(productId, cv.GetHStringReference().Get(), getProductReceiptOperation))
ChkHr(spStoreCommerce->Initialize(cv.GetHStringReference().Get()))
ChkHr(spStoreCommerce->LoadAddOnProductInfosAsync(cv.GetHStringReference().Get(), ppLoadAddOnProductInfosOperation))
ChkHr(spStoreCommerce->LoadListingInformationAsync( nullptr, keywords, cv.GetHStringReference().Get(), ppLoadListingOperation))
ChkHr(spStoreCommerce->LoadListingInformationAsync( productIds, nullptr, cv.GetHStringReference().Get(), ppLoadListingOperation))
ChkHr(spStoreCommerce->LoadListingInformationAsync(nullptr, nullptr, cv.GetHStringReference().Get(), ppLoadListingOperation))
ChkHr(spStoreCommerce->RequestAppPurchaseAsync( includeReceipt, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestAppPurchaseOperation))
ChkHr(spStoreCommerce->RequestProductPurchaseAsync(productId, includeReceipt, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestProductPurchaseOperation))
ChkHr(spStoreCommerce->RequestProductPurchaseByProductIdAndSkuIdAsync( productId, skuId, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestPurchaseBySkuIdOperation))
ChkHr(spStoreCommerceWithConsumables->GetUnfulfilledConsumablesAsync( cv.GetHStringReference().Get(), ppGetUnfulfilledConsumablesOperation))
ChkHr(spStoreCommerceWithConsumables->ReportConsumableFulfillmentAsync( productId, transactionId, cv.GetHStringReference().Get(), ppReportConsumableFulfillmentOperation))
ChkHr(spStoreCommerceWithConsumables->ReportConsumableFulfillmentSync(productId, cv.GetHStringReference().Get()))
ChkHr(spStoreCommerceWithConsumables->RequestProductPurchaseWithDisplayPropertiesAsync( productId, devOfferId, displayProperties, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestProductPurchaseOperation))
ChkHr(spStoreCommerceWithConsumables->RequestProductPurchaseWithResultsAsync( productId, reinterpret_cast<UINT64>(hwnd), spMessageDialogHelper.Get(), cv.GetHStringReference().Get(), ppRequestProductPurchaseWithResultsOperation))
ChkHr(spStoreContext.As(&spStoreContextPrivate))
ChkHr(spStoreContextPrivate->SendStoreRequestAsync( requestKind, parametersAsJson, ppOperation))
ChkHr(spStoreContextServer.As(&spStoreContextServer3))
ChkHr(spStoreContextServer->GetAssociatedStoreQueueItems( cv.GetHStringReference().Get(), &_queueItems))
ChkHr(spStoreContextServer->GetProduct( cv.GetHStringReference().Get(), productJson.GetAddressOf()))
ChkHr(spStoreContextServer->GetStoreQueueItems( storeIds.Get(), cv.GetHStringReference().Get(), &_queueItems))
ChkHr(spStoreContextServer3->SetInstallOrderForAssociatedStoreQueueItems( cv.GetHStringReference().Get(), _newOrder.Get()))
ChkHr(spStoreProduct.As(&storeProductPrivate))
ChkHr(spStoreProduct->get_HasDigitalDownload(&hasDigitalDownload))
ChkHr(spStoreProduct->get_IsInUserCollection(&isInUserCollection))
ChkHr(spStoreProduct->get_ProductKind(productKind.GetAddressOf()))
ChkHr(spStreamReferenceStatics->CreateFromStream(randAccStream.Get(), result.GetAddressOf()))
ChkHr(spTargetDeviceFamily->get_Name(&targetPlatform))
ChkHr(spTargetDeviceFamilyStatics->Get(foreignKey, &spTargetDeviceFamily))
ChkHr(spThis->_appInstallItem.As(&appInstallItem2))
ChkHr(spThis->GetSatisfactionInfos(contentIdsVectorView.Get(), keyIdsVectorView.Get(), licenseSatisfactionResult.GetAddressOf()))
ChkHr(spUnfulfilledConsumable->get_ProductId(strProductId.GetAddressOf()))
ChkHr(spUnfulfilledConsumable->Initialize(pszProductId, transactionId, pszDevOfferId))
ChkHr(spUserStatics->GetByUserSid(userSid.Get(), &spUser))
ChkHr(spValue.As(&spJsonValue))
ChkHr(spVectorView.As(&spIterable))
ChkHr(spVersionInfo->get_DeviceFamily(deviceFamily.GetAddressOf()))
ChkHr(spWebTokenRequestResults->get_Size(&resultsCount))
ChkHr(spWebTokenRequestResults->GetAt(0, it.GetAddressOf()))
ChkHr(spXmlDocumentIO->LoadXml(hResponse.Get()))
ChkHr(spXmlNodeSerializer->GetXml(hstrReceiptContent.GetAddressOf()))
ChkHr(spXMLResponse.As(&spXmlDocumentIO))
ChkHr(spXMLResponse->GetElementsByTagName(HStringReference(L"Receipt").Get(), &spReceiptNodes))
ChkHr(StartOperation(1))
ChkHr(StartOperation(asyncId))
ChkHr(StartOperation(iAsyncId))
ChkHr(status.As(&statusInternal))
ChkHr(status.CopyTo(result))
ChkHr(status->get_Value(&updateStatus))
ChkHr(statusInternal->get_IsDownloaded(value))
ChkHr(StoreConfigurationServer::GetPurchasePromptingPolicyInternal(nullptr , value))
ChkHr(StoreConfigurationServer::GetPurchasePromptingPolicyInternal(user, value))
ChkHr(StoreConfigurationServer::HasStoreWebAccountInternal(nullptr , *value))
ChkHr(StoreConfigurationServer::HasStoreWebAccountInternal(user, *value))
ChkHr(StoreConfigurationServer::PutPurchasePromptingPolicyInternal(nullptr , value))
ChkHr(StoreConfigurationServer::PutPurchasePromptingPolicyInternal(user, value))
ChkHr(storeContextServer->AcquireStoreLicenseForOptionalPackage( optionalPfn.Get(), spStorePackageLicenseLostCallback.Get(), &_valid))
ChkHr(storeContextServer->CanSilentlyDownloadStorePackageUpdates(cv.GetHStringReference().Get(), value))
ChkHr(storeContextServer->DownloadStorePackages( storeIds.Get(), _storePackageInstallOptions.Get(), cv.GetHStringReference().Get(), _shouldPromptForConsent, _totallySilent, messageDialogHelper.Get(), &_queueItems, &canceled))
ChkHr(storeContextServer->DownloadStorePackageUpdates( updates.Get(), cv.GetHStringReference().Get(), _install, _shouldPromptForConsent, messageDialogHelper.Get(), &_queueItems, &canceled))
ChkHr(storeContextServer->FocusOnWindow((UINT64)hwnd))
ChkHr(storeContextServer->GetAppAndOptionalStorePackageUpdates(cv.GetHStringReference().Get(), &queuedItems))
ChkHr(storeContextServer->GetAssociatedStoreProducts( productKinds.Get(), maxCountPerPage, cv.GetHStringReference().Get(), productJsonString.GetAddressOf(), &_spNextQueryOperation))
ChkHr(storeContextServer->GetConsumableBalanceRemaining( _productId.Get(), cv.GetHStringReference().Get(), jsonString.GetAddressOf()))
ChkHr(storeContextServer->GetCustomerCollectionsId( _serviceTicket.Get(), _publisherUserId.Get(), cv.GetHStringReference().Get(), _collectionsId.GetAddressOf()))
ChkHr(storeContextServer->GetCustomerPurchaseId( _serviceTicket.Get(), _publisherUserId.Get(), cv.GetHStringReference().Get(), _purchaseId.GetAddressOf()))
ChkHr(storeContextServer->GetLinkUri(storeId.Get(), uriString.GetAddressOf()))
ChkHr(storeContextServer->GetOfflineLicenses( cv.GetHStringReference().Get(), results.GetAddressOf()))
ChkHr(storeContextServer->GetPreviewLicenseResultForPackage( _packageIdentifier.Get(), cv.GetHStringReference().Get(), licenseSatisfactionResult.GetAddressOf()))
ChkHr(storeContextServer->GetProductForPackage( productKinds.Get(), packageFullName.Get(), cv.GetHStringReference().Get(), productJson.GetAddressOf()))
ChkHr(storeContextServer->GetProductsWithOptions( productKinds.Get(), storeIds.Get(), _storeProductOptions.Get(), cv.GetHStringReference().Get(), productJsonString.GetAddressOf()))
ChkHr(storeContextServer->GetUserCollection( productKinds.Get(), maxCountPerPage, cv.GetHStringReference().Get(), productJson.GetAddressOf(), &_spNextQueryOperation))
ChkHr(storeContextServer->Initialize(false, nullptr))
ChkHr(storeContextServer->Initialize(pUser != nullptr, _spLicenseChangedCallback.Get()))
ChkHr(storeContextServer->IsStoreProductInstalled( _productStoreId.Get(), cv.GetHStringReference().Get(), &_isInstalled))
ChkHr(storeContextServer->RequestPurchase( _storeContextCallerData.Get(), _storeId.Get(), _storePurchaseProperties.Get(), _jsonData.Get(), cv.GetHStringReference().Get(), _response.GetAddressOf()))
ChkHr(storeContextServer->SendStoreRequest( _storeContextCallerData.Get(), _requestKind, cv.GetHStringReference().Get(), _jsonData.Get(), &_statusCode, _jsonResponse.GetAddressOf()))
ChkHr(storeContextServer->SendStoreRequest( _storeContextCallerData.Get(), 16, cv.GetHStringReference().Get(), nullptr, &statusCode, _jsonResponse.GetAddressOf()))
ChkHr(storeContextServer->SetUser(pUser))
ChkHr(storeContextServer->UninstallStorePackage( _storeId.Get(), _packageFamilyNameToUninstall.Get(), cv.GetHStringReference().Get(), _shouldPrompt, _dialogHelper.Get(), &_resultStatus ))
ChkHr(storeContextServer2->GetPreviewLicenseResultForStoreId( _productStoreId.Get(), cv.GetHStringReference().Get(), licenseSatisfactionResult.GetAddressOf()))
ChkHr(storeId.Set(L""))
ChkHr(storeIdComponents->get_Size(&size))
ChkHr(storeIdComponents->GetAt(0, pProductId))
ChkHr(storeIds->Append(HStringReference(storeIdFromLicense).Get()))
ChkHr(storeIds->Append(storeId.Get()))
ChkHr(StoreInfoBuilders::BuildStoreAppInfo( _spStoreCommerceServer.Get(), cv.Get(), 0, &spStoreAppInfo))
ChkHr(StoreInfoBuilders::BuildStoreAppInfo( pStoreCommerceServer, pCV, hCancel, &spStoreAppInfo))
ChkHr(StoreInfoBuilders::BuildStoreAppInfo( this, pCV, nullptr, &spStoreAppInfo))
ChkHr(StorePackageUpdateManagerUtils::StorePackageUpdateStatusLifetimeTraits::Construct(value, _status))
ChkHr(storePackageUpdateStatuses->Append(updateStatus))
ChkHr(storePackageUpdateStatuses->GetView(&_updateStatuses))
ChkHr(StorePackageUpdateStatusHashMap::Make(&_updateStatusMap))
ChkHr(StorePackageUpdateStatusVector::Make(&storePackageUpdateStatuses))
ChkHr(storeProductArray->GetObjectAt(0, storeProductJson.GetAddressOf()))
ChkHr(storeProductId.Set(storeId))
ChkHr(storeProductOptions->get_ActionFilters(&actionFilters))
ChkHr(StoreProductPagedQueryResult::BuildMap( products, productKinds, &_mapView))
ChkHr(storeProductPrivate->get_PackageFamilyName(packageFamilyName.GetAddressOf()))
ChkHr(storeProductPrivate->get_PackageFamilyName(packageFamilyNameToUninstall.GetAddressOf()))
ChkHr(storePurchaseProperties->get_ExtendedJsonData(tmp.GetAddressOf()))
ChkHr(storePurchaseProperties->get_Name(tmp.GetAddressOf()))
ChkHr(storeQueueItem->get_ProductId(productId.GetAddressOf()))
ChkHr(storeQueueItem->GetCurrentStatus(&installStatus))
ChkHr(STRAPI_Create(pszBuffer, &dhStr))
ChkHr(strAuthTokenPrefixed.CopyTo(authToken.ReleaseAndGetAddressOf()))
ChkHr(stringBuffer.Preallocate(decodedBufferLength + 1, &pszDecodedString))
ChkHr(stringBuffer.Preallocate(urlLength, &pszFinalUri))
ChkHr(stringBuffer.Promote(result.GetAddressOf()))
ChkHr(StringCaseInsensitiveEquals()(StorePackageUpdateLeft.PackageFamilyName, StorePackageUpdateRight.PackageFamilyName, fEquals))
ChkHr(StringCchCatExW(pszLanguagesEnd, cchRemaining, L",", &pszLanguagesEnd, &cchRemaining, 0))
ChkHr(StringCchCatExW(pszLanguagesEnd, cchRemaining, pszLanguage, &pszLanguagesEnd, &cchRemaining, 0))
ChkHr(StringCchCatW(szQueryUri, (sizeof(*RtlpNumberOf(szQueryUri))), L"v6.0/collections/consume"))
ChkHr(StringCchCatW(szQueryUri, (sizeof(*RtlpNumberOf(szQueryUri))), L"v6.0/collections/query"))
ChkHr(StringCchCopyA(szDestFileNameA, (sizeof(*RtlpNumberOf(szDestFileNameA))), pszDest))
ChkHr(StringCchCopyExW( pszRemaining, cchRemaining, escapedData.GetRawBuffer(nullptr), &pszRemaining, &cchRemaining, 0x00000100))
ChkHr(StringCchCopyExW( pszRemaining, cchRemaining, L"=", &pszRemaining, &cchRemaining, 0x00000100))
ChkHr(StringCchCopyExW( pszRemaining, cchRemaining, seenQuestionMark ? L"&" : L"?", &pszRemaining, &cchRemaining, 0x00000100))
ChkHr(StringCchCopyExW( pszRemaining, cchRemaining, tagName.GetRawBuffer(nullptr), &pszRemaining, &cchRemaining, 0x00000100))
ChkHr(StringCchCopyExW(pszRemaining, cchRemaining, L"/", &pszRemaining, &cchRemaining, 0))
ChkHr(StringCchCopyExW(pszRemaining, cchRemaining, pszUriBase, &pszRemaining, &cchRemaining, 0))
ChkHr(StringCchCopyExW(pszRemaining, cchRemaining, WindowsGetStringRawBuffer(nameValuePairs[i].value, nullptr), &pszRemaining, &cchRemaining, 0x00000100))
ChkHr(StringCchCopyNExW(pszRemaining, cchRemaining, pszFormatCursor, pszOpenBrace - pszFormatCursor, &pszRemaining, &cchRemaining, 0))
ChkHr(StringCchCopyW(pszIdValue, cchIdValue, L"Public"))
ChkHr(StringCchCopyW(pszRemaining, cchRemaining, pszFormatCursor))
ChkHr(StringCchCopyW(szQueryUri, (sizeof(*RtlpNumberOf(szQueryUri))), collectionsUriBase.GetRawBuffer(nullptr)))
ChkHr(StringCchPrintfW( buffer, (sizeof(*RtlpNumberOf(buffer))), L"%s%02d:%02d:%09.6f", isNegative ? L"-" : L"", hours, minutes, seconds))
ChkHr(StringCchPrintfW( buffer, (sizeof(*RtlpNumberOf(buffer))), L"%s%d.%02d:%02d:%09.6f", isNegative ? L"-" : L"", static_cast<int>(days), hours, minutes, seconds))
ChkHr(StringCchPrintfW( spszDestBuffer, cchDestBuffer, pszFormat, szEncodedMoId, szEncodedOemId, szEncodedScmId ))
ChkHr(StringCchPrintfW( szNextUrl, (sizeof(*RtlpNumberOf(szNextUrl))), _runningCount == 0 ? L"%ws" : L"%ws&$skip=%u", _hstrUri.GetRawBuffer(nullptr), _runningCount))
ChkHr(StringCchPrintfW(pszBuffer, cchBuffer, L"%s:%s", header, value))
ChkHr(StringCchPrintfW(szArgument, (sizeof(*RtlpNumberOf(szArgument))), L"0x%X", hr))
ChkHr(StringCchPrintfW(szSeedName, (sizeof(*RtlpNumberOf(szSeedName))), L"%s-%s-%d-%s", WindowsGetStringRawBuffer(geoId, nullptr), WindowsGetStringRawBuffer(language, nullptr), static_cast<UINT32>(eReceiptType), WindowsGetStringRawBuffer(featureName, nullptr)))
ChkHr(StringHelpers::DecodeBase64( HStringReference(customPolicyEncoded.GetPtr(), customPolicyLength).Get(), customPolicyDecoded.GetAddressOf()))
ChkHr(StringHelpers::Join( _productKinds.Get(), false, productKindsWithCommas.GetAddressOf()))
ChkHr(StringHelpers::Join( productKinds, false, productKindsWithCommas.GetAddressOf()))
ChkHr(StringHelpers::Join( productKinds.Get(), false, productKindsWithCommas.GetAddressOf()))
ChkHr(StringHelpers::Join( storeIds, false, storeIdsWithCommas.GetAddressOf()))
ChkHr(StringHelpers::Join( storeIds.Get(), false, storeIdsWithCommas.GetAddressOf()))
ChkHr(StringHelpers::Join(_newOrder.Get(), false, productIdList.GetAddressOf()))
ChkHr(StringHelpers::Join(productIds, false, productIdsString.GetAddressOf()))
ChkHr(StringHelpers::SplitString(data.Get(), L":", quantityParts.GetAddressOf()))
ChkHr(StringHelpers::SplitString(rawInputTag.Get(), L":", &tagComponents))
ChkHr(StringHelpers::SplitString(storeId, g_pszStoreIdSeparator, &storeIdComponents))
ChkHr(StringHelpers::TrimEnds(inputTag, 1, rawInputTag.GetAddressOf()))
ChkHr(StringHelpers::TrimString(output.Get(), uriOutput))
ChkHr(StringHelpers::TrimString(result.Get(), hstrUri))
ChkHr(StringToFileTime(timeString.GetRawBuffer(nullptr), &ft, 0))
ChkHr(strPrefixAuthToken.CopyTo(ticket.ReleaseAndGetAddressOf()))
ChkHr(strProductId.Set(pszProductId))
ChkHr(substituteValue->get_ValueType(&valueType))
ChkHr(substituteValue->GetArray(&substituteArray))
ChkHr(substituteValue->GetNumber(&substituteNumber))
ChkHr(substituteValue->GetObjectW(&substituteObject))
ChkHr(substituteValue->GetString(substituteString.GetAddressOf()))
ChkHr(supplement.As(&supplement4))
ChkHr(supplement->get_Id(packageId.ReleaseAndGetAddressOf()))
ChkHr(supplement4->get_IsOptional(&isOptional))
ChkHr(supplementalPackages->get_Size(&supplementalPackagesSize))
ChkHr(supplementalPackages->GetAt(i, supplement.GetAddressOf()))
ChkHr(supportedFeaturesVector->GetView(&resultsView))
ChkHr(systemFeatures->First(&spIterator))
ChkHr(tag.Set(pszOpenBrace, static_cast<UINT32>(pszCloseBrace - pszOpenBrace) + 1))
ChkHr(tagComponents->get_Size(&tagComponentsSize))
ChkHr(tagComponents->GetAt(0, outputKey))
ChkHr(tagComponents->GetAt(1, outputName))
ChkHr(tagComponents->GetAt(2, outputMeta))
ChkHr(temp.Set(InternalGetRuntimeClassName()))
ChkHr(temp.Set(pszUri))
ChkHr(temp.Set(shReceipt))
ChkHr(temp.Set(spszFormattedPrice))
ChkHr(temp.Set(wszAppId))
ChkHr(threadContext._devOfferId.Set(devOfferId))
ChkHr(threadContext._inAppOfferToken.Set(inAppOfferToken))
ChkHr(threadContext._inAppProductId.Set(productId))
ChkHr(threadContext._inAppProductSkuId.Set(skuId))
ChkHr(threadContext._nameOverride.Set(nameOverride))
ChkHr(threadContext._PFN.Set(PFN))
ChkHr(threadContext.DoWork())
ChkHr(TrimString(result.Get(), resultString))
ChkHr(ULongMult(static_cast<DWORD>(wcslen(value)) + 1, sizeof(*value), &dwSize))
ChkHr(UMgrQueryUserToken(userContextToken, &userToken))
ChkHr(UninstallStorePackageAsyncHelper(cv, __FSTREXP __FUNCTION__  , 0, packageFamilyName.Get(), false , operation))
ChkHr(UninstallStorePackageAsyncHelper(cv, __FSTREXP __FUNCTION__  , 0, packageFamilyName.Get(), true , operation))
ChkHr(UninstallStorePackageAsyncHelper(cv, __FSTREXP __FUNCTION__  , storeId, 0, false , operation))
ChkHr(UninstallStorePackageAsyncHelper(cv, __FSTREXP __FUNCTION__  , storeId, 0, true , operation))
ChkHr(UnpackHStringIIterable(inAppOfferTokens, &_inAppOfferTokens))
ChkHr(UnpackHStringIIterable(keywords, &_keywords))
ChkHr(update.As(&updatePrivate))
ChkHr(updateIterator->get_Current(&update))
ChkHr(updateIterator->get_HasCurrent(&hasCurrent))
ChkHr(updateIterator->MoveNext(&hasCurrent))
ChkHr(updatePrivate->get_StoreQueueItem(&storeQueueItem))
ChkHr(updates->Append(storePackageUpdate.Get()))
ChkHr(updates->First(&updateIterator))
ChkHr(updates->GetView(queuedItems))
ChkHr(uriEscapeStatics->EscapeComponent(substituteString.Get(), escapedData.GetAddressOf()))
ChkHr(uriFactory->CreateUri(hstrURL, &uri))
ChkHr(UriHelper::GetUri(UriHelper::LinkUriFormat, rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), pLinkUri))
ChkHr(UriHelper::GetUri(UriHelper::MDCollections, collectionsUriBase.GetAddressOf()))
ChkHr(UriHelper::GetUri(UriHelper::MDGetAppReceiptsDesktop, rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrServiceUri.GetAddressOf()))
ChkHr(UriHelper::GetUri(UriHelper::MDGetAppReceiptsMobile, rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrServiceUri.GetAddressOf()))
ChkHr(UriHelper::GetUri(UriHelper::MDGetOneProductReceiptMobile, rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrServiceUri.GetAddressOf()))
ChkHr(UriHelper::GetUri(UriHelper::OneStoreAuthenticationDomain, hstrAuthDomain.GetAddressOf()))
ChkHr(UriHelper::GetUriWithPath( UriHelper::MDCollections, HStringReference(L"v6.0/beneficiaries/me/keys").Get(), collectionKeysUri.GetAddressOf()))
ChkHr(UriHelper::GetUriWithPath( UriHelper::MDPurchase, HStringReference(L"v6.0/users/me/keys").Get(), purchaseKeysUri.GetAddressOf()))
ChkHr(UriHelper::GetUriWithPathAndParameters( UriHelper::MDDisplayCatalog, CSP6Internal::GetProductDetailsPath(), rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrUri.GetAddressOf()))
ChkHr(UriHelper::GetUriWithPathAndParameters( UriHelper::MDDisplayCatalog, CSP6Internal::GetSearchAddOnsPath(), rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), _hstrUri.GetAddressOf()))
ChkHr(UriHelper::GetUriWithPathAndParameters( UriHelper::MDDisplayCatalog, CSP6Internal::GetSearchProductsByPackageFamilyNamePath(), rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrUri.GetAddressOf()))
ChkHr(UriHelper::GetUriWithPathAndParameters( UriHelper::MDDisplayCatalog, CSP6Internal::GetSearchSkusByContentIdPath(), rgNameValuePairs, (sizeof(*RtlpNumberOf(rgNameValuePairs))), hstrUri.GetAddressOf()))
ChkHr(UriHelperInternal::GetUriEx(s_rghstrUris, uri, nameValuePairs, cNameValuePairs, false, hstrUri))
ChkHr(UriHelperInternal::GetUriEx(s_rghstrUris, uri, nullptr, 0, false, hstrUri))
ChkHr(UriHelperInternal::GetUriString(rghstrUris, index, &pszInitialUri))
ChkHr(UriHelperInternal::GetUriString(rghstrUris, index, &pszUriBase))
ChkHr(UriHelperInternal::GetUriString(s_rghstrUris, uri, &pszUri))
ChkHr(UriHelperInternal::GetUriString(s_rghstrUrisSLS, uri, &pszUri))
ChkHr(UriHelperInternal::GetUriWithPathAndParametersEx( s_rghstrUris, uriBase, hstrPath, nameValuePairs, cNameValuePairs, hstrUri))
ChkHr(UriHelperInternal::GetUriWithPathAndParametersEx(s_rghstrUris, uriBase, hstrPath, nullptr, 0, hstrUri))
ChkHr(UriHelperV7::GetIndexedEntry(slsUri, requestKind, entry.GetAddressOf()))
ChkHr(UriHelperV7::GetRawString(UriHelperV7::DeviceFamily, deviceFamily.GetAddressOf()))
ChkHr(UriHelperV7::GetRawString(UriHelperV7::ModalFlowSizes, modalFlowSizes.GetAddressOf()))
ChkHr(UrlEscapeW(idValueUnescaped.GetRawBuffer(nullptr), pszIdValue, &cchIdValue, 0))
ChkHr(userAuth->GetNamedArray(userSid.Get(), &jsonBeneficiaries))
ChkHr(UserAwareCallerIdentity::GetCallingProcessPackageFullName(packageFullName))
ChkHr(UserAwareCallerIdentity::GetCallingProcessUserContext(&userContextToken))
ChkHr(userLocale.Set(locale))
ChkHr(userLocale.Set(szUserLocale))
ChkHr(userMgr.As(&signInMgr))
ChkHr(UuidCreate(&anid))
ChkHr(UuidFromStringW((PWCHAR)_transactionId.GetRawBuffer(nullptr), _pTransactionId))
ChkHr(value.As(&propValue))
ChkHr(value->get_Value(&dwValue))
ChkHr(Vector<HSTRING>::Make(&_bigIds))
ChkHr(Vector<HSTRING>::Make(&_bundledSkuIds))
ChkHr(Vector<HSTRING>::Make(&_keywords))
ChkHr(Vector<HSTRING>::Make(&bigIds))
ChkHr(Vector<HSTRING>::Make(&contentIds))
ChkHr(Vector<HSTRING>::Make(&ids))
ChkHr(Vector<HSTRING>::Make(&keyIds))
ChkHr(Vector<HSTRING>::Make(&licensedProducts))
ChkHr(Vector<HSTRING>::Make(&productIds))
ChkHr(Vector<HSTRING>::Make(&productKinds))
ChkHr(Vector<HSTRING>::Make(&spIds))
ChkHr(Vector<HSTRING>::Make(&storeIds))
ChkHr(Vector<Package*>::Make(&appmodelPackages))
ChkHr(Vector<StoreAvailability*>::Make(&sortedAvailabilities))
ChkHr(Vector<StoreImage*>::Make(&_images))
ChkHr(Vector<StoreSku*>::Make(&sortedSkus))
ChkHr(Vector<StoreSystemFeature>::Make(&supportedFeaturesVector))
ChkHr(Vector<StoreVideo*>::Make(&_videos))
ChkHr(Vector<UnfulfilledConsumable*>::Make(&_spUnfulfilledList))
ChkHr(Vector<UnfulfilledConsumable*>::Make(&m_spUnfulfilledList))
ChkHr(Vector<UnfulfilledConsumable*>::Make(&spUnfulfilledList))
ChkHr(VerifyCapability(requestParams.requiredCapability.Get()))
ChkHr(VerifyCapability(StoreConfigurationCapability.Get()))
ChkHr(VerifyCapability(StoreLicenseManagement.Get()))
ChkHr(wil::com_weak_query_nothrow(this, &weakThis))
ChkHr(Windows::Foundation::ActivateInstance( HStringReference(RuntimeClass_Windows_UI_Popups_UICommand).Get(), &spCommand))
ChkHr(Windows::Foundation::GetActivationFactory( HStringReference(RuntimeClass_Windows_Foundation_Uri).Get(), &uriFactory))
ChkHr(Windows::Foundation::GetActivationFactory( HStringReference(RuntimeClass_Windows_Web_Http_HttpStringContent).Get(), &contentFactory))
ChkHr(Windows::Foundation::GetActivationFactory( Microsoft::WRL::Wrappers::HStringReference(RuntimeClass_Windows_Internal_Shell_ModalExperience_ModalExperienceManager).Get(), &memStatics))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(L"Windows.Foundation.Uri").Get(), &activationFactory))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonArray).Get(), &spJsonArrayStatics))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), &jsonObjectStatics))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), &spJsonObjectStatics))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonObject).Get(), &spJsonStatics))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_Storage_Streams_DataReader).Get(), &dataReaderFactory))
ChkHr(Windows::Foundation::GetActivationFactory(HStringReference(RuntimeClass_Windows_System_Profile_AnalyticsInfo).Get(), &spAnalyticsInfo))
ChkHr(Windows::Foundation::GetActivationFactory(UserManagerClassId.Get(), &userMgr))
ChkHr(WindowsCompareStringOrdinal(productId, _currentProductBeingPurchased.Get(), &comparisonResult))
ChkHr(WindowsConcatString( HStringReference(L"WLID1.0=").Get(), ticket, formattedAuthToken.GetAddressOf()))
ChkHr(WindowsConcatString( productId, StoreIdSeparator.Get(), productIdWithSeparator.GetAddressOf()))
ChkHr(WindowsConcatString( productIdSkuId.Get(), StoreIdSeparator.Get(), productIdSkuIdWithSeparator.GetAddressOf()))
ChkHr(WindowsConcatString( productIdSkuIdWithSeparator.Get(), availabilityId, storeId))
ChkHr(WindowsConcatString( productIdWithSeparator.Get(), skuId, productIdSkuId.GetAddressOf()))
ChkHr(WindowsConcatString(EntitlementFilterPrefix.Get(), productKind.Get(), entitlementFilter.GetAddressOf()))
ChkHr(WindowsConcatString(HStringReference(L"http:").Get(), _hstrImageUri.Get(), uri.GetAddressOf()))
ChkHr(WindowsConcatString(HStringReference(L"http:").Get(), _ImageUri.Get(), uri.GetAddressOf()))
ChkHr(WindowsConcatString(HStringReference(L"http:").Get(), _VideoUri.Get(), uri.GetAddressOf()))
ChkHr(WindowsConcatString(HStringReference(L"WLID1.0=").Get(), authTicket, hstrAuthTicketWithPrefix.GetAddressOf()))
ChkHr(WindowsCreateString(pszResource, cch, jsonString))
ChkHr(WindowsCreateString(reinterpret_cast<PCWSTR>(pbReceipt), cbReceipt / 2, receipt))
ChkHr(WindowsCreateString(sidString, (UINT32)wcslen(sidString), sid))
ChkHr(WindowsCreateString(spszDestBuffer, (UINT32)wcslen(spszDestBuffer), pDeviceContext))
ChkHr(WindowsDuplicateString(_licensableSku.Get(), pValue))
ChkHr(WindowsPromoteStringBuffer(buffer, string))
ChkHr(WindowsSubstring(inputString, lastDelimeterIndex, output.GetAddressOf()))
ChkHr(WindowsSubstringWithSpecifiedLength(hstrReceiptContent.Get(), 9, WindowsGetStringLen(hstrReceiptContent.Get()) - 12, receipt))
ChkHr(WindowsSubstringWithSpecifiedLength(inputString, lastDelimeterIndex, delimeterIndex - lastDelimeterIndex, output.GetAddressOf()))
ChkHr(WinStoreAuth::AuthenticationInternal::GetDeviceTicketWithBroker( true, authToken.GetAddressOf()))
ChkHr(WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountTicket( 0, WinStoreAuth::AuthenticationEndpoint::OneStore, WinStoreAuth::PromptType::Silent, false, nullptr, authTicket.GetAddressOf(), providerType, spWebTokenRequestResult.GetAddressOf()))
ChkHr(WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountTicket( 0, WinStoreAuth::AuthenticationEndpoint::OneStore, WinStoreAuth::PromptType::Silent, WinStoreAuth::AuthenticationInternal::UseXToken(), _user.Get(), authTicket.GetAddressOf(), providerType, spPrimaryAccountTokenRequestResult.GetAddressOf()))
ChkHr(WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountTicket( 0, WinStoreAuth::AuthenticationEndpoint::OneStore, WinStoreAuth::PromptType::Silent, WinStoreAuth::AuthenticationInternal::UseXToken(), user.Get(), authTicket.GetAddressOf(), providerType, spPrimaryAccountTokenRequestResult.GetAddressOf()))
ChkHr(WinStoreAuth::AuthenticationInternal::PrefixTicketForMDollar((WinStoreAuth::AccountProviderType)requestParams.authType, authToken.Get(), strAuthTokenPrefixed.GetAddressOf()))
ChkHr(WinStoreAuth::AuthenticationInternal::PrefixTicketForMDollar(providerType, ticket.Get(), strPrefixAuthToken.GetAddressOf()))
ChkHr(WinStoreAuth::ConvertWebAccountIdFromRealIdToAppForUser(_user.Get(), authType, hstrPurchaseAppPfn.Get(), userId.Get(), realId.GetAddressOf()))
ChkHr(WSCollector::CollectStoreLog(options, resultsView))
ChkReturn(((HRESULT)0x80040001L))
ChkReturn(((HRESULT)0x80040002L))
ChkReturn(((HRESULT)0x8007000EL))
ChkReturn(_productIdTable->Lookup(inAppOfferToken, productId))
ChkReturn(hr)
ChkReturn(HRESULT_FROM_WIN32(1168L))
ChkWin32(Expr)
CHttpConnection::_Initialize
CHttpConnection::Connect
CHttpConnectionCache::GetConnection
CHttpRequest response header: %s : %s
CHttpRequest::_AddDebugHeaderIfPresent
CHttpRequest::_AppendToDataBuffer
CHttpRequest::_CreateConnectionAndSendRequest
CHttpRequest::_DownloadData
CHttpRequest::_GetProxyInfoForUrl
CHttpRequest::_LocalAllocHeader
CHttpRequest::_ReceiveResponse
CHttpRequest::_SendRequestWithRetry
CHttpRequest::_SetProxyForCurrentRequest
CHttpRequest::_WaitForLastAsyncCompletion
CHttpRequest::_WinHttpCompletionCallback
CHttpRequest::~CHttpRequest
CHttpRequest::AbortRequest
CHttpRequest::AddRequestHeader
CHttpRequest::Initialize
CHttpRequest::s_WinHttpCompletionCallback
CHttpRequest::SetAuthorizationHeader
CHttpRequest::UploadAndFetchResource
CHttpRequest::UploadAndFetchResourceByUrl
CHttpSession::_Initialize
className
Cleared event hander for item %s
Client_ShowSkipForceAuthentication
ClientProcessUtils::CheckMultipleUserSupport
ClientProcessUtils::EnsureWindowFromCallingProcess
ClientProcessUtils::GetAppContentTypeForInstalledPackage
ClientProcessUtils::GetCallerTokenFromComCall
ClientProcessUtils::GetCallingAppName
ClientProcessUtils::GetCallingAppPackage
ClientProcessUtils::GetCallingAppPackage(_user.Get(), package.GetAddressOf())
ClientProcessUtils::GetCallingAppPackageFamilyName
ClientProcessUtils::GetCallingAppPackageFullName
ClientProcessUtils::GetCallingAppPackageFullName(_PFN.GetAddressOf())
ClientProcessUtils::GetCallingAppPackageFullName(m_PFN.GetAddressOf())
ClientProcessUtils::GetCallingAppSessionGuid
ClientProcessUtils::GetCallingAppSupportsMultipleUser
ClientProcessUtils::GetCallingAppWindowHandle
ClientProcessUtils::GetCallingAppWindowHandleFromThreadId
ClientProcessUtils::GetModalExperienceManager
ClientProcessUtils::GetSidForUser
ClientProcessUtils::GetWindowHandle
ClientProcessUtils::IsCallerERA
CloseHandle
CloseState
CloseThreadpoolTimer
cNameValuePairs >= 0
CoCreateFreeThreadedMarshaler
CoCreateInstance
CoGetApartmentType
CoGetCallContext
CoGetCallerTID
CoGetInterfaceAndReleaseStream
CoGetMalloc
CoImpersonateClient
CollectionData
CollectionsServiceProxyV6::ConsumeConsumable
CollectionsServiceProxyV6::GetCampaignId
CollectionsServiceProxyV6::GetUnfulfilledConsumables
CoMarshalInterface
combase.dll
CompanyName
CompareFileTime
CompareStringOrdinal
CompareStringW
ComposeLegacyXboxContentIdFromInstalledContentId
Conditions
ConstrainedImpersonateLoggedOnUser::GenerateImpersonationToken
Consumable
consumableProductId
consumers
ContentIds
continuationToken
Conversion to hex failed: %s
Conversion to UINT64 failed: %s
Converted Store Queue State for Package %s - AppInstallState: %d and IsStaged: %s and IsDownloaded: %s to StoreQueueItemState: %d and StoreQueueItemExtendedState: %d
ConvertSidToStringSidW
CopySid
CoReleaseMarshalData
CoRevertToSelf
CoRevertToSelf()
CoSetProxyBlanket
CoSwitchCallContext
CoTaskMemAlloc
CoTaskMemFree
CoTaskMemRealloc
CoWaitForMultipleHandles
CreateDirectoryW
CreateEvent failed
CreateEventExW
CreateEventW
CreateFileA
CreateFileW
CreateGetItemsRequest
CreateListingInformation
CreateMutexExW
CreateProcessW
CreateRandomAccessStreamOverStream
CreateSemaphoreExW
CreateStreamOnHGlobal
CreateThreadpoolTimer
Creating reg.exe process failed
CryptAcquireContextW
CryptCreateHash
CryptDestroyHash
CryptGetHashParam
CryptHashData
CryptReleaseContext
CRYPTSP.dll
CSP6Internal::CreateCatalogHttpClient
CStdStubBuffer_AddRef
CStdStubBuffer_Connect
CStdStubBuffer_CountRefs
CStdStubBuffer_DebugServerQueryInterface
CStdStubBuffer_DebugServerRelease
CStdStubBuffer_Disconnect
CStdStubBuffer_Invoke
CStdStubBuffer_IsIIDSupported
CStdStubBuffer_QueryInterface
CStdStubBuffer2_Connect
CStdStubBuffer2_CountRefs
CStdStubBuffer2_Disconnect
CStdStubBuffer2_QueryInterface
CurrencyCode
CurrencySymbol
CurrentApp.AppId
CurrentApp.GetAppPurchaseCampaignIdAsync
CurrentApp.GetAppReceiptAsync
CurrentApp.GetCustomerCollectionsIdAsync
CurrentApp.GetCustomerPurchaseIdAsync
CurrentApp.GetProductReceiptAsync
CurrentApp.GetUnfulfilledConsumablesAsync
CurrentApp.LicenseInformation
CurrentApp.LinkUri
CurrentApp.LoadListingInformationAsync
CurrentApp.ReportConsumableFulfillmentAsync
CurrentApp.ReportProductFulfillment
CurrentApp.RequestAppPurchaseAsync
CurrentApp.RequestProductPurchaseAsync
CurrentApp.RequestProductPurchaseWithDisplayPropertiesAsync
CurrentApp.RequestProductPurchaseWithResultsAsync
currentContextId
currentContextMessage
currentContextName
CurrentEraTitleInfo::GetAppId
CurrentEraTitleInfo::GetProxyAppPid
CustomDeveloperData
CWSHttpHelper::AddTHAdditionalHeaders
CWSHttpHelper::AddTHAdditionalRequestHeader
CWSHttpHelper::FetchURL
D$ 9D$
D$ Ph
D$ Php
D$ PhP
D$ Pj
D$ PjEh@`
D$ PQ
D$ PSSSS
D$ PSV
D$ PSW
D$ PV
D$ QQ
D$$Ph
D$$Pj
D$$PQ
D$$QQVh
D$(;D$ 
D$(P2
D$(Ph
D$(Ph0
D$(PhX
D$(Pj
D$(PQ
D$(PS
D$(PV
D$(PW
D$(SV
D$(SV3
D$,PQ
D$,PQQ
D$,PV
D$,QQj
D$,SQj
D$,YY9D$
D$@;D$\r
D$@PQ
D$@PQQ
D$\PQ
D$\PS
D$\PV
D$\QQ
D$`98
D$`PV
D$<Pj
D$<PQ
D$<PV
D$<PW
D$0;D$4r
D$0P3
D$0Ph
D$0Ph8
D$0PjEh@`
D$0PQ
D$0PV
D$0PW
D$3PV
D$4PQ
D$4PV
D$4WP
D$8;D$L
D$8Pj
D$8PQ
D$8PV
D$8QQWh
D$DPQ
D$DPSV
D$DPV
D$dQQ
D$DSP
D$Hl5
D$hPQQ
D$HPQQ
D$HPW
D$LPQ
D$LPV
D$lSP
D$pPh
D$PPj
D$PPV
D$TPj
D$tPV
D$XSV
d/Zc1q
DataDownloaded callback failed
DebugBreak
DecodePointer
defaultValue
DelayLoadFailureHook
DeleteCriticalSection
DeleteFileA
DeleteFileW
Developer
DeviceContext
deviceFamily
DeviceFamily
deviceMoid
deviceOemid
deviceScmid
devOfferId
DevOfferId
DisableThreadLibraryCalls
DisplayProductSearchResult
DisplayRank
DisplaySkuAvailabilities
DisplaySkuSearchResult
DllCanUnloadNow
DllGetActivationFactory
DllGetClassObject
DoDelete
DoHead
DoOptions
DoPatch
DoPost
DoPut
DPA_SortedInsertPtr failed on handle 0x%08x for %s:%d
dQVhH
DumpListingToDebugger
DuplicateTokenEx
Durable
Duration
dwContext != 0
DWordAdd(dwNeeded, 1, &cbSizeToAlloc)
DwYboV
E(SVW
e/X4V
E;lVi
E_NOT_SET
Eh-'=
Ehttp://crl.microsoft.com/pki/crl/products/MicCodSigPCA_2010-07-06.crl0Z
Ehttp://crl.microsoft.com/pki/crl/products/MicRooCerAut_2010-06-23.crl0Z
Ehttp://crl.microsoft.com/pki/crl/products/MicTimStaPCA_2010-07-01.crl0Z
enabled
EnabledFeatureUsage
EncodePointer
EndDate
EndOperation
EnterCriticalSection
Enterprise
entitlementFilters
entitlementId
Entry cannot have a Body Template: %s
Entry requires a Body Template: %s
en-US
eReceiptType
ERROR
Error
error
Error
Error Code
ErrorCode
ErrorLocation
ErrorMessage
ErrorMethod
EtwEventEnabled
EtwEventRegister
EtwEventSetInformation
EtwEventUnregister
EtwEventWrite
EtwEventWriteTransfer
EventActivityIdControl
EventData
EventRegister
EventSetInformation
EventUnregister
EventWriteTransfer
EvtExportLog
EvWW{U
Exception
Exception Details
ExpandEnvironmentStringsA
ExpandEnvironmentStringsW
expandSatisfyingItems
expiration
ExtendedData
ext-ms-win-appmodel-state-ext-l1-2-0.dll
ext-ms-win-core-licensemanager-l1-1-0
ext-ms-win-core-licensemanager-l1-1-0.dll
ext-ms-win-core-licensemanager-l1-1-1
ext-ms-win-kernel32-package-l1-1-0.dll
ext-ms-win-ntuser-keyboard-l1-1-0.dll
ext-ms-win-ntuser-keyboard-l1-3-0.dll
ext-ms-win-rtcore-ntuser-window-ext-l1-1-0.dll
ext-ms-win-session-usermgr-l1-1-0
ext-ms-win-session-usermgr-l1-1-0.dll
ext-ms-win-session-usermgr-l1-2-0
F Ph<)
F Php$
F Php7
F$9^,u
f;F$u
f;F.u
F|zB/
F0X0f0
Failed
Failed to convert systemtime to filetime
Failed to find substitute value with key %s and no default value provided.
Failed to find substitute value with key %s!
Failed to parse property '%s'
Failed to substitute value with key %s because we were given an invalid type!
FailFast
failureCount
failureId
failureType
FallbackError
FallbackToDeviceAuth
false
FALSE
false && "AppInstallItem returned an unexpected InstallType!"
false && "Store service returned an unexpected enum!"
featureBaseVersion
FeatureError
featureId
featureStage
FeatureUsage
FeatureVariantUsage
featureVersion
File Name
FileDescription
fileName
FileTimeToDosDateTime
FileTimeToLocalFileTime
FileTimeToSystemTime
FileVersion
FilterIAPs
FindClose
FindFirstFileA
FindFirstFileExA
FindNextFileA
FindResourceExW
FindWindowExW
floor
FlushTrace for %s failed
FlushTraces
FlushTraceW
ForcePrompt
ForceRetailSandbox
FormatMessageW
FormatNameValuePairs
Found matching package for %s
Found update for package = %s
Foundation
FreeLibrary
FreeResource
FreeSid
FRtlQueryFeatureConfiguration
Fsq^V
FulfillmentType
Function
function
Function
FWindows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreUninstallStorePackageResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreUninstallStorePackageResult *>,0>::DoWorkStub
G ;A0t(
G"G:L
G0;A@t(
G4VVWP
gaming*.etl
GdPh@\
get_AppId() invoked.
get_LicenseInformation() invoked.
get_LinkUri() invoked.
GetAppPurchaseCampaignIdAsync invoked.
GetAppReceiptAsync() invoked.
GetCallingProcessPackageFullName
GetContinuationToken
GetCurrencyFormatEx
GetCurrentPackageFullName
GetCurrentProcess
GetCurrentProcessId
GetCurrentThread
GetCurrentThreadId
GetCustomerCollectionsIdAsync() invoked.
GetCustomerPurchaseIdAsync() invoked.
GetERAPackageFullNameByAumid
GetExitCodeProcess
GetExitCodeProcess failed
GetFileInformationByHandle
GetFileSize
GetForegroundWindow
GetFormattedPriceUsingCurrencyFormatter
GetGeoInfoW
GetHttpResponse
GetLastError
GetLastError()
GetLengthSid
GetLocaleInfoEx
GetLocalTime
GetModuleFileNameA
GetModuleHandleExA
GetModuleHandleExW
GetModuleHandleW
GetPackageFamilyNameFromToken
GetPackageFullName
GetPackageFullNameFromToken
GetPriceInfo
GetPriceInfoFromAvailability
GetProcAddress
GetProcessHeap
GetProcessId
GetProcessIdOfThread
GetProductReceiptAsync(%s) invoked.
GetRequiredEkbFromContentId
GetRestrictedErrorInfo
GetStateFolder
GetSystemTime
GetSystemTimeAsFileTime
GetTempFileNameA
GetTempPath2W
GetTempPath2W failed
GetTempPathA
GetTickCount
GetTickCount64
GetTokenInformation
GetUnfulfilledConsumablesAsync() invoked.
GetUserDefaultLocaleName
GetUserGeoID
GetVersionExA
GetWindowTextW
GetWindowThreadProcessId
GlobalFree
Going to catalog again to find BigCatId: QueryCatalogForBigCatIdByPackageFullNameAndType
Going to catalog to find BigCatId: QueryCatalogForBigCatIdByPackageFullName
goldenBeneficiary
goldenBeneficiaryArray
Got event for item with Package Family Name %s after the events were unregistered.
H|P~\
H4hHq
H9-?7
Hardware
HasMorePages
HasPreviewCapability
HasTrial
HeapAlloc
HeapFree
HeapReAlloc
Height
hh1Sm
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\SIH
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Dnscache\Parameters\DnsPolicyConfig
hModule != nullptr
Hr(JsonHelpers::SetNamedObject(jsonParameters, jsonSubstitutionList->destinationKey.GetRawBuffer(nullptr), jsonBeneficiary))
hresult
HRESULT_FROM_WIN32(1317L)
HResultOfOperation
hrInfo
HSTRING_UserFree
HSTRING_UserMarshal
HSTRING_UserSize
HSTRING_UserUnmarshal
HStringBufferWrapper::Promote
http%s://%s/%s
http:
https://
https://login.microsoft.com
https://login.windows.local
https://login.windows.net/common
https://onestore.microsoft.com
https://purchase.mp.microsoft.com
i[i~''
I_RpcBindingInqLocalClientPID
I0G1-0+
I8QWh
I'ae#
I'aonecoreuap\enduser\winstore\licensing\winrt\lib\StoreContext.h
IAPReceiptType_App
IAPReceiptType_OneProduct
IAPUtils::BuildEntitlementFiltersJSON
IAPUtils::BuildStoreId
IAPUtils::CheckProductKinds
IAPUtils::CombineProductsAndCollectionsJson
IAPUtils::ConstructSlsUri
IAPUtils::CreateHttpClient
IAPUtils::CreateHttpClientWithAuthHeader
IAPUtils::CreateHttpClientWithAuthIfAvailable
IAPUtils::CreateUri
IAPUtils::GetDeviceContextId
IAPUtils::GetDeviceContextString
IAPUtils::GetDeviceIds
IAPUtils::GetFormattedPrice
IAPUtils::GetJsonFromURL
IAPUtils::GetJsonFromURLWithHttpClient
IAPUtils::GetLanguage
IAPUtils::GetLanguages
IAPUtils::GetLanguagesString
IAPUtils::GetTimeSpanDifference
IAPUtils::IsCallingProcessAppContainer
IAPUtils::ParseStoreId
IAPUtils::ParseTimeSpan
IAPUtils::ParseTimeSpan(timeString.Get(), &date)
IAPUtils::ParseUriSubstitutionTag
IAPUtils::PostJsonToURLWithHttpClient
IAPUtils::SetDateTime
IAPUtils::TimeSpanToString
IAsyncAction
IAsyncOperation`1
IAsyncOperation`1<Boolean>
IAsyncOperation`1<String>
IAsyncOperation`1<Windows.ApplicationModel.Store.FulfillmentResult>
IAsyncOperation`1<Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult>
IAsyncOperation`1<Windows.ApplicationModel.Store.ListingInformation>
IAsyncOperation`1<Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults>
IAsyncOperation`1<Windows.ApplicationModel.Store.PurchaseResults>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>>
IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>>
IAsyncOperation`1<Windows.Security.Authentication.Web.Core.WebTokenRequestResult>
IAsyncOperation`1<Windows.Services.Store.StoreAcquireLicenseResult>
IAsyncOperation`1<Windows.Services.Store.StoreAppLicense>
IAsyncOperation`1<Windows.Services.Store.StoreCanAcquireLicenseResult>
IAsyncOperation`1<Windows.Services.Store.StoreConsumableResult>
IAsyncOperation`1<Windows.Services.Store.StoreProductPagedQueryResult>
IAsyncOperation`1<Windows.Services.Store.StoreProductQueryResult>
IAsyncOperation`1<Windows.Services.Store.StoreProductResult>
IAsyncOperation`1<Windows.Services.Store.StorePurchaseResult>
IAsyncOperation`1<Windows.Services.Store.StoreRateAndReviewResult>
IAsyncOperation`1<Windows.Services.Store.StoreSendRequestResult>
IAsyncOperation`1<Windows.Services.Store.StoreUninstallStorePackageResult>
IAsyncOperation`1<Windows.Storage.Streams.IRandomAccessStreamReference>
IAsyncOperation`1<Windows.UI.Popups.IUICommand>
IAsyncOperationWithProgress`2
IAsyncOperationWithProgress`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
identityType
identityValue
IdType
iertutil.dll
IIDFromString
ImagePurpose
Images
ImpersonateLoggedOnUser
inAppOfferToken
InAppOfferToken
includeReceipt
includeRelationship
Index
InitialDuration
InitializeCriticalSection
InitializeCriticalSectionEx
InitializeSRWLock
InitOnceBeginInitialize
InitOnceComplete
InitOnceExecuteOnce
innererror
Installs to complete, continuing
InsufficientConsumeQuantity
InternalName
InternalStoreEndpointExtensionUrls
InvokedApi
InvokePurchaseFlow
iR{I<
isActive
IsDebuggerPresent
isDiscLicense
IsErrorPropagationEnabled
isOptional
IsRecurring
IsRpcServerCallOnLocalTransport
IsTrial
isTrial
isTrialOwnedByThisUser
itemCount
items
Items
IUnknown_AddRef_Proxy
IUnknown_QueryInterface_Proxy
IUnknown_Release_Proxy
j h(w
j hpW
j"hH 
J%n%H
j.Xf9E
j:[f9
j;Xf9E
j;Zf;
j?)TM
j-_f;
j_h$i
j`h$i
j+Xf;
j+Zf;
j1hP_
jc_!0
JGFY__x_Windows_CInternal_CStore_CIPurchaseEventArgsRedstone
j'h n
jjjjjj
JQVhH
jQWhpN
Json document is missing a required field.
JSON_RESPONSE
JSON_RESPONSE(JSON_RESPONSE_ONE_STORE_CLIENT_DATA_URLS+JSON_RESPONSE_STORE_ENDPOINT_EXTENSION_URLS4JSON_RESPONSE_INTERNAL_STORE_ENDPOINT_EXTENSION_URLS
JSON_RESPONSE_INTERNAL_STORE_ENDPOINT_EXTENSION_URLS
JSON_RESPONSE_MODAL_FLOW_SIZES
JSON_RESPONSE_ONE_STORE_CLIENT_DATA_URLS
JSON_RESPONSE_STORE_ENDPOINT_EXTENSION_URLS
jsonArray->GetObjectAt(0, jsonElement.GetAddressOf())
jsonArray->GetObjectAt(i, jsonElement.GetAddressOf())
jsonArray->GetStringAt(i, text.GetAddressOf())
JsonHelpers::AppendObject
JsonHelpers::AppendString
JsonHelpers::GetArraySizeFromJsonArray
JsonHelpers::GetArraySizeFromJsonArray(jsonArray, &count)
JsonHelpers::GetArraySizeFromJsonArray(jsonArray, &len)
JsonHelpers::GetNamedDateTime
JsonHelpers::ParseToJsonArray
JsonHelpers::ParseToJsonObject
JsonHelpers::RemoveAt
JsonHelpers::SetNamedArray
JsonHelpers::SetNamedBool
JsonHelpers::SetNamedDateTime
JsonHelpers::SetNamedNull
JsonHelpers::SetNamedNumber
JsonHelpers::SetNamedObject
JsonHelpers::SetNamedString
JsonHelpers::SetNamedTimeSpan
JsonHelpers::Stringify
JsonHelpers::Stringify(_response, jsonResponse)
JsonHelpers::Stringify(productsResultObject, pCombinedJson)
jsonRequest: %s
jsonResponse: %s
jsonValue->GetArray(jsonArray.GetAddressOf())
jsonValue->GetBoolean(&value)
jsonValue->GetNumber(&result)
jsonValue->GetNumber(&valueAsDouble)
jsonValue->GetObject(jsonObject.GetAddressOf())
jsonValue->GetString(string.GetAddressOf())
jsonValue->GetString(timeString.GetAddressOf())
jSXf;
JTk_S/
j-Xf;F
j-Yf9L$8u
j-Zf;
k#|Aj;s
k0p0z0
kernelbase.dll
keybd_event
KeyIds
keywords
KnILk
Ko4Th$
L#EMQ!"
L$ ;u
L$ Qh
L$ QP
L$ QPh
L$ QRP
L$ QWP
L$ VW
L$$9L$
L$$QP
L$$QQ
L$$QQVWQ
L$$QRP
L$$SV
L$(QP
L$(QPh
L$(QPh0
L$(QQVW
L$(QS
L$(QSP
L$(QVPh0
L$(VW
L$,Qh
L$,QP
L$,QS
L$,QSP
L$,QVVPj
L$,QWP
L$;QP
L$@Pj
L$@QP
L$@QVPh
L$|QP
L$<QRP
L$<QVPQ
L$0QP
L$0QVPh
L$0QVPh@
L$0VW
L$4^3
L$4CS
L$4Pj
L$4PW
L$4Qh
L$4QP
L$4SV
L$7QP
L$8Qh
L$8QP
L$8QPh
L$8QPh0
L$8QVPh
L$8VW
L$D_^[3
L$dQP
L$DQP
L$GQP
L$HCS
L$HQP
L$hQP
L$KQP
L$kQP
L$l_^[3
L$lQP
L$LQP
L$PQP
L$pQP
L$PQWVPh
L$pVP
L$'QP
L$RQP
L$SQP
L$TQP
L$VQP
L$WQP
L$XCS
L$XQP
L$xQP
L$XQRP
L$XQVPj
l| H?p
l<?90
L0d0n0v0
Language
languages
latencyMs
LCMapStringEx
LeaveCriticalSection
LegacyWindowsPhoneLicensingData
Legal_Policy_Statement
LegalCopyright
length >= (count * 2)
licensableSku
licensableStatus
License Info for app %s: (CV = %hs)
LicensingData
Line Number
lineNumber
LineNumber
lineNumber
LineNumber
lineNumber
LineNumber
LinkUriFormat
Listing Information (after filtering, CV = %hs):
ListPrice
LLCu}
LoadAddOnProductInfosAsync() invoked.
LoadListingInformationAsync() invoked.
LoadListingInformationByKeywordsAsync() invoked.
LoadListingInformationByProductIdsAsync() invoked.
LoadResource
LoadStringW
Local\SM0:%lu:%lu:%hs
LocalAlloc
locale
LocalFree
LocalizedProperties
localTicketReference
LockResource
LogHr
LogMessage
LogNt
LogSimpleMessage
Lookup failed for user's ownership of the trial. isTrialOwnedByThisUser=%s
M QRSP
m_bInitialized
m_productId.CopyTo(productId)
Machine
MakeAndInitialize<StoreProductPagedQueryResult>( &_results, _products, productKinds.Get(), _maxCountPerPage, hasMorePages, _hresultOfOperation, _spNextQueryOperation)
MakeAndInitialize<StoreProductPagedQueryResult>( &_results, _products, productKinds.Get(), _maxPageSize, hasMorePages, _hresultOfOperation, _spNextQueryOperation)
MakeAndInitialize<StoreProductQueryResult>( &_results, _products, productKinds.Get(), ChkGetHr())
MakeAndInitialize<T>(&image, DEBUG_PARSER_PARAMETERS_ARGS jsonElement)
MakeAndInitialize<T>(obj.GetAddressOf(), DEBUG_PARSER_PARAMETERS_ARGS jsonObject)
malloc
MapVirtualKeyW
market
MarketProperties
maxItemsToRetrieve
maxItemsToRetrievePerPage
maxPageSize
MBI_SSL
mbi_ssl
mbstowcs_s
MDCollections
MDDisplayCatalog
MDGetAppReceiptsDesktop
MDGetAppReceiptsMobile
MDGetOneProductReceiptMobile
MDPurchase
Member Name
memcmp
memcpy
memcpy_s
memmove
memmove_s
memset
Message
message
Message
message
Message
message
Message
Messages
Microsoft
Microsoft Code Signing PCA 2010
Microsoft Code Signing PCA 20100
Microsoft Corporation
Microsoft Corporation0
Microsoft Corporation1
Microsoft Corporation1&0$
Microsoft Corporation1(0&
Microsoft Corporation1-0+
Microsoft Corporation1200
Microsoft Enhanced RSA and AES Cryptographic Provider
Microsoft Store Runtime DLL
Microsoft Time-Stamp PCA 2010
Microsoft Time-Stamp PCA 20100
Microsoft Time-Stamp Service
Microsoft Time-Stamp Service0
Microsoft.StorePurchaseApp_8wekyb3d8bbwe
Microsoft.StorePurchaseApp_8wekyb3d8bbwe!App
Microsoft.Windows.ApplicationModel.Store.Telemetry
Microsoft.Windows.Wil.FeatureLogging
MicrosoftTelemetryAssertTriggeredUM
Microsoft-Windows-AppXDeploymentServer/Operational
Microsoft-Windows-AppXDeploymentServer-Operational.evtx
Microsoft-Windows-Store/Operational
Microsoft-Windows-Store-Operational.evtx
Microsoft-Windows-TWinUI/Operational
Microsoft-Windows-TWinUI-Operational.evtx
Microsoft-Windows-WindowsUpdateClient/Operational
Microsoft-Windows-WindowsUpdateClient-Operational.evtx
minATL$__a
minATL$__m
minATL$__r
minATL$__z
MinimumUserAge
Minute
mL8.=`< 
mobilling.microsoft.com
MOBillingAuthenticationDomain
ModalFlow
ModalFlowSizes
modalManager->ShowForContractByAppID( hstrPurchaseAppUserModelId.Get(), StringReference(L"Windows.Launch").Get(), activatedEventArgs.Get(), modalExperienceOptions.Get(), reinterpret_cast<Windows::Internal::Shell::ViewManagerInterop::WindowInstanceId>(_hwnd), handler.Get(), &experienceToken)
modalManagerAsUser->ShowForContractByAppIDAsUser( hstrPurchaseAppUserModelId.Get(), StringReference(L"Windows.Launch").Get(), activatedEventArgs.Get(), modalExperienceOptions.Get(), reinterpret_cast<Windows::Internal::Shell::ViewManagerInterop::WindowInstanceId>(_hwnd), handler.Get(), userContextToken, &experienceToken)
module
Module Name
ModuleLoaded
moId=%s&oemId=%s&scmId=%s
Month
Moving %s to final state: %d
MSAHW1.0=
MS-CorrelationId
MS-CV
Msg:[%ws] 
MSIXVC
MS-RequestId
MS-SiteName
msvcrt.dll
ms-windows-store://signin
MultiByteToWideChar
MYF{m
N0L0J
nameValuePairs || (cNameValuePairs == 0)
ncalrpc
NdrClientCall4
NdrCStdStubBuffer_Release
NdrCStdStubBuffer2_Release
NdrDllCanUnloadNow
NdrDllGetClassObject
NdrOleAllocate
NdrOleFree
NdrStubCall2
NdrStubForwardingFunction
NehBUm3
networkError
NetworkError
neutral
NewQuantity
No contentInfo could be obtained from the preview license response.
No products found
No Sku Id could be obtained from the preview license response.
not set
NotPurchased
ntdll.dll
NtQueryInformationProcess
NtQueryWnfStateData
NtUpdateWnfStateData
number
-N-x-
O<VuEj
O0M0K
O0X0|0
object
Oc7Wa
OEMDiscoveryTTL
OEMID
oK0D$"<
OmitAuthTokenPrefix
onecore\internal\onecore\priv_sdk\inc\ConstrainedImpersonationUtil.h
onecore\internal\sdk\inc\wil\opensource\wil\com.h
onecore\internal\sdk\inc\wil\opensource\wil\resource.h
onecore\internal\sdk\inc\wil\Staging.h
onecore\internal\shell\inc\asyncoperationhelper.h
onecore\internal\shell\inc\AsyncOperationHelper.h
onecore\internal\shell\inc\windowsinternalstring.h
onecore\shell\lib\calleridentity\calleridentity.cpp
onecoreuap\enduser\winstore\auth\lib\winstoreauth.cpp
onecoreuap\enduser\winstore\auth\lib\winstoreauthstatics.cpp
onecoreuap\enduser\winstore\lib\httprequest.cpp
onecoreuap\enduser\winstore\licensing\winrt\dllsrv\windows\log.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\acquirestorelicenseforoptionalpackageoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\AsyncBase.h
onecoreuap\enduser\winstore\licensing\winrt\lib\AsyncBaseWithProgress.h
onecoreuap\enduser\winstore\licensing\winrt\lib\bulkhydrateoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\canacquirestorelicenseforoptionalpackageoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\canacquirestorelicenseoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\downloadandinstallstorepackagesoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\findstoreproductforpackageoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getassociatedstorequeueitemsoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getconsumablebalanceremainingoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getcustomercollectionsidoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getcustomerpurchaseidoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getisanyskuinstalledoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getofflinelicensesoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getstorelistingoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getstorelistingsforassociatedproductsoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getstorelistingsforassociatedproductspagedoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getstorequeueitemsoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getusercollectionoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\getusercollectionpagedoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\iaputils.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\jsonhelpers.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\ParserJSON.h
onecoreuap\enduser\winstore\licensing\winrt\lib\purchasedisplayproperties.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\registryhelper.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\reportconsumableoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\requestpurchaseoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\requeststorerateandreviewoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\sendstorerequestresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeacquirelicenseresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeapplicense.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeavailability.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storecanacquirelicenseresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storecollectiondata.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeconsumableresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storecontext.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeimage.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storelicense.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storelistingpagedqueryresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storelistingqueryresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storepackageinstalloptions.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storepackagelicense.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\StorePackageLicense.h
onecoreuap\enduser\winstore\licensing\winrt\lib\StorePackageUpdateManagerUtils.h
onecoreuap\enduser\winstore\licensing\winrt\lib\storepackageupdateresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeprice.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeproduct.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeproductoptions.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeproductresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storepurchaseresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storequeueitemcompletedeventargs.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storequeueitemstatus.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storerateandreviewresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storerequesthelper.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storerequestoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storesku.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storesubscriptiondata.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storeuninstallstorepackageoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\storevideo.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\stringhelpers.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\StringHelpers.h
onecoreuap\enduser\winstore\licensing\winrt\lib\StringifiedJsonValue.h
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\appinfo.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\apppurchaseoperationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\backgroundtaskoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\catalogserviceproxy.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\clientprocessutils.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\collectionsserviceproxy.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\currentappserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\CurrentAppServer.h
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\external\inc\eratitleinfo.h
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\getappandsupplementalstorepackageupdatesoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\getnextstorelistingforassociatedproducts.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\getunfulfilledconsumablesoperationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\licenseinformationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\licensesatisfactioninfo.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\licensesatisfactionresult.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\listinginformationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\loadlistingoperationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\messagedialoghelper.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\priceformat.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productidcache.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productlicensemap.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productlicenseserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productlistingserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productpurchasedisplaypropertiesserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productpurchaseoperationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\productreceiptretrievaloperationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\purchaseeventargsredstone.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\purchaseoperation.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\purchaseresultsserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\purchasestahelper.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\PurchaseSTAHelper.h
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\receipthelpers.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\receiptretrievaloperationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\reportconsumablefulfillmentoperationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\requestproductpurchasebyskuidoperationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\requestproductpurchasewithdisplaypropertiesoperationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\requestproductpurchasewithresultsoperationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\rpchelpers.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storecommerceserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storeconfigurationserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\StoreContentIdKeyIdItem.h
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\StoreContentIdKeyIdResponse.h
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storecontextserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storehardwaremanufacturerinfoserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\StorePackageLicenseWnfWatcher.h
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storepackageupdate.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storepreviewproductinfoserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storepreviewpurchaseresultsserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storepreviewserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storepreviewskuinfoserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\storequeueitem.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\tokenbrokercomponentuilauncher.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\trialownership.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\unfulfilledconsumableserver.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\urihelper.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\winrtapi.cpp
onecoreuap\enduser\winstore\licensing\winrt\lib\windows\wscollector.cpp
onecoreuap\Enduser\Winstore\licensing\wsinc\WSErrorUtils.h
onecoreuap\Enduser\Winstore\licensing\wsinc\WSHttpHelper.h
onecoreuap\internal\base\inc\userawarecalleridentity.h
onecoreuap\shell\lib\activationevents\src\activatedeventargsbase.cpp
OneStoreAuthenticationDomain
OneStoreAuthenticationPolicy
onlineIdTicket
OPCO 
OpenProcess
OpenProcessToken
OpenSemaphoreW
OpenStateExplicit
OpenThread
OpenThreadToken
OPTIONAL
options
Order
orderId
OrderManagementData
organizations
OriginalFilename
originatingContextId
originatingContextMessage
originatingContextName
originCallerModule
originCallerReturnAddressOffset
originFile
originLineNumber
originModule
originName
OutgoingServiceRequest
OutputDebugStringW
P/Z/y<
p1%E;
P9w u
P9w0u
package.As(&package4)
package4->get_SignatureKind(&signatureKind)
PackageFamilyName
PackageFamilyNameFromFullName
packageFullName = %s, appType = %d, appId = %s, appCatalogId = %s
packageId->get_FullName(optionalPfn.GetAddressOf())
packageIdentifier
PackageNameAndPublisherIdFromFamilyName
packages
packageType
pagingInfo
parametersAsJson
parentProductId
ParentProductId
ParseJSONStringToObject(DEBUG_PARSER_PARAMETERS_ARGS jsonString.Get(), pObj, table)
ParseJSONToObject(DEBUG_PARSER_PARAMETERS_ARGS jsonElement, pObj, table)
ParseSLSJson
PartA_PrivTags
PartB_Ms.Qos.OutgoingServiceRequest
PartB_Ms.Telemetry.Error
PathAppendA
PathAppendW
PathAppendW failed
PathCchAddExtension
PathCchAppendEx
PathCombineA
PathRemoveFileSpecA
pid != nullptr
Pj h(w
Pj!h 
Pj!h`\
Pj"h0p
Pj#h d
Pj#hH
Pj(hH
Pj)hHs
Pj*hP~
Pj*hx
Pj,hhv
Pj.h0{
Pj.hPy
Pj:h(h
Pj;h`[
Pj[h@=
Pj[hh
Pj\hP
Pj^hpC
Pj`h 
Pj{h(
Pj}h@(
Pj+hHk
Pj=h(K
Pj=hP
Pj>hpn
Pj>hX
Pj0hHg
Pj1hpz
Pj1hXt
Pj2hp
Pj3h`Z
Pj3hX^
Pj3hxd
Pj4hx
Pj5h8
Pj6hHc
Pj7hpx
Pj8h j
Pj8h@
Pjahx;
PjEh@`
PjEh0e
PjehH
PjehP
Pjgh@<
Pj-h %
Pj-h(b
PjHhH
PjhhX4
Pj'hp[
Pj-hX]
Pjihh
PjjhP
PjJhp
PjKh0
PjMh(
PjMh0
PjMhH
PjNhp
PjOh@
Pjoh0
PjOh0E
PjRhh
PjSh(
Pjsh8
PjShx$
PjTh(
PjTh@
PjThX
PjVh`-
Pjwh8
Pjxh`
PjXh0D
PjYh(&
PjyhhC
pm_-K
PPPPPP
PPPPPPV
PPPPPPVW
PPPPPPW
PPPPSh
PPPPSh,
PPPPSh|
PPPPVh
PPPPVh,
PPPPWh
PPPPWh,
ppszProxyList && ppszProxyByPass && pdwAccessType
PQQQQ
PQQSVW
PreferredSkuId
Preview license response did not have skuId. (CV = %hs)
Preview license response did not have skuId. (CV:%hs)
PreviewImage
previewStore
Price
PrimaryWebAccountId
process
Process Name
Product
productAddOns
ProductDescription
productId
ProductId
productId
ProductIdCache::AddItem
ProductIdCache::ProductIdFromInAppOfferToken
ProductIdCache::ProductIdFromInAppOfferTokenTable
ProductIdCache::RefreshTableFromService
ProductIdCache::RuntimeClassInitialize
productIds
productIdsWithCommas
ProductKind
productKinds
ProductName
Products
productSkuIds
productStoreId
ProductTitle
ProductType
productTypes
ProductVersion
Prompt required, but not possible, cancel - canSilentlyDownload = %s, install = %s
Properties
protocolStatusCode
Proxy list = %s, Proxy bypass = %s, Proxy access type = %i
PRVA\
PSSSS
PSSSSSSSj
PSVQQ
pszAuthorizationHeader
pszFullUrl
pszServerName && pszUrl
Public
PublisherId
publisherUserId
Purchase
PurchaseMEM
PurchaseOperation
purchaseStatus
PVh(x
PVVVV
PWh(x
Q,Z[o
q|gX'
q}X>N
Q9K\u(
Q9KTu&
Q9KTu(
Q9Ktu(
Q9O\u+
QPh(v
QPWhX
QQPPPPPP
QQPPPPPPV
QQPPPPPPW
QQQQPh
QQQQQQVP
QQQQWh
QQRRRR
QQRRRRPh
QQSh`S
QQSSSS
QQSSSSSSV
QQSSSSSSVP
QQSSSSSSW
QQSV3
QQSVW
QQSVW3
QQSVWh`S
QQVW3
QQVWh`S
QRPh4
QRPhT
QRPht
QRPhT
QRPht
QRPhT
QSh(S
QSh(T
QSh@a
QSh@q
QSh`,
QSh`S
QSh0_
QSh8n
QSh8r
QShda
QShHQ
QShln
QShX%
QShX`
QShXm
QShXr
QSVPj
QSVW3
QSVWh
QSVWj@3
quantity
QuantityAvailable:
QueryPerformanceCounter
QueryTrace for %s failed
QueryTraceW
QueueUserWorkItem
QVh !
QVh \
QVh _
QVh +
QVh 0
QVh 7
QVh f
QVh I
QVh k
QVh p
QVh Q
QVh q
QVh$'
QVh${
QVh$1
QVh(^
QVh(a
QVh(E
QVh(L
QVh(v
QVh(w
QVh,5
QVh@&
QVh@.
QVh@;
QVh@`
QVh@0
QVh@2
QVh@5
QVh@E
QVh@L
QVh@R
QVh\\
QVh\{
QVh\c
QVh\m
QVh\o
QVh`|
QVh`8
QVh`F
QVh`n
QVh`o
QVh`T
QVh`V
QVh`X
QVh|,
QVh|C
QVh|e
QVh|f
QVh|v
QVh|Y
QVh<;
QVh<h
QVh0"
QVh0[
QVh0\
QVh0_
QVh0~
QVh09
QVh0A
QVh0g
QVh0l
QVh0x
QVh4:
QVh4_
QVh4~
QVh4A
QVh4b
QVh4K
QVh8]
QVh8+
QVh83
QVh88
QVh8i
QVh8o
QVh8r
QVh8W
QVhdA
QVhdb
QVhdj
QVhdl
QVhh[
QVhhF
QVhHT
QVhhv
QVhhV
QVhhW
QVhHW
QVhhW
QVhHW
QVhHx
QVhHy
QVhL]
QVhLi
QVhp$
QVhp,
QVhP/
QVhP\
QVhP|
QVhpe
QVhpk
QVhPl
QVhpn
QVhpP
QVhPu
QVht\
QVhT^
QVhT>
QVhT3
QVht9
QVhTG
QVhtp
QVhTW
QVhTZ
QVhX"
QVhX%
QVhx%
QVhX%
QVhx`
QVhx}
QVhx1
QVhx5
QVhx9
QVhxg
QVhxj
QVhxq
QVhxR
QVhXR
QVhxv
QVhXw
QVhXX
'QVhXX
QVhXY
QVVPVj
QWh }
QWh V
QWh$'
QWh${
QWh$1
QWh$h
QWh$W
QWh(d
QWh,5
QWh\+
QWh`0
QWh`h
QWh`I
QWh`V
QWh<l
QWh0(
QWh4_
QWh4b
QWh4h
QWhDz
QWhh*
QWhh]
QWhh}
QWhHN
QWhL]
QWhll
QWhp'
QWhP)
QWhpj
QWhT,
QWhtz
QWhX%
QWhX?
QWhX1
QWhx1
QWhx5
QWhxE
QWhxj
QWVPj
r(SP3
r~akow
RaiseException
RaiseFailFastException
ReadFile
realloc
Receipt
ReceiptBase64Encoded
ReceiptHelpers::CachePhoneReceiptForOffline
ReceiptHelpers::DeleteCachedPhoneReceipt
ReceiptHelpers::FetchDesktopReceipt
ReceiptHelpers::FetchPhoneReceipt
ReceiptHelpers::FetchReceipt
ReceiptHelpers::GetCachedPhoneReceipt
ReceiptHelpers::GetFormattedPrice
ReceiptHelpers::GetPackageLocalAppDataPath
ReceiptHelpers::GetPhoneReceiptFilepath
ReceiptHelpers::GetPublisherId
ReceiptHelpers::GetReceiptCacheFileName
ReceiptHelpers::GetReceiptCacheFolder
ReceiptHelpers::LicenseParseReceiptResponse
ReceiptResponse
RecurrencePolicy
RecurrencePrice
Redmond1
refreshConsumablesAsync
RefreshInternalState with refreshConsumables %d, license IsActive %d, IsTrial %d
RefreshLicenses
reg.exe process did not complete successfully. Exit Code: %d
RegCloseKey
RegDeleteKeyValueW
RegGetValueW
registry_DNSPolicy.txt
registry_SIH.txt
RegistryHelper::GetStringValue
RegistryHelper::SetQwordValue
RegistryHelper::SetStringValue
RegOpenCurrentUser
RegOpenKeyExW
RegSetKeyValueW
relatedProductId
RelatedProductId
RelatedProducts
RelationshipType
relationshipType
ReleaseLicense()
ReleaseMutex
ReleaseSemaphore
ReleaseSRWLockExclusive
ReleaseSRWLockShared
report.wer
ReportConsumableFulfillmentAsync(%s, %s) invoked.
ReportingEvents.log
ReportProductFulfillment(%s) invoked.
Request
Request 0x%08x failed, result %d
Request 0x%08x has machine %s and RID %s
Request Rate and Review Operation failed to get any status due to a purchase app not install error.
Request to [%s] failed with connection error. Retrying %d more times
RequestAppPurchaseAsync(%s) invoked.
requestKind
requestParams.authType == tickets[0].m_providerType
RequestProductPurchaseAsync(%s, %s) invoked.
RequestProductPurchaseByProductIdAndSkuIdAsync(%s, %s) invoked.
RequestProductPurchaseWithDisplayPropertiesAsync(%s, %s) invoked.
RequestProductPurchaseWithResultsAsync(%s) invoked.
RequestPurchase
RequireAuthToken
RequirePrivateStoreOnly
RequiresCapability
RequireValidLicense
ResetEvent
ResolveDelayLoadedAPI
resource
Response
Response buffer overflow
responseSizeBytes
result != nullptr
ResumeWithFlags called for productId = %s, setFlags = %d, resetFlags = %d
RETAIL
RetrieveJsonResponseFromResources
ReturnHr
ReturnNt
RevertToSelf
rj+_f;
RoActivateInstance
RoGetActivationFactory
RoGetAgileReference
RoGetMatchingRestrictedErrorInfo
RoInitialize
RoOriginateError
RoOriginateErrorW
RoReportFailedDelegate
RoTransformError
RoUninitialize
RpcBindingFromStringBindingW
RpcBindingSetAuthInfoExW
RpcHelpers::GetRpcHandle
RPCRT4.dll
RpcServerInqCallAttributesW
RpcStringBindingComposeW
RpcStringFreeW
RPh8 
RQVh(
RSWVj
RtlDisownModuleHeapAllocation
RtlDllShutdownInProgress
RtlGetDeviceFamilyInfoEnum
RtlNotifyFeatureUsage
RtlNtStatusToDosError
RtlNtStatusToDosErrorNoTeb
RtlPublishWnfStateData
RtlQueryWnfStateData
RtlRegisterFeatureConfigurationChangeNotification
RtlSubscribeWnfStateChangeNotification
RtlUnregisterFeatureConfigurationChangeNotification
RtlUnsubscribeWnfNotificationWaitForCompletion
RtlUnsubscribeWnfStateChangeNotification
RtlUpcaseUnicodeChar
Run>x
S _^[
S _^3
S$_^[
S-1-15-2-1609473798-1231923017-684268153-4268514328-882773646-2760585773-1760938157
S-1-15-2-778011547-1096124574-1799322564-3972718560-253206704-1472347756-15051174
s2SVW
Sandbox
SCMID
SearchTitles
SearchTitleString
SearchTitleType
SellableBy
SendStoreRequest
SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetUserCollectionForParentProduct, cv.Get(), nullptr, nullptr, collectionsJsonString.GetAddressOf())
SendStoreRequestWithUris( nullptr, UriHelperV7::InternalStoreEndpointExtensionUrls, UriHelperV7::InternalStoreEndpointExtensionUrlsIds::GetUserCollectionForProducts, cv, jsonCollectionsParameters.Get(), nullptr, collectionsJsonString.GetAddressOf())
Server: %s, URL %s
ServerError
service::%s::%s
serviceTicket
SetEvent
SetFilePointer
SetForegroundWindow
SetLastError
SetRestrictedErrorInfo
SetThreadpoolTimer
SetUnhandledExceptionFilter
SHCreateMemStream
SHTaskPoolAllowThreadReuse
SHTaskPoolQueueTask
SignatureKind: %hs
SizeofResource
Sj hp
Sj+h`
Sjqh`7
SkipCapabilityCheckIfERA
skipCount
SkipForceAuthentication
SkuDescription
SkuDisplayRank
SkuId
skuId
SkuTitle
skuType
SkuType
Sleep
SleepConditionVariableSRW
SLS failed to initialize correctly, falling back to built in values, this may cause problems.
SNy0M<
Software\Microsoft\Windows\CurrentVersion\Store
Software\Microsoft\Windows\CurrentVersion\Store\Configuration
Software\Microsoft\Windows\CurrentVersion\Store\ContentId
Software\Microsoft\Windows\CurrentVersion\Store\CurrentIdentity
Software\Microsoft\Windows\CurrentVersion\Store\MultiVariantConfig
Software\Microsoft\XboxLive
Software\Policies\Microsoft\WindowsStore
Source
spAppContentInfo->GetCatalogId(&productStoreId)
spLicenseInstance->GetContentInfo(IID_PPV_ARGS(&spAppContentInfo))
spLicenseInstance->GetContentInfo(IID_PPV_ARGS(spApplicationContentInfo.GetAddressOf()))
spLicenseManager->RefreshLicenses(RefreshPolicy_NetworkStatusOnline)
sprintf_s
SSh`V
SSSSPh
SSSSSS
SSSSSSVP
SSWh`V
Start callback failed
StartDate
status
Status done, remaining installs: %d
Store
Store service returned an unexpected enum: %hs
store.etl
StoreAADAccountId
storeAppInstallation
storeConfiguration
StoreConfigurationServer::FilterUnsupportedSystemFeaturesAsync
StoreConfigurationServer::GetStoreLogDataAsync
StoreContentModifier
StoreContext.RequestDownloadAndInstallStorePackagesAsync
StoreContextServer::Initialize: packageFullName = %s, productStoreId = %s, isLicensed = %s, isAppContainer = %s
storeContextServer->ConsumeConsumable( _productId.Get(), _quantity, _trackingId, cv.GetHStringReference().Get(), jsonString.GetAddressOf())
storeContextServer->ReleaseStoreLicenseForOptionalPackage(optionalPfn.Get())
StoreEndpointExtensionUrls
StorefrontClient
StorefrontClientErrorTask
StorefrontClientExceptionTask
StorefrontClientInformationTask
StorefrontClientVerboseTask
StorefrontClientWarningTask
storeId
StoreId
storeIds
StoreInfoBuilders::BuildStoreAppInfo
storeLicenseManagement
StoreOperational.etl
storeOptionalPackageInstallManagement
StorePackageUpdateManagerUtils::StorePackageUpdateStatusEquals::operator ()
StorePreview.LoadAddOnProductInfosAsync
StorePreview.RequestProductPurchaseByProductIdAndSkuIdAsync
StorePurchaseApp
StorePurchaseAppMessage
strchr
string
StringFileInfo
StringFromGUID2
StringHelpers::DecodeBase64
StringHelpers::SplitString
StringHelpers::TrimEnds
StringifiedJsonValue::GetStringifiedValue
StringToFileTime(timeString.GetRawBuffer(nullptr), &ft, FALSE)
strncpy_s
strrchr
strtol
succeeded
Succeeded
success
SVh`S
SVPhp
SVSPSj
SVWh$
SVWh`S
SVWP3
sW/Zl
SWVPh
syPPh`
System
SYSTEM\CurrentControlSet\Control\SystemInformation
SystemManufacturer
SystemProductName
SystemTimeToFileTime
t#h`S
t$ Ph,
T$ PPPPPPV
t$ PV
t$ Vj
T$$;]
T$$;E
t$$tBj
T$(;T$,
T$(;T$8
T$(9T$,
T$(j:Yf9
T$(PPPPPPS
T$(QQ
T$(QQQQPh,
T$(QQQQQQP
T$(QQQQSh,
T$(QQQQSh|
t$(WS
t$,QQ
T$@;T$X
T$@9T$X
T$@PPPPPPV
T$@QQQQWh
T$`;T$P
t$`9T$P
T$<Zf;
T$0PPPPPPW
T$0PPPPWh
T$0QQj
T$0QQQQPh
T$0QQQQPh,
T$0QQQQQQP
T$0QQQQSh|
T$0QQQQWh
T$0QQV
T$49L$@
t$4hH
t$4Pj(hH
t$4SWVPhHy
t$4WP
T$8PPPPVh
t$8QP
T$8QQPh
T$8QQQh
T$8QQQQQQP
t$8QWS
t&f9;t!
t&h`S
T?WTup
t\j;V
t+9O(t&
t<h`S
t3SV3
targetUri
TE+HrB3
tEf;}
TEMPx
TerminateProcess
text/xml
Thales TSS ESN:3BD4-4B80-69C31%0#
The license for the application is missing information needed to perform Store operations. If you side-loaded the application, uninstall the application and download it from the Store first to get the Store license associated with the application.
There is no connection profile
There were items in the collection, however iterator is pointing at the end of the collection...
This function is not supported, all calls should now use StoreContextServer::GetAppAndOptionalStorePackageUpdates
This function is not supported, all calls should now use StoreContextServer::RequestDownloadAndInstallStorePackageUpdatesAsync
This function is not supported, all calls should now use StoreContextServer::RequestDownloadStorePackageUpdates
This function must be called from a UI thread
This request kind (%d) is invalid or not supported on this release. Request Entry: %s
threadId
ti!AGd
ti9\$
Timer expired, triggering state refresh
tMh`S
TotalResultCount
tP!|$
trackingId
transactionId
Translation
TrialTimeRemaining
trialTimeRemaining
trialUniqueId
Trying to remove non-store package %s
Trying to remove package %s that isn't installed
Trying to remove package %s that isn't related to the calling app
tw9^,t
twinapi.appcore.dll
u"QQh
u$QSh
u$QWh
u$WSQ
u)QWhX
u/9wHu*h
u@PPW
U0\0f0k0
u0QSh0
Ufz,UcwB
UH^4Xz
UMgrGetConstrainedUserToken
UMgrOpenProcessHandleForAccess
UMgrOpenProcessTokenForQuery
UMgrQueryUserContext
UMgrQueryUserToken
Unable to show consent dialog
Unfulfilled Consumables for %s (CV = %hs):
UnhandledExceptionFilter
Units
UnitType
UniversalStoreInApp
Unknown
UNKWN
UnmanagedConsumable
UnpackHStringIIterable
uNPPV
Uo~9@D
'UO4R
updated
UpdateDownloadLimit
u'QSh0
u'QVh
u'QVh0
u'QWh0
URIBufferMaxSize
UriHelper::GetUri
UriHelper::GetUriWithPath
UriHelper::GetUriWithPathAndParameters
UriHelperInternal::GetUriEx
UriHelperInternal::GetUriString
UriHelperInternal::GetUriWithPathAndParametersEx
UriHelperInternal::InitOnceCallback
UriHelperV7::_FindUriWithIndex
UriHelperV7::_GetRawStringFromOS
UriHelperV7::_GetRawStringFromSLS
UriHelperV7::GetIndexedEntry
UriHelperV7::GetRawString
UrlEscapeW
UseAuthIfAvailable
UseBackgroundTask
UsePromptSettings
User consent required, cancel = %s
User content required, cancel = %s
User content required, cancel = %s, canSilentlyDownload = %s, install = %s
user.auth.xboxlive.com
UserId
UserTokenTypes
UuidCreate
UuidFromStringW
uW97t*h
UY7i*
uZSW3
V:)NM
v;f;}
v6.0/beneficiaries/me/keys
v6.0/collections/consume
v6.0/collections/query
v6.0/users/me/keys
v6/products/{productId}?market={marketCode}&languages={languages}&fieldsTemplate=Full
v6/products?rank=PackageFamilyName&alternateId={productId}&market={marketCode}&languages={languages}&fieldsTemplate=Full
v6/products?rank=ProductSearchApps&market={market}&languages={languages}&addOnParent={productId}&fieldsTemplate=Full{platformDependencyNameParam}
v6/skus?rank=ContentId&alternateId={productId}&market={marketCode}&languages={languages}&fieldsTemplate=Full
VALID
Valid
validityType
Value
VarFileInfo
variant
variantKind
Vector<HSTRING>::Make(vector.GetAddressOf())
Vector<T*>::Make(vector.GetAddressOf())
vector->Append(image.Get())
vector->Append(text.Get())
Verbose
VerifyCapability
Version
version
VideoPurpose
Videos
Vjkh@
VPh4Y
VPj@Z
vpPh`
VRPhXv
VS_VERSION_INFO
VSPQh
VVVVVV
VWh`S
VWjbZ
VWjkZ
VWu$Q
VWu5j
W.7t1E
w@t-h
w\_^[
WaitForCompletion
WaitForMultipleObjects returned %u
WaitForMultipleObjectsEx
WaitForSingleObject
WaitForSingleObjectEx
WaitForThreadpoolTimerCallbacks
Waiting for installs to complete
WakeAllConditionVariable
Warning
Washington1
wcschr
wcscpy_s
wcscspn
wcsrchr
wcsstr
wcstod
wcstombs
wcstombs_s
wcstoul
webservices.dll
WEVT_TEMPLATE
wevtapi.dll
Width
WilError_03
wilResult
WilStaging_02
win:Error
win:Info
win:Informational
win:Verbose
win:Warning
win32
win8xappx
Windows
Windows Store/1.0
Windows.ApplicationModel.AppService.AppServiceConnection
Windows.ApplicationModel.Core.CoreApplication
Windows.ApplicationModel.Store.CurrentApp
Windows.ApplicationModel.Store.CurrentApp.GetAppPurchaseCampaignIdAsync
Windows.ApplicationModel.Store.CurrentApp.GetAppReceiptAsync
Windows.ApplicationModel.Store.CurrentApp.GetCustomerCollectionsIdAsync
Windows.ApplicationModel.Store.CurrentApp.GetCustomerPurchaseIdAsync
Windows.ApplicationModel.Store.CurrentApp.GetProductReceiptAsync
Windows.ApplicationModel.Store.CurrentApp.GetUnfulfilledConsumablesAsync
Windows.ApplicationModel.Store.CurrentApp.LoadListingInformationAsync
Windows.ApplicationModel.Store.CurrentApp.ReportConsumableFulfillmentAsync
Windows.ApplicationModel.Store.CurrentApp.RequestAppPurchaseAsync
Windows.ApplicationModel.Store.CurrentApp.RequestProductPurchaseAsync
Windows.ApplicationModel.Store.CurrentApp.RequestProductPurchaseWithDisplayPropertiesAsync
Windows.ApplicationModel.Store.CurrentApp.RequestProductPurchaseWithResultsAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.GetAppPurchaseCampaignIdAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.GetAppReceiptAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.GetProductReceiptAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.GetUnfulfilledConsumablesAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.LoadListingInformationAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.ReloadSimulatorAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.ReportConsumableFulfillmentAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.RequestAppPurchaseAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.RequestProductPurchaseAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.RequestProductPurchaseWithDisplayPropertiesAsync
Windows.ApplicationModel.Store.CurrentAppSimulator.RequestProductPurchaseWithResultsAsync
Windows.ApplicationModel.Store.dll
Windows.ApplicationModel.Store.Internal.AuthenticationExtension
Windows.ApplicationModel.Store.Internal.AuthenticationExtension.ShowChallengeForUserAsync
Windows.ApplicationModel.Store.Internal.IMessageDialogHelper2.ShowDialogWithResultsAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.GetAppPurchaseCampaignIdAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.GetAppReceiptAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.GetProductReceiptAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.LoadListingInformationAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.RequestAppPurchaseAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce.RequestProductPurchaseAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce2.GetCustomerCollectionsIdAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerce2.GetCustomerPurchaseIdAsync
Windows.ApplicationModel.Store.Internal.IStoreCommercePreview.LoadAddOnProductInfosAsync
Windows.ApplicationModel.Store.Internal.IStoreCommercePreview.RequestProductPurchaseByProductIdAndSkuIdAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulator.LoadListingInformationAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulator.RequestAppPurchaseAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulator.RequestProductPurchaseAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulatorWithConsumables.GetUnfulfilledConsumablesAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulatorWithConsumables.ReportConsumableFulfillmentAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulatorWithConsumables.RequestProductPurchaseWithDisplayPropertiesAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceSimulatorWithConsumables.RequestProductPurchaseWithResultsAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceWithConsumables.GetUnfulfilledConsumablesAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceWithConsumables.ReportConsumableFulfillmentAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceWithConsumables.RequestProductPurchaseWithDisplayPropertiesAsync
Windows.ApplicationModel.Store.Internal.IStoreCommerceWithConsumables.RequestProductPurchaseWithResultsAsync
Windows.ApplicationModel.Store.Internal.StoreCommerce
Windows.ApplicationModel.Store.LicenseInformation
Windows.ApplicationModel.Store.LicenseManagement.AddLicenseAsync
Windows.ApplicationModel.Store.LicenseManagement.LicenseManager
Windows.ApplicationModel.Store.LicenseManagement.LicenseManager.AddLicenseAsync
Windows.ApplicationModel.Store.LicenseManagement.LicenseManager.GetSatisfactionInfosAsync
Windows.ApplicationModel.Store.LicenseManagement.LicenseManager.RefreshLicensesAsync
Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo
Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult
Windows.ApplicationModel.Store.LicenseManagement.RefreshLicensesAsync
Windows.ApplicationModel.Store.ListingInformation
Windows.ApplicationModel.Store.pdb
Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager
Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions
Windows.ApplicationModel.Store.Preview.StoreConfiguration
Windows.ApplicationModel.Store.Preview.StoreConfiguration.FilterUnsupportedSystemFeaturesAsync
Windows.ApplicationModel.Store.Preview.StoreConfiguration.GetStoreLogDataAsync
Windows.ApplicationModel.Store.Preview.StoreHardwareManufacturerInfo
Windows.ApplicationModel.Store.Preview.StorePreview
Windows.ApplicationModel.Store.Preview.StorePreview.LoadAddOnProductInfosAsync
Windows.ApplicationModel.Store.Preview.StorePreview.RequestProductPurchaseByProductIdAndSkuIdAsync
Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo
Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults
Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo
Windows.ApplicationModel.Store.Preview.WebAuthenticationCoreManagerHelper
Windows.ApplicationModel.Store.Preview.WebAuthenticationCoreManagerHelper.RequestTokenWithUIElementHostingAndWebAccountAsync
Windows.ApplicationModel.Store.Preview.WebAuthenticationCoreManagerHelper.RequestTokenWithUIElementHostingAsync
Windows.ApplicationModel.Store.ProductLicense
Windows.ApplicationModel.Store.ProductListing
Windows.ApplicationModel.Store.ProductPurchaseDisplayProperties
Windows.ApplicationModel.Store.PurchaseResults
Windows.ApplicationModel.Store.UnfulfilledConsumable
Windows.AppointmentDataProvider
Windows.AppointmentsProvider.AddAppointment
Windows.AppointmentsProvider.RemoveAppointment
Windows.AppointmentsProvider.ReplaceAppointment
Windows.AppointmentsProvider.ShowAppointmentDetails
Windows.AppointmentsProvider.ShowTimeFrame
Windows.AppService
Windows.AppUriHandler
Windows.BackgroundTasks
Windows.BarcodeScannerPreviewProvider
Windows.BarcodeScannerProvider
Windows.CachedFileUpdater
Windows.CameraSettings
Windows.CommandLineLaunch
Windows.ComponentUI
Windows.Contact.Call
Windows.Contact.Map
Windows.Contact.Message
Windows.Contact.Post
Windows.Contact.VideoCall
Windows.ContactDataProvider
Windows.ContactPanel
Windows.ContactPicker
Windows.ContactsProvider.AddContact
Windows.ContactsProvider.ShowContact
Windows.Data.Json.JsonArray
Windows.Data.Json.JsonObject
Windows.Data.Json.JsonValue
Windows.Data.Xml.Dom.XmlDocument
Windows.Device
Windows.DialProtocol
Windows.EmailDataProvider
Windows.File
Windows.FileOpenPicker
Windows.FileSavePicker
Windows.Foundation.AsyncOperationCompletedHandler`1<Boolean>
Windows.Foundation.AsyncOperationCompletedHandler`1<String>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.FulfillmentResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.ListingInformation>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.ApplicationModel.Store.PurchaseResults>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreAcquireLicenseResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreAppLicense>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreCanAcquireLicenseResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreConsumableResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductPagedQueryResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductQueryResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreProductResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StorePurchaseResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreRateAndReviewResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreSendRequestResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Services.Store.StoreUninstallStorePackageResult>
Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Storage.Streams.IRandomAccessStreamReference>
Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, UInt8>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductLicense>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductListing>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.EventRegistrationToken>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreLicense>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StorePackageUpdateStatus>>
Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreProduct>>
Windows.Foundation.Collections.IIterator`1<Object>
Windows.Foundation.Collections.IIterator`1<String>
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Package>
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo>
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>
Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, UInt8>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductLicense>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductListing>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.EventRegistrationToken>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreLicense>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StorePackageUpdateStatus>>
Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreProduct>>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.Internal.StoreContentIdKeyIdItem>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreAvailability>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreCollectionData>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreImage>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StorePackageUpdate>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreQueueItem>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreSku>
Windows.Foundation.Collections.IIterator`1<Windows.Services.Store.StoreVideo>
Windows.Foundation.Collections.IKeyValuePair`2<String, String>
Windows.Foundation.Collections.IKeyValuePair`2<String, UInt8>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductLicense>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Store.ProductListing>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.EventRegistrationToken>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IMap`2<String, String>
Windows.Foundation.Collections.IMap`2<String, UInt8>
Windows.Foundation.Collections.IMap`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>
Windows.Foundation.Collections.IMap`2<String, Windows.ApplicationModel.Store.ProductLicense>
Windows.Foundation.Collections.IMap`2<String, Windows.ApplicationModel.Store.ProductListing>
Windows.Foundation.Collections.IMap`2<String, Windows.Foundation.EventRegistrationToken>
Windows.Foundation.Collections.IMap`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>
Windows.Foundation.Collections.IMap`2<String, Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IMap`2<String, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IMap`2<String, Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IMapView`2<String, String>
Windows.Foundation.Collections.IMapView`2<String, UInt8>
Windows.Foundation.Collections.IMapView`2<String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>
Windows.Foundation.Collections.IMapView`2<String, Windows.ApplicationModel.Store.ProductLicense>
Windows.Foundation.Collections.IMapView`2<String, Windows.ApplicationModel.Store.ProductListing>
Windows.Foundation.Collections.IMapView`2<String, Windows.Foundation.EventRegistrationToken>
Windows.Foundation.Collections.IMapView`2<String, Windows.Services.Store.Internal.IStorePackageLicenseLostCallback>
Windows.Foundation.Collections.IMapView`2<String, Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IMapView`2<String, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IMapView`2<String, Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IVector`1<Object>
Windows.Foundation.Collections.IVector`1<String>
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Package>
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo>
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>
Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.Internal.StoreContentIdKeyIdItem>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreAvailability>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreCollectionData>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreImage>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StorePackageUpdate>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreQueueItem>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreSku>
Windows.Foundation.Collections.IVector`1<Windows.Services.Store.StoreVideo>
Windows.Foundation.Collections.IVectorView`1<Object>
Windows.Foundation.Collections.IVectorView`1<String>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Package>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>
Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.Internal.StoreContentIdKeyIdItem>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreAvailability>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreCollectionData>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreImage>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreLicense>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreProduct>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreSku>
Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreVideo>
Windows.Foundation.Collections.ValueSet
Windows.Foundation.Diagnostics.AsyncCausalityTracer
Windows.Foundation.IAsyncAction
Windows.Foundation.IAsyncOperation`1<Boolean>
Windows.Foundation.IAsyncOperation`1<String>
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.FulfillmentResult>
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult>
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.ListingInformation>
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults>
Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.PurchaseResults>
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>>
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>>
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>>
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StorePackageUpdate>>
Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Services.Store.StoreQueueItem>>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreAcquireLicenseResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreAppLicense>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreCanAcquireLicenseResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreConsumableResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreProductPagedQueryResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreProductQueryResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreProductResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StorePurchaseResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreRateAndReviewResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreSendRequestResult>
Windows.Foundation.IAsyncOperation`1<Windows.Services.Store.StoreUninstallStorePackageResult>
Windows.Foundation.IAsyncOperation`1<Windows.Storage.Streams.IRandomAccessStreamReference>
Windows.Foundation.IAsyncOperationWithProgress`2<Windows.Services.Store.StorePackageUpdateResult, Windows.Services.Store.StorePackageUpdateStatus>
Windows.Foundation.IReference`1<UInt32>
Windows.Foundation.PropertyValue
Windows.Foundation.Uri
Windows.Globalization.NumberFormatting.CurrencyFormatter
Windows.Internal.FilePickerExperience
Windows.Internal.Security.Authentication.Web.TokenBrokerInternal
Windows.Internal.Security.WebAuthentication.AuthenticationManager
Windows.Internal.Shell.ModalExperience.ModalExperienceManager
Windows.Internal.Shell.ModalExperience.ModalExperienceOptions
Windows.Internal.StateRepository.Package
Windows.Internal.StateRepository.PackageResourceResolver
Windows.Internal.StateRepository.TargetDeviceFamily
Windows.Internal.StateRepository.User
Windows.Launch
windows.lockScreen
windows.LockScreenCall
Windows.LockScreenComponent
Windows.Management.Deployment.PackageManager
Windows.Networking.Connectivity.NetworkInformation
Windows.OopWebView
Windows.PeoplePane
Windows.PersonalAssistant.Launch
Windows.PhoneCallActivation
Windows.PosPaymentConnector
Windows.PreInstalledConfigTask
Windows.Print3DWorkflow
Windows.PrintSupportExtension
Windows.PrintSupportWorkflow
Windows.PrintTaskSettings
Windows.PrintWorkflowBackgroundTask
Windows.PrintWorkflowForegroundTask
Windows.Protocol
Windows.RestrictedLaunch
Windows.Search
Windows.Security.Authentication.OnlineId.OnlineIdServiceTicketRequest
Windows.Security.Authentication.Web.Core.WebAuthenticationCoreManager
Windows.Security.Authentication.Web.Core.WebTokenRequest
Windows.Security.Cryptography.CryptographicBuffer
Windows.Services.Store.Internal.GetNextStoreProductOperation
Windows.Services.Store.Internal.IStoreContextServer.GetAppAndOptionalStorePackageUpdatesAsync
Windows.Services.Store.Internal.IStoreContextServer.RequestDownloadAndInstallStorePackagesAsync
Windows.Services.Store.Internal.IStoreContextServer.RequestDownloadAndInstallStorePackageUpdatesAsync
Windows.Services.Store.Internal.IStoreContextServer.RequestDownloadStorePackageUpdatesAsync
Windows.Services.Store.Internal.StoreContentIdKeyIdItem
Windows.Services.Store.Internal.StoreContentIdKeyIdResponse
Windows.Services.Store.Internal.StoreContextCallerData
Windows.Services.Store.Internal.StoreContextServer
Windows.Services.Store.StoreAcquireLicenseResult
Windows.Services.Store.StoreAppLicense
Windows.Services.Store.StoreAvailability
Windows.Services.Store.StoreAvailability.RequestPurchaseAsync
Windows.Services.Store.StoreAvailability.RequestPurchaseWithPurchasePropertiesAsync
Windows.Services.Store.StoreCanAcquireLicenseResult
Windows.Services.Store.StoreCollectionData
Windows.Services.Store.StoreConsumableResult
Windows.Services.Store.StoreContext
Windows.Services.Store.StoreContext.AcquireStoreLicenseForOptionalPackageAsync
Windows.Services.Store.StoreContext.CanAcquireStoreLicenseAsync
Windows.Services.Store.StoreContext.CanAcquireStoreLicenseForOptionalPackageAsync
Windows.Services.Store.StoreContext.DownloadAndInstallStorePackagesAsync
Windows.Services.Store.StoreContext.FindStoreProductForPackageAsync
Windows.Services.Store.StoreContext.GetAppAndOptionalStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.GetAppLicenseAsync
Windows.Services.Store.StoreContext.GetAssociatedStoreProductsAsync
Windows.Services.Store.StoreContext.GetAssociatedStoreProductsWithPagingAsync
Windows.Services.Store.StoreContext.GetAssociatedStoreQueueItemsAsync
Windows.Services.Store.StoreContext.GetConsumableBalanceRemainingAsync
Windows.Services.Store.StoreContext.GetCustomerCollectionsIdAsync
Windows.Services.Store.StoreContext.GetCustomerPurchaseIdAsync
Windows.Services.Store.StoreContext.GetStoreProductForCurrentAppAsync
Windows.Services.Store.StoreContext.GetStoreProductsAsync
Windows.Services.Store.StoreContext.GetStoreProductsWithOptionsAsync
Windows.Services.Store.StoreContext.GetStoreQueueItemsAsync
Windows.Services.Store.StoreContext.GetUserCollectionAsync
Windows.Services.Store.StoreContext.GetUserCollectionWithPagingAsync
Windows.Services.Store.StoreContext.ReportConsumableFulfillmentAsync
Windows.Services.Store.StoreContext.RequestDownloadAndInstallStorePackagesAsync
Windows.Services.Store.StoreContext.RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync
Windows.Services.Store.StoreContext.RequestDownloadAndInstallStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.RequestDownloadStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.RequestPurchaseAsync
Windows.Services.Store.StoreContext.RequestPurchaseWithPurchasePropertiesAsync
Windows.Services.Store.StoreContext.RequestRateAndReviewAppAsync
Windows.Services.Store.StoreContext.RequestUninstallStorePackageAsync
Windows.Services.Store.StoreContext.RequestUninstallStorePackageByStoreIdAsync
Windows.Services.Store.StoreContext.SetInstallOrderForAssociatedStoreQueueItemsAsync
Windows.Services.Store.StoreContext.TrySilentDownloadAndInstallStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.TrySilentDownloadStorePackageUpdatesAsync
Windows.Services.Store.StoreContext.UninstallStorePackageAsync
Windows.Services.Store.StoreContext.UninstallStorePackageByStoreIdAsync
Windows.Services.Store.StoreImage
Windows.Services.Store.StoreLicense
Windows.Services.Store.StorePackageInstallOptions
Windows.Services.Store.StorePackageLicense
Windows.Services.Store.StorePackageUpdate
Windows.Services.Store.StorePackageUpdateResult
Windows.Services.Store.StorePrice
Windows.Services.Store.StoreProduct
Windows.Services.Store.StoreProduct.GetIsAnySkuInstalledAsync
Windows.Services.Store.StoreProduct.RequestPurchaseAsync
Windows.Services.Store.StoreProduct.RequestPurchaseWithPurchasePropertiesAsync
Windows.Services.Store.StoreProductOptions
Windows.Services.Store.StoreProductPagedQueryResult
Windows.Services.Store.StoreProductPagedQueryResult.GetNextAsync
Windows.Services.Store.StoreProductQueryResult
Windows.Services.Store.StoreProductResult
Windows.Services.Store.StorePurchaseProperties
Windows.Services.Store.StorePurchaseResult
Windows.Services.Store.StoreQueueItem
Windows.Services.Store.StoreQueueItem.CancelInstallAsync
Windows.Services.Store.StoreQueueItem.PauseInstallAsync
Windows.Services.Store.StoreQueueItem.ResumeInstallAsync
Windows.Services.Store.StoreQueueItemCompletedEventArgs
Windows.Services.Store.StoreQueueItemStatus
Windows.Services.Store.StoreRateAndReviewResult
Windows.Services.Store.StoreRequestHelper
Windows.Services.Store.StoreRequestHelper.SendRequestAsync
Windows.Services.Store.StoreSendRequestResult
Windows.Services.Store.StoreSku
Windows.Services.Store.StoreSku.GetIsInstalledAsync
Windows.Services.Store.StoreSku.RequestPurchaseAsync
Windows.Services.Store.StoreSku.RequestPurchaseWithPurchasePropertiesAsync
Windows.Services.Store.StoreSubscriptionInfo
Windows.Services.Store.StoreUninstallStorePackageResult
Windows.Services.Store.StoreVideo
Windows.ShareTarget
Windows.StartupTask
Windows.Storage.Streams.DataReader
Windows.Storage.Streams.RandomAccessStreamReference
Windows.System.Internal.UserManager
Windows.System.Launcher
Windows.System.Profile.AnalyticsInfo
Windows.System.UserProfile.GlobalizationPreferences
Windows.UI.Core.CoreWindow
Windows.UI.Popups.MessageDialog
Windows.UI.Popups.UICommand
Windows.UpdateTask
Windows.UserDataAccountsProvider
Windows.UserDataTaskDataProvider
Windows.VoiceCommand
Windows.Web.Http.Filters.HttpBaseProtocolFilter
Windows.Web.Http.HttpClient
Windows.Web.Http.HttpMethod
Windows.Web.Http.HttpRequestMessage
Windows.Web.Http.HttpStringContent
Windows.WebAccountProvider
Windows.Xbox.ApplicationModel.State.Internal.StateHelperCache
Windows.Xbox.System.Internal.Deployment.AvailablePackageProvider
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<bool>,struct Windows::Foundation::IAsyncOperationCompletedHandler<bool>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::ApplicationModel::Store::ListingInformation *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::ApplicationModel::Store::ListingInformation *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResults *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResults *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::ApplicationModel::Store::PurchaseResults *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::ApplicationModel::Store::PurchaseResults *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreAcquireLicenseResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreAcquireLicenseResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreAppLicense *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreAppLicense *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreCanAcquireLicenseResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreCanAcquireLicenseResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreConsumableResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreConsumableResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreProductPagedQueryResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreProductPagedQueryResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreProductQueryResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreProductQueryResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StorePurchaseResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StorePurchaseResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreRateAndReviewResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreRateAndReviewResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<class Windows::Services::Store::StoreSendRequestResult *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<class Windows::Services::Store::StoreSendRequestResult *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<enum Windows::ApplicationModel::Store::FulfillmentResult>,struct Windows::Foundation::IAsyncOperationCompletedHandler<enum Windows::ApplicationModel::Store::FulfillmentResult>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<struct Windows::Foundation::Collections::IVectorView<class Windows::ApplicationModel::Store::UnfulfilledConsumable *> *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<struct Windows::Foundation::Collections::IVectorView<class Windows::ApplicationModel::Store::UnfulfilledConsumable *> *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<struct Windows::Foundation::Collections::IVectorView<class Windows::Services::Store::StorePackageUpdate *> *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<struct Windows::Foundation::Collections::IVectorView<class Windows::Services::Store::StorePackageUpdate *> *>,0>::DoWorkStub
Windows::ApplicationModel::Store::AsyncOperationBase<struct Windows::Foundation::IAsyncOperation<struct Windows::Foundation::Collections::IVectorView<class Windows::Services::Store::StoreQueueItem *> *>,struct Windows::Foundation::IAsyncOperationCompletedHandler<struct Windows::Foundation::Collections::IVectorView<class Windows::Services::Store::StoreQueueItem *> *>,0>::DoWorkStub
Windows::ApplicationModel::Store::CProductLicenseMap::First
Windows::ApplicationModel::Store::CProductLicenseMap::get_Size
Windows::ApplicationModel::Store::CProductLicenseMap::GetView
Windows::ApplicationModel::Store::CProductLicenseMap::HasKey
Windows::ApplicationModel::Store::CProductLicenseMap::Initialize
Windows::ApplicationModel::Store::CProductLicenseMap::Lookup
Windows::ApplicationModel::Store::CProductLicenseMap::Split
Windows::ApplicationModel::Store::CurrentAppFactory::get_AppId
Windows::ApplicationModel::Store::CurrentAppFactory::get_LicenseInformation
Windows::ApplicationModel::Store::CurrentAppFactory::get_LinkUri
Windows::ApplicationModel::Store::CurrentAppFactory::GetAppPurchaseCampaignIdAsync
Windows::ApplicationModel::Store::CurrentAppFactory::GetAppReceiptAsync
Windows::ApplicationModel::Store::CurrentAppFactory::GetAppWindowHandle
Windows::ApplicationModel::Store::CurrentAppFactory::GetCustomerCollectionsIdAsync
Windows::ApplicationModel::Store::CurrentAppFactory::GetCustomerPurchaseIdAsync
Windows::ApplicationModel::Store::CurrentAppFactory::GetProductReceiptAsync
Windows::ApplicationModel::Store::CurrentAppFactory::GetRuntimeClassName
Windows::ApplicationModel::Store::CurrentAppFactory::GetStoreCommerce
Windows::ApplicationModel::Store::CurrentAppFactory::GetUnfulfilledConsumablesAsync
Windows::ApplicationModel::Store::CurrentAppFactory::Initialize
Windows::ApplicationModel::Store::CurrentAppFactory::LoadListingInformationAsync
Windows::ApplicationModel::Store::CurrentAppFactory::LoadListingInformationByKeywordsAsync
Windows::ApplicationModel::Store::CurrentAppFactory::LoadListingInformationByProductIdsAsync
Windows::ApplicationModel::Store::CurrentAppFactory::ReportConsumableFulfillmentAsync
Windows::ApplicationModel::Store::CurrentAppFactory::ReportProductFulfillment
Windows::ApplicationModel::Store::CurrentAppFactory::RequestAppPurchaseAsync
Windows::ApplicationModel::Store::CurrentAppFactory::RequestProductPurchaseAsync
Windows::ApplicationModel::Store::CurrentAppFactory::RequestProductPurchaseWithDisplayPropertiesAsync
Windows::ApplicationModel::Store::CurrentAppFactory::RequestProductPurchaseWithResultsAsync
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::_CreateUnfulfilledConsumable
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::DoWork
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::GetResults
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::GetUnfulfilledConsumablesSync
Windows::ApplicationModel::Store::GetUnfulfilledConsumablesOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::AddCommands
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::AddCommands::<lambda_f504bdfa87e9e81d60fb40cb23fa8c33>::operator ()
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::CheckDialogResults
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::CreateCommand
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::CreateCommandWithInt32Id
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::get_ContextString
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::GetAppName
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::GetText
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::LoadFormattedString
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::RuntimeClassInitialize
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::ShowDialog
Windows::ApplicationModel::Store::Internal::MessageDialogHelper::ShowDialogWithResultsAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetAppCatalogId
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetAppId
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetAppPurchaseCampaignIdAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetAppReceiptAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetCustomerCollectionsIdAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetCustomerPurchaseIdAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetExclusiveLockForProduct
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetLicenseInformation
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetLinkUri
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetProductReceiptAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::GetUnfulfilledConsumablesAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::Initialize
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::InitializeIdsFromLicense
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::LoadAddOnProductInfos
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::LoadAddOnProductInfosAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::LoadListingInformationAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::ReportConsumableFulfillmentAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::ReportConsumableFulfillmentSync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestAppPurchaseAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestProductPurchaseAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestProductPurchaseByProductIdAndSkuIdAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestProductPurchaseWithDisplayPropertiesAsync
Windows::ApplicationModel::Store::Internal::StoreCommerceServer::RequestProductPurchaseWithResultsAsync
Windows::ApplicationModel::Store::LicenseInformationServer::_TimerCallback
Windows::ApplicationModel::Store::LicenseInformationServer::add_LicenseChanged
Windows::ApplicationModel::Store::LicenseInformationServer::CheckForChanges
Windows::ApplicationModel::Store::LicenseInformationServer::CreateInstance
Windows::ApplicationModel::Store::LicenseInformationServer::DumpLicensesToDebugger
Windows::ApplicationModel::Store::LicenseInformationServer::get_ExpirationDate
Windows::ApplicationModel::Store::LicenseInformationServer::get_IsActive
Windows::ApplicationModel::Store::LicenseInformationServer::get_IsTrial
Windows::ApplicationModel::Store::LicenseInformationServer::get_ProductLicenses
Windows::ApplicationModel::Store::LicenseInformationServer::GetProductId
Windows::ApplicationModel::Store::LicenseInformationServer::Initialize
Windows::ApplicationModel::Store::LicenseInformationServer::RefreshConsumables
Windows::ApplicationModel::Store::LicenseInformationServer::RefreshInternalState
Windows::ApplicationModel::Store::LicenseInformationServer::remove_LicenseChanged
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_IsSatisfied
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByDevice
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByInstallMedia
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByOpenLicense
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByPass
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedBySignedInUser
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::get_SatisfiedByTrial
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionInfo::RuntimeClassInitialize
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult::get_ExtendedError
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult::get_LicenseSatisfactionInfos
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult::get_SkuId
Windows::ApplicationModel::Store::LicenseManagement::LicenseSatisfactionResult::RuntimeClassInitialize
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::AddLicenseAsync
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::AddLicenseAsync::<lambda_e1db209f168b3657ea73613545218e9e>::operator ()
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::GetALM
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::GetSatisfactionInfos
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::GetSatisfactionInfosAsync
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::GetSatisfactionInfosAsync::<lambda_9d3e6b609609b628bd3a08f8252fb043>::operator ()
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::RefreshLicensesAsync
Windows::ApplicationModel::Store::LicenseManagement::WinRtLicenseManager::RefreshLicensesAsync::<lambda_39b8ab18eb768c77ef40d9104d3429ec>::operator ()
Windows::ApplicationModel::Store::ListingInformationServer::get_AgeRating
Windows::ApplicationModel::Store::ListingInformationServer::get_CurrencyCode
Windows::ApplicationModel::Store::ListingInformationServer::get_CurrentMarket
Windows::ApplicationModel::Store::ListingInformationServer::get_Description
Windows::ApplicationModel::Store::ListingInformationServer::get_FormattedBasePrice
Windows::ApplicationModel::Store::ListingInformationServer::get_FormattedPrice
Windows::ApplicationModel::Store::ListingInformationServer::get_IsOnSale
Windows::ApplicationModel::Store::ListingInformationServer::get_Name
Windows::ApplicationModel::Store::ListingInformationServer::get_ProductListings
Windows::ApplicationModel::Store::ListingInformationServer::get_SaleEndDate
Windows::ApplicationModel::Store::ListingInformationServer::Initialize
Windows::ApplicationModel::Store::LoadListingOperationServer::DoWork
Windows::ApplicationModel::Store::LoadListingOperationServer::GetResults
Windows::ApplicationModel::Store::LoadListingOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::Preview::RequestProductPurchaseBySkuIdOperationServer::_CreatePurchaseResultsInformation
Windows::ApplicationModel::Store::Preview::RequestProductPurchaseBySkuIdOperationServer::DoWork
Windows::ApplicationModel::Store::Preview::RequestProductPurchaseBySkuIdOperationServer::GetResults
Windows::ApplicationModel::Store::Preview::RequestProductPurchaseBySkuIdOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::AskWuWhichHardwareIsAvailable
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::BuildKnownFeatureAndGuidArrays
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::FilterUnsupportedFeaturesInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::FilterUnsupportedSystemFeaturesAsync
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::FilterUnsupportedSystemFeaturesAsync::<lambda_6aeb6db7f6e9f834c6720b276c8987ae>::operator ()
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::get_HardwareManufacturerInfo
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::get_PurchasePromptingPolicy
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetEnterpriseStoreWebAccountId
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetEnterpriseStoreWebAccountIdForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetEnterpriseStoreWebAccountIdInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetHardwareManufacturerInfoInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetPurchasePromptingPolicyForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreLogDataAsync
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreLogDataAsync::<lambda_c23fa5d043f94258da964df15f68187b>::operator ()
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreWebAccountId
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreWebAccountIdForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::GetStoreWebAccountIdInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::HasStoreWebAccount
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::HasStoreWebAccountForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsPinToDesktopSupported
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsPinToStartSupported
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsPinToTaskbarSupported
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsStoreWebAccountId
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsStoreWebAccountIdForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::IsStoreWebAccountIdInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::PinToDesktop
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::PinToDesktopForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::put_PurchasePromptingPolicy
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::PutPurchasePromptingPolicyInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetEnterpriseStoreWebAccountId
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetEnterpriseStoreWebAccountIdForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetEnterpriseStoreWebAccountIdInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetMobileOperatorConfiguration
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetMobileOperatorConfigurationInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetPurchasePromptingPolicyForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetStoreWebAccountId
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetStoreWebAccountIdForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetStoreWebAccountIdInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetSystemConfiguration
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::SetSystemConfigurationInternal
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::ShouldRestrictToEnterpriseStoreOnly
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::ShouldRestrictToEnterpriseStoreOnlyForUser
Windows::ApplicationModel::Store::Preview::StoreConfigurationServer::StoreConfigurationServer
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::get_HardwareManufacturerId
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::get_ManufacturerName
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::get_ModelName
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::get_StoreContentModifierId
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::put_HardwareManufacturerId
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::put_ManufacturerName
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::put_ModelName
Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfoServer::put_StoreContentModifierId
Windows::ApplicationModel::Store::Preview::StorePreviewFactory::GetStoreCommerce
Windows::ApplicationModel::Store::Preview::StorePreviewFactory::Initialize
Windows::ApplicationModel::Store::Preview::StorePreviewFactory::LoadAddOnProductInfosAsync
Windows::ApplicationModel::Store::Preview::StorePreviewFactory::RequestProductPurchaseByProductIdAndSkuIdAsync
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_Description
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_ProductId
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_ProductType
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_SkuInfoList
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::get_Title
Windows::ApplicationModel::Store::Preview::StorePreviewProductInfoServer::Initialize
Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResultsServer::get_ProductPurchaseStatus
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_CurrencyCode
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_CustomDeveloperData
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_Description
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_ExtendedData
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_FormattedListPrice
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_ProductId
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_SkuId
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_SkuType
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::get_Title
Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfoServer::Initialize
Windows::ApplicationModel::Store::Preview::WebAuthenticationCoreManagerHelper::RequestTokenWithUIElementHostingAndWebAccountAsync
Windows::ApplicationModel::Store::Preview::WebAuthenticationCoreManagerHelper::RequestTokenWithUIElementHostingAsync
Windows::ApplicationModel::Store::ProductLicenseServer::get_ExpirationDate
Windows::ApplicationModel::Store::ProductLicenseServer::get_IsActive
Windows::ApplicationModel::Store::ProductLicenseServer::get_IsConsumable
Windows::ApplicationModel::Store::ProductLicenseServer::get_ProductId
Windows::ApplicationModel::Store::ProductLicenseServer::Initialize
Windows::ApplicationModel::Store::ProductLicenseServer::InitializeInvalid
Windows::ApplicationModel::Store::ProductListingServer::get_CurrencyCode
Windows::ApplicationModel::Store::ProductListingServer::get_Description
Windows::ApplicationModel::Store::ProductListingServer::get_FormattedBasePrice
Windows::ApplicationModel::Store::ProductListingServer::get_FormattedPrice
Windows::ApplicationModel::Store::ProductListingServer::get_ImageUri
Windows::ApplicationModel::Store::ProductListingServer::get_IsOnSale
Windows::ApplicationModel::Store::ProductListingServer::get_Keywords
Windows::ApplicationModel::Store::ProductListingServer::get_Name
Windows::ApplicationModel::Store::ProductListingServer::get_ProductId
Windows::ApplicationModel::Store::ProductListingServer::get_ProductType
Windows::ApplicationModel::Store::ProductListingServer::get_SaleEndDate
Windows::ApplicationModel::Store::ProductListingServer::get_Tag
Windows::ApplicationModel::Store::ProductListingServer::Initialize
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesFactory::ActivateInstance
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesFactory::CreateProductPurchaseDisplayProperties
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::get_Description
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::get_Image
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::get_Name
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::Initialize
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::put_Description
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::put_Image
Windows::ApplicationModel::Store::ProductPurchaseDisplayPropertiesServer::put_Name
Windows::ApplicationModel::Store::ProductReceiptRetrievalOperationServer::DoWork
Windows::ApplicationModel::Store::ProductReceiptRetrievalOperationServer::GetResults
Windows::ApplicationModel::Store::ProductReceiptRetrievalOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::PurchaseResultsServer::get_OfferId
Windows::ApplicationModel::Store::PurchaseResultsServer::get_ReceiptXml
Windows::ApplicationModel::Store::PurchaseResultsServer::get_Status
Windows::ApplicationModel::Store::PurchaseResultsServer::get_TransactionId
Windows::ApplicationModel::Store::PurchaseResultsServer::Initialize
Windows::ApplicationModel::Store::ReceiptRetrievalOperationServer::DoWork
Windows::ApplicationModel::Store::ReceiptRetrievalOperationServer::GetResults
Windows::ApplicationModel::Store::ReceiptRetrievalOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::ReportConsumableFulfillmentOperationServer::DoWork
Windows::ApplicationModel::Store::ReportConsumableFulfillmentOperationServer::GetResults
Windows::ApplicationModel::Store::RequestAppPurchaseOperationServer::GetResults
Windows::ApplicationModel::Store::RequestAppPurchaseOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::RequestProductPurchaseOperationServer::DoWork
Windows::ApplicationModel::Store::RequestProductPurchaseOperationServer::GetResults
Windows::ApplicationModel::Store::RequestProductPurchaseOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::RequestProductPurchaseWithDisplayPropertiesOperationServer::_CreatePurchaseResultsInformation
Windows::ApplicationModel::Store::RequestProductPurchaseWithDisplayPropertiesOperationServer::DoWork
Windows::ApplicationModel::Store::RequestProductPurchaseWithDisplayPropertiesOperationServer::GetResults
Windows::ApplicationModel::Store::RequestProductPurchaseWithDisplayPropertiesOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::RequestProductPurchaseWithResultsOperationServer::_CreatePurchaseResultsInformation
Windows::ApplicationModel::Store::RequestProductPurchaseWithResultsOperationServer::DoWork
Windows::ApplicationModel::Store::RequestProductPurchaseWithResultsOperationServer::GetResults
Windows::ApplicationModel::Store::RequestProductPurchaseWithResultsOperationServer::RuntimeClassInitialize
Windows::ApplicationModel::Store::UnfulfilledConsumableServer::get_OfferId
Windows::ApplicationModel::Store::UnfulfilledConsumableServer::get_ProductId
Windows::ApplicationModel::Store::UnfulfilledConsumableServer::get_TransactionId
Windows::ApplicationModel::Store::UnfulfilledConsumableServer::Initialize
Windows::Internal::NativeString<class Windows::Internal::CoTaskMemPolicy<unsigned short> >::_EnsureCapacity
Windows::Internal::NativeString<class Windows::Internal::CoTaskMemPolicy<unsigned short> >::_EnsureCount
Windows::Internal::NativeString<class Windows::Internal::CoTaskMemPolicy<unsigned short> >::_Initialize
Windows::Services::Store::AcquireStoreLicenseForOptionalPackageOperation::DoWork
Windows::Services::Store::AcquireStoreLicenseForOptionalPackageOperation::GetResults
Windows::Services::Store::AcquireStoreLicenseForOptionalPackageOperation::RuntimeClassInitialize
Windows::Services::Store::AsyncOperationWithProgressBase<struct Windows::Foundation::IAsyncOperationWithProgress<class Windows::Services::Store::StorePackageUpdateResult *,struct Windows::Services::Store::StorePackageUpdateStatus>,struct Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<class Windows::Services::Store::StorePackageUpdateResult *,struct Windows::Services::Store::StorePackageUpdateStatus>,struct Windows::Foundation::IAsyncOperationProgressHandler<class Windows::Services::Store::StorePackageUpdateResult *,struct Windows::Services::Store::StorePackageUpdateStatus>,0>::DoWorkStub
Windows::Services::Store::BackgroundTaskOperation::ConvertJsonObjectToPropertySet
Windows::Services::Store::BackgroundTaskOperation::ConvertPropertySetToJsonObject
Windows::Services::Store::BackgroundTaskOperation::DoWork
Windows::Services::Store::BackgroundTaskOperation::GetResults
Windows::Services::Store::BackgroundTaskOperation::RuntimeClassInitialize
Windows::Services::Store::BulkHydrateOperation::DoWork
Windows::Services::Store::BulkHydrateOperation::GetResults
Windows::Services::Store::BulkHydrateOperation::RuntimeClassInitialize
Windows::Services::Store::CanAcquireStoreLicenseForOptionalPackageOperation::DoWork
Windows::Services::Store::CanAcquireStoreLicenseForOptionalPackageOperation::GetResults
Windows::Services::Store::CanAcquireStoreLicenseForOptionalPackageOperation::RuntimeClassInitialize
Windows::Services::Store::CanAcquireStoreLicenseOperation::DoWork
Windows::Services::Store::CanAcquireStoreLicenseOperation::GetResults
Windows::Services::Store::CanAcquireStoreLicenseOperation::RuntimeClassInitialize
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_AttachAllEventHandlers
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_ClearAllEventHandlers
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_ClearEventHandler
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_Initialize
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_OnStoreQueueItemStatusChanged
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_RefreshAllStatusesAndOverallState
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::_RefreshStatus
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::DoWork
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::GetResults
Windows::Services::Store::DownloadAndInstallStorePackagesOperation::RuntimeClassInitialize
Windows::Services::Store::FindStoreProductForPackageOperation::DoWork
Windows::Services::Store::FindStoreProductForPackageOperation::GetResults
Windows::Services::Store::FindStoreProductForPackageOperation::RuntimeClassInitialize
Windows::Services::Store::GetAppAndSupplementalStorePackageUpdatesOperation::DoWork
Windows::Services::Store::GetAppAndSupplementalStorePackageUpdatesOperation::GetResults
Windows::Services::Store::GetAppAndSupplementalStorePackageUpdatesOperation::RuntimeClassInitialize
Windows::Services::Store::GetAssociatedStoreProductsOperation::DoWork
Windows::Services::Store::GetAssociatedStoreProductsOperation::GetResults
Windows::Services::Store::GetAssociatedStoreProductsOperation::RuntimeClassInitialize
Windows::Services::Store::GetAssociatedStoreProductsPagedOperation::BeginWork
Windows::Services::Store::GetAssociatedStoreProductsPagedOperation::DoWork
Windows::Services::Store::GetAssociatedStoreProductsPagedOperation::GetResults
Windows::Services::Store::GetAssociatedStoreProductsPagedOperation::RuntimeClassInitialize
Windows::Services::Store::GetAssociatedStoreQueueItemsOperation::DoWork
Windows::Services::Store::GetAssociatedStoreQueueItemsOperation::GetResults
Windows::Services::Store::GetAssociatedStoreQueueItemsOperation::RuntimeClassInitialize
Windows::Services::Store::GetConsumableBalanceRemainingOperation::DoWork
Windows::Services::Store::GetConsumableBalanceRemainingOperation::GetResults
Windows::Services::Store::GetConsumableBalanceRemainingOperation::RuntimeClassInitialize
Windows::Services::Store::GetCustomerCollectionsIdOperation::DoWork
Windows::Services::Store::GetCustomerCollectionsIdOperation::GetResults
Windows::Services::Store::GetCustomerCollectionsIdOperation::RuntimeClassInitialize
Windows::Services::Store::GetCustomerPurchaseIdOperation::DoWork
Windows::Services::Store::GetCustomerPurchaseIdOperation::GetResults
Windows::Services::Store::GetCustomerPurchaseIdOperation::RuntimeClassInitialize
Windows::Services::Store::GetIsAnySkuInstalledOperation::DoWork
Windows::Services::Store::GetIsAnySkuInstalledOperation::GetResults
Windows::Services::Store::GetIsAnySkuInstalledOperation::RuntimeClassInitialize
Windows::Services::Store::GetOfflineLicensesOperation::DoWork
Windows::Services::Store::GetOfflineLicensesOperation::GetResults
Windows::Services::Store::GetOfflineLicensesOperation::RuntimeClassInitialize
Windows::Services::Store::GetStoreProductOperation::DoWork
Windows::Services::Store::GetStoreProductOperation::GetResults
Windows::Services::Store::GetStoreProductOperation::RuntimeClassInitialize
Windows::Services::Store::GetStoreQueueItemsOperation::DoWork
Windows::Services::Store::GetStoreQueueItemsOperation::GetResults
Windows::Services::Store::GetStoreQueueItemsOperation::RuntimeClassInitialize
Windows::Services::Store::GetUserCollectionOperation::DoWork
Windows::Services::Store::GetUserCollectionOperation::GetResults
Windows::Services::Store::GetUserCollectionOperation::RuntimeClassInitialize
Windows::Services::Store::GetUserCollectionPagedOperation::DoWork
Windows::Services::Store::GetUserCollectionPagedOperation::GetResults
Windows::Services::Store::GetUserCollectionPagedOperation::RuntimeClassInitialize
Windows::Services::Store::Internal::ConvertPUIDFromDecToHex
Windows::Services::Store::Internal::GetNextAssociatedStoreProducts::GetNextAsync
Windows::Services::Store::Internal::GetNextAssociatedStoreProducts::RuntimeClassInitialize
Windows::Services::Store::Internal::GetNextUserCollection::GetNextAsync
Windows::Services::Store::Internal::GetNextUserCollection::RuntimeClassInitialize
Windows::Services::Store::Internal::StoreContentIdKeyIdItem::get_ContentIds
Windows::Services::Store::Internal::StoreContentIdKeyIdItem::get_KeyIds
Windows::Services::Store::Internal::StoreContentIdKeyIdItem::get_ProductId
Windows::Services::Store::Internal::StoreContentIdKeyIdItem::RuntimeClassInitialize
Windows::Services::Store::Internal::StoreContentIdKeyIdResponse::get_Items
Windows::Services::Store::Internal::StoreContentIdKeyIdResponse::RuntimeClassInitialize
Windows::Services::Store::Internal::StoreContextServer::_ForceRefreshLicensesProc
Windows::Services::Store::Internal::StoreContextServer::_GetAppInstallManager
Windows::Services::Store::Internal::StoreContextServer::_GetStoreQueueItems
Windows::Services::Store::Internal::StoreContextServer::_LicenseChanged
Windows::Services::Store::Internal::StoreContextServer::_LoadLicenseJson
Windows::Services::Store::Internal::StoreContextServer::_MakeDefaultLicenseResponse
Windows::Services::Store::Internal::StoreContextServer::_ParseLicenseInstance
Windows::Services::Store::Internal::StoreContextServer::_RequestPurchase
Windows::Services::Store::Internal::StoreContextServer::_RetrieveHWNDFromCallerData
Windows::Services::Store::Internal::StoreContextServer::AcquireStoreLicenseForOptionalPackage
Windows::Services::Store::Internal::StoreContextServer::BackgroundPurchaseDialogTask
Windows::Services::Store::Internal::StoreContextServer::CanSilentlyDownloadStorePackageUpdates
Windows::Services::Store::Internal::StoreContextServer::CaptureStoreContextCallerData
Windows::Services::Store::Internal::StoreContextServer::ConsumeConsumable
Windows::Services::Store::Internal::StoreContextServer::DownloadStorePackages
Windows::Services::Store::Internal::StoreContextServer::DownloadStorePackageUpdates
Windows::Services::Store::Internal::StoreContextServer::FocusOnWindow
Windows::Services::Store::Internal::StoreContextServer::GetAppAndOptionalStorePackageUpdates
Windows::Services::Store::Internal::StoreContextServer::GetAppAndOptionalStorePackageUpdatesAsync
Windows::Services::Store::Internal::StoreContextServer::GetAssociatedStoreProducts
Windows::Services::Store::Internal::StoreContextServer::GetConsumableBalanceRemaining
Windows::Services::Store::Internal::StoreContextServer::GetContentIdKeyIdsForProductIds
Windows::Services::Store::Internal::StoreContextServer::GetCustomerCollectionsId
Windows::Services::Store::Internal::StoreContextServer::GetCustomerPurchaseId
Windows::Services::Store::Internal::StoreContextServer::GetLinkUri
Windows::Services::Store::Internal::StoreContextServer::GetOfflineLicenses
Windows::Services::Store::Internal::StoreContextServer::GetPreviewLicenseResultForPackage
Windows::Services::Store::Internal::StoreContextServer::GetPreviewLicenseResultForStoreId
Windows::Services::Store::Internal::StoreContextServer::GetProduct
Windows::Services::Store::Internal::StoreContextServer::GetProductForPackage
Windows::Services::Store::Internal::StoreContextServer::GetProducts
Windows::Services::Store::Internal::StoreContextServer::GetProductsByKinds
Windows::Services::Store::Internal::StoreContextServer::GetProductsWithOptions
Windows::Services::Store::Internal::StoreContextServer::GetUserCollection
Windows::Services::Store::Internal::StoreContextServer::Initialize
Windows::Services::Store::Internal::StoreContextServer::IsStoreProductInstalled
Windows::Services::Store::Internal::StoreContextServer::ReleaseStoreLicenseForOptionalPackage
Windows::Services::Store::Internal::StoreContextServer::RequestDownloadAndInstallStorePackagesAsync
Windows::Services::Store::Internal::StoreContextServer::RequestDownloadAndInstallStorePackageUpdatesAsync
Windows::Services::Store::Internal::StoreContextServer::RequestDownloadStorePackageUpdatesAsync
Windows::Services::Store::Internal::StoreContextServer::SendStoreRequest
Windows::Services::Store::Internal::StoreContextServer::SendStoreRequestWithUris
Windows::Services::Store::Internal::StoreContextServer::SetInstallOrderForAssociatedStoreQueueItems
Windows::Services::Store::Internal::StoreContextServer::UninstallStorePackage
Windows::Services::Store::Internal::StoreContextServer::UserConsentedToUninstall
Windows::Services::Store::Internal::StorePackageLicenseWnfWatcher::AddOptionalPackageToWatch
Windows::Services::Store::Internal::StorePackageLicenseWnfWatcher::Initialize
Windows::Services::Store::Internal::StorePackageLicenseWnfWatcher::OnEventCallback
Windows::Services::Store::Internal::StorePackageLicenseWnfWatcher::RemoveOptionalPackageToWatch
Windows::Services::Store::JsonParser::ParseArrayOfOne
Windows::Services::Store::JsonParser::ParseArrayToVector
Windows::Services::Store::JsonParser::ParseArrayToVectorOfHSTRING
Windows::Services::Store::JsonParser::ParseBoolean
Windows::Services::Store::JsonParser::ParseComPtr
Windows::Services::Store::JsonParser::ParseDate
Windows::Services::Store::JsonParser::ParseDouble
Windows::Services::Store::JsonParser::ParseInteger
Windows::Services::Store::JsonParser::ParseJSONStringToObject
Windows::Services::Store::JsonParser::ParseJSONToObject
Windows::Services::Store::JsonParser::ParseString
Windows::Services::Store::JsonParser::ParseTimeSpan
Windows::Services::Store::PurchaseEventArgsRedstone::get_JsonRequest
Windows::Services::Store::PurchaseEventArgsRedstone::get_JsonResponse
Windows::Services::Store::PurchaseEventArgsRedstone::put_JsonResponse
Windows::Services::Store::PurchaseEventArgsRedstone::RuntimeClassInitialize
Windows::Services::Store::PurchaseEventArgsRedstone::SetSize
Windows::Services::Store::PurchaseOperation::_BuildModalExperienceOptions
Windows::Services::Store::PurchaseOperation::_FillTheRequestWithRequiredParameters
Windows::Services::Store::PurchaseOperation::_FirePurchaseTelemetry
Windows::Services::Store::PurchaseOperation::_OnModalExperienceEvent
Windows::Services::Store::PurchaseOperation::_Purchase
Windows::Services::Store::PurchaseOperation::DoWork
Windows::Services::Store::PurchaseOperation::GetResults
Windows::Services::Store::PurchaseOperation::RuntimeClassInitialize
Windows::Services::Store::ReportConsumableOperation::DoWork
Windows::Services::Store::ReportConsumableOperation::GetResults
Windows::Services::Store::ReportConsumableOperation::RuntimeClassInitialize
Windows::Services::Store::RequestPurchaseOperation::DoWork
Windows::Services::Store::RequestPurchaseOperation::GetResults
Windows::Services::Store::RequestPurchaseOperation::RuntimeClassInitialize
Windows::Services::Store::RequestStoreRateAndReviewOperation::DoWork
Windows::Services::Store::RequestStoreRateAndReviewOperation::GetResults
Windows::Services::Store::RequestStoreRateAndReviewOperation::RuntimeClassInitialize
Windows::Services::Store::StoreAcquireLicenseResult::get_ExtendedError
Windows::Services::Store::StoreAcquireLicenseResult::get_StorePackageLicense
Windows::Services::Store::StoreAppLicense::get_AddOnLicenses
Windows::Services::Store::StoreAppLicense::get_ExpirationDate
Windows::Services::Store::StoreAppLicense::get_IsActive
Windows::Services::Store::StoreAppLicense::get_IsDiscLicense
Windows::Services::Store::StoreAppLicense::get_IsTrial
Windows::Services::Store::StoreAppLicense::get_IsTrialOwnedByThisUser
Windows::Services::Store::StoreAppLicense::get_SkuStoreId
Windows::Services::Store::StoreAppLicense::get_TrialTimeRemaining
Windows::Services::Store::StoreAppLicense::get_TrialUniqueId
Windows::Services::Store::StoreAppLicense::RuntimeClassInitialize
Windows::Services::Store::StoreAvailability::get_AvailabilityId
Windows::Services::Store::StoreAvailability::get_EndDate
Windows::Services::Store::StoreAvailability::get_Price
Windows::Services::Store::StoreAvailability::get_StoreId
Windows::Services::Store::StoreAvailability::RequestPurchaseAsync
Windows::Services::Store::StoreAvailability::RequestPurchaseWithPurchasePropertiesAsync
Windows::Services::Store::StoreAvailability::RuntimeClassInitialize
Windows::Services::Store::StoreAvailability::set_ProductIdSkuId
Windows::Services::Store::StoreCanAcquireLicenseResult::get_ExtendedError
Windows::Services::Store::StoreCanAcquireLicenseResult::get_LicensableSku
Windows::Services::Store::StoreCanAcquireLicenseResult::get_Status
Windows::Services::Store::StoreCanAcquireLicenseResult::RuntimeClassInitialize
Windows::Services::Store::StoreCollectionData::get_AcquiredDate
Windows::Services::Store::StoreCollectionData::get_CampaignId
Windows::Services::Store::StoreCollectionData::get_DeveloperOfferId
Windows::Services::Store::StoreCollectionData::get_EndDate
Windows::Services::Store::StoreCollectionData::get_IsTrial
Windows::Services::Store::StoreCollectionData::get_ProductId
Windows::Services::Store::StoreCollectionData::get_SkuId
Windows::Services::Store::StoreCollectionData::get_StartDate
Windows::Services::Store::StoreCollectionData::get_TrialTimeRemaining
Windows::Services::Store::StoreCollectionData::RuntimeClassInitialize
Windows::Services::Store::StoreConsumableResult::get_BalanceRemaining
Windows::Services::Store::StoreConsumableResult::get_ExtendedError
Windows::Services::Store::StoreConsumableResult::get_Status
Windows::Services::Store::StoreConsumableResult::get_TrackingId
Windows::Services::Store::StoreContext::_RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync
Windows::Services::Store::StoreContext::AcquireStoreLicenseForOptionalPackageAsync
Windows::Services::Store::StoreContext::AcquireStoreLicenseForOptionalPackageAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::add_OfflineLicensesChanged
Windows::Services::Store::StoreContext::add_OfflineLicensesChanged() invoked. (CV:%hs)
Windows::Services::Store::StoreContext::AssociateWithStoreContext
Windows::Services::Store::StoreContext::CanAcquireStoreLicenseAsync
Windows::Services::Store::StoreContext::CanAcquireStoreLicenseAsync(%s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::CanAcquireStoreLicenseForOptionalPackageAsync
Windows::Services::Store::StoreContext::CanAcquireStoreLicenseForOptionalPackageAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::CreateStoreContextServer
Windows::Services::Store::StoreContext::DownloadAndInstallStorePackagesAsync
Windows::Services::Store::StoreContext::DownloadAndInstallStorePackagesAsync([%s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::FindStoreProductForPackageAsync
Windows::Services::Store::StoreContext::FindStoreProductForPackageAsync(%s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::get_CanSilentlyDownloadStorePackageUpdates
Windows::Services::Store::StoreContext::get_CanSilentlyDownloadStorePackageUpdates() invoked. (CV:%hs)
Windows::Services::Store::StoreContext::get_User
Windows::Services::Store::StoreContext::get_User() invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetAppAndOptionalStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::GetAppAndOptionalStorePackageUpdatesAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetAppLicenseAsync
Windows::Services::Store::StoreContext::GetAppLicenseAsync() invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetAppWindowHandle
Windows::Services::Store::StoreContext::GetAssociatedStoreProductsAsync
Windows::Services::Store::StoreContext::GetAssociatedStoreProductsAsync([%s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetAssociatedStoreProductsWithPagingAsync
Windows::Services::Store::StoreContext::GetAssociatedStoreProductsWithPagingAsync([%s], %u) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetAssociatedStoreQueueItemsAsync
Windows::Services::Store::StoreContext::GetAssociatedStoreQueueItemsAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetConsumableBalanceRemainingAsync
Windows::Services::Store::StoreContext::GetConsumableBalanceRemainingAsync(%s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetCustomerCollectionsIdAsync
Windows::Services::Store::StoreContext::GetCustomerCollectionsIdAsync(%s, %s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetCustomerPurchaseIdAsync
Windows::Services::Store::StoreContext::GetCustomerPurchaseIdAsync(%s, %s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetIsAnySkuInstalledAsync
Windows::Services::Store::StoreContext::GetIsAnySkuInstalledAsync(%s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetPackageFamilyNameFromPackage
Windows::Services::Store::StoreContext::GetStoreContextServer
Windows::Services::Store::StoreContext::GetStoreProductForCurrentAppAsync
Windows::Services::Store::StoreContext::GetStoreProductForCurrentAppAsync() invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetStoreProductsAsync
Windows::Services::Store::StoreContext::GetStoreProductsAsync([%s, %s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetStoreProductsWithOptionsAsync
Windows::Services::Store::StoreContext::GetStoreProductsWithOptionsAsync([%s, %s, %s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetStoreQueueItemsAsync
Windows::Services::Store::StoreContext::GetStoreQueueItemsAsync([%s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetUserCollectionAsync
Windows::Services::Store::StoreContext::GetUserCollectionAsync([%s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::GetUserCollectionWithPagingAsync
Windows::Services::Store::StoreContext::GetUserCollectionWithPagingAsync([%s], %u) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::remove_OfflineLicensesChanged
Windows::Services::Store::StoreContext::remove_OfflineLicensesChanged(%llu) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::ReportConsumableFulfillmentAsync
Windows::Services::Store::StoreContext::ReportConsumableFulfillmentAsync(%s, %u, %s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackagesAsync
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackagesAsync([%s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackagesWithInstallOptionsAsync([%s, %s]) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::RequestDownloadAndInstallStorePackageUpdatesAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestDownloadStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::RequestDownloadStorePackageUpdatesAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestPurchaseAsync
Windows::Services::Store::StoreContext::RequestPurchaseAsync(%s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestPurchaseWithPurchasePropertiesAsync
Windows::Services::Store::StoreContext::RequestPurchaseWithPurchasePropertiesAsync(%s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestRateAndReviewAppAsync
Windows::Services::Store::StoreContext::RequestRateAndReviewAppAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::RequestUninstallStorePackageAsync
Windows::Services::Store::StoreContext::RequestUninstallStorePackageAsync invoked by %s for %s. (CV:%hs)
Windows::Services::Store::StoreContext::RequestUninstallStorePackageByStoreIdAsync
Windows::Services::Store::StoreContext::RequestUninstallStorePackageByStoreIdAsync invoked by %s for %s. (CV:%hs)
Windows::Services::Store::StoreContext::RuntimeClassInitialize
Windows::Services::Store::StoreContext::SendStoreRequestAsync
Windows::Services::Store::StoreContext::SendStoreRequestAsync(%u, %s) invoked. (CV:%hs)
Windows::Services::Store::StoreContext::SetInstallOrderForAssociatedStoreQueueItemsAsync
Windows::Services::Store::StoreContext::SetInstallOrderForAssociatedStoreQueueItemsAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::TrySilentDownloadAndInstallStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::TrySilentDownloadAndInstallStorePackageUpdatesAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::TrySilentDownloadStorePackageUpdatesAsync
Windows::Services::Store::StoreContext::TrySilentDownloadStorePackageUpdatesAsync invoked. (CV:%hs)
Windows::Services::Store::StoreContext::UninstallStorePackageAsync
Windows::Services::Store::StoreContext::UninstallStorePackageAsync invoked by %s for %s. (CV:%hs)
Windows::Services::Store::StoreContext::UninstallStorePackageAsyncHelper
Windows::Services::Store::StoreContext::UninstallStorePackageByStoreIdAsync
Windows::Services::Store::StoreContext::UninstallStorePackageByStoreIdAsync invoked by %s for %s. (CV:%hs)
Windows::Services::Store::StoreContextFactory::GetDefault
Windows::Services::Store::StoreContextFactory::GetDefault() invoked. (CV:%hs)
Windows::Services::Store::StoreContextFactory::GetForUser
Windows::Services::Store::StoreContextFactory::GetForUser() invoked. (CV:%hs)
Windows::Services::Store::StoreContextLicenseChangedCallback::RuntimeClassInitialize
Windows::Services::Store::StoreImage::get_Caption
Windows::Services::Store::StoreImage::get_Height
Windows::Services::Store::StoreImage::get_ImagePurposeTag
Windows::Services::Store::StoreImage::get_Uri
Windows::Services::Store::StoreImage::get_Width
Windows::Services::Store::StoreImage::RuntimeClassInitialize
Windows::Services::Store::StoreLicense::get_ExpirationDate
Windows::Services::Store::StoreLicense::get_InAppOfferToken
Windows::Services::Store::StoreLicense::get_IsActive
Windows::Services::Store::StoreLicense::get_SkuStoreId
Windows::Services::Store::StoreLicense::RuntimeClassInitialize
Windows::Services::Store::StorePackageInstallOptions::get_AllowForcedAppRestart
Windows::Services::Store::StorePackageLicense::~StorePackageLicense
Windows::Services::Store::StorePackageLicense::add_LicenseLost
Windows::Services::Store::StorePackageLicense::Close
Windows::Services::Store::StorePackageLicense::get_IsValid
Windows::Services::Store::StorePackageLicense::get_Package
Windows::Services::Store::StorePackageLicense::ReleaseLicense
Windows::Services::Store::StorePackageLicense::remove_LicenseLost
Windows::Services::Store::StorePackageLicense::RuntimeClassInitialize
Windows::Services::Store::StorePackageLicenseLostCallback::RuntimeClassInitialize
Windows::Services::Store::StorePackageUpdate::get_Mandatory
Windows::Services::Store::StorePackageUpdate::get_Package
Windows::Services::Store::StorePackageUpdate::RuntimeClassInitialize
Windows::Services::Store::StorePackageUpdateResult::get_OverallState
Windows::Services::Store::StorePackageUpdateResult::get_StorePackageUpdateStatuses
Windows::Services::Store::StorePackageUpdateResult::get_StoreQueueItems
Windows::Services::Store::StorePackageUpdateResult::RuntimeClassInitialize
Windows::Services::Store::StorePrice::get_CurrencyCode
Windows::Services::Store::StorePrice::get_FormattedBasePrice
Windows::Services::Store::StorePrice::get_FormattedPrice
Windows::Services::Store::StorePrice::get_FormattedRecurrencePrice
Windows::Services::Store::StorePrice::get_IsOnSale
Windows::Services::Store::StorePrice::get_SaleEndDate
Windows::Services::Store::StorePrice::RuntimeClassInitialize
Windows::Services::Store::StoreProduct::_SortSkus
Windows::Services::Store::StoreProduct::get_Description
Windows::Services::Store::StoreProduct::get_HasDigitalDownload
Windows::Services::Store::StoreProduct::get_Images
Windows::Services::Store::StoreProduct::get_InAppOfferToken
Windows::Services::Store::StoreProduct::get_IsInUserCollection
Windows::Services::Store::StoreProduct::get_Keywords
Windows::Services::Store::StoreProduct::get_Language
Windows::Services::Store::StoreProduct::get_LinkUri
Windows::Services::Store::StoreProduct::get_PackageFamilyName
Windows::Services::Store::StoreProduct::get_Price
Windows::Services::Store::StoreProduct::get_ProductKind
Windows::Services::Store::StoreProduct::get_Skus
Windows::Services::Store::StoreProduct::get_StoreId
Windows::Services::Store::StoreProduct::get_Title
Windows::Services::Store::StoreProduct::get_Videos
Windows::Services::Store::StoreProduct::GetIsAnySkuInstalledAsync
Windows::Services::Store::StoreProduct::RequestPurchaseAsync
Windows::Services::Store::StoreProduct::RequestPurchaseWithPurchasePropertiesAsync
Windows::Services::Store::StoreProduct::RuntimeClassInitialize
Windows::Services::Store::StoreProduct::SetStoreContext
Windows::Services::Store::StoreProductOptions::RuntimeClassInitialize
Windows::Services::Store::StoreProductPagedQueryResult::BuildMap
Windows::Services::Store::StoreProductPagedQueryResult::get_ExtendedError
Windows::Services::Store::StoreProductPagedQueryResult::get_HasMoreResults
Windows::Services::Store::StoreProductPagedQueryResult::get_Products
Windows::Services::Store::StoreProductPagedQueryResult::GetNextAsync
Windows::Services::Store::StoreProductPagedQueryResult::RuntimeClassInitialize
Windows::Services::Store::StoreProductQueryResult::get_ExtendedError
Windows::Services::Store::StoreProductQueryResult::get_Products
Windows::Services::Store::StoreProductQueryResult::RuntimeClassInitialize
Windows::Services::Store::StoreProductResult::get_ExtendedError
Windows::Services::Store::StoreProductResult::get_Product
Windows::Services::Store::StoreProductResult::RuntimeClassInitialize
Windows::Services::Store::StorePurchaseProperties::get_ExtendedJsonData
Windows::Services::Store::StorePurchaseProperties::get_Name
Windows::Services::Store::StorePurchaseProperties::put_ExtendedJsonData
Windows::Services::Store::StorePurchaseProperties::put_Name
Windows::Services::Store::StorePurchaseProperties::RuntimeClassInitialize
Windows::Services::Store::StorePurchasePropertiesFactory::ActivateInstance
Windows::Services::Store::StorePurchasePropertiesFactory::Create
Windows::Services::Store::StorePurchaseResult::get_ExtendedError
Windows::Services::Store::StorePurchaseResult::get_Status
Windows::Services::Store::StoreQueueItem::_OnAppInstallItemCompleted
Windows::Services::Store::StoreQueueItem::_OnAppInstallItemStatusChanged
Windows::Services::Store::StoreQueueItem::add_Completed
Windows::Services::Store::StoreQueueItem::add_StatusChanged
Windows::Services::Store::StoreQueueItem::CancelInstallAsync
Windows::Services::Store::StoreQueueItem::CancelInstallAsync::<lambda_20c400d788d402156f2f9faf102b2a3b>::operator ()
Windows::Services::Store::StoreQueueItem::get_InstallKind
Windows::Services::Store::StoreQueueItem::get_IsDownloaded
Windows::Services::Store::StoreQueueItem::get_IsMandatory
Windows::Services::Store::StoreQueueItem::get_PackageFamilyName
Windows::Services::Store::StoreQueueItem::get_ProductId
Windows::Services::Store::StoreQueueItem::GetCurrentStatus
Windows::Services::Store::StoreQueueItem::PauseInstallAsync
Windows::Services::Store::StoreQueueItem::PauseInstallAsync::<lambda_5459d2b40bfb70f056128d7a36ecade4>::operator ()
Windows::Services::Store::StoreQueueItem::remove_Completed
Windows::Services::Store::StoreQueueItem::remove_StatusChanged
Windows::Services::Store::StoreQueueItem::ResumeInstallAsync
Windows::Services::Store::StoreQueueItem::ResumeInstallAsync::<lambda_1142cabf375a7ff171a0635a2149ec61>::operator ()
Windows::Services::Store::StoreQueueItem::RuntimeClassInitialize
Windows::Services::Store::StoreQueueItemCompletedEventArgs::get_Status
Windows::Services::Store::StoreQueueItemStatus::get_ExtendedError
Windows::Services::Store::StoreQueueItemStatus::get_PackageInstallExtendedState
Windows::Services::Store::StoreQueueItemStatus::get_PackageInstallState
Windows::Services::Store::StoreQueueItemStatus::get_UpdateStatus
Windows::Services::Store::StoreRateAndReviewResult::get_ExtendedError
Windows::Services::Store::StoreRateAndReviewResult::get_ExtendedJsonData
Windows::Services::Store::StoreRateAndReviewResult::get_Status
Windows::Services::Store::StoreRateAndReviewResult::get_WasUpdated
Windows::Services::Store::StoreRateAndReviewResult::RuntimeClassInitialize
Windows::Services::Store::StoreRequestHelperFactory::SendRequestAsync
Windows::Services::Store::StoreRequestOperation::DoWork
Windows::Services::Store::StoreRequestOperation::GetResults
Windows::Services::Store::StoreRequestOperation::RuntimeClassInitialize
Windows::Services::Store::StoreSendRequestResult::get_ExtendedError
Windows::Services::Store::StoreSendRequestResult::get_HttpStatusCode
Windows::Services::Store::StoreSendRequestResult::get_Response
Windows::Services::Store::StoreSendRequestResult::RuntimeClassInitialize
Windows::Services::Store::StoreSku::_SortAvailabilities
Windows::Services::Store::StoreSku::get_Availabilities
Windows::Services::Store::StoreSku::get_BundledSkus
Windows::Services::Store::StoreSku::get_CollectionData
Windows::Services::Store::StoreSku::get_CustomDeveloperData
Windows::Services::Store::StoreSku::get_Description
Windows::Services::Store::StoreSku::get_FulfillmentType
Windows::Services::Store::StoreSku::get_Images
Windows::Services::Store::StoreSku::get_IsInUserCollection
Windows::Services::Store::StoreSku::get_IsSubscription
Windows::Services::Store::StoreSku::get_IsTrial
Windows::Services::Store::StoreSku::get_Language
Windows::Services::Store::StoreSku::get_Price
Windows::Services::Store::StoreSku::get_SkuId
Windows::Services::Store::StoreSku::get_StoreId
Windows::Services::Store::StoreSku::get_SubscriptionInfo
Windows::Services::Store::StoreSku::get_Title
Windows::Services::Store::StoreSku::get_Videos
Windows::Services::Store::StoreSku::GetIsInstalledAsync
Windows::Services::Store::StoreSku::RequestPurchaseAsync
Windows::Services::Store::StoreSku::RequestPurchaseWithPurchasePropertiesAsync
Windows::Services::Store::StoreSku::RuntimeClassInitialize
Windows::Services::Store::StoreSku::set_ProductId
Windows::Services::Store::StoreSku::SetStoreContext
Windows::Services::Store::StoreSubscriptionInfo::_ConvertDuration
Windows::Services::Store::StoreSubscriptionInfo::get_BillingPeriod
Windows::Services::Store::StoreSubscriptionInfo::get_BillingPeriodUnit
Windows::Services::Store::StoreSubscriptionInfo::get_HasTrialPeriod
Windows::Services::Store::StoreSubscriptionInfo::get_TrialPeriod
Windows::Services::Store::StoreSubscriptionInfo::get_TrialPeriodUnit
Windows::Services::Store::StoreSubscriptionInfo::RuntimeClassInitialize
Windows::Services::Store::StoreUninstallStorePackageResult::get_ExtendedError
Windows::Services::Store::StoreUninstallStorePackageResult::get_Status
Windows::Services::Store::StoreVideo::get_Caption
Windows::Services::Store::StoreVideo::get_Height
Windows::Services::Store::StoreVideo::get_PreviewImage
Windows::Services::Store::StoreVideo::get_Uri
Windows::Services::Store::StoreVideo::get_VideoPurposeTag
Windows::Services::Store::StoreVideo::get_Width
Windows::Services::Store::StoreVideo::RuntimeClassInitialize
Windows::Services::Store::UninstallStorePackageOperation::DoWork
Windows::Services::Store::UninstallStorePackageOperation::GetResults
Windows::Services::Store::UninstallStorePackageOperation::RuntimeClassInitialize
Windows-ApplicationModel-Store-SDK
WindowsCompareStringOrdinal
WindowsConcatString
WindowsCreateString
WindowsCreateStringReference
WindowsDeleteString
WindowsDeleteStringBuffer
WindowsDuplicateString
WindowsGetStringLen
WindowsGetStringRawBuffer
WindowsIsStringEmpty
WindowsPreallocateStringBuffer
WindowsPromoteStringBuffer
WindowsStoreSDK
WindowsStringHasEmbeddedNull
WindowsSubstring
WindowsSubstringWithSpecifiedLength
WindowsTrimStringEnd
WindowsTrimStringStart
WindowsUpdate
windowTitle
WINHTTP.dll
WinHttpAddRequestHeaders
WinHttpAddRequestHeaders(%s) failed
WinHttpCloseHandle
WinHttpConnect
WinHttpConnect failed for %s:%d
WinHttpCrackUrl
WinHttpCrackUrl failed
WinHttpGetDefaultProxyConfiguration
WinHttpGetIEProxyConfigForCurrentUser
WinHttpGetProxyForUrl
WinHttpOpen
WinHttpOpen failed
WinHttpOpenRequest
WinHttpOpenRequest failed
WinHttpQueryHeaders
WinHttpQueryHeaders failed, status code = %i
WinHttpReadData
WinHttpReadData completion failed
WinHttpReadData failed
WinHttpReceiveResponse
WinHttpReceiveResponse failed
WinHttpSendRequest
WinHttpSetOption
WinHttpSetOption CONTEXT_VALUE failed
WinHttpSetOption failed
WinHttpSetOption WINHTTP_OPTION_REDIRECT_POLICY failed
WinHttpSetOption(WINHTTP_ENABLE_SSL_REVOCATION failed
WinHttpSetOption(WINHTTP_OPTION_AUTOLOGON_POLICY) failed
WinHttpSetStatusCallback
WinHttpSetStatusCallback failed
WinHttpSetTimeouts
WinHttpSetTimeouts failed
WinStore
winstore
WinStoreAuth::_SendTokenRequestAndGetTickets
WinStoreAuth::AuthenticationInternal::CaptureGoldenAccountTicket
WinStoreAuth::AuthenticationInternal::CaptureStorePrimaryAccountId
WinStoreAuth::AuthenticationInternal::CaptureStorePrimaryAccountTicket
WinStoreAuth::AuthenticationInternal::ConvertWebAccountIdFromAppToRealIdInternal
WinStoreAuth::AuthenticationInternal::ConvertWebAccountIdFromRealIdToAppInternal
WinStoreAuth::AuthenticationInternal::CreateAuthenticationManager
WinStoreAuth::AuthenticationInternal::CreateGoldenAccountTokenRequest
WinStoreAuth::AuthenticationInternal::CreateLegacyTicketRequest
WinStoreAuth::AuthenticationInternal::CreateTokenBroker
WinStoreAuth::AuthenticationInternal::CreateTokenBrokerInternal
WinStoreAuth::AuthenticationInternal::CreateTokenRequestHelper
WinStoreAuth::AuthenticationInternal::ExtractAccountId
WinStoreAuth::AuthenticationInternal::ExtractProviderType
WinStoreAuth::AuthenticationInternal::ExtractTicket
WinStoreAuth::AuthenticationInternal::ExtractTicketFromTokenResponse
WinStoreAuth::AuthenticationInternal::ExtractTicketsFromTokenResult
WinStoreAuth::AuthenticationInternal::FetchStoreAccountIdFromRegistry
WinStoreAuth::AuthenticationInternal::FetchXboxLiveAccountId
WinStoreAuth::AuthenticationInternal::FindAccount
WinStoreAuth::AuthenticationInternal::FindCachedStorePrimaryAccount
WinStoreAuth::AuthenticationInternal::GetAccountProvider
WinStoreAuth::AuthenticationInternal::GetAllAccountTickets
WinStoreAuth::AuthenticationInternal::GetAllTokenBrokerAccounts
WinStoreAuth::AuthenticationInternal::GetAllXTokens
WinStoreAuth::AuthenticationInternal::GetCurrentIUser
WinStoreAuth::AuthenticationInternal::GetDeviceTicketWithBroker
WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountId
WinStoreAuth::AuthenticationInternal::GetStorePrimaryAccountTicketForUri
WinStoreAuth::AuthenticationInternal::GetTicketForAccount
WinStoreAuth::AuthenticationInternal::GetXToken
WinStoreAuth::AuthenticationInternal::ManagePropertiesFromTokenResponse
WinStoreAuth::AuthenticationInternal::PrefixTicketForMDollar
WinStoreAuth::ConvertWebAccountIdFromAppToRealIdForUser
WinStoreAuth::ConvertWebAccountIdFromRealIdToAppForUser
WinStoreAuth::GetStorePrimaryAccountIdForUser
WinStoreAuth::SetProxyBlanket
WinstoreAuth_SendTokenRequestAndGetTickets_Failure
WinstoreAuth_SLSFailure
WinstoreAuth_UserAuthRequired
Wj)Sj
Wj[Sj
Wj`Sj
Wj{Sj
Wj9Sj
WjASj
WjDSj
WjESj
WjeSj
WjfSj
WjhSj
WjkSj
WjOSj
WjPSj
WjpSj
WjtSj
WjUSj
WjvSj
WjxSj
WjZSj
WLID1.0=
wp8xappx
WQQQP
wQVhH
WriteFile
WSCollector::CollectStoreLog
WsCreateError
WsCreateHeap
WsCreateReader
WSErrorUtils::ConvertInternalErrorCodeToExternal
WsFindAttribute
WsFreeError
WsFreeHeap
WsFreeReader
WsGetReaderPosition
WsMoveReader
WsReadBytes
WsReadChars
WsReadEndAttribute
WsReadStartAttribute
WsReadStartElement
WsReadToStartElement
WsReadXmlBufferFromBytes
WsSetInputToBuffer
WT37Wz
WVPShh
www.microsoft.com
WWWWWW
x$9s$t
x(Qhp
x,SSh
X~{TR
x=h`S
xAj@j
XboxLiveAuthenticationDomain
XboxUserId
xCh`S
xcWWW
XQVh`
Xtoken
X-Windows-Store-Debugging-Id
X-Windows-Store-Debugging-Id:%s
X-WP-ANID
Xx93uIW
x-xbl-contract-version:2
y QSh
y QSh\;
y QShH:
y QVh
y QVh 
y QVh b
y QVh$
y QVh$8
y QVh(
y QVh(!
y QVh(@
y QVh(L
y QVh(N
y QVh(q
y QVh@
y QVh`
y QVh`.
y QVh`y
y QVh|
y QVh|&
y QVh<
y QVh0
y QVh4(
y QVh8
y QVh8{
y QVh8o
y QVhd
y QVhh
y QVhh1
y QVhht
y QVhhx
y QVhl
y QVhL
y QVhl
y QVhl^
y QVhp
y QVhP
y QVhT
y QVhX%
y QVhxI
y QVhxT
y QWh
y QWh\
y QWhHb
y QWhl
y QWhX
y"QSh
y"QSh$
y"QSh(
y"QSh`T
y"QSh0s
y"QShh
y"QVh
y"QVh 
y"QVh$
y"QVh$8
y"QVh(
y"QVh(&
y"QVh(a
y"QVh,
y"QVh@>
y"QVh@7
y"QVh@Z
y"QVh\
y"QVh\}
y"QVh\P
y"QVh` 
y"QVh`.
y"QVh`l
y"QVh`m
y"QVh0
y"QVh8
y"QVh84
y"QVh8g
y"QVhdx
y"QVhh
y"QVhH
y"QVhh
y"QVhH
y"QVhh
y"QVhH
y"QVhH:
y"QVhH~
y"QVhHM
y"QVhl
y"QVhL)
y"QVhL7
y"QVhlQ
y"QVhP
y"QVhp
y"QVhP{
y"QVhP4
y"QVhp7
y"QVhpt
y"QVhT
y"QVht
y"QVhT
y"QVht
y"QVhT
y"QVht!
y"QVhx
y"QVhX
y"QVhx
y"QVhx`
y"QVhx+
y"QVhxM
y"QWh
y"QWh(
y"QWh,
y"QWh@
y"QWh`+
y"QWh<
y"QWh8,
y"QWhdx
y"QWhHs
y"QWhT
y#QVh
y#QVhd
y$QQS
y$QSh
y$QShT
y$QVh
y$QVh |
y$QVh n
y$QVh Q
y$QVh(
y$QVh@
y$QVh@e
y$QVh@Y
y$QVh\
y$QVh|
y$QVh8
y$QVh8o
y$QVhH
y$QVhh
y$QVhH
y$QVhHh
y$QVhp
y$QVhpz
y$QVhxj
y$QWh
y$QWh4h
y$QWhx
y$Vh e
y%QSh
y%QShp
y%QShx
y%QVh
y%QVh 
y%QVh$3
y%QVh(
y%QVh`
y%QVh|
y%QVh0
y%QVhD
y%QVhh
y%QVhP/
y%QVhp_
y%QWh
y%QWh0
y%QWh0_
y%QWhH
y%QWhh
y%QWhx
y%QWhx`
y&QWh
y&Vh(z
y(QVh
y(QWh
y(QWh4
y(QWhh
y(QWhhI
y)QPh
y)QSh
y)QSh 
y)QVh
y)QWhxj
y*QSh
y*QSh0c
y*QVh
y*QWh
y*QWh0_
y*QWh4
y*QWhL
y,QShX
y,QVh
y,QVh`
y,QVhd
y,QVhx
y,QWh(
y,QWh0
y.QSh@2
y.QVh
y.QVh@=
y.QVhh
y/QSh
y/QSh<
y/QVh
y/QVh(
y/QVh(e
y/QVhH
y/QWh
y/QWh|
y/QWhx
y/Whh{
y:QSh
y:QSh@
y:QVh
y:QVhp
y:QWh
y;QSh
y;QSh,R
y;QVh
y;QVh@$
y;QVhH
y?h z
y?QShX
y?QWh
y?QWhh
y@QVh
y@QVh(y
y[QVh
y[QVh 
y\QVh
y]QWhx1
y^QWh
Y__^[
y_QVh
y_QVhp
y_QVhx
y|QVh
y~QVh
y~QVh8
y+QVh
y+QVhh
y+QWh
y+QWhpc
y<QSh
y<QVh
y<QVh@$
y=QSh(
y=QVh
y=QVhpx
y=QWh
y=QWh`|
y>QSh
y>QShP
y>QVh|
y>QWh
y>QWh0C
y>QWhH
y>QWhP(
y0QSh
y0QVh
y0QVh,Z
y0QVh0
y0QVh8
y0QVhh
y0QVhh]
y0QVhp
y0QVhP_
y0QWh
y0QWh`&
y0QWh0
y0QWh8
y0QWhHB
y0VhH 
y1QSh
y1QShh
y1QVh
y1QVh@
y1QVh`
y2QSh
y2QVh
y2QVh`w
y2QVhH
y2QWh
y2QWhH)
y3QSh
y3QShH
y3QVh
y3QVhhW
y3QWh@D
y4QSh
y4QVh
y4QVhPN
y4QVhXK
y4QWh
y5QSh
y5QSh(
y5QSh`R
y5QShhP
y5QShP
y5QShx
y5QVh
y5QVh0
y5QVh8
y5QVhhW
y5QVhl
y5QVhli
y5QWh
y5QWh8@
y6QSh
y6QSh`l
y6QShh
y6QVh
y6QWh
y6QWh(A
y7hPq
y7QSh
y7QVh
y7QVhX
y7QWh(E
y8QVh
y8QWh
y9QShX
y9QVh
y9QVh(d
y9QVh@
y9QWh
y9QWhh
yBQVh
ybQVh
ybQVhH
ybQWh`
ybQWh8
ybQWhx
yBWhL-
yCQSh
yCQVh
ycQVh`
yCQWh
yCShx
yDQSh
yDQWh
yEQVh
yfQVh
yFQVh`
yFQWh
yfQWh
yGQVh`
yHQSh
yHQVh
yjQVh
yJQVh
yjQVh
yjQVh8
yjQWh@
yKQSh
ykQVh
yKQVh
yKQVhP
ykQVhP
yKQWh
ykQWh
ykQWhX
yKWhL-
Ylp)d_
yMQSh`q
yMQVh0
ymQWh
yMQWh O
ymQWh`
ynQVh
yNQWh
yoQSh
yOQVh
YPh@n
YPh@O
YPhHu
YPhP#
YPhX]
ypQVh
yPQVh
ypQVh
ypQVh0
ypQVhh
ypQVhX
yPQWh
y'QPh`
yqQSh
yQQVh
yqQVh
yQQVh
y'QSh
y-QSh
y'QSh(
y-QSh`o
y'QSh`p
y'QSh0l
y'QSh8
y-QShh
y'QShp
y'QShX
y'QVh
y-QVh
y'QVh 
y-QVh 
y'QVh "
y'QVh 9
y'QVh P
y'QVh t
y'QVh(
y'QVh(t
y'QVh(w
y'QVh,
y'QVh@
y'QVh@<
y'QVh@h
y-QVh\w
y'QVh`
y'QVh`b
y'QVh0
y-QVh0
y'QVh0_
y'QVh0J
y'QVh8
y'QVh8!
y'QVhD
y'QVhd
y'QVhdc
y'QVhdz
y'QVhH
y'QVhh
y'QVhH
y'QVhH:
y'QVhh]
y'QVhhh
y'QVhL
y'QVhP
y'QVhp
y'QVhP
y'QVhP/
y-QVhP/
y'QVhp[
y'QVht
y'QVhx
y'QVhX'
y-QVhX
y'QVhX 
y'QVhX?
y'QVhx2
y-QVhx6
y'QVhxa
y'QVhxj
y'QWh
y-QWh
y'QWh`
y'QWh`b
y-QWh|
y'QWh0_
y-QWh0C
y-QWh0c
y-QWh0C
y-QWh4
y'QWh4&
y'QWh8@
y'QWhl
y-QWhP
y'QWhP/
y'QWhX'
y-QWhx
y-QWhX?
yrQWhX
ySQSh 
yTQVh
yTX}ue
yUQVh
yUQWh`
yVQWh<
ywQVhH)
yxQVh
yxQWh(E
yXQWh,
yyQVh
yyQVh(
yzQVh
z.9Wv
z{\:G(
Z9p,tL3
zChkHr(AsWeak(pStoreContext, &_wrStoreContext))
ZQVhh
ZuJf9Lr
