 A_A^A]A\_
 H;D$@u
 H;D$Xu
 H3E H3E
 Microsoft Corporation. All rights reserved.
 Operating System
 Windows
!\$ H
!This program cannot be run in DOS mode.
%hs!%p: 
%hs(%d) tid(%x) %08X %ws
%hs(%u)\%hs!%p: 
(A^_^[
(caller: %p) 
.?AVbad_alloc@std@@
.?AVbad_array_new_length@std@@
.?AVexception@std@@
.?AVResultException@wil@@
.?AVtype_info@@
.00cfg
.CRT$XCA
.CRT$XCU
.CRT$XCZ
.CRT$XIA
.CRT$XIC
.CRT$XIZ
.CRT$XPA
.CRT$XPZ
.CRT$XTA
.CRT$XTZ
.data
.data$brc
.data$r$brc
.data$rs$brc
.didat$2
.didat$3
.didat$4
.didat$5
.didat$6
.didat$7
.edata
.gehcont
.gfids
.idata$2
.idata$3
.idata$4
.idata$5
.idata$6
.pdata
.rdata
.rdata$brc
.rdata$r
.rdata$zETW0
.rdata$zETW1
.rdata$zETW2
.rdata$zETW9
.rdata$zzzdbg
.rsrc
.rsrc$01
.rsrc$02
.rtc$IAA
.rtc$IZZ
.rtc$TAA
.rtc$TZZ
.text
.text$di
.text$mn
.text$mn$00
.text$x
.text$yd
.xdata
.xdata$x
;|$pr
@.data
@.didat
@.reloc
@A^_^
@A_A^A]A\_^]
@SVWH
@USWATAUAVAWH
[%hs(%hs)]
[%hs]
\$ UH
\$ UVWAVAWH
\$ VWAVH
\Microsoft\Windows\DeviceDirectoryClient
__C_specific_handler
__CxxFrameHandler3
__CxxFrameHandler4
__std_terminate
_CxxThrowException
_initterm
_initterm_e
_o___std_exception_copy
_o___std_exception_destroy
_o___std_type_info_destroy_list
_o___stdio_common_vsnprintf_s
_o___stdio_common_vswprintf
_o__callnewh
_o__cexit
_o__configure_narrow_argv
_o__crt_atexit
_o__errno
_o__execute_onexit_table
_o__initialize_narrow_environment
_o__initialize_onexit_table
_o__invalid_parameter_noinfo
_o__invalid_parameter_noinfo_noreturn
_o__register_onexit_function
_o__seh_filter_dll
_o_free
_o_malloc
_o_wcscpy_s
`.rdata
|$ AVH
|$(H;
|$0H;
|$8H;
|$HH;
|$pH;
<SessionStateChangeTrigger><StateChange>SessionUnlock</StateChange></SessionStateChangeTrigger><LogonTrigger />
040904B0
10.0.22000.653
10.0.22000.653 (WinBuild.160101.0800)
9\$@u
9\$DD
9|$pvR
A_A^]
A_A^_^]
A_A^A]A\]
A_A^A]A\_^]
AcquireSRWLockExclusive
AdminsCount
api-ms-win-core-apiquery-l1-1-0.dll
api-ms-win-core-com-l1-1-0.dll
api-ms-win-core-debug-l1-1-0.dll
api-ms-win-core-errorhandling-l1-1-0.dll
api-ms-win-core-handle-l1-1-0.dll
api-ms-win-core-heap-l1-1-0.dll
api-ms-win-core-interlocked-l1-1-0.dll
api-ms-win-core-libraryloader-l1-2-0.dll
api-ms-win-core-localization-l1-2-0.dll
api-ms-win-core-memory-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-1.dll
api-ms-win-core-profile-l1-1-0.dll
api-ms-win-core-registry-l1-1-0.dll
api-ms-win-core-rtlsupport-l1-1-0.dll
api-ms-win-core-synch-l1-1-0.dll
api-ms-win-core-sysinfo-l1-1-0.dll
api-ms-win-core-winrt-l1-1-0.dll
api-ms-win-core-winrt-string-l1-1-0.dll
api-ms-win-crt-private-l1-1-0.dll
api-ms-win-crt-runtime-l1-1-0.dll
api-ms-win-crt-string-l1-1-0.dll
api-ms-win-eventing-provider-l1-1-0.dll
ApiSetQueryApiSetPresence
bad allocation
bad array new length
CallContext:[%hs] 
CBR(*pcchTrigger >= 256)
CBR(0L == dwResult)
CBR(dwResult == 0L)
CBR(fRingAfterLock == 0)
CBR(IsWTSEnumerateSessionsExWPresent() && IsWTSLogoffSessionPresent() && IsWTSFreeMemoryPresent())
CBR(lRet == 0L)
CBR(pUnkOuter == nullptr)
CBR(pwszCpn == nullptr)
CBR(pwszPin == nullptr)
CBR(std::find(vConnectedAdmins.begin(), vConnectedAdmins.end(), vCids.front()) != vConnectedAdmins.end())
CBR(std::find(vConnectedAdminsSids.begin(), vConnectedAdminsSids.end(), vCallerSid.front()) != vConnectedAdminsSids.end())
CBR(vCallerSid.size() == 1)
CBR(vCids.size() == 1)
CBR(wcscpy_s(pwszTrigger, *pcchTrigger, c_pwszTrigger) == 0)
CHR(((HRESULT)0x80004001L))
CHR(((HRESULT)0x80040111L))
CHR(CoCreateInstance(CLSID_TaskScheduler, 0, CLSCTX_INPROC_SERVER, IID_ITaskService, (PVOID*)&pTaskService))
CHR(CreateKey(hKeyRoot, pwszRegistryKey, iter.c_str()))
CHR(DdcAccountHelper::EnumerateUsers(0, nullptr, nullptr, nullptr, &cAdmins, &cDeviceOwners, &cStandardUsers))
CHR(DdcDeviceInfoHelper::FmdDisabledByPolicy(&fFmdDisabledByPolicy))
CHR(DeleteKey(hKeyRoot, pwszRegistryKey))
CHR(GetActivationFactory(HStringReference(RuntimeClass_Windows_Data_Json_JsonValue).Get(), pJsonValueStatics.GetAddressOf()))
CHR(hr)
CHR(hrSidsLock)
CHR(hrSignOut)
CHR(LockDeviceCritical(vCallerSid.front().c_str(), vConnectedAdminsSids))
CHR(m_pTaskService->GetFolder(bszTaskFolder, pTaskFolder.GetAddressOf()))
CHR(MdmEnumerateUsers(&vAdmins, &vDeviceOwners, &vStandardUsers, fConnectedOnly))
CHR(MdmEnumerateUsers(&vConnectedAdmins, nullptr, nullptr, 1))
CHR(MdmEnumerateUsers(&vConnectedAdminsCids, nullptr, nullptr, 1))
CHR(MdmGetSidsByConnectedCids(vCids, vCallerSid))
CHR(MdmGetSidsByConnectedCids(vConnectedAdminsCids, vConnectedAdminsSids))
CHR(pCommandHandler->QueryInterface(riid, ppvObject))
CHR(pCommandHandlerFactory->QueryInterface(riid, ppv))
CHR(pRegisteredTask->put_Enabled(fEnabled ? ((VARIANT_BOOL)-1) : ((VARIANT_BOOL)0)))
CHR(pTaskService->Connect(vtEmpty, vtEmpty, vtEmpty, vtEmpty))
CHR(pTaskStateHandler->QueryInterface(riid, ppvObject))
CHR(pTaskStateHandlerFactory->QueryInterface(riid, ppv))
CHR(taskSchedulerWrapper.EnableTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_ACCOUNT_CHANGE_TASK, 0))
CHR(taskSchedulerWrapper.EnableTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_ACCOUNT_CHANGE_TASK, 1))
CHR(taskSchedulerWrapper.EnableTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_CONNECTED_TO_NETWORK_TASK, 0))
CHR(taskSchedulerWrapper.EnableTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_INTEGRITY_CHECK_TASK, 0))
CHR(taskSchedulerWrapper.EnableTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_INTEGRITY_CHECK_TASK, 1))
CHR(taskSchedulerWrapper.EnableTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_LOCATION_RIGHTS_CHANGE, 0))
CHR(taskSchedulerWrapper.EnableTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_LOCATION_RIGHTS_CHANGE, 1))
CHR(taskSchedulerWrapper.EnableTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_PERIODIC_1_TASK, 0))
CHR(taskSchedulerWrapper.EnableTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_PERIODIC_24_TASK, 0))
CHR(taskSchedulerWrapper.EnableTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_PERIODIC_24_TASK, 1))
CHR(taskSchedulerWrapper.EnableTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_PERIODIC_6_TASK, 0))
CHR(taskSchedulerWrapper.EnableTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_REGISTER_USER_DEVICE_TASK, 0))
CHR(taskSchedulerWrapper.EnableTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_REGISTER_USER_DEVICE_TASK, 1))
CHR(taskSchedulerWrapper.EnableTaskIfExists(TASK_SCHEDULER_DIRECTORY_NAME, TASK_SCHEDULER_SCREEN_ON_OFF_TASK, 0))
CHR(taskSchedulerWrapper.Initialize())
CloseHandle
CoCreateInstance
CompanyName
CPR(bszTaskFolder)
CPR(bszTaskName)
CPR(pcchTrigger)
CPR(pCommandHandler)
CPR(pCommandHandlerFactory)
CPR(ppv)
CPR(ppvObject)
CPR(pResourceId)
CPR(pTaskStateHandler)
CPR(pTaskStateHandlerFactory)
CPR(pwszMessage)
CPR(pwszTaskName)
CPR(pwszTrigger)
CreateMutexExW
CreateSemaphoreExW
D$ E3
d$(!\$ H
D$,D8%
D$@E3
D$@H+
D$0H;
D$0H;D$8tmH
D$0H+
D$8E3
D$DDtXH
D$HE3
D$pE3
D$xE3
D9|$(
D9d$(|
DdcComImplementationsDesktop
DdcComImplementationsDesktop.dll
DdcComImplementationsDesktop.pdb
DebugBreak
DisableThreadLibraryCalls
DllCanUnloadNow
DllGetClassObject
DllRegisterServer
DllUnregisterServer
E8<0u
E8H!\$@H
EHt>H
EHt6H
EnableLostMode
EPt>H
EventWriteTransfer
Exception
ext-ms-onecore-security-antitheft-l1-1-0
ext-ms-win-devmgmt-policy-l1-1-0
ext-ms-win-devmgmt-policy-l1-1-1
ext-ms-win-devmgmt-policy-l1-1-2
ext-ms-win-devmgmt-policy-l1-1-3
ext-ms-win-session-wtsapi32-l1-1-0
f9<Au
fA9,@u
FailFast
fD94Fu
fD94Ou
Fext-ms-win-session-wtsapi32-l1-1-0.dll
FileDescription
FileVersion
FmdDisabledByPolicy
FormatMessageW
FreeLibrary
GenuD
GetCurrentProcess
GetCurrentProcessId
GetCurrentThreadId
GetLastError
GetModuleFileNameA
GetModuleHandleExW
GetModuleHandleW
GetProcAddress
GetProcessHeap
GetSystemInfo
GetSystemTimeAsFileTime
H!\$0D
H!\$0H
H!]0E3
H!]8A
H!]8E3
H!]gH
H;D$8
H9oHsKH
HcD$$H
HcL$ H
HeapAlloc
HeapFree
HJJJLJNJPJRJTJVJXNZJ\ 
HRESULT
InitializeSListHead
IntegrityCheck
InternalName
IsDebuggerPresent
IsProcessorFeaturePresent
JTk_S/
kernelbase.dll
L$ SVWAVH
L$ SVWH
l$(E3
L$(E3
L$0H+
L$8H+
L$PH+
L$XL+
L9{Hu
L9O@t
LegalCopyright
LoadLibraryExA
Local\SM0:%lu:%lu:%hs
LogHr
LogNt
LostModeMessage
M H1E
MdmCommon.DLL
MdmEnumerateUsers
MdmGetSidsByConnectedCids
MdmIsFindMyDeviceEnabled
memcpy
memset
Microsoft
Microsoft Corporation
Microsoft.Windows.DeviceDirectoryClient
Msg:[%ws] 
ntdll.dll
ntelA
o\$PH
oD$ f
oL$0f
OLEAUT32.dll
onecore\internal\sdk\inc\wil\opensource\wil\resource.h
onecoreuap\shell\devicedirectory\devicedirectoryclient\ddccomimplementationsdesktop\ddccomimplementationsdesktop.cpp
onecoreuap\shell\devicedirectory\devicedirectoryclient\ddccomimplementationsdesktop\ddccommandhandlerdesktop.cpp
onecoreuap\shell\devicedirectory\devicedirectoryclient\ddccomimplementationsdesktop\ddctaskstatehandlerdesktop.cpp
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddcaccounthelper.cpp
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddcdeviceinfohelper.cpp
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddcregistry.cpp
onecoreuap\shell\devicedirectory\devicedirectoryclient\lib\ddctaskschedulerwrapper.cpp
OpenSemaphoreW
OriginalFilename
oT$@f
OutputDebugStringW
p:_0#
PA^_^
PA_A\_^]
pA_A^A]A\_[]
ProductName
ProductVersion
q:_0#
q0R^G'
qA[r@
qcPtE
QueryPerformanceCounter
RaiseException
RaiseFailFastException
RegCloseKey
RegCreateKeyExW
RegDeleteTreeW
RegDeleteValueW
RegisterDeviceAccountChange
RegisterDeviceConnectedToNetwork
RegisterDeviceLocationRightsChange
RegisterDevicePeriodic1
RegisterDevicePeriodic24
RegisterDevicePeriodic6
RegisterDeviceScreenOnOff
RegisterUserDevice
RegOpenKeyExW
RegSetValueExW
ReleaseMutex
ReleaseSemaphore
ReleaseSRWLockExclusive
ReturnHr
ReturnNt
RoGetActivationFactory
RtlCaptureContext
RtlDisownModuleHeapAllocation
RtlDllShutdownInProgress
RtlLookupFunctionEntry
RtlVirtualUnwind
SetLastError
SetUnhandledExceptionFilter
SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\LostMode
StandardUsersCount
StringFileInfo
SYSTEM\CurrentControlSet\Control\Lsa\LockedDownSIDs
t"@8=
t$ UWATAVAWH
t$ UWAVH
t$ WATAUAVAWH
t$ WH
t$XE3
t(D8%]
t(D8=
t,D8=
t.HcC<
t:fA9(t4H
t4A9~
t4E88t/H
TerminateProcess
tG9)u
TraceIntegrityCheckResult
Translation
tx@8=
u%H!\$8H
UATAUAVAWH
ugH!\$@H
UnhandledExceptionFilter
Unknown exception
UVWATAUAVAWH
UVWATAWH
UVWAVAWH
VarFileInfo
VirtualProtect
VirtualQuery
VS_VERSION_INFO
VWAVH
WaitForSingleObject
WaitForSingleObjectEx
WATAUAVAWH
WilError_03
Windows.Data.Json.JsonValue
WindowsCreateStringReference
WTSEnumerateSessionsExW
WTSFreeMemory
WTSLogoffSession
x AVH
x UAVAWH
