----------------
-----------------------
-----------------------------
------------------------------
----------------------------------
--------------------------------------
---------------------------------------
---------------------------------------------
------------------------------------------------------------
------------------------------------------------------------------------------
-------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
     
-----------------------------      -----------------------------
        
                          
                                              PreEmptive                                                Lock
                                  detailed logs are generated.  The maximum 
                                  isn't specified)
                                  specified)
                                  specified.  The higher the number the more
                                  This is also the default value if the key 
                                  value is decimal 10)
                                 >> Domain:Value 
                                 H
                       [<pseudo-register number for result>]
                      like String                    
                      of the element using !DumpObj and !DumpVC format.
                      print fields of the elements. Useful for array of objects 
                      Specify from which index the command shows the elements.
                      Specify how many elements to show.
                  %8s     %8s
                  String
                 [<Pseudo-register number>]
                 [-create | -create2] 
                 <Exception> 
                ...
                <member address="0x00b75088" />
                For example, an IA64 dump file must be debugged on an IA64
                in the version directory
                machine.
                mscordacwks_<arch>_<arch>_<version>.dll is on your symbol path.
            ...
            ...                                  ...
            </object>
            <object address="0x00b73030" typeid="1" size="300"/>
            <object address="0x00b75054" typeid="5" size="20">
            <root kind="handle" address="0x00a73ff0"/>
            <root kind="stack" address="0x0069f0e0"/>
            <type id="1" name="System.String">
            2) the file mscordacwks.dll that matches your version of mscorwks.dll is 
            3) or, if you are debugging a dump file, verify that the file 
            4) you are debugging on the same architecture as the dump file.
           !soe -derived System.IOException 4;
           .if(@$t3==1 || @$t4==1) { .echo 'stop' } .else {g}"
           concurrent GC and server GC), Debugger helper threads, Finalizer 
           output. Example of special threads include: GC threads (in 
           so they might not be shown in the first part of the command's 
           threads created by CLR. Those threads might not be managed threads 
           threads, AppDomain Unload threads, and Threadpool timer threads.
          !Name2EE *!System.String
          (During plan phase, the heap is often not walkable because objects 
          [-max <size>] 
          [-min <size>] 
          [-mt <MethodTable address>] 
          [-short]
          [start [end]]
          [-startAtLowerBound]
          [-strings] 
          [-thinlock] 
          [-type <partial type name>] 
          adding the size to the start address given as parameters.) 
          address range, !DumpHeap will start its walk from the beginning of 
          are being moved. In this case, DumpHeap may report spurious errors, 
          command for automation.
          documentation for more info)
          Force heap walk to begin at lower bound of a supplied address range.
          good object as the lower bound for this to work. Display memory at 
          in particular bad objects. It may be possible to traverse more of 
          memcopy, You may also be able to find the next object's address by 
          MT    Field   Offset                 Type       Attr    Value Name
          range, it will stop before displaying the part of the heap in which 
          string provided. 
          table (use !dumpmt to verify). If the GC is currently in a call to 
          the address of the bad object to manually find the next method 
          the heap after the reported bad object. Even if you specify an 
          the heap by default. If it finds a bad object before the specified 
          to easily pipe output from the command to another debugger 
          walk at the specified lower bound. You must supply the address of a 
          you are interested. This switch will force !DumpHeap to begin its 
         (((((                  H
         h((((                  H
         segment            begin         allocated             size
        ....
        {                                    {
        }                                    }
        </objects>
        </roots>
        </types>
        <DynamicMethodDesc pointer> |
        <MethodDesc pointer>
        <objects>
        <roots>
        <types>
        lock(r2)                             lock(r1)
        o = (Object *) o + o.Size();
        o.ValidateAllFields();
       !bpmd myapp.exe MyApp.Main
       .loadby sos mscorwks
       ID OSID        ThreadOBJ     State   GC     GC Alloc Context                  Domain           Count APT%s Exception
       OSID     Special thread type
       sxe -c "" clrn
       use * for module_name to search all loaded modules
       you can pass * for module_name to search all modules
      ID             TEB  APT    APTId CallerTID          Context
      MT    Count TotalSize Class Name
      MT    Field   Offset                 Type       Attr    Value Name
      MT    Field   Offset                 Type  VT     Attr    Value Name
      MT    TypeDef Name
      MT    TypeRef Name
     "CLR notification: module 'mscorlib' loaded"
     (C:\bugs\225271\arraytest.exe)
     IL associated with the dynamic method.
     just pass it as the first argument.
     see the breakpoint listed.
     the pointer as the first argument. 
     then
    ".loadby sos mscorwks"
    "CLR notification: module 'mscorlib' loaded"
    "lm v m mscorwks"
    "sxd clrn"    
    "sxe clrn"
    %p %p %S
    %S
    ...
    {
    {                                    {
    }
    }                                    }
    </gcheap>
    <gcheap>
    <member address="0x%p"/>
    >> Thread:Value
    5b9a628c  4000001        0         System.Int32   instance        2 x
    5b9a628c  4000001        0         System.Int32   instance        3 x
    5b9a628c  4000001        0         System.Int32   instance        4 x
    5b9a628c  4000001        0         System.Int32   instance        5 x
    5b9a628c  4000001        0         System.Int32   instance        6 x
    5b9a628c  4000002        4         System.Int32   instance        4 y
    5b9a628c  4000002        4         System.Int32   instance        6 y
    5b9a628c  4000002        4         System.Int32   instance        8 y
    5b9a628c  4000002        4         System.Int32   instance       10 y
    5b9a628c  4000002        4         System.Int32   instance       12 y
    5b9a628c  4000003        8         System.Int32   instance        6 z
    5b9a628c  4000003        8         System.Int32   instance        9 z
    5b9a628c  4000003        8         System.Int32   instance       12 z
    5b9a628c  4000003        8         System.Int32   instance       15 z
    5b9a628c  4000003        8         System.Int32   instance       18 z
    Addr     Size Followed by
    APPDOMAIN    0x02000000
    argument   count   =   4
    ASSERT       0x00010000
    BCL          0x40000000
    bp mscorwks!EEStartup "g @$ra"
    CLASSLOADER  0x00000400
    Clock frequency  = %5.3f GHz
    CODESHARING  0x04000000
    CORDB        0x00000200
    CORPROF      0x00000800
    CurrentTotalLogChunk = %d
    DBGALLOC     0x00002000
    double align       = no
    ebp frame          = yes
    edit & continue    = no
    EEClass: 03ef1698
    EEMEM        0x00000080
    EH           0x00004000
    ENC          0x00008000
    epilog        at   002E
    epilog      end    = yes
    epilog      size   =   8
    epilog     count   =   1
    exception handlers = no
    facilitiesToLog  = 0x%x
    Fields:
    fully interruptible=yes
    GC           0x00000001
    GCALLOC      0x00000100
    GCINFO       0x00000002
    GCROOTS      0x00080000
    IJW          0x00400000
    INTEROP      0x00100000
    JIT          0x00000008
    Last message time  %S
    levelToLog       = %d
    LOADER       0x00000010
    local alloc        = no
    LOCALS:
    lock(MyObject)
    lock(r1)                             lock(r2)
    LOCKS        0x20000000
    MARSHALER    0x00200000
    MaxLogSizePerThread = 0x%x (%d)
    MaxTotalLogSize = 0x%x (%d)
    METADATA     0x00000020
    method      size   = 0036
    MethodTable 03e40f4c
    Name: Value
    none  
    o = firstobject;
    PARAMETERS:
    prolog      size   =  19
    REMOTING     0x00001000
    Resource r1 = new Resource();
    Resource r2 = new Resource();
    saved reg.  mask   = 000B
    SECURITY     0x10000000
    security check     = no
    Size: 20(0x14) bytes
    SP               IP               Function
    stack frame size   =   1
    Start time         %S
    STARTUP      0x01000000
    STORE        0x08000000
    STUBS        0x00000004
    SYNC         0x00000040
    THREADPOOL   0x00040000
    ThreadsWithLogs  = %d
    Total elapsed time %5.3f sec
    Unable to read FullDllName address at %p
    Unable to read InMemoryOrderModuleList address at %p
    Unable to read PEB_LDR_DATA address at %p
    untracked count    =   5
    var ptr tab count  =   0
    varargs            = no
    VERIFIER     0x00020000
    while(o != endobject)
    ZAP          0x00800000
   !StopOnException can be used purely as a predicate in a larger expression.
   !StopOnException -create System.OutOfMemoryException 1
   !StopOnException System.OutOfMemoryException 3
   1. On the stack
   2. Within a GC Handle
   3. In an object ready for finalization
   4. As a member of an object found in 1, 2 or 3 above.
   and set up the breakpoint as a first-chance exception. -create2 would set
   at 
   At the debugger prompt, anytime after loading SOS, type:
   current thread is a System.OutOfMemoryException. Otherwise, $t3 will be set
   If you type:
   isn't loaded yet. What can I do?
   it up as a 2nd-chance exception. 
   maintaining the breakpoint. The -create parameter allows SOS to go ahead
   manually create such predicates, for example:
   such calls together to stop on various exception types. You'll have to 
   switched out by the host, this column will be shown as "<<<<") 
   sxe -c "!soe System.OutOfMemoryException 3; 
   The pseudo-register number (1) indicates that SOS can use register $t1 for
   then register $t3 will be set to 1 if the last thrown exception on the 
   to 0. Using the Windows Debugger scripting language, you could chain 
  %8d
  %8x
  0:000> !dumpil b741dc
  1) If you have a System.Reflection.Emit.DynamicMethod object, just pass
  1) Start the debugger and type: 
  2) g
  2) If you have a DynamicMethodDesc pointer you can use that to print the
  238 001e40ec            3         1 001e4e60   e04   3   00a7a194 Resource
  239 001e4124            3         1 001e5980   ab8   4   00a7a1a4 Resource
  3) If you have an ordinary MethodDesc, you can see the IL for that as well,
  3) You'll get the following notification from the debugger:
  4) Now you can load SOS and use commands. Type
  5) g
  6) You will stop at the start of MyApp.Main. If you type "bl" you will 
  a515f4   14a740 5baf8d28 System.TypedReference
  a51608   14a740 5bb05764 System.Globalization.BaseInfoTable
  a51958   14a740 5bb05b24 System.Globalization.CultureInfo
  a51a44   14a740 5bb06298 System.Globalization.GlobalizationAssembly
  a51de0   14a740 5bb069c8 System.Globalization.TextInfo
  a56b98   14a740 5bb12d28 System.Security.Permissions.HostProtectionResource
  a56bbc   14a740 5baf7248 System.Int32
  a56bd0   14a740 5baf3fdc System.String
  a56cfc   14a740 5baf36a4 System.ValueType
  CacheEntryHeap: 
  DispatchHeap: 
  error getting thread %p, aborting this field
  Error!  integer overflow on numThread 0x%08x
  ID  (sec from start)
  If a token is unresolved, run "!do <addr>" on the addr given
  IL_0000: ldstr 70000002 "Inside invoked method "
  IL_0005: call 6000003 System.Console.WriteLine(System.String)
  IL_000a: ldc.i4.1
  IL_000b: newarr 2000004 "System.Int32"
  IL_0010: stloc.0
  IL_0011: ldloc.0
  IL_0012: ret
  in parenthesis. You can also look at the token table yourself, by
  IndcellHeap: 
  LookupHeap: 
  Module Name
  or    !Name2EE module_name!item_name
  ResolveHeap: 
  running "!DumpArray 00b77388".
  This is dynamic IL. Exception info is not reported at this time.
  Wasted: 0x%x(%lu)bytes.
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFG
 !"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}~
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
 %16p
 %16s
 %c%s
 %c%s%c%x
---------------------------- %d total entries ------------------------------------
 %p:%p
 %p:FailInit
 %p:NotInit 
 %S (%p)
 (%S)
 (%s)
 (%S)
 (%S, mdToken: %08x)
 (%ws)
 (BAD Method)
 (BAD MethodTable)
 (C:\pub\unittest.exe)
 (Dynamic)
 (Finalizer)
 (GC)
 (gcstress)
 (JitHelp: %s)
 (MD: %S)
 (MethodDesc: %p)
 (MT: %S)
 (nested exceptions)
 (Object: %S)
 (Threadpool Completion Port)
 (Threadpool Worker)
 (Unknown function)
 (Unknown VTable)
 .NET Framework
 [ERROR: INVALID TOKEN 0x%8.8X] 
 [ERROR: INVALID TOKEN TYPE 0x%8.8X] 
 [explicit]
 [hasThis]
 <Invalid Object> (%p)
 <no information>
 0x%p
 A\_[
 A\_^
 A]_^
 A]A\_
 A^A]A\
 Address       MT     Size
 Address   Domain       MT Type Name
- Attempt to initialize the CRT more than once.
- Attempt to use MSIL code from this assembly during native code initialization
 Base Class Array'
 Base Class Descriptor at (
 catch(...)
 Checked or debug build
 Class Hierarchy Descriptor'
 CLAUSE BEGIN
 Complete Object Locator'
- CRT not initialized
 CurrentLimit: %d
 delete
 delete[]
 -details:             optional. Ask the command to print out details
 Disabled
 Enabled 
 even though you aborted.
 Example output:
 Fiber   
- floating point support not loaded
 free
 Free
 Free: %d
 Idle: %d
----- Interrupted by user -----
------------ Last message from thread %x -----------
 -length <length>:    optional, only supported for single dimension array. 
 Low Bit(s) Set
 MaxFree: %d
 MaxLimit: %d
 mdToken: %08x (%ws)
 Microsoft Corporation.  All rights reserved.
 Microsoft Operations Puerto Rico1
 MinLimit: %d
 new[]
----- No thread logs in the image: The stress log was probably not initialized correctly. -----
 -nofields:       optional, only takes effect when -detail is used. Do not 
- not enough space for _onexit/atexit table
- not enough space for arguments
- not enough space for environment
- not enough space for locale information
- not enough space for lowio initialization
- not enough space for stdio initialization
- not enough space for thread data
 null
 orphaned 
 pinned
- pure virtual function call
 retail
 retail build
 Running: %d
 segment    begin allocated     size
 -start <startIndex>: optional, only supported for single dimension array. 
 ThinLock owner %x (%p) Recursive %x
 Total: %d
 Type Descriptor'
- unable to initialize heap
- unable to open console device
- unexpected heap error
- unexpected multithread lock error
 XXX 
! 1 0x%p %d
!BPMD <module name> <method name>
!bpmd asks the Windows Debugger to receive CLR Notifications, and waits to
!BPMD does not accept offsets nor parameters in the method name. If there
!bpmd is not supported on a dump file.
!BPMD -md <MethodDesc>
!bpmd myapp.exe G1`1.G
!bpmd myapp.exe G3`3.F
!bpmd 'price, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' Price.M2
!BPMD provides managed breakpoint support. If it can resolve the method name
!BPMD works equally well with generic types. Adding a breakpoint on a generic 
!CLRStack [-a] [-l] [-p]
!CLRStack, it is a good aid to determining the values of locals and 
!COMState
!COMState lists the com apartment model for each thread, as well as a Context 
!DumpArray 
!DumpAssembly <Assembly address>
!DumpClass <EEClass address>
!DumpDomain [<Domain address>]
!DumpHeap [-stat] 
!DumpHeap is a powerful command that traverses the garbage collected heap, 
!DumpIL <Managed DynamicMethod object> | 
!DumpIL prints the IL code associated with a managed method. We added this
!DumpLog [-addr <addressOfStressLog>] [<Filename>]
!DumpMD <MethodDesc address>
!DumpMethodSig <sigaddr> <moduleaddr>
!DumpModule [-mt] <Module address>
!DumpModule on the Class, MethodTable and Module fields above.
!DumpModule on the fields listed to learn more.
!DumpMT [-MD] <MethodTable address>
!DumpObj [-nofields] <object address>
!DumpRuntimeTypes 
!DumpRuntimeTypes finds all System.RuntimeType objects in the gc heap and 
!DumpSig <sigaddr> <moduleaddr>
!DumpStack [-EE] [top stack [bottom stack]]
!DumpStackObjects [-verify] [top stack [bottom stack]]
!DumpVC <MethodTable address> <Address>
!DumpVC allows you to examine the fields of a value class. In C#, this is a 
!DumpVC is quite a specialized function. Some managed programs make heavy use 
!EEHeap [-gc] [-loader]
!EEHeap enumerates process memory consumed by internal CLR data structures. You
!EEStack [-short] [-EE]
!EEVersion
!EHInfo (<MethodDesc address> | <Code address>)
!EHInfo shows the exception handling blocks in a jitted method. For each 
!FinalizeQueue [-detail]
!FindAppDomain <Object address>
!FindAppDomain will attempt to resolve the AppDomain of an object. For example,
!GCHandleLeaks
!GCHandles [-perdomain]
!GCHandles provides statistics about GCHandles in the process. Sometimes the 
!GCInfo (<MethodDesc address> | <Code address>)
!GCInfo is especially useful for CLR Devs who are trying to determine if there 
!gcroot %p, and if you find a root on a stack, check 
!GCRoot [-nostacks] <Object address>
!GCRoot doesn't attempt to determine if a stack root it encountered is valid 
!GCRoot looks for references (or roots) to an object. These can exist in four
!IP2MD <Code address>
!MinidumpMode <0 or 1>
!Name2EE <module name> <type or method name>
!Name2EE <module name>!<type or method name>
!ObjSize [<Object address>]
!ObjSize includes the size of all child objects in addition to the parent.
!PrintException [-nested] [<Exception object address>]
!PrintException will notify you if there are any nested exceptions on the 
!ProcInfo [-env] [-time] [-mem]
!ProcInfo is not supported on a dump file.
!ProcInfo lists the environment variables for the process, kernel CPU time, as 
!RCWCleanupList <RCWCleanupList address>
!SaveModule <Base address> <Filename>
!StopOnException [-derived] 
!StopOnException helps when you want the Windows Debugger to stop on a 
!StopOnException.
!SyncBlk [-all | <syncblk number>]
!This program cannot be run in DOS mode.
!ThreadPool
!Threads [-live] [-special] 
!Threads command will also tell you which threads have nested exceptions.
!Threads lists all the mananaged threads in the process. 
!Token2EE <module name> <token>
!Token2EE among others.
!TraverseHeap [-xml] <filename>
!TraverseHeap writes out a file in a format understood by the CLR Profiler. 
!U [-gcinfo] [-ehinfo] <MethodDesc address> | <Code address>
!VerifyHeap
!VerifyHeap is a diagnostic tool that checks the garbage collected heap for 
!VMMap
!VMMap requires a full memory dump (.dump /ma) or a live process.
!VMMap traverses the virtual address space and lists the type of protection 
!VMStat
!VMStat requires a full memory dump (.dump /ma) or a live process.
"!DumpHeap -type Customer".
"!PrintException -nested".
"catch" blocks respectively.
"Free" objects are simply regions of space the garbage collector can use later.
"generations," wherein the youngest objects live in generation 0, and 
"-nested" option to get full details on the nested exception objects. The
"Server" mode there is one dedicated garbage collector thread per CPU.
$%s$%X
$`< u
$`2X`F
$Microsoft Ireland Operations Limited1&0$
%-*s %-*s %-*s  %-13s %-13s %-8s %-8s
%*s.catch
%*s.finally
%*s.try
%*s} // end .catch
%*s} // end .finally
%*s} // end .try
%*sIL_%04x: 
%08lx
%08x is a safepoint
%08x%s interruptible
%08x`%08x 
%11d 
%16p %16p %16p %16p
%16p %16p %16p %9s
%16s 
%16s %10s %s
%16s %16s %16s
%16s %16s %16s %16s
%16s %16s %16s Apartment
%16s %16s %16s Type Name              
%16s %16s %8s
%16s %8s %12s %s
%16s %8s %8s %20s %2s %8s %16s %s
%-16s %p 
%20.20S 
%20.20s 
%-20s 
%3d %4x %p
%4x %13.9f : 
%4x %4x %p  %8x
%5d %6x    
%-7s  %*s  %*s  %*s %*s  %*s
%-7s %*sK %*sK %*sK %*s %*sK
%8d %12I64u "%S"
%8s %12s %s
%8s %16s
%8s %s
%I64d
%I64u
%ld percent of memory is in use.
%p %6.1fMB %p %S
%p %8d %12I64u 
%p %8d%s
%p %8x %8x 
%p %p 
%p %p  %p 0x%p(%d)
%p %p %p
%p 0x%08x %S
%p is not a MethodDesc
%p is not a MethodTable
%p is not a valid MethodDesc
%p is not a valid object
%p is not a valid object.
%p-%p %p  %-13s %-13s %-8s %-8s
%p(%S)
%p(%S)->
%p(%x
%S = 
%s is not IP
%S, use !PrintException %p to see more
%s: %p (invalid object)
%S::%S
%S::%S 
%u sections in file
%u.%u.%u.%u
%x "%S"
%x %S
( 8PX
(!clrstack processes a max of %d stack frames)
(!dumpstack processes a max of %d stack frames)
(#Could not read address of string#)
(%p->%p)
(%S[])
(0x%p, 0x%p)
('8PW
(duplicate)
(DWORD) LogFacility = 0xffffffbf (this is a bit mask, almost all logging is on.
(DWORD) LogLevel = 6             (this is the default value if the key isn't
(DWORD) StressLog = 1
(DWORD) StressLogSize = 65536    (this is the default value if the key isn't
(for one thing, custom dump commands can map in additional memory, but there 
(interior)
(MethodTable: %p)
(null)
(obtained with ".dump /ma <filename>" in the Windows Debugger) is often the 
(pinned)
(Shared Domain)
(System Domain)
(this is an oversimplification, see NOTE below). If another thread tries to 
(threads 3 and 4 have similar output)  0:003> k
(TransitionMU)
(TransitionUM)
)9|$0H
)Microsoft Root Certificate Authority 20100
)Microsoft Root Certificate Authority 20110
*?*kXIc
, continuing...
.................
...<etc>...
.?AVbad_alloc@std@@
.?AVexception@std@@
.?AVtype_info@@
.loadby shortcut). Within the Microsoft corpnet, we keep tagged versions 
.mixcrt
.module 
.pdata
.PEAD
.PEAX
.text
/* UNKNOWN TYPE (0x%X)*/
// static method
/f mscoree.dll
/f mscorwks.dll
:%x) 
;(u H
;(u.H
;\$@r
;\$P|
;]uYE
;|$@L
;|$`|
;+u4H
;D$xD
;D9d$`u
;Q(s/
;Q(s1
;Q(sf
;t$ |
;t$@v
;t$`|
?H;\$hL
?'tgH
@.reloc
@.rsrc
@-2nsI
@8l$&H
@8t$Ht
@A;t$
@A\_^
@A_A^A]
@A_A^A]A\_
@SUVH
@SUVWAUAVH
@SUVWH
@SVWAUAVH
@SWATH
@UATAUAVAWH
@USVWATAUAVAWH
@UVWATAVAWH
@UVWAUH
[.NET Framework Debugging Control]
[2] 00ad28f0
[3] 00ad28fc
[4] 00ad2908
[5] 00ad2914
[6] 00ad2920
[BAD: RANK == 0!]
[DEFAULT]
[-details]
[ERROR! NIL TOKEN]
[explicit] 
[FASTCALL]
[FIELD]
[hasThis] 
[ia64 and x64 documentation]
[InvalidReference]
[-length <length>]
[LOCALSIG]
[-nofields]
[Not documented yet]
[PROPERTY]
[-start <startIndex>]
[STDCALL]
[THISCALL]
[UNMANAGED]
[VARARG]
[x86 documentation]
\$ E3
\$ ff
\$ H;
\$ VH
\$ WH
\$@Ic
\$0H;
\$0Hc
\$4u"
\$8<,t+
\$8ff
\$8L3
\$8t%
\$df3
\$ff=
\$HD;
\$hfD3
\$TE3
\$xyFA
\\ <these are two backslashes, immediately followed by a newline>
] cur = 00000000
]TD9e
^H+;L
__based(
__cdecl
__clrcall
__fastcall
__pascal
__ptr64
__restrict
__stdcall
__thiscall
__unaligned
_EFN_GetManagedExcepStack
_EFN_GetManagedExcepStack(%P, szStr, sizeof(szStr)) returned:
_EFN_GetManagedExcepStack(NULL, szStr, sizeof(szStr)) returned:
_EFN_GetManagedObjectFieldInfo
_EFN_GetManagedObjectName
_EFN_StackTrace
_HResult
_innerException
_items
_message
_remoteStackTraceString
_RTL_USER_PROCESS_PARAMETERS
_stackTrace
_stackTraceString
`.data
`A_A]A\
`ALL`
`copy constructor closure'
`default constructor closure'
`dynamic atexit destructor for '
`dynamic initializer for '
`eh vector constructor iterator'
`eh vector copy constructor iterator'
`eh vector destructor iterator'
`eh vector vbase constructor iterator'
`eh vector vbase copy constructor iterator'
`h````
`h`hhh
`local static guard'
`local static thread guard'
`local vftable'
`local vftable constructor closure'
`managed vector constructor iterator'
`managed vector copy constructor iterator'
`managed vector destructor iterator'
`omni callsig'
`placement delete closure'
`placement delete[] closure'
`RTTI
`scalar deleting destructor'
`string'
`typeof'
`udt returning'
`vbase destructor'
`vbtable'
`vcall'
`vector constructor iterator'
`vector copy constructor iterator'
`vector deleting destructor'
`vector destructor iterator'
`vector vbase constructor iterator'
`vector vbase copy constructor iterator'
`vftable'
`virtual displacement map'
{ ... }
{ HcC,H
{>Eu$
|$ ATAUAVH
|$ ATH
|$ E3
|$(E3
|$(Hc
|$@H;
|$@L;
|$`@2
|$`<at@<rt4<wt&
|$`Hc
|$`t:H
|$`t>H
|$0E3
|$8E3
|$8ff
|$8H;+H
|$8Hc
|$DHc
|$hD+|$PD+
|$Hff
|$HH+
|$HHc
|$HHcy
|$HI+
|$Hux
|$Hv5fff
|$PE3
|$Pfff
|$PMk
|$Xfff
|$XHc
|$Xt6H
|$XtK
|$XtTH
|hK,_
~;fff
~~~~           ~~~~~~~        ~~~~~~~        ~~~~~~~  ~~~~~~~~~          ~~~~~
~~~~~
~~~~~~~
~~~~~~~~~
+D9}<t
< t[<
<$csm
<.H;{
</gcheap>
</object>
</objects>
</roots>
</types>
<<<< 
<aborted>
<After the Statistics section>
<array object address>
<CLR reg> 
<descriptive text of the command>
<ELEMENT_TYPE_SENTINEL> 
<Error getting MethodDesc information>
<error getting slot %d>
<example output>
<gcheap>
<heap traverse interrupted>
<heap walk interrupted>
<Invalid Object>
<module name> can also be the debugger's name for a module, such as
<no data>
<no information>
<none>
<Not Available>
<Note: this object has an invalid CLASS field>
<object address="0x%p" typeid="%d" size="%d">
<objects>
<optional comments>
<program name unknown>
<repeat the sequence above>
<root kind="%S" address="0x%p"/>
<roots>
<String is invalid or too large to print>
<type id="%d" name="%S"/>
<types>
<unable to retrieve data>
<unknown field def>
<unknown member ref>
<unknown method def>
<unknown token type %08x>
<unknown token type (token=%08x)>
<unknown type def>
<unknown type ref>
<unknown type spec>
<unknown type token>
<unknown type>
<Unloaded Type>
<user aborted>
= 00D071F0 used 00D09254 committed 00D17000
=======================================
>> I got the following error message. Now what?
>> I have a chicken and egg problem. I want to use SOS commands, but the CLR
>> I have a partial memory minidump, and !DumpObj doesn't work. Why?
>> What other tools can I use to find my bug?
>> Where can I get the right version of SOS for my build?
>>> %s:%d
>http://www.microsoft.com/pki/certs/MicRooCerAut_2010-06-23.crt0
>http://www.microsoft.com/pki/certs/MicTimStaPCA_2010-07-01.crt0
>V<4q
0 if the field contains a pointer to another object. For valuetypes, you can 
0:000>
0:000> !do a79d40
0:000> !dumparray -start 2 -length 5 -details 00ad28d0 
0:000> !dumpassembly 1ca248
0:000> !dumpheap
0:000> !dumpheap 1a71000 1a75000
0:000> !dumpheap -stat
0:000> !DumpLog
0:000> !dumpmd 902f40
0:000> !dumpmodule 1caa50
0:000> !dumpmodule -mt 1aa580
0:000> !DumpObj a79d40
0:000> !DumpObj a79d98
0:000> !DumpStackObjects
0:000> !DumpVC 0090320c 00a79d9c
0:000> !eeheap -gc
0:000> !EEHeap -loader
0:000> !ehinfo 33bbd3a
0:000> !finalizequeue
0:000> !findappdomain 00a79d98
0:000> !gchandles
0:000> !gcinfo 5b68dbb8   (5b68dbb8 is the start of a JITTED method)
0:000> !IP2MD 03ef01a6
0:000> !name2ee unittest!MainClass
0:000> !name2ee unittest.exe MainClass.Main
0:000> !ObjSize a79d40
0:000> !SaveModule 5d1d0000 c:\pub\out.tmp
0:000> !token2ee image00400000 02000004
0:000> !token2ee unittest.exe 02000003
0:000> !VerifyHeap
0:000> !VMMap
0:000> !VMStat
0:000> .loadby sos mscorwks
0:000> dd 15bc90 15bca0-4
0:000> dd 3ec0010
0:000> ed a79d40+4 01  (change the name field to the bogus pointer value 1)
0:000> K
0:000> lm
0:003> !syncblk
0:044> !name2ee price Price
00000000-0000ffff 00010000                NA            Free
00010000-00011fff 00002000  RdWr          RdWr          Commit   Private
00012000-0001ffff 0000e000                NA            Free
00020000-00020fff 00001000  RdWr          RdWr          Commit   Private
00021000-0002ffff 0000f000                NA            Free
00030000-00030fff 00001000  RdWr                        Reserve  Private
0012ea04 5d512f59 mscorwks!CallDescrWorkerInternal+0x30
0012ee34 5d7946aa mscorwks!CallDescrWorker+0x109
0015bc90  00a743f4 00a79f00 00a7b3d8 00a7b47c
0015cde8        6     10260      Free
0019fe48        2      6128      Free
001caa50 C:\pub\unittest.exe
00400000 00408000   image00400000     (deferred)
0090320c  4000001        0                CLASS   instance 00a743d8 signature
0090320c  4000002        8         System.Int32   instance     2345 m1
0090320c  4000003       10       System.Boolean   instance        1 b1
0090320c  4000004        c         System.Int32   instance     1234 m2
0090320c  4000005        4                CLASS   instance 00a79d98 backpointer
0090320c  4000010        4            VALUETYPE   instance 00a79d9c m_valuetype
009032d8  400000f        4                CLASS     static 00a79d54 m_sExcep
009038ec  4000008        4                CLASS   instance 00a79ce4 name
009038ec  4000008        4             Customer   0 instance 00a79ce4 name
009038ec  4000009        8                 Bank   0 instance 00a79d2c bank
009038ec  4000009        8                CLASS   instance 00a79d2c bank
009038ec  400000a        c       System.Boolean   instance        1 valid
00a70000 00a71000  00a7e01c 0000d01c(53276)
00a70000 00a71000  010443a8 005d33a8(6108072)
00a71000 0015cde8       12 Free
00a7100c 0015cde8       12 Free
00a71018 0015cde8       12 Free
00a71024 5ba58328       68
00a71068 5ba58380       68
00a710ac 5ba58430       68
00a710f0 5ba5dba4       68
00a780c0    1.5MB    00bec800 System.Byte[]
00a79c78 03ef01a6 image00400000!Mainy.Level(Int32)+0xb
00a79c78 03ef02ab image00400000!Mainy.Top()+0xb
00a79c78 5d3725a1 image00400000!Mainy.Main()+0xee
00a7a1a4. Combine that information with the call stacks of the deadlock:
00da4e38    1.2MB    00ed2c00 System.Byte[]
00f16df0    1.2MB    01044338 System.Byte[]
01a70000 01a71000  01a75000 0x00004000(16384)
01a70000 01a71000  01a76000 0x00005000(20480)
01a71000 5ba88bd8     2064
01a71810 0019fe48     2032 Free
01a72000 5ba88bd8     4096
01a73000 0019fe48     4096 Free
01a74000 5ba88bd8     4096
030b5cb0 0x01000002 System.Object
030b6420 0x01000001 System.ValueType
030d115c 0x02000002 Funny
030d1228 0x02000003 Mainy
030fceb4 0x01000003 System.Exception
03167a50 0x0100000e System.Runtime.InteropServices.GCHandle
0334e374 0x0100000c System.Console
0336a048 0x0100000f System.GC
03ec0010  00000000 00000000 0090320c 0090375c
03ec0020  009038ec ...
03ef015d b901000000       mov     ecx,0x1
03ef0162 ff156477a25b     call   dword ptr [mscorlib_dll+0x3c7764 (5ba27764)] (System.Console.InitializeStdOutError(Boolean), mdToken: 06000713)
03ef0168 a17c20a701       mov     eax,[01a7207c] (Object: SyncTextWriter)
03ef016d 89442414         mov     [esp+0x14],eax
0404ea04 77f5c524 SharedUserData!SystemCallStub+0x4
0404ea08 77e75ee0 ntdll!NtWaitForMultipleObjects+0xc
0404eaa4 5d9de9d6 KERNEL32!WaitForMultipleObjectsEx+0x12c
0404eb38 5d9def80 mscorwks!Thread::DoAppropriateAptStateWait+0x156
0404ecc4 5d9dd8bb mscorwks!Thread::DoAppropriateWaitWorker+0x360
0404ed20 5da628dd mscorwks!Thread::DoAppropriateWait+0xbb
0404ede4 5da4e2e2 mscorwks!CLREvent::Wait+0x29d
0404ee70 5da4dd41 mscorwks!AwareLock::EnterEpilog+0x132
0404ef34 5da4efa3 mscorwks!AwareLock::Enter+0x2c1
0404f09c 5d767880 mscorwks!AwareLock::Contention+0x483
0404f1c4 03f00229 mscorwks!JITutil_MonContention+0x2c0
0404f1f4 5b6ef077 image00400000!Worker.Work()+0x79
040904B0
08             |             [EBP+08H] an untracked  local
0A\_^
0A]A\_
0A^A\_^[
0A^A]A\
0A^A]A\^]
0A^A]A\_^
0C             |             [EBP+0CH] an untracked  local
0E             | 002D        reg ECX becoming dead
0x%p 
1 even if the thrown exception type doesn't exactly match the exception type
1#IND
1#INF
1#QNAN
1#SNAN
1(0&0
1) The debugger shorthand ID (In fiber mode, if the thread is a fiber which is
1) The thread has taken a lock.
1) When you just want to stop on one particular CLR exception
1.dll
1/0-0
10             |             [EBP+10H] an untracked  local
10             | 002D        reg EDX becoming dead
100701213655Z
10200000 102ac000   MSVCR80D     (deferred)
110708205909Z
14             |             [EBP+14H] an untracked  local
1http://www.microsoft.com/PKI/docs/CPS/default.htm0@
2) The CLR Thread ID
2) The thread has been "hijacked" in order to allow a garbage collection.
2) When you need more complex logic for stopping on a CLR exception
2.0.50727.9157
2.0.50727.9157 (WinRelRS6.050727-9100)
201015172822Z
201215213145Z
20210504061828.871Z0
20210504111455Z
20210505111455Z0w0=
211202213145Z0t1
220112172822Z0
230012+4630090
250701214655Z0|1
260708210909Z0~1
3) The OS thread ID.  
3) The thread is currently in managed code.
3560   9.980618994 : `GC`GCROOTS`         GcScanHandles (Promotion Phase = 0)
3560   9.981124963 : `GC`                 GC Heap 00000000
3560   9.981125103 : `GC`                     Generation 2 [00C61000, 00000000
3560   9.981125529 : `GC`                     Generation 1 [00CED070, 00000000
3560   9.981125726 : `GC`                     Generation 0 [00CED07C, 00000000
3560   9.981125826 : `GC`                         Segment mem 00C61000 alloc 
3560   9.981135033 : `GC`GCALLOC`GCROOTS` ========== ENDGC 4194 (gen = 2, 
3560   9.981137099 : `SYNC`               RareEnablePremptiveGC: entering. 
36 D4 8C C7 AA |
38             | 0036        reg EDI becoming dead
3bqgG
3http://www.microsoft.com/pkiops/docs/primarycps.htm0@
4 sections in file
4`%x (%p)
44             |             [EBP-04H] an untracked  local
4A             | 0027        reg ECX becoming live
56             | 0025        reg EDX becoming live
5a000000 5a0b1000   mscoree      (deferred)
5a140000 5a29e000   mscorjit     (deferred)
5b660000 5c440000   mscorlib_dll     (deferred)
5ba57bf8      318     18136 System.String
5ba58328        1        68 System.OutOfMemoryException
5ba58380        1        68 System.StackOverflowException
5ba58430        1        68 System.ExecutionEngineException
5ba58c10        1       108 System.AppDomain
5ba5c57c        1        20 System.SharedStatics
5ba5db04        1        68 System.Threading.Thread
5ba5db04        2       136 System.Threading.Thread
5ba5dba4        1        68 System.Threading.ThreadAbortException
5ba61f18        1        12 System.Collections.CaseInsensitiveComparer
5ba65bb8        2        48 System.Reflection.Assembly
5ba6739c        1        48 System.Reflection.Module
5ba6cf78        1        24 Microsoft.Win32.SafeHandles.SafeFileHandle
5ba73e28        2       112 System.IO.StreamWriter
5ba75d54        1        12 System.Security.Permissions.SecurityPermissionFlag
5ba75da8        1        12 System.Security.Permissions.SecurityPermission
5ba7607c        1        12 System.Security.Permissions.HostProtectionResource
5ba76878        2        40 System.Security.PermissionSet
5ba88bd8        3     10256 System.Object[]
5d1d0000 5e13c000   mscorwks     (deferred)
-64OS
700PP
700WP
72             | 0013        reg ESI becoming live
8*u:A
8*u=A
8;Q(s:
8\$ht
8]tEf
8]u6E
80tWE
83             | 0016        push ptr  0
88\$Lu#@
8B             | 0019        push ptr  1
8D$ht
8H;;s
8T$Xf
9|$0uc9|$Ht
9|$8H
9|$8Hc
9|$8L
9|$hA
9|$HL
93             | 001C        push ptr  2
93 F3 40 05    |
9B             | 001F        push ptr  3
9B7A-94635BEEBDDA&displaylang=en
9D$ht
9D$tH
9F0u}H
9l$`u
9l$du
9t$ ~
9t$@H
9t$0t
9t$4u
9t$8u#H
9t$HL
9t$PD
a code address in a managed function into a MethodDesc:
a garbage collection occurs, the collector needs to know where roots are so it 
A handy supplement to this function is to also run "lm v m mscorwks". That 
A leak may still exist because in a general scan of process memory SOS can't  
a managed thread is making a PInvoke call to a Win32 function, that thread 
A minidump without full memory may not have this information
a simple program:
A special note about -type: Often, you'd like to find not only Strings, but
A SyncBlock is a holder for extra information that doesn't need to be created 
a value class is not a first-class object with it's own MethodTable as the
A;\$$r
A;T$$r
A\_^][
A]_^]
A^A]_^[
A^A]_^][
A_A^A\_^]
A_A^A]
A_A^A]A\]
A_A^A]A\_
A_A^A]A\_^]
A9:Ic
A9\$$v
abcdefghijklmnopqrstuvwxyz
ABCDEFGHIJKLMNOPQRSTUVWXYZ
abcdefghijklmnopqrstuvwxyz
ABCDEFGHIJKLMNOPQRSTUVWXYZ
able to rule out or include them as a source of a memory leak.
about that method. You could run !U, !DumpMT, !DumpClass, !DumpMD, or 
Abstract, 
ACTIVE
add.ovf
add.ovf.un
Adding pending breakpoints...
-addr
Address
addresses in the call stack to get more information on each managed method.
ADUnloadHelper 
AL9l$0t
All handles found
all loaded modules in all domains. And remember that you can browse all the
AllocProtect
AllowOptimize=0
also lists heaps associated with the JIT compiler, and heaps associated with 
an Address string. You can use !ObjSize to identify any particularly large 
An application has made an attempt to load the C runtime library incorrectly.
An assembly can consist of multiple modules, and those will be listed. You can
and for a class:
and maps it to a MethodDesc, which can be passed to !DumpMD.
and reports what it found. If a handle is found, you'll see the address of the
and the types referenced by the module. For example:
Any Assembly pointer in the output can be passed to !DumpAssembly. Any Module 
AppDomain: %p
AppDomain: 0014f000
AppDomains.
applied to each region. Sample output:
appropriate structures. For example, the TypeDefToMethodTableMap above can be 
April
are able to run other SOS commands, but they may fail with unexpected errors 
are overloaded methods, !bpmd will set a breakpoint for all of them.
are two special domains: the Shared Domain and the System Domain.
arglist
ARRAY
Array: Rank %d, Number of elements %d, Type %s
Array: Rank 1, Number of elements 10, Type VALUETYPE
Assembly
Assembly: %p
Assembly: 001ca248
AssemblyReferencesMap: %p
AssemblyReferencesMap: 03ec012c
associated with it. For example, this output from K:
Async Pinned Handles: %d
Async Pinned Handles: 0
AsyncCallbackCompletion AsyncCallback@%p
AsyncTimerCallbackCompletion TimerInfo@%p
At this time you can use SOS commands. To turn off spurious notifications,
ATAUAVH
ATAUAWH
Attempted to run: %s
Attempting to dump Stress log to file '%s'
Attempting to dump Stress log to file 'StressLog.txt'
Attributes: 
Attributes: PEFile
August
Avail
AVERAGE
b1: %S
b2: %S
b3: %S
b4: %S
b5: %S
b6: %S
b7: %S
b8: %S
b9: %S
ba w8 /1 %p "bp poi(%p); g"
BackgroundThread: %d
bad allocation
bad import
Bad MethodTable for Obj at %p
BAD TIME
BaseSize: 0x%x
be created for MyObject, and the thread ownership information stored there 
be passed to !DumpDomain to limit output only to that AppDomain. Other 
be returned. More generally, "-type <Substring of interesting type>[]".
Because people often want to restrict the search to gc handles and freachable
because required areas of memory are not mapped in or only partially mapped 
Begin %p, size %x
Begin %p, size %x. Cold region begin %p, size %x
beq.s
best way to debug a managed program at this level.
between managed and unmanaged code. You could run !IP2MD on the return 
bf&!D
bge.s
bge.un
bge.un.s
bgt.s
bgt.un
bgt.un.s
Bhttp://www.microsoft.com/pki/certs/MicRooCerAut2011_2011_03_22.crt0
binaries for that version of the Runtime, the Windows Debugger will load the
binary array. If _stackTraceString field is not filled in, that can be helpful 
binary to a file, so you can disassemble the code and browse types with ILDASM.
binary. Be sure to list any new commands here.
ble.s
ble.un
ble.un.s
BLK COUNT
block and the handler block. For a TYPED handler, this would be the "try" and
blt.s
blt.un
blt.un.s
bne.un
bne.un.s
Boolean
Both of these data structures are cached and cleaned up by the finalizer thread
bp %p
break
breakpoint for any instantiation that will be JIT-ted in the future.
Breakpoint set
brfalse
brfalse.s
brtrue
brtrue.s
but !ObjSize lists 152 bytes:
But it could be handy sometimes.
By default, MinidumpMode is 0, so there is no restriction on commands that will
By looking at the code corresponding to Worker.Work()+0x79 (run "!u 03f00229"),
by memory pressure for better performance. You can also see the notion of 
by the orphaned handle. If the number doesn't grow over time, note that there 
By using !EEHeap to keep track of the growth of these private heaps, we are 
BYREF
ByRef
C(9C,|F
c:\pub\out.tmp already exists, it will be overwritten.
C@H9C8u
C@H9C8u#H;K
C@H9P
call 
call those when an AppDomain shuts down.
called a ThinLock will be used if there is not already a SyncBlock for the 
caller.sp
caller.sp%c%x
calli
callvirt
can also pass * as the <module name> to search all loaded managed modules.
can get false positives because even though the value was found, it might be 
can limit the output by passing "-gc" or "-loader". All information will be 
can move around in the garbage collected heap.
can occur while that thread is running. For example, if you break in while
can request the JIT compiler to not optimize functions in the managed app by
can run !DumpMT to verify that. The MethodDefToDescMap takes a MethodDef token 
can update them with new object pointer values.
candidate is validated. This helps to eliminate false positives. It is not
Cannot specify both -mt and -type
Cannot specify both -short and any of (-stat, -thinlock, -strings, -verify)
Can't get Watson Buckets
capability.
castclass
catch(...) 
CCW             %d
cgt.un
ChildEBP RetAddr
Child-SP         RetAddr          Call Site
Chttp://www.microsoft.com/pkiops/crl/MicCodSigPCA2011_2011-07-08.crl0a
ckfinite
CLASS
Class
class 
Class Attributes: %x  
class G3<T1, T2, T3> 
Class Name
Class Name: 
Class: %p
Class: 03571358
Class: 03ee1424
ClassLoader: %p
ClassLoader: 001ca060
Clause: [%p, %p] [%x, %x]
Clause: [033bbd2b, 033bbd3c] [8b, 9c]
Clause: [033bbd7a, 033bbdc5] [da, 125]
Clause: [033bbd83, 033bbda3] [e3, 103]
CLEARED
CLOSED
CloseHandle
CLR not loaded
CLRProfiler
CLR-specific data, just enough to run a subset of SOS commands correctly. You 
ClrStack
clrstack
CLRStack
CLRStack attempts to provide a true stack trace for managed code only. It is
CLRStub[
CLstatic
clt.un
CMOD_OPT
CMOD_REQD
Code size: %x
CodeAddr: %p
CodeAddr: 033bbca0
CodeAddr: 03ef00b8
codelabel
Cold region:
collect_classes = 0) ==========={
COLLECTED
collection statistics about objects. With it's various options, it can look for
combined with a high rate of allocation. Here is example output where !DumpHeap
ComClassFactory
ComClassFactory %d
ComImport, 
COMMAND: %s.
COMMAND: <cmd name, all lower case>
COMMAND: bpmd.
COMMAND: clrstack.
COMMAND: comstate.
COMMAND: contents.
COMMAND: dumparray.
COMMAND: dumpassembly.
COMMAND: dumpclass.
COMMAND: dumpdomain.
COMMAND: dumpheap.
COMMAND: dumpil.
COMMAND: dumplog.
COMMAND: dumpmd.
COMMAND: dumpmethodsig.
COMMAND: dumpmodule.
COMMAND: dumpmt.
COMMAND: dumpobj.
COMMAND: dumpruntimetypes.
COMMAND: dumpsig.
COMMAND: dumpstack.
COMMAND: dumpstackobjects.
COMMAND: dumpvc.
COMMAND: eeheap.
COMMAND: eestack.
COMMAND: eeversion.
COMMAND: ehinfo.
COMMAND: faq.
COMMAND: finalizequeue.
COMMAND: findappdomain.
COMMAND: gchandleleaks.
COMMAND: gchandles.
COMMAND: gcinfo.
COMMAND: gcroot.
COMMAND: ip2md.
COMMAND: minidumpmode.
COMMAND: name2ee.
COMMAND: objsize.
COMMAND: printexception.
COMMAND: procinfo.
COMMAND: rcwcleanuplist.
COMMAND: savemodule.
COMMAND: stoponexception.
COMMAND: syncblk.
COMMAND: threadpool.
COMMAND: threads.
COMMAND: token2ee.
COMMAND: traverseheap.
COMMAND: u.
COMMAND: verifyheap.
COMMAND: vmmap.
COMMAND: vmstat.
Comments
Commit
CompanyName
Completion Port Thread:
complex, like 'price, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'.
ComponentSize: 0x%x
compressed stream of data indicating when registers or stack locations contain 
comstate
COMState
CONOUT$
consistency errors.
constrained.
contents
CONTEXT
Context information:
ContextStaticOffset: %x
ContextStaticsSize: %x
conv.i
conv.i1
conv.i2
conv.i4
conv.i8
conv.ovf.i
conv.ovf.i.un
conv.ovf.i1
conv.ovf.i1.un
conv.ovf.i2
conv.ovf.i2.un
conv.ovf.i4
conv.ovf.i4.un
conv.ovf.i8
conv.ovf.i8.un
conv.ovf.u
conv.ovf.u.un
conv.ovf.u1
conv.ovf.u1.un
conv.ovf.u2
conv.ovf.u2.un
conv.ovf.u4
conv.ovf.u4.un
conv.ovf.u8
conv.ovf.u8.un
conv.r.un
conv.r4
conv.r8
conv.u
conv.u1
conv.u2
conv.u4
conv.u8
ConvertThreadToFiber
CopyCtor
CorExitProcess
correct mscordacwks.dll file.
correspond to SOS command names. This file is embedded as a resource in the SOS 
corresponding to objects that are owned by a thread. For example, a
corruption bug caused by invalid GCEncoding for a particular method.
could increase this to get more logging, but more memory will be required for 
Could not read address of format string
Could not read memory %p
Count
cpblk
cpobj
CPU utilization %d%%
-create
-create2
CreateFiber
CreateFileA
CreateFileMappingA
CREATING
creating a file myapp.ini (if your program is myapp.exe) in the same directory.
CSTRESS LOG:
curr_object : %p
curr_object : 00a73d24
curr_object : 00a79d40
curr_object: %p > end_youngest: %p
curr_object: %p > heap_segment_allocated (seg: %p)
current managed thread. (A nested exception occurs when you throw another
Current mode: %s - unsafe minidump commands are %s.
d$ AUAVAWH
d$ AUH
D$ E3
d$ E3
D$ E3
d$ E3
D$ E3
D$ H;
d$ Ic
D$(E3
D$(M+
D$(u:3
D$@D;
d$@E3
D$@fD
D$@ff
D$@H;
D$@H;5
D$@H;5n
D$@Hc
D$@L;
D$@rA
d$@vP
D$`f=
D$`H;
D$`u=Hc
D$`w<H
D$0|Ifff
D$0D#
D$0H+|$8A
D$0t7H
d$0t-L
D$4fA
d$8;|$T
D$8A9}
D$8E3
D$8H;
D$8H+
D$8H=
D$8H9
D$8L9 u
D$8t#A
D$8u 
d$8utH
d$DE+
d$hE2
D$HE3
D$HH;
D$HH+
D$hH9F(u
D$HI;
D$Ht#A
D$Ht%
D$Htc
D$Hu 
D$lE3
D$p H
D$pE3
D$PE3
d$PE3
D$Pf=
D$pff
D$PH;5;
D$PH9D$Hs
D$PHc
D$PL;
D$Ps-
D$Tfff
D$XD+
D$XE3
D$xE3
D$XE3
D$XH;
D$Xt&A
D):Hc
D;|$X
D;l$H
D;t$0
D;t$4
D=xz#
D9|$X
D9}$t,H
D9}$u
D9},t!L
D9}<u
D9}<u-D9}4u
D9}<uMH
D9}0t
D9=)d
D9=,'
D9=9&
D9=g%
D9=G)
D9=i)
D9-7O
D9d$@A
D9d$@u
D9d$`A
D9d$`t
D9d$4tID9
D9d$D
D9d$Pu
D9d$TA
D9d$Tt$H
D9d$Tt0H
D9d$TtR
D9d$XA
D9d$Xu
D9G,M
D9l$`t?
D9l$d
D9m,t!L
D9m<u-D9m4u
D9t$0
D9t$4
D9t$8
D9t$XD
D9-YO
dbgeng.dll
DbgHelper 
dddd, MMMM dd, yyyy
DeadThread: %d
DebugCreate
DebugExtensionInitialize
DebugExtensionNotify
DebugExtensionUninitialize
debugger "U" function, the entire method from start to finish is printed,
December
DecodePointer
decoder failed
default one.
defined on the object. 
DeleteCriticalSection
DeleteFiber
-derived
-detail
-details
details can be obtained by passing the pointer value to !PrintException. If
determine if it is still in use.
Didn't find %d handles:
differentiate between garbage and valid structures, so you may have false     
directly. Be careful about using this to set memory breakpoints, since objects
disabled
disassemble the frame that the local or argument value belongs to in order to 
disassembly of the JITTED code. You can also call !DumpClass, !DumpMT, 
discarded without freeing it.
display managed locals and arguments. Upgrade to the latest version for this
Display of context static variables is not implemented yet
displayed otherwise.
displaying, finding or traversing objects as well as gc heap segments may not 
disturb a fragile repro environment. The !DumpLog function allows you to write 
div.un
DllBase
DLYwh
DOCUMENTATION
Documentation for %s not found
documentation). Finally, it will provide a warning if it detects excessive 
doesn't match the version of MSCORWKS.DLL. You can find the version of 
Domain
Domain %d: %p
Domain %d: %x
Domain 1: 14f000
DOMAIN error
DOMAIN(%p):
don't have an instance of the class, so !dumpobj won't help you), note that
don't have the original DLLs or EXEs. This is most often used to save a managed
Double
down by AppDomain.
dump creation time to bring those structures into the minidump, and allow a 
dumparray
DumpArray
DumpArray (da)                     CLRStack
DumpAssembly
dumpassembly
DumpAssembly                       
DumpClass
dumpclass
DumpClass                          GCHandleLeaks
dumpdomain
DumpDomain
DumpDomain                         VerifyHeap
DumpHeap
dumpheap
DumpHeap                           U
dumpil
DumpIL
Dumplog
dumplog
DumpLog
DumpMD
dumpmd
DumpMD                             VMMap
dumpmethodsig
DumpMethodSig
DumpMethodSig                      Other
DumpMethodSig <sigaddr> <moduleaddr>
DumpModule
dumpmodule
DumpModule                         StopOnException (soe)
dumpmt
DumpMT
DumpMT                             GCHandles
dumpobj
DumpObj
DumpObj (do)                       Threads
dumpruntimetypes
DumpRuntimeTypes
Dumpruntimetypes
DumpRuntimeTypes                   -----------------------------
dumpsig
DumpSig
DumpSig                            FAQ
DumpSig <sigaddr> <moduleaddr>
dumpstack
DumpStack
DumpStackObjects
dumpstackobjects
DumpStackObjects (dso)             IP2MD
DumpVC
dumpvc
DumpVC                             DumpStack
Dynamic 
Dynamic Module
dynamic statics NYI
e A_A^A]A\]
E Hc}
E HcE
e_.,>
e+000
E0             | 002D        pop  4 ptrs
E0C1)0'
E9|$0
E9F A
Each thread has many attributes, many of which can be ignored. The important 
-EE functions just the same.
-EE will only show managed functions.
EEClass has an invalid MethodTable address
EEClass: %p
EEClass: <error getting EEClass>
EEClass: <not loaded yet>
EEClass: 03e40fc0
EEClass: 03ee1424
EEClass: 03ee14b8
EEClass: 03ee1ae0
EEClass: 03ee1b84
EEClass: 11a538c8
eeheap
EEHeap
EEHeap                             DumpLog
eestack
EEStack
eeversion
EEVersion
EEVersion                          ProcInfo 
eHA_A^A]A\_^[]
EHHandler %d: %s
EHHandler %d: %s 
EHHandler %d: %s CLAUSE END
EHHandler %d: %s FILTER BEGIN
EHHandler %d: %s HANDLER BEGIN
EHHandler %d: %s HANDLER END
EHHandler 0: TYPED
EHHandler 1: FINALLY
EHHandler 2: TYPED
Ehinfo
ehinfo
EHInfo
-ehinfo
Ehttp://crl.microsoft.com/pki/crl/products/MicRooCerAut_2010-06-23.crl0Z
Ehttp://crl.microsoft.com/pki/crl/products/MicTimStaPCA_2010-07-01.crl0Z
Ehttp://www.microsoft.com/pkiops/certs/MicCodSigPCA2011_2011-07-08.crt0
EJIT generated code
Element Methodtable: %p
Element Type: %S
Element Type: Value
enabled
EncodePointer
end       Stop listing at this address
endfilter
endfinally
endmac
EnterCriticalSection
Entry
entry point %p
entry point 5b68dbb8
Environment
ephemeral segment allocation context: 
Error calling GetStackTrace (%x)
error decoding IL
Error during heap traverse
Error gathering dynamic info from object at %p
Error getting AppDomain %p
Error getting AppDomain friendly name
Error getting AppDomain information
Error getting card table lowest address
Error getting EEJitManager code heaps
Error getting MethodDescs
Error getting next card table
Error getting per-appdomain handle information
Error getting string data
Error getting System.RuntimeType.m_handle offset
Error gettting GetStackTrace (%x)
Error in GetLastEventInformation
error in import
Error initialized register $t%d to zero
Error initializing heap traversal
Error loading documentation resource
Error processing exception notification
Error reading card bits
Error requesting details
Error requesting GC Heap data
Error requesting gc heap details
Error requesting heap segment %p
Error requesting SyncBlk data
Error requesting SyncBlock %d, continuing
Error retrieving nested exception info %p
Error setting breakpoint: %s
Error when reading RuntimeType field
Error!
Error, unexpected opcode type
Error: %lx
Error: AppDomain name incorrect
Error: bad threadcount (should be between 2 and 4)
Error: caught exception in VerifyDACInternal
Error: Failed to request Thread
Error: unable to find the finalizer thread
Especially on IA64, there is heavy optimization of parameters and locals. You
every exception in the System.Exception heirarchy.
every object has enough clues about it's origin to determine the AppDomain. 
ex:    StopOnException -create System.OutOfMemoryException 1
Examine a MethodTable. Each managed object has a MethodTable pointer at the 
examined:
Examining CLR data structures      Diagnostic Utilities
Example for generics:
Example output:
example, if you only want to list objects in the large heap segment:
example. If a handle is not found in memory, you'll get notification of that 
Example: DumpVC 907b50 67903084
Examples: !Name2EE  mscorlib.dll System.String.ToString
exception during printing
exception during sorting
Exception object: %p
exception on the current thread (if any). You can use !soe as a shortcut for 
exception on the current thread and print it. This will be the same exception
Exception type: %S
Exception type: <Unknown>
Exception will list the last thrown exception (if any) for the thread. More
exception within a catch handler already being called for another exception).
exceptions by switching to the thread in question, and running 
execute the same code, they won't be able to enter the block until the first 
EXITED
EXITING
Exiting...
ExitProcess
Expected newline in documentation resource
Expecting an exception event
explore more fields.
expressed as `facility1`facility2`facility3`.  This facilitates the creation of 
ExRdWr
extension !teb to get the top and bottom stack values.
Extension commands need mscorwks.dll in order to have something to do.
ExWrCp
f;D$@
f;D$@upA
F0 31          | 0036        reg ESI becoming dead
F1 79          | 0011        reg EDI becoming live
F8H9h
f9l$8D
Fail to create file %s
Fail to fill AppDomain
Fail to fill Assembly
Fail to fill Module %p
Fail to read memory
Fail to read PE section info
Failed
Failed to examine a WorkRequest
Failed to execute the following command: %s
Failed to find runtime DLL (mscorwks.dll), 0x%08x
Failed to find runtime DLL (mscorwks.dll), 0x80004005
Failed to gather EHInfo data
Failed to get appdomain %p, error %lx
Failed to get appdomain list
Failed to get appdomain, error %lx
Failed to get CLR Tls data for thread %d
Failed to get GCHeaps
Failed to get GCHeaps:  integer overflow
Failed to get GCHeaps:  integer overflow error
Failed to get GCHeaps: integer overflow
Failed to get Teb for Thread %d
Failed to get thread ID for thread #%d
Failed to get thread type info not found for thread %d
Failed to get Tls expansion slots for thread %d
Failed to load data access DLL, 0x%08x
Failed to perform EHInfo traverse
Failed to read bounds info from the array
Failed to read element at 
Failed to read lower bounds info from the array
Failed to read memory
Failed to read whole or part of stress log, some references may come from stress log
Failed to request Context at %p
Failed to request MethodData, not in JIT code range
Failed to request Thread at %p
Failed to request ThreadpoolMgr information
Failed to request ThreadStore
Failed to require current Thread ID
Failed to require total thread number
Failed to retrieve segments for gc heap
Failed to retrieve Tls Data index
Failed to set code notification
Failed to start stack walk: %lx
Failed to switch to original thread
Failed to switch to thread %d
FAILURE: Stress log not dumped
FAULT
FCALL
fD9)t
fD9d$pt
February
FF             |
Field
Field (mdToken token) of
Field name: %S
FieldDefToDescMap: %p
FieldDefToDescMap: 03ec00a4
Fields:
file %s saved
File not specified
file. This is especially useful if you are debugging a full memory dump, and 
FileDescription
FileReferencesMap: %p
FileReferencesMap: 03ec0128
FileTimeToLocalFileTime
FileTimeToSystemTime
FileVersion
FILTER
Filter: [%p] [%x]
filters for displaying only specific message categories.  To make sense of this 
FINALIZED
FinalizeQueue
finalizequeue
FinalizeQueue                      EHInfo
Finalizer 
Finalizer queue
FINALIZING
FINALLY
Finally, if gc heap corruption is present, you may see an error like this:
Findappdomain
findappdomain
FindAppDomain
FindIL failed
FindResourceA
first field. For example:
First, all stacks will be searched for roots, then handle tables, and finally
Flavor=Retail
float32
float64
FlsAlloc
FlsFree
FlsGetValue
FlsSetValue
FlushFileBuffers
FNPTR
Followed by
followed by a report listing all the types found, their size and number:
following code is executed by Threads A & B:
For a minidump created with this minimal set of functionality in mind, you
for debugging. You can of course use !DumpObj on the same exception object to 
for every object. It can hold COM Interop data, HashCodes, and locking 
For example, !DumpObj lists a size of 20 bytes for this Customer object:
For example, a GCHandle valuetype is stored on the stack with the low bit set 
for finalization. The notation "(0015bc90->0015bca0)" means that if you look at
for -l and -p combined.
For multi-dimension array, length and start index are supported
for the method. (Beginning and end of try/finally/catch handlers, etc.).
For this case, just be sure to surround the module name with single quotes,
For this kind of module, simply use price as the module name:
Found %d handles:
Found %d methods...
Found %p at location %p
Found %p in stress log at location %p, reference not counted
fragmentation in the GC heap. 
Fragmented blocks larger than 0.5 MB:
Fragmented blocks larger than 1MB:
Frame pointer: %s
Free            %d
Free MethodTable
Free Object
Free:
FreeEnvironmentStringsA
FreeEnvironmentStringsW
FreeLibrary
Friday
from the resultant list. Here is a simple object:
FRSDS
FullDllName
function specifically to debug DynamicMethod code which was constructed on
functions provide an AppDomain pointer as well, such as !Threads where it lists
functions. Here is sample output:
G1.G():
Garbage Collector attempts to collect and reclaim memory only when required to
garbage collector. The most apparent difference in the debugger is that in 
garbage in that no code knows about the address. You can also get false 
Gate 
Gathering types...
GC Handle Statistics for AppDomain %p 
GC Handle Statistics:
GC Heap not initialized, so GC mode is not determined yet.
GC Heap Size   0x1201c(73756)
GC Heap Size  %#16I64x(%I64u)
GC Heap Size  0x5d73a8(6124456)
GC info %p
GC info 5b9f2f09
Gchandleleaks
gchandleleaks
GCHandleleaks
GCHandleLeaks
GCHandleLeaks will report any GCHandles that couldn't be found in memory.      
gchandles
GCHandles
GCInfo
gcinfo
-gcinfo
GCinfo for EJIT not supported
gcroot
GCRoot
GCRoot                             EEStack
GENArray
GenerateTrackingInfo=1
generation %d has %d finalizable objects 
generation %d starts at 0x%p
generation 0 has 4 finalizable objects (0015bc90->0015bca0)
generation 0 starts at 0x00a71018
generation 0 starts at 0x00c32754
generation 1 has 0 finalizable objects (0015bc90->0015bc90)
generation 1 starts at 0x00a7100c
generation 1 starts at 0x00c32748
generation 2 has 0 finalizable objects (0015bc90->0015bc90)
generation 2 starts at 0x00a71000
GENERICARRAY
GENERICArray
get an Assembly address from the output of !DumpDomain.
GetACP
GetActiveWindow
GetCommandLineA
GetConsoleCP
GetConsoleMode
GetConsoleOutputCP
GetCPInfo
GetCurrentProcess
GetCurrentProcessId
GetCurrentThreadId
GetEnvironmentStrings
GetEnvironmentStringsW
GetFileSize
GetFileType
GetFileVersionInfoA
GetFileVersionInfoSizeA
GetLastActivePopup
GetLastError
GetLocaleInfoA
GetModuleFileNameA
GetModuleHandleA
GetOEMCP
GetProcAddress
GetProcessHeap
GetProcessTimes
GetProcessWindowStation
GetStartupInfoA
GetStdHandle
GetStringTypeA
GetStringTypeW
GetSystemTimeAsFileTime
GetTickCount
GetTimeFormatW
GetUserObjectInformationA
GetVersionExA
gfffA
gfffffffH
gfffH
Given an address in managed JITTED code, IP2MD attempts to find the MethodDesc
Given the following two classes:
given, but merely derives from it. So, "-derived System.Exception" would catch
GlobalMemoryStatus
GS cookie valid range: [%x;%x)
GS cookie: 
H;|$@u H
H;|$8u H
H;~(u
H;=.S
H;D$@L
H;D$0
H;D$8
H;D$8t
H;EPH
H;l; u
H;MPwRH
H_^][
H+\$hH
H9\$`t
H9\$H
H9\$HtBI
H9|$@
H9|$P
H9|$xu
H9D$@u
H9D$0
H9D$Pu
H9l$@v
H9l$`u
H9t$@
H9t$X
H9V8s
hA]A\_^
handle
handle addresses that couldn't be found.
HANDLE(AsyncPinned):
HANDLE(Pinned):
HANDLE(RefCnt):
HANDLE(Strong):
HANDLE(Unknwn):
HANDLE(WeakLn):
HANDLE(WeakSh):
handler, it shows the type, including code addresses and offsets for the clause
Handler: [%p, %p] [%x, %x]
Handler: [033bbd3c, 033bbd50] [9c, b0]
Handler: [033bbda3, 033bbdc5] [103, 125]
Handler: [033bbdc5, 033bbdd6] [125, 136]
HANDLETABLE_NOACCESS
handy for clean, simple traces when debugging straightforward managed 
has a memory demand of 10 Megabytes. The stress log is circular so new entries 
have an object pointer, and can attempt to run "!DumpObj" on it.
Hc\$@H
HcD$@H
HcD$8H
HcD$HH
HcD$hH
HcD$PH
HcH<H
HcK(H
HcKDI
HcKDL
HcL$@
HcL$0H
HcL$X
HcM H
Hct$@H
HcT$0
HcT$H
Heap %d
Heap %d (%p)
heap fragmentation. This is usually caused by pinning objects for a long time 
Heap Size  %#16I64x(%I64u)
HeapAlloc
HeapCreate
HeapDestroy
HeapFree
HeapReAlloc
HeapSetInformation
HeapSize
help.
Here is output for a simple program:
Here is sample output from a very simple program:
Here is sample output where you can see the change in register state. Normally 
Here is some sample output:
HH:mm:ss
higher-level summary of the objects registered for finalization. Note that 
HighFrequencyHeap: 
HighFrequencyHeap: %p
HighFrequencyHeap:008f2000(00008000:00001000) Size: 0x00001000 bytes.
HighFrequencyHeap:00902000(00008000:00003000) Size: 0x00003000 bytes.
HighFrequencyHeap:00922000(00008000:00001000) Size: 0x00001000 bytes.
HIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework:
HostCodeHeap: 
Hosted Runtime: %s
Hot region:
How can I do this?"
HResult: %lx
http://blogs.gotdotnet.com/anathan/categoryview.aspx/Debugging
http://www.microsoft.com/downloads/details.aspx?FamilyId=86CE6052-D7F4-4AEB-
http://www.microsoft.com0
I;^ u
I;} u
ID: %d
ID: (shared domain)
ID: (system domain)
ID: 1
identify a possible trend.                                                    
If 30% or more of the heap contains "Free" objects, the process may suffer from
If a token is unresolved, run "!do <addr>" on the addr given
If an error is found, !VerifyHeap will report it. I'll take a perfectly good 
If called with no parameters, PrintException will look for the last outstanding 
If I wanted to save a copy of mscorwks.dll, I could run:
If IsJitted is "yes," you can run !U on the CodeAddr pointer to see a 
if it points to a Pinned handle. So !GCHandleLeaks ignores the low bit in it's
If not then either the module that contains the method hasn't been loaded yet
If PreEmptiveGC is enabled for a thread, then a garbage collection 
If that succeeds, the SOS command should work on retry.
If the pointer falls within a segment range given by "!EEHeap -gc", then you do
If there are nested exceptions, you can re-run !PrintException with the 
If this gc heap corruption exists, there is a serious bug in your own code or 
If you are debugging a minidump, you need to make sure that your executable
If you are looking for a way to display a static field of a class (and you
If you are running version 1.1 or 2.0 of the CLR, SOS.DLL is installed in the 
If you are using a dump file created on another machine, it is a little bit
If you need this functionality, get a full memory dump with ".dump /ma mydump.dmp"
If you pass -detail then you get extra information on any SyncBlocks that need
If you pass the -ehinfo flag, you'll get inline display of exception info
If you pass the -gcinfo flag, you'll get inline display of the GCInfo for
If you run with the -perdomain option, you will get the same output broken 
If you use the -verify option, each non-static CLASS field of an object
Ihttp://crl.microsoft.com/pki/crl/products/MicRooCerAut2011_2011_03_22.crl0^
IL_%04x
ilAddr = %p
illegal
Image
image). The TOTAL column is (AVERAGE * BLK COUNT). Sample output below:
importance. Shortcut names for popular functions are listed in parenthesis.
important properties of the object such as the EEClass, the MethodTable, and 
In a minidump without full memory, most gc heap structures will not be valid.
In addition to your application domain, and any domains it might create, there
in an easy-to-understand xml format:
In order to run SOS commands, many CLR data structures need to be traversed. 
in parenthesis. You can also look at the token table yourself, by
In plan phase of garbage collection
In the case of hosted environments such as SQL, the module name may be 
in the CLR. In user code, an error in constructing PInvoke calls can cause 
in the current directory is created.
In the debugger at startup you can type:
in the debugger, and let it run. After the function EEStartup is finished, 
in the debugger.
in. At this time, SOS cannot reliably detect if a dump file is of this type 
in. You can pass this value to !DumpDomain to find out more. 
Incorrect argument: %s
Index         SyncBlock MonitorHeld Recursion Owning Thread Info          SyncBlock Owner
Index SyncBlock MonitorHeld Recursion Owning Thread Info   SyncBlock Owner
information about that:
information for thread-safe operations.
information on diagnosing the cause.
initblk
InitializeCriticalSection
InitializeCriticalSectionAndSpinCount
initobj
in-memory log capability. The idea was to avoid using locks or I/O which could 
InMemoryOrderLinks
InMemoryOrderModuleList
InnerException: 
instance
int16
Int16
int32
Int32
int64
Int64
Integer overflow on array rank
interested in objects with invalid fields.
Interface, 
INTERNAL
InternalName
interrupted by user
IntPtr
Invalid arg
Invalid argument %s
Invalid Assembly %s
Invalid EEClass address
Invalid exception object %s
invalid GC info
Invalid module token
Invalid object
Invalid option %s
Invalid option: option specified multiple times: %s
Invalid parameter %s
Invalid parameters %s %s
Invalid parent EEClass
Invalid parent MethodTable
Invalid signature
Invalid stress log chunk: %p
IOCompletion
IOCompletion 
IP2MD
ip2md
is a bug in the JIT Compiler. It parses the GCEncoding for a method, which is a
is a simple example of the output for a dynamic method:
is no facility to read meta-information about this memory). You can turn this 
is owned by thread 4.
is running in "Workstation" or "Server" mode, a distinction which affects the 
IsDebuggerPresent
isinst
IsJitted: %s
IsJitted: yes
IsValidCodePage
It creates a graphical display of the GC heap to help you analyze the state of
It is either in the "plan phase," where objects are being moved around, or
It is not always the case that a SyncBlock will be created for every object 
It means that Thread e04 owns object 00a7a194, and Thread ab8 owns object 
It turns a method name into a MethodDesc. Here is an example for a method:
JanFebMarAprMayJunJulAugSepOctNovDec
January
jD9d$Pu
Jit code heap:
JITTED %S!%S
JITTED Code Address: %p
JITTED Code Address: 03ef00b8
Kernel CPU time   : %d days %02d:%02d:%02d.%02d
KERNEL32.DLL
kernel32.dll
Kernel32.dll
KERNEL32.dll
-l parameter can be used to show information on local variables in a frame.
L$ @*
l$ D+
L$ E3
L$ SVWATAVH
L$ UATAUAVAWH
L$ VWATAUH
l$ VWATH
l$ VWAUH
l$ WH
L$(E3
L$(H+
L$(H3
l$@E3
L$@E3
l$@E3
L$@E3
l$@H;
L$@H+
l$@sxfff
L$`E3
L$`H3
l$0A9T$$v$L
L$0D+
L$0E3
l$0E3
L$0E3
L$0H;
l$0H;
L$0H;
L$0H+\$0A
L$0H3
L$8E3
L$8fH
L$8H;
L$8H+
L$8H3
l$8H9
l$8L9d$0t
l$8L9l$0t
l$8utH
l$DE3
l$H<ht
L$HD+
l$hE3
L$HE3
l$HE3
L$HE3
l$HE3
l$hE3
L$HE3
l$Hff
L$HH;
l$HH9
L$HH9D$@u
L$hLc
l$Huj
L$PE3
L$pE3
L$PE3
l$Pf3
L$pH;
L$pH+
L$PH3
L$pH3
L$PH3
L$pH3
L$PH3
L$pH3
l$PL+
l$Ps 
l$T$?<
l$X@2
L$XE3
L$xH3
L$xHi
l$Xu~
L;5X>
L;d$8
L+\$hL
L9-%S
L9}@A
L9=mT
L9=sO
L9a H
L9d$8H
L9d$Ht
L9d$pt>D9d$Pu
L9d$Xt%H
L9e8u
L9eHu,D9e
L9l$0t
L9l$0tA
L9l$0tV
L9t$0t
L9t$0t(H
Large
Large        2,461,696     16,703,488     11,956,224          3     35,868,672
Large        6,303,744    974,778,368    169,089,706         12  2,029,076,472
Large object heap starts at 0x%p
Large object heap starts at 0x01a71000
Last good object: %p
Last good object: 00a73d14
Last good object: 00a79d2c
Lc[DA
Lc\$0A
Lc\$HH
LcA<E3
LcD$8H
LCMapStringA
LCMapStringW
ldarg
ldarg.0
ldarg.1
ldarg.2
ldarg.3
ldarg.s
ldarga
ldarga.s
ldc.i4
ldc.i4.0
ldc.i4.1
ldc.i4.2
ldc.i4.3
ldc.i4.4
ldc.i4.5
ldc.i4.6
ldc.i4.7
ldc.i4.8
ldc.i4.m1
ldc.i4.s
ldc.i8
ldc.r4
ldc.r8
ldelem
ldelem.i
ldelem.i1
ldelem.i2
ldelem.i4
ldelem.i8
ldelem.r4
ldelem.r8
ldelem.ref
ldelem.u1
ldelem.u2
ldelem.u4
ldelema
ldfld
ldflda
ldftn
ldind.i
ldind.i1
ldind.i2
ldind.i4
ldind.i8
ldind.r4
ldind.r8
ldind.ref
ldind.u1
ldind.u2
ldind.u4
ldlen
ldloc
ldloc.0
ldloc.1
ldloc.2
ldloc.3
ldloc.s
ldloca
ldloca.s
ldnull
ldobj
LDR_DATA_TABLE_ENTRY
ldsfld
ldsflda
ldstr
ldtoken
ldvirtftn
leave
leave.s
LeaveCriticalSection
leaving both threads with no option but to wait forever in the second lock 
Legal_policy_statement
Legal_Policy_Statement
LegalCopyright
Length
-length
Let the program run, and it will stop with the notice
LF_ALWAYS
LF_APPDOMAIN
LF_ASSERT
LF_BCL
LF_CLASSLOADER
LF_CODESHARING
LF_CORDB
LF_CORPROF
LF_DBGALLOC
LF_EEMEM
LF_EH
LF_ENC
LF_GC
LF_GCALLOC
LF_GCINFO
LF_GCROOTS
LF_IJW
LF_INTEROP
LF_JIT
LF_LOADER
LF_LOCKS
LF_MARSHALER
LF_METADATA
LF_REMOTING
LF_SECURITY
LF_STARTUP
LF_STORE
LF_STUBS
LF_SYNC
LF_THREADPOOL
LF_VERIFIER
LF_ZAP
lfuFu
lifetime of your application, you may have a GCHandle leak. This will cause   
like:
-live
Live debugging session required
-live:     optional. Only print threads associated with a live thread.
load of mscordacwks.dll.  .cordll -ve -u -l will do a verbose reload.
loaded from an assembly store (such as a SQL db) rather than disk, the
loaded from.
loaded in the process. You shouldn't attempt to use a version of SOS.DLL that 
loaded managed module. <module name> can also be the debugger's name for a 
-loader
Loader Heap:
LoaderCodeHeap: 
LoaderHeap: %p
LoaderHeap: 001cab3c
LoadLibraryA
LoadResource
localloc
LockResource
log entry, and the fourth contains the log message. The facility field is 
log, you would probably want the Shared Source CLI to find out exactly where 
long-lived objects eventually get "promoted" to generation 2.
LowFrequencyHeap: 
LowFrequencyHeap: %p
LowFrequencyHeap:008f0000(00002000:00001000) Size: 0x00001000 bytes.
LowFrequencyHeap:00900000(00002000:00001000) 03ee0000(00010000:00003000) Size: 0x00004000 bytes.
LowFrequencyHeap:00920000(00002000:00001000) 03e30000(00010000:00003000) Size: 0x00004000 bytes.
M$tfH
m_code
m_debugString
m_handle
m_resolver
m_runtimeType
m_scope
m_tokens
m_valuetype is a value type. The value in the MT column (0090320c) is the 
M0K0I
make sense of it. You would usually come to use it if you suspect a gc heap 
make sure you have valid symbols.
managed objects. It is important to keep track of this information, because if 
managed thread. You can run !threads to get a list of managed threads in
-ManagedExcepStack
Mapped
MapViewOfFile
March
-max      Ignore objects larger than the size given in bytes
MAXIMUM
may be some noise in this output, as an unmanaged application may be storing  
MDArray
mdToken: %08x
mdToken: %08x 
mdToken: %p (%S)
mdToken: 0600000b
mdToken: 0600000d
Medium
Medium         139,264        528,384        337,920          4      1,351,680
Medium         249,856      1,019,904        521,557          6      3,129,342
Megabyte array alive because a strong GCHandle points to it, and the handle was
Member (mdToken token) of
MemberRefToDescMap: %p
MemberRefToDescMap: 03ec00e8
Memory
Memory Availability (Numbers in MB)
memory for any references to the Strong and Pinned GCHandles in the process, 
memory in that range, you'll see the object pointers that are registered:
memory scan with Control-C or Control-Break.                                   
Message: 
MessageBoxA
MetaData start address: %p (%d bytes)
MetaData start address: 0040220c (1696 bytes)
MetaData start address: 00402230 (1888 bytes)
METHOD
method 
Method info block:
method might correspond to a "mov edi,ecx" statement.
Method Name: %S
Method Name: MainClass.Main()
Method Name: Mainy.Main()
method of my application, but SOS doesn't work until the runtime is loaded.
Method Table: %p
method. For example, the notation "reg EDI becoming live" at offset 0x11 of the
MethodDefToDescMap: %p
MethodDefToDescMap: 03ec0064
MethodDesc
MethodDesc = %p
MethodDesc Table
MethodDesc. Here is an example showing class tokens being resolved:
MethodDesc: %p
MethodDesc: <not loaded yet>
MethodDesc: 00902f40
MethodDesc: 03310f68
methods of finding the AppDomain failed. Try running
MethodTable %p
MethodTable 0090320c
MethodTable for it, and the Value column provides the start address:
MethodTable: %p
MethodTable: <not loaded yet>
MethodTable: 009032d8
MethodTable: 0090375c
MethodTable: 009038ec
MethodTable: 0331121c
MethodTable: 03e41044
MethodTable: 11a47ae0
Microsof
Microsoft
Microsoft Code Signing PCA 2011
Microsoft Code Signing PCA 20110
Microsoft Corporation
Microsoft Corporation0
Microsoft Corporation1
Microsoft Corporation1&0$
Microsoft Corporation1(0&
Microsoft Corporation1-0+
Microsoft Corporation1200
Microsoft NTSD extension for .NET Runtime
Microsoft Time-Stamp PCA 2010
Microsoft Time-Stamp PCA 20100
Microsoft Time-Stamp Service
Microsoft Time-Stamp Service0
Microsoft Visual C++ Runtime Library
might store the handle in a strange way (shifting bits, for example).
-min      Ignore objects less than the size given in bytes
minidumpmode
MinidumpMode
Minidumpmode
Minidumps created with ".dump /m" or ".dump" have a very small set of 
MINIMUM
minimum set of SOS debugging commands to work. At this time, those commands 
Missing EEClass address
Missing MethodTable address
Missing quote in %s
Missing value for option %s
mkrefany
MM/dd/yy
Mode must be 0 or 1
Module %p: 
Module 001c03f0: Size: 0x00000000 bytes.
Module 001c03f0:Size: 0x00000000 bytes.
Module 001c1320: Size: 0x00000000 bytes.
Module 001c1320:Size: 0x00000000 bytes.
Module 001caa38: Size: 0x00000000 bytes.
Module 001caa38:03ec0000(00010000:00002000) Size: 0x00002000 bytes.
Module 5ba22410: Size: 0x00000000 bytes.
Module 5ba22410:Size: 0x00000000 bytes.
Module in 
Module Lookup Table heaps:
module name will look like this:
Module Thunk heaps:
module, such as mscorlib or image00400000.
Module: %p
Module: %p (%S)
Module: 001caa38
Module: 001caa78
Module: 001e2fd8
Module: 10f028b0 (price, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null)
Modules. For example:
Monday
more complex. You need to make sure the mscordacwks.dll file that came with
more info.
More than %d heap segments, there must be an error
More threads were found than specified by DacpThreadStoreData.threadCount
more useful aspects is that it will format the _stackTrace field, which is a 
mscoree.dll
mscorlib or image00400000.
mscorwks
MSCORWKS!StressLog::theLog
MSCORWKS.DLL by running 
-mt       List only those objects with the MethodTable given
MTA Interfaces to be released: %d
MTA Interfaces to be released: 0
mul.ovf
mul.ovf.un
MultiByteToWideChar
multiple processors, you can expect to see a GC Heap of 400MB or more. The 
Must pass a valid expression
n %d 1 %d %d
N0L0J
Name: 
Name: %S
Name: %S[
Name: %ws
Name: Bank
Name: C:\pub\unittest.exe
Name: Customer
Name: Funny
Name: MainClass
Name: MainClass.Main()
Name: Mainy
Name: Price
Name: Shared Domain
Name: System Domain
Name: unittest.exe
Name: Value[]
name2ee
Name2EE
Name2EE                            FindAppDomain
native float
native int
Native Real
native uint
Native[sz=%d]
negatives because a user is free to pass that GCHandle to unmanaged code that 
-nested
Nested exception -------------------------------------------------------------
newarr
newobj
No EH info available
No GC info available
No stackwalk verification on WIN64 platforms. Use K instead
No Stress log in the image, no file written
-nofields
-nofields has no effect unless -details is specified
-nofields:     do not print fields of the object, useful for objects like 
NoName
non-static values won't because you need an instance of an object for that.
Normal JIT generated code
Normal JIT:03ef0000(00010000:00002000) Size: 0x00002000 bytes.
-nostacks
Not a managed object
Not a valid exception object
not a valid MethodDesc
Not an array, please use !DumpObj instead
Not enough memory for complete fragmentation report
Not enough memory to read IL
Not enough memory to trace the heap
Not jitted yet
Not JITTED yet.
Not JITTED yet. Use !bpmd -md %p to break on run.
not supported
Not supported on mini dumps.
Note that !PrintException with no parameters will print out the last thrown
Note that dynamic IL is constructed a bit differently. Rather than referring
Note that fields of type Customer and Bank are themselves objects, and you can 
NOTE:
Note: Roots found on stacks may be false positives. Run "!help gcroot" for
NOTE: THIS FILE CONTAINS SOS DOCUMENTATION. THE FORMAT OF THE FILE IS:
-notification
November
nRich
ntdll
ntdll.dll
NtQueryInformationProcess
Number of characters requested: %d
Number of GC Heaps: %d
Number of GC Heaps: 1
Number of IFaces in IFaceMap: %x
Number of Timers: %d
NumInstanceFields: %x
NumStaticFields: %x
o 0x%p %d %d 
O0M0K
object
Object
Object %p has no generation
object %p: bad GCDesc
object %p: bad member %p at %p
object %p: bad MT
object %p: does not have valid MT
object %p: fail to read members
object %p: missing card_table entry for %p
object %p: size %d too small
object 00a73d24: does not have valid MT
object 00a79d40: bad member 00000001 at 00a79d44
object and corrupt it:
Object header for %p should have a SyncBlock index of %d
object in question. ThinLocks will not be reported by the !SyncBlk command. 
Object Inspection                  Examining code and stacks
objects ready for finalization are also included in the statistics (if any).
Objects with Finalizers are the easiest case, as the CLR needs to be able to 
objects, such as a managed cache in a web server.
objects, there is a -nostacks option.
ObjSize
objsize
ObjSize                            GCInfo
October
of any objects pointed to by those handles. In calculating object size, 
of mscordacwks.dll, with names like mscordacwks_<architecture>_<version>.dll
of value classes, while others do not.
of work requests in the queue, number of completion port threads, and number of
Offset
offset 
oK0D$"<
On 64 bit platforms, you must use a base address, obtainable with the LM command
on by default because very often in a debugging scenario, you are 
On IA64 and x64 platforms, Transition Frames are not displayed at this time.
once you have the EEClass, you can run !DumpClass, which will display the
One would issue the following commands to set breapoints on G3.F() and 
ones are discussed below:
only read %x bytes at %p
operator
option on to protect against running unsafe commands against small minidumps.
or is old (discarded) data. You would have to use !CLRStack and !U to 
or the module is loaded, but the function is not jitted yet. In these cases,
OriginalFilename
OS Thread Id: 0x%x 
Other Handles: %d
Other Handles: 0
out of memory
Out of memory
output to "interesting" threads only, which is defined by
P?%16s %8s %16s
P0f=o
p1%E;
P8H9t$Xt
P8L9t$X
pA^_[
PA^A]_^]
PA^A]A\
PA_A^A]A\_^]
Page File         %8d     %8d
PagefileUsage:  %8d KB       PeakPagefileUsage:  %8d KB
parameters.
Parent Class: %p
Parent Domain: %p
Parent Domain: 0014f000
particular managed exception, say a System.OutOfMemoryException, but continue
particular types, restrict to a range, or look for ThinLocks (see !SyncBlk 
particularly in the area of PInvoke/Interop. Adam Nathan has written some great
passed directly to !DumpStack. The -short option tries to narrow down the 
path is pointing to mscorwks.dll as well.
PDB symbol for mscorwks.dll not loaded
PEB_LDR_DATA
PEFile 
PendingThread: %d
-perdomain
Physical Memory   %8d     %8d
PINNED 
Pinned Handles: %d
Pinned Handles: 3
places:
Please contact the application's support team for more information.
Please note that %p is not a valid object.
pointer for the method, or a code address within the method body. Unlike the
pointer if provided.
pointer in the output can be passed to !DumpModule. Any AppDomain pointer can 
Pointer table:
positives. If you still suspect a leak, use this function over time to        
possibility is eliminated, consider contacting Microsoft Product Support for
prefix1
prefix2
prefix3
prefix4
prefix5
prefix6
prefix7
prefixref
PreJIT
preJIT generated code
Presents an annotated disassembly of a managed method when given a MethodDesc
prevent the garbage collector from moving an object during collection. These 
price, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
Printexception
PrintException
printexception
PrintException
PrintException (pe)                COMState
prints the type name and MethodTable they refer too. Sample output:
Private
Process Memory
Process Started at: %4d %s %2d %d:%d:%d.%02d
Process Times
process. It enumerates each Assembly loaded into those AppDomains as well. 
ProcessParameters
ProcInfo
procinfo
ProductName
ProductVersion
Program: 
programs. Functions are listed by category, then roughly in order of
programs. The -p parameter will show arguments to the managed function. The 
Protect
protection applied to that memory (free, reserved, committed, private, mapped, 
Provides a summary view of the virtual address space, ordered by each type of 
provides a warning about fragmentation:
Pseudo-register number must be between 0 and 19
public class G1<T> {
public void F(T1 p1, T2 p2, T3 p3)
push 
Put the following lines in myapp.ini and re-run:
Q M9X
QEX82q'
QueryPerformanceCounter
QueueUserWorkItemCallback DelegateInfo@%p
Quitting at %p due to user abort
qword ptr [
qword ptr ds:[
r$t%d=0
r$t%d=1
r:f9\$2D
r_H;K0u
r~akow
R0P0N
R6002
R6008
R6009
R6016
R6017
R6018
R6019
R6024
R6025
R6026
R6027
R6028
R6030
R6031
R6032
R6033
R6034
RaiseException
Rather than scraping, !DumpStack mimics the debugger's "K" command. 
RCW             %d
rcwcleanuplist
Rcwcleanuplist
RCWCleanupList
ReadFile
readonly.
ReadVirtual failed with code hr = %x.
Ready for finalization %d objects 
Ready for finalization 0 objects (0015bca0->0015bca0)
READYFORMANAGEDCODE
receive news of module loads and JITs, at which time it will try to resolve 
Redmond1
Ref Count Handles: %d
Ref Count Handles: 0
refanytype
refanyval
Reference found in stress log will be ignored
reference. This might be a stack address or a field within an object, for 
Reflection 
rem.un
reported frame register
reported invalid pointer
reported pointer relative to wrong base register
reported register in caller's frame
Reserve
Reserve:
rethrow
rexception during reading PEB
Root:
roots (You can use !GCRoot to find out). The statistics section provides a 
roots are keeping it alive. Or you can find all objects of that type with 
RSP/REG          Object           Name
RtlCaptureContext
RtlLookupFunctionEntry
RtlPcToFileHeader
RtlUnwindEx
RtlVirtualUnwind
RtlZeroMemory
run !DumpObj on them too. You could look at the field directly in memory using
run against a minidump.
running "!DumpArray %p".
running if other exceptions are thrown. The command can be used in two ways:
runtime error 
Runtime Error!
RuntimeCallableWrappers (RCW) to be cleaned:
S0Q0O
same directory as the main CLR dll (MSCORWKS.DLL). Newer versions of the 
Sample output:
Saturday
SaveModule
savemodule
SByte
Scan Thread %d OSTHread %x
scan wouldn't be able to find those.                                          
searches.
Searching %p...
Searching for the first %d handles, ignoring the rest
Searching memory
section %d - VA=%x, VASize=%x, FileAddr=%x, FileSize=%x
section 0 - VA=1000, VASize=e82da9, FileAddr=400, FileSize=e82e00
section 1 - VA=e84000, VASize=24d24, FileAddr=e83200, FileSize=ec00
section 2 - VA=ea9000, VASize=5a8, FileAddr=e91e00, FileSize=600
section 3 - VA=eaa000, VASize=c183c, FileAddr=e92400, FileSize=c1a00
Security
Security object valid range: [%x;%x)
Security object: 
SecurityDescriptor: %p
SecurityException Message: 
See "!help bpmd" for more details.
see that only generation 0 (the youngest generation) has any objects registered
See the documentation for !DumpStack for more info.
September
Server mode with %d gc heaps
SetEndOfFile
SetFilePointer
SetHandleCount
SetLastError
SetStdHandle
Setting breakpoint: %s [%S]
SetUnhandledExceptionFilter
Shared
shared
Shared Domain: %p
Shared Domain: %x
Shared Domain: 5e066970
shHcD$HH
-short
-short    Limits output to just the address of each object. This allows you
should be used sparingly, and for short periods of time. If you don't follow 
show the mapping between metadata tokens and types/methods in a friendlier way. 
shr.un
Shutdown 
ShutdownHelper 
signs of corruption. It walks objects one by one in a pattern like this:
similar to !DumpObj. Although static field values will be displayed, 
Simple Context information:
SING error
Single
Size %d(0x%x) bytes
Size of parameter area: %x
Size: %d(0x%x) bytes
Size: 0x%x(%d)bytes.
Size: 0x%x(%lu)bytes.
Size: 132(0x84) bytes
Size: 20(0x14) bytes
Size: 28(0x1c) bytes
sizeof
sizeof(%p) = %12I64u (%#12I64x) bytes
sizeof(00a79d40) =      152 (    0x98) bytes (Customer)
SizeOfImage
Sleep
Slots in VTable: %d
Small
Small            4,096         65,536         43,957         41      1,802,237
Small            4,096         65,536         48,393         27      1,306,611
So the total size of the GC Heap is only 72K. On a large web server, with 
Some handles were not found. If the number of not-found handles grows over the
SOS can't retrieve local names at this time, so the output for locals is in
SOS Error: Out of memory
SOS failure
SOS failure!
SOS is a debugger extension DLL designed to aid in the debugging of managed
SOS Version: %u.%u.%u.%u
SOS.dll
sos.dll
SOS.dll
sos.dll needs a full memory dump for complete functionality.
SOS.DLL:
SOS.pdb
SOSFlush
sosflush
source of a memory leak is a GCHandle leak. For example, code might keep a 50 
-special
Special thread information is not available in mini dumps.
-special:  optional. With this switch, the command will display all the special
sQfff
STA Interfaces to be released: %d
STA Interfaces to be released: 1
stack
StackTrace (generated):
StackTraceString: 
Stackwalking is done very differently on these platforms, so SOS allows the
Stage: %s
starg
starg.s
Start
-start
start     Begin listing from this address
start    end        module name
Start    Stop     Length    AllocProtect  Protect       State    Type
Start index out of range
start. If you pass the "-MD" flag, you'll also see a list of all the methods 
-startatlowerbound
-startAtLowerBound 
-stat
-stat     Restrict the output to the statistical type summary
State
statement will set MyObject to be owned by the current thread. A SyncBlock will
statement. !SyncBlk will detect this with the following output:
static
static public void G<W>(W w)
Statistics:
stelem
stelem.i
stelem.i1
stelem.i2
stelem.i4
stelem.i8
stelem.r4
stelem.r8
stelem.ref
stfld
stind.i
stind.i1
stind.i2
stind.i4
stind.i8
stind.r4
stind.r8
stind.ref
stloc
stloc.0
stloc.1
stloc.2
stloc.3
stloc.s
stobj
stoponexception
Stoponexception
StopOnException
Stress log address = 0x%p
Stress log in module 0x%p
StressLog TaskSwitch Marker
StressLog.txt
StressLogSize is the size in bytes of the in-memory log allocated for each 
strike: Failed to store segment
String
string
String
STRING %x
String Value
String: 
String[100]" actually creates a System.Object array, but it can only hold
StringFileInfo
-strings
-strings  Restrict the output to a statistical string value summary
Strong and Pinned GCHandles are reported at this time. You can safely abort the
Strong Handles: %d
Strong Handles: 13
struct, and lives on the stack or within an Object on the GC heap. You need
stsfld
StubHeap: 
StubHeap: %p
StubHeap:008fa000(00002000:00001000) Size: 0x00001000 bytes.
StubHeap:0090a000(00002000:00001000) Size: 0x00001000 bytes.
StubHeap:0092a000(00002000:00001000) Size: 0x00001000 bytes.
sub.ovf
sub.ovf.un
SUCCESS: Stress log dumped
Summary
Summary          4,096     16,703,488        816,005         50     40,800,250
Summary          4,096    974,778,368     47,249,646         43  2,031,734,778
Sunday
SunMonTueWedThuFriSat
SupportsUpdateableMethods
SuspendEE 
SUVWATH
Sv6M!Oo
SVWATAUAWH
SWAVH
switch
SwitchToFiber
sxe %s "!soe %s %s %s;.if(@$t%d==0) {g} .else {.echo '%s hit'}" clr
sxe -c "!bpmd -notification;g" clrn
SyncBlk
syncblk
SyncBlk                            SaveModule
SyncBlk table validation failed
SyncBlock
SyncBlock %d corrupted, points to invalid object %p
SyncBlock %d is invalid%s
SyncBlocks to be cleaned by the finalizer thread:
SyncBlocks to be cleaned up: %d
SyncBlocks to be cleaned up: 0
System
System Domain: %p
System Domain: 5e0662a0
System.Exception
System.Object arrays that are constrained to contain Strings. ("new 
System.RuntimeType
System.RuntimeType+RuntimeTypeCache
System.Security.SecurityException
System.String object pointers). You can use -type in a special way to find
SystemTimeToTzSpecificLocalTime
SZARRAY
SZArray
t %d 0 %S
t fff
t#fff
t$ D+
T$ E3
t$ E3
T$ E3
t$ E3
T$ E3
t$ E3
T$ I;
t$ WH
T$&t5
T$(E3
T$(t#A
T$@E3
t$@ff
t$@H;
T$@H;
t$@I#
T$@t A
t$@uZL
t$`E3
T$`E3
t$`H;
t$`I+
t$0E3
T$0E3
t$0E3
T$0E3
t$0E3
T$0E3
T$0H;
t$0t5H
T$0t-L
T$0uYE
T$0uZH
T$8H;
t$8wC
T$DfE
T$Dr&ff
T$HD+
t$HD+=
t$HD+=0
T$hE3
T$HE3
t$HE3
T$hE3
T$HE3
T$Ht#A
T$htlD9l$`ulH
T$LE3
T$pE3
T$PE3
T$PH;
t$PH+
T$pMi
T$rfA
T$Tf=
t$xE2
T$XE3
T$xE3
T$Xt"
t)fff
t.D9=
t@E9}
t@fff
t[D9-+
t^H;~8vmH
t+fff
t>HcC
t2HcD$HH
t7H;\$@u
t8fff
tail.
take the MethodTable pointer in the MT column, and the Value and pass them to 
Task was switched from %x
tCD9=
TerminateProcess
tGH;C
t'H9\$`t
Thales TSS ESN:3BD4-4B80-69C31%0#
that can provide full or partial output are:
That indicates a serious problem. See the help for !VerifyHeap for more 
that install is on your symbol path, and you need to load the corresponding
that is locked by a thread. In version 2.0 of the CLR and above, a mechanism 
that log out to a file. If no Filename is specified, the file "Stresslog.txt" 
that precept, the gc heap can become very fragmented.
That said, if a serious leak is going on, you'll get a ever-growing set of 
that shows up in a run of !Threads.
that the Windows Debugger can load. If you have the correct symbol path to the
That will load the SOS extension DLL from the same place that MSCORWKS.DLL is 
The abbreviation !do can be used for brevity.
The abbreviation !dso can be used for brevity.
The abbreviation !pe can be used for brevity.
the AppDomain of that stack with !threads. Note that
The APT column gives the COM apartment mode. 
The arguments in detail:
The base address of an image can be found with the "LM" debugger command:
The column VT contains the value 1 if the field is a valuetype structure, and
the command !DumpVC.
The command has diagnostic output which doesn't need to be repeated here. One 
the current AppDomain for each thread.
the current stack. Combined with the stack tracing commands like K and 
The current thread is unmanaged
The -derived option will cause StopOnException to set the pseudo-register to
The diagnostic output indicates that the operation was successful. If 
The Domain column indicates what AppDomain the thread is currently executing
The EEClass is a data structure associated with an object type. !DumpClass 
The first column is the OS thread ID for the thread appending to the log, 
The first command is "contents" which is the general help screen. The rest 
the fly. Happily it works for non-dynamic code as well.
the format <local address> = <value>. The -a (all) parameter is a short-cut
the freachable queue of the finalizer. Some caution about the stack roots: 
the function to a breakpoint.
The garbage collector data structures are not in a valid state for traversal.
The GC heap is divided into generations, and objects are listed accordingly. We
the GC Heap to grow larger as objects are being kept alive, referenced only   
the handle in a non-standard way, perhaps with some bits flipped. The memory  
The information for the Garbage Collector lists the ranges of each Segment in 
The loader output lists various private heaps associated with AppDomains. It 
the log comes from.
The log facilities are defined as follows:
the managed heap. This can be useful if you believe you have an object pointer.
The Maps listed map metadata tokens to CLR data structures. Without going into 
the method. You can also obtain this information with the !GCInfo command.
The module you are "browsing" with Name2EE needs to be loaded in the process. 
The module you are "browsing" with Token2EE needs to be loaded in the process. 
The most common handles are "Strong Handles," which keep the object they point 
the offset given. "dd a79d40+8 l1" would allow you to look at the bank field 
The optional argument addr allows one to specify a stress log other then the 
the output is very noisy and potentially confusing. The command is good for
the process
The pseudo-register number is optional. If you don't pass a number, SOS will 
the second column is the timestamp, the third is the facility category for the 
the size.
The start/end parameters can be obtained from the output of !EEHeap -gc. For 
the Thread could have transitioned between multiple
The type is declared in the shared domain and other
The Windows Debugger syntax of <module>!<type> is also supported. You can
There are multiple modules with the same name...
There are nested exceptions on this thread. Run with -nested for details
there are no objects ready for finalization, presumably because they still have
There are three ID columns: 
There is a new option "-mt", which will display the types defined in a module,
There is no current managed exception on this thread
There is yet one more way to specify a module name. In the case of modules
there will be a minimal managed environment for executing SOS commands.
these arrays. Just pass "-type System.String[]" and those Object arrays will
tHfff
thing to keep in mind is that anytime you search all of memory for a value, you
-thinlock
ThinLock owner %x (%p), Recursive %x
-thinlock Report on any ThinLocks (an efficient locking scheme, see !SyncBlk 
This application has requested the Runtime to terminate it in an unusual way.
This brings up a good question: "I want to set a breakpoint on the main
This command allows you to examine elements of an array object.
This command allows you to examine the fields of an object, as well as learn 
This command allows you to take a image loaded in memory and write it to a 
This command is an aid in tracking down GCHandle leaks. It searches all of 
This command is not supported in a minidump without full memory
This command lists basic information about the ThreadPool, including the number
This command lists information about a MethodDesc. You can use !IP2MD to turn 
This command lists the objects registered for finalization. Here is output from
This command provides a verbose stack trace obtained by "scraping." Therefore
This command runs !DumpStack on all threads in the process. The -EE option is 
This command will display any managed objects it finds within the bounds of 
This DynamicMethodDesc is not yet JITTED. Placing memory breakpoint at %p
This function allows you to turn a class name into a MethodTable and EEClass. 
This function allows you to turn a metadata token into a MethodTable or 
This function doesn't see much use, especially since a tool like ILDASM can 
This function is important for CLR Devs, but very difficult for anyone else to 
this function, then continue.
This indicates a bug in your application.
This indicates a bug in your application. It is most likely the result of calling an MSIL-compiled (/clr) function from a native constructor or from DllMain.
This is a deadlock situation, as Thread A could take r1, and Thread B r2, 
This is because a Customer points to a Bank, has a name, and the Bank points to
This is dynamic IL. Exception info is not reported at this time.
this log in the process. For example, 20 threads with 524288 bytes per thread 
This makes !SyncBlk useful for detecting managed deadlocks. Consider that the
This means that the CLR is not loaded yet, or has been unloaded. You need to 
This means TypeDef token 2 maps to a MethodTable with the value 0090320c. You 
This prints the Common Language Runtime version. It also tells you if the code 
this problem, and running with Managed Debugging Assistants is advised. If that
This will format fields of any object derived from System.Exception. One of the
THREAD
THREAD  TIMESTAMP     FACILITY                              MESSAGE
Thread %3d
thread exits.
thread in the process. In the case above, each thread gets a 64K log. You 
Thread state = a030
ThreadCount: %d
Threadpool
threadpool
ThreadPool
ThreadPool                         MinidumpMode 
ThreadpoolWorker 
threads
Threads
threads. It also enumerates all GCHandles in the process, and totals the size 
ThreadStaticOffset: %x
ThreadStaticsSize: %x
throw
Thursday
-time
Timer 
timers.
tjfff
tkfff
tKfff
TLOSS error
TlsFree
TlsSetValue
TLstatic
to a loaded, jitted or ngen'd function it will create a breakpoint with "bp".
To aid in diagnosing hard-to-reproduce stress failures, the CLR team added an 
to alive until the handle is explicitly freed. "Pinned Handles" are used to 
to be cleaned up, and on any RuntimeCallableWrappers (RCWs) that await cleanup.
to be fully qualified.
To get a type name exactly right, first browse the module with ILDASM. You
to know the MethodTable address to tell SOS how to interpret the fields, as
to metadata tokens, the IL points to objects in a managed object array. Here
To try the command anyway, run !MinidumpMode 0
To turn on the stress log, set the following registry keys under
Token: 0x%p
Token: 0x02000002
Token: 0x02000003
Token: 0x02000004
Token: 0x02000005
Token: 0x0600000d
token2ee
Token2EE
Token2EE                           VMStat
too much detail, you can examine memory at those addresses to find the 
TOTAL
Total
Total           %d
Total  CPU time   : %d days %02d:%02d:%02d.%02d
Total %d objects
total %d objects
Total 17 objects
Total 4 objects
total 5 objects
Total 5 objects
total 619 objects
Total LoaderHeap size: 0x%I64x(%I64u)bytes
Total LoaderHeap size: 0x15000(86016)bytes
Total Method Slots: %x
Total Size   0x1201c(73756)
Total Size  %#16I64x(%I64u)
Total Size  0x5d73a8(6124456)
Total size: 0x%I64x(%I64u)bytes
Total size: 0x%x(%d)bytes
Total size: 0x0(0)bytes
Total size: 0x2000(8192)bytes
Total size: 0x3000(12288)bytes
Total size: 0x6000(24576)bytes
Total size: 0x8000(32768)bytes
Total: %d
TotalSize
tracing roots...
Translation
Traverseheap
traverseheap
TraverseHeap
TraverseHeap                       BPMD 
Traversing a gc heap failed
tS95z
tTA9T$
Tuesday
Turn on Managed Debugging Assistants. These enable additional runtime diagnostics, 
-type
TYPE           MINIMUM        MAXIMUM        AVERAGE  BLK COUNT          TOTAL
-type     List only those objects whose type name is a substring match of the 
Type "!help <functionname>" for detailed info on that function. 
Type MethodTable: %p
Type Name: %S
type sets breakpoints on all already JIT-ted generic methods and sets a pending 
type:
TYPED
TypedByRef
TypeDef
TypeDefToMethodTableMap: %p
TypeDefToMethodTableMap: 03ec0010
typedref
TypedReference
TypeRef
TypeRefToMethodTableMap: %p
TypeRefToMethodTableMap: 03ec0024
Types defined in this module
types in a module with !DumpModule -mt <module pointer>.
Types referenced in this module
u"8D$Xt
u"H;l;0u
u#D9d$@t
u$fff
u(D9} u"D9},u
U(H;F
u.H;=
U0S0Q
u'A9_
uDfff
uED8/t@D9-
u'fff
u'H9\$`t
uiH;;r
uint16
UInt16
UInt32
uint32
uint64
UInt64
uint8
UIntPtr
ujH9\$`t
uLE9|$0uEH
Unable to build snapshot of the garbage collector state
Unable to decipher generated stack trace
Unable to determine bounds of gc heap
Unable to display fields
Unable to display GC handles
Unable to find stress log via DAC
Unable to get AppDomain %lx
Unable to get AppDomain %p
Unable to get AppDomain information
Unable to get appdomain store
Unable to get array of AppDomains
Unable to get array of Assemblies
Unable to get array of JIT Managers
Unable to get code heap info
Unable to get codeHeader information
Unable to get IMetaDataImport for module %p
Unable to get JIT info
Unable to get method name for MethodDesc %p
Unable to get module
Unable to get shared domain info
Unable to get system domain info
Unable to open file
Unable to read memory at %p
Unable to read module %p
Unable to retrieve EEClass
Unable to set breakpoint with IDebugControl::Execute: %x
Unable to walk the managed stack. The current thread is likely not a 
Unable to write heap report
unaligned.
unbox
unbox.any
Unexpected domain count
UnhandledExceptionFilter
UNICODE
unittest.exe
UNKNOWN
Unknown exception
Unknown Function: %p  Context: %p
unknown Jit
Unknown Jit encountered, ignored
UNKNOWN METHODDESC
Unknown MethodDesc (Module %p, mdToken %08x)
Unknown Module
Unknown option: %s
UNLOAD_REQUESTED
Unmanaged code
UnmapViewOfFile
Unsafe minidump commands are %s.
UnstartedThread: %d
Unsupported token type
unused
uQD9|$DtJD9|$@tCH
Usage: !bpmd <module name> <managed function name>
Usage: !bpmd -md <MethodDesc pointer>
Usage: !Name2EE module_name item_name
Usage: DumpModule [-mt] <Module Address>
Usage: DumpVC <Method Table> <Value object start addr>
usage: HeapTraverse [-xml] filename
Usage: SaveModule <address> <file to save>
usage: StopOnException [-derived] [-create | -create2] <type name>
Usage: Token2EE module_name mdToken
use an asterisk on the left of the !, but the type on the right side needs
use pseudo-register $t1.
User   CPU time   : %d days %02d:%02d:%02d.%02d
USER32.DLL
usH;3r
using an Object Pointer from the output of !DumpStackObjects:
UTF-16LE
UTF-8
utH;;r
uUfff
UVATAUAVH
UVWATAUAVAWH
UVWAUAVH
UXL9}Pt
v\H;P8rpH;
Validation was successful
Value
value of all static fields.
VALUEARRAY
ValueClass
VALUETYPE
valuetype 
VAR OR ARG %d
Varargs: %u
VarFileInfo
-verify
-verify 
Verify DumpDomain functionality: 
Verify DumpDomain functionality: Success
Verify that 1) you have a recent build of the debugger (6.2.14 or newer)
Verify that we can list threads: 
Verify that we can list threads: Success
-verify will only produce output if there are errors in the heap
VerifyDAC
verifyheap
VerifyHeap
Verifyheap
VerifyStackTrace
VerQueryValueA
version of sos.dll (typing .load <full path to sos.dll> rather than using the
VERSION.dll
v'fff
viewing the complete call stack when "kb" gets confused. For best results,
Virtual Call Stub Heap:
Virtual Memory    %8d     %8d
VirtualSize:    %8d KB       PeakVirtualSize:    %8d KB
vmmap
VMMap
VMStat
vmstat
vnffy
volatile.
VS_VERSION_INFO
Vtable Slots: %x
VWATAUAVH
VWATH
Wait 
wait until your managed program is running in order to use these commands. If 
Walking heap...
Washington1
Wasted: 0x%x(%lu)bytes.
Wasted: 0x00001000 bytes.
WATAUAVAWH
WATAUH
Watson Bucket parameters:
WatsonBuckets
we are at the initialization or shutdown of the gc heap. Commands related to 
We have taken a return address into Mainy.Main, and discovered information 
Weak Long Handles: %d
Weak Long Handles: 0
Weak Short Handles: %d
Weak Short Handles: 1
Wednesday
well as memory usage statistics.
What else can you do with an object? You might run !GCRoot, to determine what 
When called with no parameters, !DumpDomain will list all the AppDomains in the
When called without arguments, !SyncBlk will print the list of SyncBlocks 
When called without options, the output is first a list of objects in the heap,
When creating a minidump without full memory, special functions are called at
when it gets a chance to run.
When you see methods with the name "[Frame:...", that indicates a transition 
Where are we getting these module names from? Run !DumpDomain to see a list of
where possible. The [top stack [bottom stack]] arguments are ignored, but
WideCharToMultiByte
will be in PreEmptive GC mode. 
will get an error message when running any other commands. A full memory dump
will only produce output if there are errors in the heap:
will provide more details about the CLR, including where mscorwks.dll is 
will replace older ones on threads which have reached their buffer limit.
will show attributes, as well as list the fields of the type. The output is 
Windows Debugger provide a command to make it easy to load the right copy of 
Windows Debugger to unwind the frames, and supplies managed code information
with annotations that convert metadata tokens to names.
With no parameters, !ObjSize lists the size of all objects found on managed 
work properly. !dumpheap and !verifyheap may incorrectly complain of heap 
Work Request in Queue: %d
Worker Thread:
WorkingSetSize: %8d KB       PeakWorkingSetSize: %8d KB
Workstation mode
WqVNHE
WriteConsoleA
WriteConsoleW
WriteFile
Writing %s format to file %s
Writing to file: %s
wrong argument
Wrong option: %s
wrong option: %s
Wrong option: stack selection wrong
x E9}
x#L9d$0t
x_^][
XA_A]A\_^[
x-fff
xppwpp
xpxxxx
XXXX 
YoJ1E
You can also obtain this information with the !EHInfo command.
You can also pass a stack range to limit the output. Use the debugger 
You can also run the debugger command .cordll to control the debugger's
You can break into your process, load SOS, take a snapshot of your heap with 
You can create one with .dump /ma <filename>
You can download the CLR Profiler from this link:
You can find out more about the AppDomain with the !DumpDomain command. Not 
You can get a Module address from !DumpDomain, !DumpAssembly and other 
You can get an EEClass to look at from !DumpMT, !DumpObj, !Name2EE, and 
You can pass "*" for <module name> to find what that token maps to in every
you can see that thread 3 is attempting to acquire the Resource 00a7a1a4, which
You can use "!DumpHeap -thinlock" to list objects locked in this way.
You can use it in three ways: 
You could run !DumpObj on any of those pointers to learn more. In this example,
you get the notation "(nested exceptions)", you can get details on those
you have just started the program a good way to do this is to type 
You might find an object pointer by running !DumpStackObjects and choosing
you would print this output out and read it alongside a disassembly of the 
your application. If you pass the "-xml" flag, the file is instead written out
Your version of the Windows Debugger doesn't have the required interface to
z.9Wv
z?aUY
zc%C1
