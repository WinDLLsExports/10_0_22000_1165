    f9w v$V
 }Lz||
 0(000<0D0x0
 http://www.microsoft.com/windows0
 Microsoft Corporation. All rights reserved.
 Operating System
 Windows
!]_0t
!This program cannot be run in DOS mode.
!TkjE
"Microsoft Window
#3'3+3/33373;3?3C3G3K3O3S3W3[3_3c3g3k3
#Blob
#GUID
#Strings
$SVW3
%Microsoft Windows Production PCA 2011
%Microsoft Windows Production PCA 20110
&S|9a
(0J0n0
)Microsoft Root Certificate Authority 20100
*0\0v0
, <^w4
,QAkX5Obrlz4uL4i9nB5H9t81sNLo/2AoOihko8s28Cc=0Z
,SVW3
.?AVbad_alloc@std@@
.?AVbad_array_new_length@std@@
.?AVException@cdp@@
.?AVexception@std@@
.?AVlength_error@std@@
.?AVlogic_error@std@@
.?AVtype_info@@
.00cfg
.CRT$XCA
.CRT$XCZ
.CRT$XIA
.CRT$XIC
.CRT$XIZ
.CRT$XPA
.CRT$XPZ
.CRT$XTA
.CRT$XTZ
.data
.data$r$brc
.data$rs$brc
.edata
.gfids
.giats
.idata
.idata$2
.idata$3
.idata$4
.idata$5
.idata$6
.idau
.P6GHPAUCOMPRESSOR_HANDLE__@@@Z
.rdata
.rdata$brc
.rdata$r$brc
.rdata$sxdata
.rdata$voltmd
.rdata$zzzdbg
.relu
.rsrc$01
.rsrc$02
.rtc$IAA
.rtc$IZZ
.rtc$TAA
.rtc$TZZ
.text
.text$mn
.text$x
.xdata$x
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
: :(:0:L:T:\:h:p:
: ;p;
: ;W;
:!;D;|;
:":0:>:L:Z:h:v:
:#;Y;
:$:,:4:<:D:L:T:\:d:l:t:|:
:$:,:8:@:t:|:
:$;,;4;@;H;l;t;|;
:(:,:0:4:8:<:@:D:f:y:
:(:H:P:\:|:
:):O:u:
:*=,?
:.;o;
:/:?:H:`:j:s:
:::s:
:;P<t2
:@:v:
:<:z;
:2:S:j:t:
:2:U:x:
:3;Z;
:8:c:
:H:g:
:O<_<r<
:P;u;
:S:}:
:y:5;
;!<\<
;$;,;4;<;D;L;T;\;d;l;t;|;
;$;0;8;l;t;|;
;$;D;P;p;|;
;%;-;i;s;|;
;%<p<
;&;^;
;(<B<\<v<
;:;b;~;
;:<[<
;?;X;\;`;d;h;l;p;t;
;@;q;
;_(wN
;_^[]
;_4s(
;|$0r
;|$4r
;=;s;
;>;};
;><#='>J>
;><n<*=^=
;0;4;L;\;`;d;h;l;t;x;
;3;Y;
;3<]<
;5<K<
;8;I;
;8;R;x;
;8<v<
;9<m<
;9rP3
;9tn3
;B<j<
;C;m;
;D$0t)QQQ
;D$0u*
;D$8t<
;D;P;
;G t(
;G(t&
;H8tD;H@t?j0Y
;H8u,
;r<|<
;t$ v
;W(w6
;W(we
;W<j<z<
? ?(?\?d?l?x?
? ?(?4?<?p?x?
? ?T?\?d?p?x?
?"?(?
?#?m?
?(?5?V?b?
?,?5?@?l?
?,?I?f?
???i?
?-?c?
?4?W?
?F?t?
?Q?i?
?R?a?
?S?}?
?Z?s?
@.reloc
@.rsrc
[QQj Z
\$$9^
^(_^[
^<k6oy
_^[Y]
__current_exception
__current_exception_context
__CxxFrameHandler3
__std_type_info_compare
_CxxThrowException
_except_handler4_common
_f9P 
_initterm
_initterm_e
_o___std_exception_copy
_o___std_exception_destroy
_o___std_type_info_destroy_list
_o__cexit
_o__configure_narrow_argv
_o__errno
_o__execute_onexit_table
_o__initialize_narrow_environment
_o__initialize_onexit_table
_o__invalid_parameter_noinfo
_o__invalid_parameter_noinfo_noreturn
_o__purecall
_o__seh_filter_dll
_o_free
_o_malloc
_o_terminate
`.data
`0^0\
|$ FYY
|$$u?
|$(98uL
|$,9x
~Xj@[
+D$@RP
+D$4RP
+F,+F(
+J(+J
+r(+r
+y(F+
< <0<4<D<H<`<p<t<
< <T<
<"tQ<\u
<#=M=
<#=S=s=
<$<,<4<<<D<L<T<\<d<l<t<|<
<$<,<8<@<`<h<p<
<$<C<S<_<k<w<
<&=T=
<(<0<<<D<x<
<(<d<s<
<(<H<S<x<
<*<P<v<
<*=?=Y=u=
<*=6=^=s=
<<<D<L<X<x<
<-<c<
<0=q=
<6<[<
<7BSJBt
<C=c=
<S<z<
<t -d
<T=w=
= =(=0=8=D=d=l=x=
= =@=H=P=l=t=|=
="=.=:=F=R=^=
=#=H=V={=
=#>.>O>s>.?S?
=#>p>
=$=,=4=<=D=L=T=\=d=l=t=|=
=&>5>q>
=)>t>
=*=T=~=
=,>=>
=.>f>
=:=s=
=;L$,r
=0=K=e=
=1=;=H=Z=d=u=
=2?m?
=3>Z>
=4=Z=
=8=@=H=P=X=d=l=
=E=T=
=h>z>
=I=T=v=
=K=e=
=L=l=
=PRSMt(
=S=}=
=S>_>
=ta  t
> ???s?
> ?P?z?
> >(>0>8>T>\>d>p>x>
>!?S?m?
>"?H?n?
>$>*>0>6>P>V>\>a>g>
>$>,>`>h>p>|>
>$>,>4><>D>L>T>\>d>l>t>|>
>)?L?o?
>,?4?<?H?P?h?
>-?Y?
>@>p>
><?n?
>=>s>
>>>d>
>0>8>@>H>P>\>|>
>2?>?z?
>2>p>
>3?Z?
>6?y?
>7?o?
>B?u?
>C>m>
>D>h>w>
>e-f)2
>http://www.microsoft.com/pki/certs/MicRooCerAut_2010-06-23.crt0
>NGdx
>Q?c?
>Z>b>
0 0$0(0,0004080|0
0 0(0\0d0l0x0
0!1Y1
0%0H0
0(10181D1L1d1
0*161r1
0,040<0H0P0
0,0L0k0
0,0R0x0
0.0R0
0;1^1
0<0D0L0X0x0
0=0s0
00<0x0
000e0
000U0m0v0
0123456789abcdef
031]1
040904B0
040S1
070d0
080T0|0
09L3Lux
0A0s0#1N1
0b0|0
0B0w0
0C0o0
0E1x1
0R0^0
1 1$1(1,1014181<1@1D1H1L1P1T1X1\1`1d1h1l1p1t1x1|1
1 242<2D2L2T2`2h2
1$1,1`1h1p1|1
1$1H1P1X1d1
1(0&0
1(101d1l1t1
1/0-0
1@2f3
1+1b1
1+1W1C2
1<1_1
1<1V1p1
1<2P2X2`2h2p2|2
102h2
102S2n2
1-1_1
111019184142Z
131z1
161\1
181@1L1l1x1
1B2`2
1C1m1
1G1m1
1G1t1
1S1,3
1S1}1
1y;V}
1Y1h1
2 2$2(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
2#3M3
2$20282l2t2|2
2$20282X2t2|2
2$3N3t3
2%3h3
2(3T3~3
2?3b3{3
2@2f2
2+2!3
2<2H2P2
2=2s2
2=7J7T7
2>3c3
20220824233700Z
20220825024913.82Z0
20220825233700Z0w0=
210930182225Z
211202190519Z
220505192313Z
223H3[3j3
223V3
229879+4700200
2-2c2
230228190519Z0
230504192313Z0p1
242^2
242d2
243C3
261019185142Z0
273s3
283L3T3\3d3l3x3
294c4
2G2w2
2H2U2{2
2J;5<
2J2u2
2R2\2
2S2}2
2S2b2
2S3}3
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3t3x3|3
3 3,3L3T3`3h3
3!4~4
3"4]4
3#4{4
3$3,383@3t3|3
3$4,444@4H4|4
3)3O3X3c3
3+4`4
3=3|3
3=3q3
300930183225Z0|1
303[3
314t4
333c3
343@3`3h3p3|3
39q,s
3h4}4
3http://www.microsoft.com/pkiops/Docs/Repository.htm0
3J3S3`3f3r3
3T3h3p3x3
4 4$4
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
4$4`4o4
4%5M5x5
4*585t5
4*6^6
4,545<5H5P5
4.5i5
4:5y5
4;H+7
4=4s4
4=5g5
4>6T6Z6`6
40Z0o0
424X4~4
42Zu.
434T4b4
435n5
435X5
444<4`4h4p4|4
444d4
444P4k4
445X5k5z5
465w5
485L5T5\5d5l5x5
4A4q4
4C4m4
4C9~9
4D4L4T4`4h4
4H4s4
4P4X4`4l4t4
4SVW3
4y4B6
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
5 6Q6^6
5!6L6w6
5"616m6|6
5#6M6
5$555I5V5d5
5$5X5`5h5
5$6O6z6
5%6~6
5&5F5f5
5&6C6
5(60686D6d6p6x6
5.00 (WinBuild.160101.0800)
5.5G5
5.6`6
5:6{6
5<6g6R8g9n9z9
50585D5d5p5x5
515G5
5-5>5d5
555V5e5
5-5c5
595^5y5
5A5P5
5C6t6
5D6v6
5Genu
5I5l5
5ineI
5J5u5
5L5T5\5h5p5
5R6u6
5S67708
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
6"7b7
6#7E7T7
6#7M7
6#7O7
6&7Q7|7
6(626
6(6H6P6\6d6
6(6H6T6t6|6
6(7Z7
6)7M7h7
6:6j6
6;6c6
6`6~6
6<6j6{6
636Y6
638L8e8
646<6D6P6p6|6
657u7
6C6[6
6K6b6
6S6r6
6S6x6
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
7 7,747h7p7x7
7 7,7D7H7h7
7 7@7L7l7x7
7"7P7g7
7$7,747<7D7L7T7\7d7l7t7|7
7(898b8s8
7)858q8}8
7*7N7
7,8Y8
7+7Q7w7
7<7X7q7
7<8G8l8
70<<<F<
707Q7r7
717m7
727<7Y7
738Z8
748w8
757X7{7
787s7
7-8W8
7E<I<M<Q<U<Y<]<a<e<i<m<q<u<y<}<
7H7V7
7H7Z7
7N7]7
7S:L<T<[<x<
7S7}7
7V7d7
7Z8l8
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
8 8(8<8D8X8`8t8|8
8 8(848T8`8h8
8 9^9
8 9~9
8"8'8:8V8[8n8
8$8,848<8D8L8T8\8d8l8t8|8
8$9\9g9
8$i9cw
8%8H8x8
8%8S8^8n8v8
8*8M8p8
8,9f9~9
8;r4w
8+8X8
8=8s8
8>=9>
839]9
888@8H8T8t8
89D$4tZ
8B8U8a8m8t8z8
8C8m8
8S8f9u9
8X u'
8Y_^[
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
9!:+:1:7:<:^:h:s:{:
9":_:
9":O:p:
9#:M:
9#919:9S9[9f9y9
9$:0:l:x:
9$9,949<9D9L9T9\9d9l9t9|9
9$9,949<9L9T9`9h9
9%:2:F:Q:4;
9(9<9P9d9x9
9(9-959B9G9O9\9
9)=C>
9.9^9
9?=K=R=p>#?
9^,t3W3
9{ t'
9|0Dw
9<0vz
9=9`9
90999D9K9f9t9z9
91u,9q
91u:9q
949<9D9L9T9\9d9l9t9|9
949f9
979c9t9
97u,9w
98:R:[:x:
9-9c9
99v59~$s
9A(vZP
9A,sQ
9C$v0
9C$v1
9C$v5
9C@ud
9C9d9{9
9D$4r
9D7DsW
9E$t'
9E$v'
9E(t'
9E<v&
9E0v#
9EHv&
9ETv#
9F$v<
9F:Q:v:
9F`tV
9G(v3P
9G;a;{;
9G4s'
9h;~;
9I9U9
9L9T9\9h9p9
9O2sI
9O4s*
9p(t'
9Q(rvOH
9S9z9
9V$v<
9w`t1
9XxtZ
AccumulateStatistics
AddRiftEntry
AMD64
api-ms-win-core-debug-l1-1-0.dll
api-ms-win-core-errorhandling-l1-1-0.dll
api-ms-win-core-file-l1-1-0.dll
api-ms-win-core-handle-l1-1-0.dll
api-ms-win-core-heap-l1-1-0.dll
api-ms-win-core-interlocked-l1-1-0.dll
api-ms-win-core-libraryloader-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-1.dll
api-ms-win-core-profile-l1-1-0.dll
api-ms-win-core-synch-l1-1-0.dll
api-ms-win-core-sysinfo-l1-1-0.dll
api-ms-win-core-timezone-l1-1-0.dll
api-ms-win-crt-private-l1-1-0.dll
api-ms-win-crt-runtime-l1-1-0.dll
api-ms-win-crt-string-l1-1-0.dll
api-ms-win-eventing-classicprovider-l1-1-0.dll
api-ms-win-eventing-controller-l1-1-0.dll
api-ms-win-security-cryptoapi-l1-1-0.dll
ApplyDeltaA
ApplyDeltaB
ApplyDeltaGetReverseB
ApplyDeltaProvidedB
ApplyDeltaW
ApplyPatch
ApplyPatchGetReverse
ApplyPatchTargetBufferProvided
ApplyPatchToFileByBuffers
ApplyPayload
ApplyPostProcessTarget
ApplyPreProcessSource_AMD64
ApplyPreProcessSource_CLI4_AMD64
ApplyPreProcessSource_CLI4_ARM
ApplyPreProcessSource_CLI4_ARM64
ApplyPreProcessSource_CLI4_I386
ApplyPreProcessSource_I386
ApplyPreProcessSource_IA64
ApplyPreProcessSource_RAW
ApplyPreProcessSourcePe
ApplyPreProcessSourcePeCli4
ApplyPseudoLzxPatchTargetBufferProvided
ApplyReversalData
ApplyReversePatch
as.,k{n?,
asciiPatchSignature( TToAscii ): "PA30";source( PassBuffer ): input[ 0 ];patchedSource( PassBuffer ): input[ 1 ];lzxReversal( PassBuffer ): input[ 2 ];fileTime( CopyInt ): input[ 3 ];hashAlgId( CopyInt ): input[ 4 ];version( CopyInt ): input[ 5 ];code( CopyInt ): input[ 6 ];flagsInt( CopyInt ): input[ 7 ];fileTimeBuffer( IntToFixedBuffer ): fileTime[ 0 ];sourceHash( CalculateHash ): hashAlgId[ 0 ], source[ 0 ];sourceSize( BufferSize ): source[ 0 ];header( Concat ): asciiPatchSignature[ 0 ], fileTimeBuffer[ 0 ];bitWriter( BitWriterOpen ):;writeVersion( BitWriteInt ): bitWriter[ 0 ], version[ 0 ];writeCode( BitWriteInt ): writeVersion[ 0 ], code[ 0 ];writeFlagsInt( BitWriteInt ): writeCode[ 0 ], flagsInt[ 0 ];writeSourceSize( BitWriteInt ): writeFlagsInt[ 0 ], sourceSize[ 0 ]; writeHashAlgId( BitWriteInt ): writeSourceSize[ 0 ], hashAlgId[ 0 ];writeHash( BitWriteBuffer ): writeHashAlgId[ 0 ], sourceHash[ 0 ];reversalBuffer( CaptureReversalData ): source[ 0 ], patchedSource[ 0 ], lzxReversal[ 0 ];writeReversal( BitWriteBuffer ): writeHash[ 0 ], reversalBuffer[ 0 ];created( BitWriterClose ): writeReversal[ 0 ];patch( Concat ): header[ 0 ], created[ 0 ];output: patch[ 0 ];
AsciiToT
AsciiToUnicode
Assembly
AssemblyOS
AssemblyProcessor
AssemblyRef
AssemblyRefOS
AssemblyRefProcessor
bad array new length
BaseRva
BitReadBuffer
BitReadCliMap
BitReadCliMetadata
BitReadCompositeFormat
BitReaderClose
BitReaderOpen
BitReadInt
BitReadPortableExecutableInfo
BitReadPortableExecutableInfoCli4
BitReadRiftTable
BitWriteBuffer
BitWriteCliMap
BitWriteCliMetadata
BitWriteCompositeFormat
BitWriteInt
BitWritePortableExecutableInfo
BitWritePortableExecutableInfoCli4
BitWriterClose
BitWriteRiftTable
BitWriterOpen
BlobStreamOffset
BlobStreamSize
Blocks
BufferListPopBack
BufferListPopFront
BufferListPushBack
BufferListPushFront
BufferSize
C8f9H 
C9^(w
C9Xpw
Cabinet.dll
CalculateHash
CalculateNormalizedSourceHash
CalculatePeCheckSum
CaptureReversalData
CD9Hp
CH9Hp
CheckBuffersIdentity
CheckIntsIdentity
CheckRiftTablesIdentity
Chttp://www.microsoft.com/pkiops/crl/MicWinProPCA2011_2011-10-19.crl0a
ClassLayout
ClearRelocations
CLI4_AMD64
CLI4_ARM
CLI4_ARM64
CLI4_I386
Cli4MapFromPes
CliMapFromPes
CliMetadata
CloseHandle
code( CopyInt ): input[ 0 ];flagsInt( CopyInt ): input[ 1 ];flags( GetBits ): flagsInt[ 0 ];source( PassBuffer ): input[ 2 ];bitReader( BitReaderOpen ): input[ 3 ];targetSize( CopyInt ): input[ 4 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];sourceSize( BufferSize ): source[ 0 ];sourcePe0( PortableExecutableFromBuffer ): source[ 0 ], 1;checkSourcePe0( CheckIntsIdentity ): sourcePe0[ 1 ], 1, 0x040301;sourcePe( PassPe / flags[ 13 ] ? "UnbindPortableExecutable" : "PassPe" ): sourcePe0[ 0 ];sourceOffsetToRva( ExtractImageOffsetToRva ): sourcePe[ 0 ];debugWriteSourceOffsetToRva( DebugWriteFileRiftTable ): "sourceOffsetToRva.apply.rift", sourceOffsetToRva[ 0 ];sourceCliMetadata( ExtractCli4Metadata ): sourcePe[ 0 ];sourceImageBase( GetImageBase ): sourcePe[ 0 ];targetInfo( BitReadPortableExecutableInfoCli4 ): bitReader[ 0 ];targetInfoSplit( SplitPortableExecutableInfo ): targetInfo[ 1 ];targetImageBase( PassInt ): targetInfoSplit[ 0 ];targetGlobalPointer( PassInt ): targetInfoSplit[ 1 ];targetTimeStamp( PassInt ): targetInfoSplit[ 2 ];targetRvaToOffset( PassRiftTable ): targetInfoSplit[ 3 ];debugWriteTargetRvaToOffsetRiftTable( DebugWriteFileRiftTable ): "targetRvaToOffset.apply.rift", targetRvaToOffset[ 0 ];targetCliMetadata( PassCliMetadata ): targetInfoSplit[ 5 ];usedRiftTable( BitReadRiftTable ): targetInfo[ 0 ];debugWriteUsedRiftTable( DebugWriteFileRiftTable ): "used.apply.rift", usedRiftTable[ 1 ]; cliMap( BitReadCliMap ): usedRiftTable[ 0 ];bitReaderClose( BitReaderClose ): cliMap[ 0 ], 1;hintBuffer( CreateHintBuffer ): sourcePe[ 0 ];emptyRelative( CreateEmptyRiftTable ):;riftTransformName( Concat ): "RiftTransform_", codeMnemonic[ 0 ];sourceRiftTransformed( RiftTransformTemplate / riftTransformName[ 0 ] ): flagsInt[ 0 ], sourcePe[ 0 ], hintBuffer[ 0 ], usedRiftTable[ 1 ], "", cliMap[ 1 ], targetInfo[ 1 ], 1, emptyRelative[ 0 ];setImageBase( SetImageBase ): sourceRiftTransformed[ 0 ], targetImageBase[ 0 ];setGlobalPointer( SetGlobalPointer ): setImageBase[ 0 ], targetGlobalPointer[ 0 ];setTimeStamp( SetTimeStamp ): setGlobalPointer[ 0 ], targetTimeStamp[ 0 ];setCheckSum( SetCheckSum ): setTimeStamp[ 0 ], 0; transformed( PortableExecutableToBuffer ): setCheckSum[ 0 ];compressionRiftTable0( MultiplyRiftTables ): sourceOffsetToRva[ 0 ], usedRiftTable[ 1 ];debugWriteCompression0( DebugWriteFileRiftTable ): "compression0.apply.rift", compressionRiftTable0[ 0 ];compressionRiftTable1( MultiplyRiftTables ): compressionRiftTable0[ 0 ], targetRvaToOffset[ 0 ];debugWriteCompression1( DebugWriteFileRiftTable ): "compression1.apply.rift", compressionRiftTable1[ 0 ];compressionRiftTable2( ReverseRiftTable ): compressionRiftTable1[ 0 ], 0;debugWriteCompression2( DebugWriteFileRiftTable ): "compression2.apply.rift", compressionRiftTable2[ 0 ];cliMapCompressionRiftTable( CompressionRiftTableFromCli4Map ): sourceCliMetadata[ 0 ], targetCliMetadata[ 0 ], cliMap[ 1 ], transformed[ 0 ];debugWriteCliMapCompressionRiftTable( DebugWriteFileRiftTable ): "cliMapCompression.apply.rift", cliMapCompressionRiftTable[ 0 ];compressionRiftTable3( SumRiftTables ): compressionRiftTable2[ 0 ], cliMapCompressionRiftTable[ 0 ], 1;debugWriteCompression3( DebugWriteFileRiftTable ): "compression3.apply.rift", compressionRiftTable3[ 0 ];output: transformed[ 0 ], compressionRiftTable3[ 0 ];
code( CopyInt ): input[ 0 ];flagsInt( CopyInt ): input[ 1 ];flags( GetBits ): flagsInt[ 0 ];source( PassBuffer ): input[ 2 ];bitReader( BitReaderOpen ): input[ 3 ];targetSize( CopyInt ): input[ 4 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];sourceSize( BufferSize ): source[ 0 ];sourcePe0( PortableExecutableFromBuffer ): source[ 0 ], 1;checkSourcePe0( CheckIntsIdentity ): sourcePe0[ 1 ], 1, 0x040301;sourcePe( PassPe / flags[ 13 ] ? "UnbindPortableExecutable" : "PassPe" ): sourcePe0[ 0 ];sourceOffsetToRva( ExtractImageOffsetToRva ): sourcePe[ 0 ];debugWriteSourceOffsetToRva( DebugWriteFileRiftTable ): "sourceOffsetToRva.apply.rift", sourceOffsetToRva[ 0 ];sourceCliMetadata( ExtractCliMetadata ): sourcePe[ 0 ];sourceImageBase( GetImageBase ): sourcePe[ 0 ];targetInfo( BitReadPortableExecutableInfo ): bitReader[ 0 ];targetInfoSplit( SplitPortableExecutableInfo ): targetInfo[ 1 ];targetImageBase( PassInt ): targetInfoSplit[ 0 ];targetGlobalPointer( PassInt ): targetInfoSplit[ 1 ];targetTimeStamp( PassInt ): targetInfoSplit[ 2 ];targetRvaToOffset( PassRiftTable ): targetInfoSplit[ 3 ];debugWriteTargetRvaToOffsetRiftTable( DebugWriteFileRiftTable ): "targetRvaToOffset.apply.rift", targetRvaToOffset[ 0 ];targetCliMetadata( PassCliMetadata ): targetInfoSplit[ 4 ];usedRiftTable( BitReadRiftTable ): targetInfo[ 0 ];debugWriteUsedRiftTable( DebugWriteFileRiftTable ): "used.apply.rift", usedRiftTable[ 1 ]; cliMap( BitReadCliMap ): usedRiftTable[ 0 ];bitReaderClose( BitReaderClose ): cliMap[ 0 ], 1;hintBuffer( CreateHintBuffer ): sourcePe[ 0 ];emptyRelative( CreateEmptyRiftTable ):;riftTransformName( Concat ): "RiftTransform_", codeMnemonic[ 0 ];sourceRiftTransformed( RiftTransformTemplate / riftTransformName[ 0 ] ): flagsInt[ 0 ], sourcePe[ 0 ], hintBuffer[ 0 ], usedRiftTable[ 1 ], "", cliMap[ 1 ], targetInfo[ 1 ], 1, emptyRelative[ 0 ];setImageBase( SetImageBase ): sourceRiftTransformed[ 0 ], targetImageBase[ 0 ];setGlobalPointer( SetGlobalPointer ): setImageBase[ 0 ], targetGlobalPointer[ 0 ];setTimeStamp( SetTimeStamp ): setGlobalPointer[ 0 ], targetTimeStamp[ 0 ];setCheckSum( SetCheckSum ): setTimeStamp[ 0 ], 0; transformed( PortableExecutableToBuffer ): setCheckSum[ 0 ];compressionRiftTable0( MultiplyRiftTables ): sourceOffsetToRva[ 0 ], usedRiftTable[ 1 ];debugWriteCompression0( DebugWriteFileRiftTable ): "compression0.apply.rift", compressionRiftTable0[ 0 ];compressionRiftTable1( MultiplyRiftTables ): compressionRiftTable0[ 0 ], targetRvaToOffset[ 0 ];debugWriteCompression1( DebugWriteFileRiftTable ): "compression1.apply.rift", compressionRiftTable1[ 0 ];compressionRiftTable2( ReverseRiftTable ): compressionRiftTable1[ 0 ], 0;debugWriteCompression2( DebugWriteFileRiftTable ): "compression2.apply.rift", compressionRiftTable2[ 0 ];cliMapCompressionRiftTable( CompressionRiftTableFromCliMap ): sourceCliMetadata[ 0 ], targetCliMetadata[ 0 ], cliMap[ 1 ], transformed[ 0 ];debugWriteCliMapCompressionRiftTable( DebugWriteFileRiftTable ): "cliMapCompression.apply.rift", cliMapCompressionRiftTable[ 0 ];compressionRiftTable3( SumRiftTables ): compressionRiftTable2[ 0 ], cliMapCompressionRiftTable[ 0 ], 1;debugWriteCompression3( DebugWriteFileRiftTable ): "compression3.apply.rift", compressionRiftTable3[ 0 ];output: transformed[ 0 ], compressionRiftTable3[ 0 ];
code( CopyInt ): input[ 0 ];flagsInt( CopyInt ): input[ 1 ];source( PassBuffer ): input[ 2 ];bitReader( PassBitReader ): input[ 3 ];targetBuffer( PassBuffer ): input[ 4 ];reverseRequested( CopyInt ): input[ 5 ];sourceSize( BufferSize ): source[ 0 ];targetSize( BufferSize ): targetBuffer[ 0 ];preProcessBuffer( BitReadBuffer ): bitReader[ 0 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];applyPreProcessSourceName( Concat ): "ApplyPreProcessSource_", codeMnemonic[ 0 ];applyPreProcessSource( ApplyPreProcessSource_RAW / applyPreProcessSourceName[ 0 ] ): code[ 0 ], flagsInt[ 0 ], source[ 0 ], preProcessBuffer[ 1 ], targetSize[ 0 ];debugWritePreProcessSource( DebugWriteFile ): "preProcessSource.apply.image", applyPreProcessSource[ 0 ];compressionRiftTable5( PassRiftTable ): applyPreProcessSource[ 1 ];debugWriteCompression5( DebugWriteFileRiftTable ): "compression5.apply.rift", compressionRiftTable5[ 0 ];compressionRiftTable6( CreateEmptyRiftTable ):;compressionRiftTable7( AddRiftEntry ): compressionRiftTable6[ 0 ], sourceSize[ 0 ], 0;debugWriteCompression7( DebugWriteFileRiftTable ): "compression7.apply.rift", compressionRiftTable7[ 0 ];compressionRiftTable8( MultiplyRiftTables ): compressionRiftTable7[ 0 ], compressionRiftTable5[ 0 ];debugWriteCompression8( DebugWriteFileRiftTable ): "compression8.apply.rift", compressionRiftTable8[ 0 ]; compressionRiftTable9( ReduceRiftTable ): compressionRiftTable8[ 0 ];debugWriteCompression9( DebugWriteFileRiftTable ): "compression9.apply.rift", compressionRiftTable9[ 0 ];patchBuffer( BitReadBuffer ): preProcessBuffer[ 0 ];target1( ApplyPseudoLzxPatchTargetBufferProvided ): applyPreProcessSource[ 0 ], patchBuffer[ 1 ], targetBuffer[ 0 ], compressionRiftTable9[ 0 ], reverseRequested[ 0 ];debugWritePreProcessTarget( DebugWriteFile ): "preProcessTarget.create.image", target1[ 0 ];target( ApplyPostProcessTarget ): flagsInt[ 0 ], target1[ 0 ];output: patchBuffer[ 0 ], target[ 0 ], target1[ 1 ];
code( CopyInt ): input[ 0 ];flagsInt( CopyInt ): input[ 1 ];sourcePe( PortableExecutableFromBuffer ): input[ 2 ], 1;targetPe( PortableExecutableFromBuffer ): input[ 3 ], 1;patchIni( InputSharedIniReader ): input[ 6 ];targetInfo( GetPortableExecutableInfo ): targetPe[ 0 ];cliMap( CliMapFromPes ): sourcePe[ 0 ], targetPe[ 0 ];pesRiftTable( RiftTableFromPes ): flagsInt[ 0 ], sourcePe[ 0 ], targetPe[ 0 ], cliMap[ 0 ];psymsRiftTable( RiftTableFromPsyms ): code[ 0 ], flagsInt[ 0 ], sourcePe[ 0 ], targetPe[ 0 ], input[ 4 ], input[ 5 ];sourceRvaToImageOffset( ExtractRvaToImageOffset ): sourcePe[ 0 ];targetRvaToImageOffset( ExtractRvaToImageOffset ): targetPe[ 0 ];debugWriteSourceRvaToOffsetRiftTable( DebugWriteFileRiftTable ): "sourceRvaToOffset.create.rift", sourceRvaToImageOffset[ 0 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];riftTransformName( Concat ): "RiftTransform_", codeMnemonic[ 0 ];sourceHintBuffer( CreateHintBuffer ): sourcePe[ 0 ];targetHintBuffer( CreateHintBuffer ): targetPe[ 0 ];emptyCliMap( CreateEmptyCliMap ):;emptyRiftTable( CreateEmptyRiftTable ):;emptyPeInfo( CreateEmptyPortableExecutableInfo ):;sourceRelative( RiftTransformTemplate / riftTransformName[ 0 ] ): flagsInt[ 0 ], sourcePe[ 0 ], sourceHintBuffer[ 0 ], emptyRiftTable[ 0 ], "", emptyCliMap[ 0 ], emptyPeInfo[ 0 ], 0, emptyRiftTable[ 0 ];targetRelative( RiftTransformTemplate / riftTransformName[ 0 ] ): flagsInt[ 0 ], targetPe[ 0 ], targetHintBuffer[ 0 ], emptyRiftTable[ 0 ], "", emptyCliMap[ 0 ], emptyPeInfo[ 0 ], 0, emptyRiftTable[ 0 ];sourceZero( PortableExecutableToBuffer ): sourceRelative[ 0 ];targetZero( PortableExecutableToBuffer ): targetRelative[ 0 ];debugWriteSourceZero( DebugWriteFile ): "sourceZero.create.image", sourceZero[ 0 ];debugWriteTargetZero( DebugWriteFile ): "targetZero.create.image", targetZero[ 0 ];debugWriteSourceRelative( DebugWriteFileRiftTable ): "sourceRelative.create.rift", sourceRelative[ 3 ];debugWriteTargetRelative( DebugWriteFileRiftTable ): "targetRelative.create.rift", targetRelative[ 3 ];basicBlockRiftTable( CreateBasicBlockRiftTable ): sourceZero[ 0 ], targetZero[ 0 ], sourceRelative[ 3 ], targetRelative[ 3 ], sourceRvaToImageOffset[ 0 ], targetRvaToImageOffset[ 0 ];output: targetInfo[ 0 ], pesRiftTable[ 0 ], basicBlockRiftTable[ 0 ], psymsRiftTable[ 0 ], cliMap[ 0 ], cliMap[ 1 ];
code( CopyInt ): input[ 0 ];flagsInt( CopyInt ): input[ 1 ];sourcePe( PortableExecutableFromBuffer ): input[ 2 ], 1;targetPe( PortableExecutableFromBuffer ): input[ 3 ], 1;patchIni( InputSharedIniReader ): input[ 6 ];targetInfo( GetPortableExecutableInfoCli4 ): targetPe[ 0 ];cliMap( Cli4MapFromPes ): sourcePe[ 0 ], targetPe[ 0 ];pesRiftTable( RiftTableFromPes ): flagsInt[ 0 ], sourcePe[ 0 ], targetPe[ 0 ], cliMap[ 0 ];psymsRiftTable( RiftTableFromPsyms ): code[ 0 ], flagsInt[ 0 ], sourcePe[ 0 ], targetPe[ 0 ], input[ 4 ], input[ 5 ];sourceRvaToImageOffset( ExtractRvaToImageOffset ): sourcePe[ 0 ];targetRvaToImageOffset( ExtractRvaToImageOffset ): targetPe[ 0 ];debugWriteSourceRvaToOffsetRiftTable( DebugWriteFileRiftTable ): "sourceRvaToOffset.create.rift", sourceRvaToImageOffset[ 0 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];riftTransformName( Concat ): "RiftTransform_", codeMnemonic[ 0 ];sourceHintBuffer( CreateHintBuffer ): sourcePe[ 0 ];targetHintBuffer( CreateHintBuffer ): targetPe[ 0 ];emptyCliMap( CreateEmptyCli4Map ):;emptyRiftTable( CreateEmptyRiftTable ):;emptyPeInfo( CreateEmptyPortableExecutableInfoCli4 ):;sourceRelative( RiftTransformTemplate / riftTransformName[ 0 ] ): flagsInt[ 0 ], sourcePe[ 0 ], sourceHintBuffer[ 0 ], emptyRiftTable[ 0 ], "", emptyCliMap[ 0 ], emptyPeInfo[ 0 ], 0, emptyRiftTable[ 0 ];targetRelative( RiftTransformTemplate / riftTransformName[ 0 ] ): flagsInt[ 0 ], targetPe[ 0 ], targetHintBuffer[ 0 ], emptyRiftTable[ 0 ], "", emptyCliMap[ 0 ], emptyPeInfo[ 0 ], 0, emptyRiftTable[ 0 ];sourceZero( PortableExecutableToBuffer ): sourceRelative[ 0 ];targetZero( PortableExecutableToBuffer ): targetRelative[ 0 ];debugWriteSourceZero( DebugWriteFile ): "sourceZero.create.image", sourceZero[ 0 ];debugWriteTargetZero( DebugWriteFile ): "targetZero.create.image", targetZero[ 0 ];debugWriteSourceRelative( DebugWriteFileRiftTable ): "sourceRelative.create.rift", sourceRelative[ 3 ];debugWriteTargetRelative( DebugWriteFileRiftTable ): "targetRelative.create.rift", targetRelative[ 3 ];basicBlockRiftTable( CreateBasicBlockRiftTable ): sourceZero[ 0 ], targetZero[ 0 ], sourceRelative[ 3 ], targetRelative[ 3 ], sourceRvaToImageOffset[ 0 ], targetRvaToImageOffset[ 0 ];output: targetInfo[ 0 ], pesRiftTable[ 0 ], basicBlockRiftTable[ 0 ], psymsRiftTable[ 0 ], cliMap[ 0 ], cliMap[ 1 ];
code( CopyInt ): input[ 0 ];targetCode( CopyInt ): input[ 1 ];flagsInt( CopyInt ): input[ 2 ];bitWriter( PassBitWriter ): input[ 3 ];source( PassBuffer ): input[ 4 ];target( PassBuffer ): input[ 5 ];sourceSize( BufferSize ): source[ 0 ];targetSize( BufferSize ): target[ 0 ];sourceIni( PassIniReader ): input[ 6 ];targetIni( PassIniReader ): input[ 7 ];patchIni( PassIniReader ): input[ 8 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];createPreProcessSourceName( Concat ): "CreatePreProcessSource_", codeMnemonic[ 0 ];createPreProcessSource( CreatePreProcessSource_RAW / createPreProcessSourceName[ 0 ] ): code[ 0 ], targetCode[ 0 ], flagsInt[ 0 ], source[ 0 ], target[ 0 ], sourceIni[ 0 ], targetIni[ 0 ], patchIni[ 0 ];debugWritePreProcessSource( DebugWriteFile ): "preProcessSource.create.image", createPreProcessSource[ 0 ];createPreProcessTarget( CreatePreProcessTarget ): flagsInt[ 0 ], target[ 0 ];debugWritePreProcessTarget( DebugWriteFile ): "preProcessTarget.create.image", createPreProcessTarget[ 0 ];applyPreProcessSourceName( Concat ): "ApplyPreProcessSource_", codeMnemonic[ 0 ];applyPreProcessSource( ApplyPreProcessSource_RAW / applyPreProcessSourceName[ 0 ] ): code[ 0 ], flagsInt[ 0 ], source[ 0 ], createPreProcessSource[ 1 ], targetSize[ 0 ];checkPreProcessSourceIdentity( CheckBuffersIdentity ): createPreProcessSource[ 0 ], applyPreProcessSource[ 0 ], 0x041F04;checkCompressionRiftTableIdentity( CheckRiftTablesIdentity ): createPreProcessSource[ 2 ], applyPreProcessSource[ 1 ], 0x041F03;applyPostProcessTarget( ApplyPostProcessTarget ): flagsInt[ 0 ], createPreProcessTarget[ 0 ];checkPostProcessTargetIdentity( CheckBuffersIdentity ): target[ 0 ], applyPostProcessTarget[ 0 ], 0x041F01;writePreProcessBuffer( BitWriteBuffer ): bitWriter[ 0 ], createPreProcessSource[ 1 ];compressionRiftTable5( PassRiftTable ): createPreProcessSource[ 2 ];debugWriteCompression5( DebugWriteFileRiftTable ): "compression5.create.rift", compressionRiftTable5[ 0 ];compressionRiftTable6( CreateEmptyRiftTable ):;compressionRiftTable7( AddRiftEntry ): compressionRiftTable6[ 0 ], sourceSize[ 0 ], 0;debugWriteCompression7( DebugWriteFileRiftTable ): "compression7.create.rift", compressionRiftTable7[ 0 ];compressionRiftTable8( MultiplyRiftTables ): compressionRiftTable7[ 0 ], compressionRiftTable5[ 0 ];debugWriteCompression8( DebugWriteFileRiftTable ): "compression8.create.rift", compressionRiftTable8[ 0 ];compressionRiftTable9( ReduceRiftTable ): compressionRiftTable8[ 0 ];debugWriteCompression9( DebugWriteFileRiftTable ): "compression9.create.rift", compressionRiftTable9[ 0 ];create( CreatePseudoLzxPatch ): createPreProcessSource[ 0 ], createPreProcessTarget[ 0 ], flagsInt[ 0 ], sourceIni[ 0 ], targetIni[ 0 ], patchIni[ 0 ], compressionRiftTable9[ 0 ];writePatch( BitWriteBuffer ): writePreProcessBuffer[ 0 ], create[ 0 ];output: writePatch[ 0 ];
code( CopyInt ): input[ 0 ];targetCode( CopyInt ): input[ 1 ];flagsInt( CopyInt ): input[ 2 ];flags( GetBits ): flagsInt[ 0 ];source( PassBuffer ): input[ 3 ];target( CopyBuffer ): input[ 4 ];sourceIni( PassIniReader ): input[ 5 ];targetIni( PassIniReader ): input[ 6 ];patchIni( PassIniReader ): input[ 7 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];sourceSize( BufferSize ): source[ 0 ];sourcePe0( PortableExecutableFromBuffer ): source[ 0 ], 1;checkSourcePe0( CheckIntsIdentity ): sourcePe0[ 1 ], 1, 0x041F02;sourcePe( PassPe / flags[ 13 ] ? "UnbindPortableExecutable" : "PassPe" ): sourcePe0[ 0 ];sourceOffsetToRva( ExtractImageOffsetToRva ): sourcePe[ 0 ];debugWriteSourceOffsetToRva( DebugWriteFileRiftTable ): "sourceOffsetToRva.create.rift", sourceOffsetToRva[ 0 ];sourceCliMetadata( ExtractCli4Metadata ): sourcePe[ 0 ];sourceImageBase( GetImageBase ): sourcePe[ 0 ];iniRiftTable( RiftTableFromIniSection ): patchIni[ 0 ], "OldRvaToNewRvaMap", 1;debugWriteIniRiftTable( DebugWriteFileRiftTable ): "ini.create.rift", iniRiftTable[ 0 ];compareCodes( CompareInts ): code[ 0 ], targetCode[ 0 ];targetPeContainer( TargetRealPeContainerCli4 / compareCodes[ 0 ] ? "TargetStubPeContainerCli4" : "TargetRealPeContainerCli4" ): code[ 0 ], flagsInt[ 0 ], source[ 0 ], target[ 0 ], sourceIni[ 0 ], targetIni[ 0 ], patchIni[ 0 ];targetInfo( PassPortableExecutableInfo ): targetPeContainer[ 0 ];targetInfoSplit( SplitPortableExecutableInfo ): targetInfo[ 0 ];targetImageBase( PassInt ): targetInfoSplit[ 0 ];targetGlobalPointer( PassInt ): targetInfoSplit[ 1 ];targetTimeStamp( PassInt ): targetInfoSplit[ 2 ];targetRvaToOffset( PassRiftTable ): targetInfoSplit[ 3 ];debugWriteTargetRvaToOffsetRiftTable( DebugWriteFileRiftTable ): "targetRvaToOffset.create.rift", targetRvaToOffset[ 0 ];targetCliMetadata( PassCliMetadata ): targetInfoSplit[ 5 ];pesRiftTable( PassRiftTable ): targetPeContainer[ 1 ];debugWritePesRiftTable( DebugWriteFileRiftTable ): "pes.create.rift", pesRiftTable[ 0 ];basicBlockRiftTable( PassRiftTable ): targetPeContainer[ 2 ];debugWriteBasicBlockRiftTable( DebugWriteFileRiftTable ): "basicBlock.create.rift", basicBlockRiftTable[ 0 ];psymsRiftTable( PassRiftTable ): targetPeContainer[ 3 ];debugWritePsymsRiftTable( DebugWriteFileRiftTable ): "psyms.create.rift", psymsRiftTable[ 0 ];cliMap( PassCliMap ): targetPeContainer[ 4 ];cliMapRiftTable( PassRiftTable ): targetPeContainer[ 5 ];debugWriteCliMapRiftTable( DebugWriteFileRiftTable ): "cliMap.create.rift", cliMapRiftTable[ 0 ];riftTable0( SumRiftTables ): pesRiftTable[ 0 ], cliMapRiftTable[ 0 ], 0;riftTable1( SumRiftTables ): riftTable0[ 0 ], basicBlockRiftTable[ 0 ], 0;riftTable2( SumRiftTables ): riftTable1[ 0 ], psymsRiftTable[ 0 ], 0;unreducedRiftTable( SumRiftTables ): iniRiftTable[ 0 ], riftTable2[ 0 ], 0;debugWriteUnreducedRiftTable( DebugWriteFileRiftTable ): "unreduced.create.rift", unreducedRiftTable[ 0 ];reducedRiftTable( ReduceRiftTable ): unreducedRiftTable[ 0 ];debugWriteReducedRiftTable( DebugWriteFileRiftTable ): "reduced.create.rift", reducedRiftTable[ 0 ];targetSize( BufferSize ): target[ 0 ];preWriter( BitWriterOpen ):;writeTargetInfo( BitWritePortableExecutableInfoCli4 ): preWriter[ 0 ], targetInfo[ 0 ];hintBuffer0( CreateHintBuffer ): sourcePe[ 0 ];usageBuffer0( CreateRiftUsageBuffer ): reducedRiftTable[ 0 ];emptyRelative( CreateEmptyRiftTable ):;riftTransformName( Concat ): "RiftTransform_", codeMnemonic[ 0 ];sourceRiftTransformed( RiftTransformTemplate / riftTransformName[ 0 ] ): flagsInt[ 0 ], sourcePe[ 0 ], hintBuffer0[ 0 ], reducedRiftTable[ 0 ], usageBuffer0[ 0 ], cliMap[ 0 ], targetInfo[ 0 ], 1, emptyRelative[ 0 ];hintBuffer( PassBuffer ): sourceRiftTransformed[ 1 ];usageBuffer( RiftTableMap ): reducedRiftTable[ 0 ], 0, sourceRiftTransformed[ 2 ];debugWriteHintBuffer( DebugWriteFile ): "hint.map", hintBuffer[ 0 ];debugWriteUsageBuffer( DebugWriteFile ): "usage.map", usageBuffer[ 1 ];usedRiftTable( RemoveUnusedRiftEntries ): reducedRiftTable[ 0 ], usageBuffer[ 1 ];debugWriteUsedRiftTable( DebugWriteFileRiftTable ): "used.create.rift", usedRiftTable[ 0 ];setImageBase( SetImageBase ): sourceRiftTransformed[ 0 ], targetImageBase[ 0 ];setGlobalPointer( SetGlobalPointer ): setImageBase[ 0 ], targetGlobalPointer[ 0 ];setTimeStamp( SetTimeStamp ): setGlobalPointer[ 0 ], targetTimeStamp[ 0 ];setCheckSum( SetCheckSum ): setTimeStamp[ 0 ], 0; writeRiftTable( BitWriteRiftTable ): writeTargetInfo[ 0 ], usedRiftTable[ 0 ];writeCliMap( BitWriteCliMap ): writeRiftTable[ 0 ], cliMap[ 0 ];preBuffer( BitWriterClose ): writeCliMap[ 0 ];transformedSource( PortableExecutableToBuffer ): setCheckSum[ 0 ];compressionRiftTable0( MultiplyRiftTables ): sourceOffsetToRva[ 0 ], usedRiftTable[ 0 ];debugWriteCompression0( DebugWriteFileRiftTable ): "compression0.create.rift", compressionRiftTable0[ 0 ];compressionRiftTable1( MultiplyRiftTables ): compressionRiftTable0[ 0 ], targetRvaToOffset[ 0 ];debugWriteCompression1( DebugWriteFileRiftTable ): "compression1.create.rift", compressionRiftTable1[ 0 ];compressionRiftTable2( ReverseRiftTable ): compressionRiftTable1[ 0 ], 0; debugWriteCompression2( DebugWriteFileRiftTable ): "compression2.create.rift", compressionRiftTable2[ 0 ];cliMapCompressionRiftTable( CompressionRiftTableFromCli4Map ): sourceCliMetadata[ 0 ], targetCliMetadata[ 0 ], cliMap[ 0 ], transformedSource[ 0 ];debugWriteCliMapCompressionRiftTable( DebugWriteFileRiftTable ): "cliMapCompression.create.rift", cliMapCompressionRiftTable[ 0 ];compressionRiftTable3( SumRiftTables ): compressionRiftTable2[ 0 ], cliMapCompressionRiftTable[ 0 ], 1;debugWriteCompression3( DebugWriteFileRiftTable ): "compression3.create.rift", compressionRiftTable3[ 0 ];output: transformedSource[ 0 ], preBuffer[ 0 ], compressionRiftTable3[ 0 ];
code( CopyInt ): input[ 0 ];targetCode( CopyInt ): input[ 1 ];flagsInt( CopyInt ): input[ 2 ];flags( GetBits ): flagsInt[ 0 ];source( PassBuffer ): input[ 3 ];target( CopyBuffer ): input[ 4 ];sourceIni( PassIniReader ): input[ 5 ];targetIni( PassIniReader ): input[ 6 ];patchIni( PassIniReader ): input[ 7 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];sourceSize( BufferSize ): source[ 0 ];sourcePe0( PortableExecutableFromBuffer ): source[ 0 ], 1;checkSourcePe0( CheckIntsIdentity ): sourcePe0[ 1 ], 1, 0x041F02;sourcePe( PassPe / flags[ 13 ] ? "UnbindPortableExecutable" : "PassPe" ): sourcePe0[ 0 ];sourceOffsetToRva( ExtractImageOffsetToRva ): sourcePe[ 0 ];debugWriteSourceOffsetToRva( DebugWriteFileRiftTable ): "sourceOffsetToRva.create.rift", sourceOffsetToRva[ 0 ];sourceCliMetadata( ExtractCliMetadata ): sourcePe[ 0 ];sourceImageBase( GetImageBase ): sourcePe[ 0 ];iniRiftTable( RiftTableFromIniSection ): patchIni[ 0 ], "OldRvaToNewRvaMap", 1;debugWriteIniRiftTable( DebugWriteFileRiftTable ): "ini.create.rift", iniRiftTable[ 0 ];compareCodes( CompareInts ): code[ 0 ], targetCode[ 0 ];targetPeContainer( TargetRealPeContainer / compareCodes[ 0 ] ? "TargetStubPeContainer" : "TargetRealPeContainer" ): code[ 0 ], flagsInt[ 0 ], source[ 0 ], target[ 0 ], sourceIni[ 0 ], targetIni[ 0 ], patchIni[ 0 ];targetInfo( PassPortableExecutableInfo ): targetPeContainer[ 0 ];targetInfoSplit( SplitPortableExecutableInfo ): targetInfo[ 0 ];targetImageBase( PassInt ): targetInfoSplit[ 0 ];targetGlobalPointer( PassInt ): targetInfoSplit[ 1 ];targetTimeStamp( PassInt ): targetInfoSplit[ 2 ];targetRvaToOffset( PassRiftTable ): targetInfoSplit[ 3 ];debugWriteTargetRvaToOffsetRiftTable( DebugWriteFileRiftTable ): "targetRvaToOffset.create.rift", targetRvaToOffset[ 0 ];targetCliMetadata( PassCliMetadata ): targetInfoSplit[ 4 ];pesRiftTable( PassRiftTable ): targetPeContainer[ 1 ];debugWritePesRiftTable( DebugWriteFileRiftTable ): "pes.create.rift", pesRiftTable[ 0 ];basicBlockRiftTable( PassRiftTable ): targetPeContainer[ 2 ];debugWriteBasicBlockRiftTable( DebugWriteFileRiftTable ): "basicBlock.create.rift", basicBlockRiftTable[ 0 ];psymsRiftTable( PassRiftTable ): targetPeContainer[ 3 ];debugWritePsymsRiftTable( DebugWriteFileRiftTable ): "psyms.create.rift", psymsRiftTable[ 0 ];cliMap( PassCliMap ): targetPeContainer[ 4 ];cliMapRiftTable( PassRiftTable ): targetPeContainer[ 5 ];debugWriteCliMapRiftTable( DebugWriteFileRiftTable ): "cliMap.create.rift", cliMapRiftTable[ 0 ];riftTable0( SumRiftTables ): pesRiftTable[ 0 ], cliMapRiftTable[ 0 ], 0;riftTable1( SumRiftTables ): riftTable0[ 0 ], basicBlockRiftTable[ 0 ], 0;riftTable2( SumRiftTables ): riftTable1[ 0 ], psymsRiftTable[ 0 ], 0;unreducedRiftTable( SumRiftTables ): iniRiftTable[ 0 ], riftTable2[ 0 ], 0;debugWriteUnreducedRiftTable( DebugWriteFileRiftTable ): "unreduced.create.rift", unreducedRiftTable[ 0 ];reducedRiftTable( ReduceRiftTable ): unreducedRiftTable[ 0 ];debugWriteReducedRiftTable( DebugWriteFileRiftTable ): "reduced.create.rift", reducedRiftTable[ 0 ];targetSize( BufferSize ): target[ 0 ];preWriter( BitWriterOpen ):;writeTargetInfo( BitWritePortableExecutableInfo ): preWriter[ 0 ], targetInfo[ 0 ];hintBuffer0( CreateHintBuffer ): sourcePe[ 0 ];usageBuffer0( CreateRiftUsageBuffer ): reducedRiftTable[ 0 ];emptyRelative( CreateEmptyRiftTable ):;riftTransformName( Concat ): "RiftTransform_", codeMnemonic[ 0 ];sourceRiftTransformed( RiftTransformTemplate / riftTransformName[ 0 ] ): flagsInt[ 0 ], sourcePe[ 0 ], hintBuffer0[ 0 ], reducedRiftTable[ 0 ], usageBuffer0[ 0 ], cliMap[ 0 ], targetInfo[ 0 ], 1, emptyRelative[ 0 ];hintBuffer( PassBuffer ): sourceRiftTransformed[ 1 ];usageBuffer( RiftTableMap ): reducedRiftTable[ 0 ], 0, sourceRiftTransformed[ 2 ];debugWriteHintBuffer( DebugWriteFile ): "hint.map", hintBuffer[ 0 ];debugWriteUsageBuffer( DebugWriteFile ): "usage.map", usageBuffer[ 1 ];usedRiftTable( RemoveUnusedRiftEntries ): reducedRiftTable[ 0 ], usageBuffer[ 1 ];debugWriteUsedRiftTable( DebugWriteFileRiftTable ): "used.create.rift", usedRiftTable[ 0 ];setImageBase( SetImageBase ): sourceRiftTransformed[ 0 ], targetImageBase[ 0 ];setGlobalPointer( SetGlobalPointer ): setImageBase[ 0 ], targetGlobalPointer[ 0 ];setTimeStamp( SetTimeStamp ): setGlobalPointer[ 0 ], targetTimeStamp[ 0 ];setCheckSum( SetCheckSum ): setTimeStamp[ 0 ], 0; writeRiftTable( BitWriteRiftTable ): writeTargetInfo[ 0 ], usedRiftTable[ 0 ];writeCliMap( BitWriteCliMap ): writeRiftTable[ 0 ], cliMap[ 0 ];preBuffer( BitWriterClose ): writeCliMap[ 0 ];transformedSource( PortableExecutableToBuffer ): setCheckSum[ 0 ];compressionRiftTable0( MultiplyRiftTables ): sourceOffsetToRva[ 0 ], usedRiftTable[ 0 ];debugWriteCompression0( DebugWriteFileRiftTable ): "compression0.create.rift", compressionRiftTable0[ 0 ];compressionRiftTable1( MultiplyRiftTables ): compressionRiftTable0[ 0 ], targetRvaToOffset[ 0 ];debugWriteCompression1( DebugWriteFileRiftTable ): "compression1.create.rift", compressionRiftTable1[ 0 ];compressionRiftTable2( ReverseRiftTable ): compressionRiftTable1[ 0 ], 0; debugWriteCompression2( DebugWriteFileRiftTable ): "compression2.create.rift", compressionRiftTable2[ 0 ];cliMapCompressionRiftTable( CompressionRiftTableFromCliMap ): sourceCliMetadata[ 0 ], targetCliMetadata[ 0 ], cliMap[ 0 ], transformedSource[ 0 ];debugWriteCliMapCompressionRiftTable( DebugWriteFileRiftTable ): "cliMapCompression.create.rift", cliMapCompressionRiftTable[ 0 ];compressionRiftTable3( SumRiftTables ): compressionRiftTable2[ 0 ], cliMapCompressionRiftTable[ 0 ], 1;debugWriteCompression3( DebugWriteFileRiftTable ): "compression3.create.rift", compressionRiftTable3[ 0 ];output: transformedSource[ 0 ], preBuffer[ 0 ], compressionRiftTable3[ 0 ];
code( InputSharedInt ): input[ 0 ];flags( GetBits ): input[ 1 ];options( InputSharedIniReader ): input[ 2 ];output( PassBuffer ): input[ 3 ];
code( InputSharedInt ): input[ 0 ];flags( GetBits ): input[ 1 ];options( InputSharedIniReader ): input[ 2 ];pe( PortableExecutableFromBuffer ): input[ 3 ], 1;clearBinding( UnbindPortableExecutable ): pe[ 0 ];clearLocks( SmashLockPrefixesI386 ): clearBinding[ 0 ];clearRelocations( PassPe / flags[ 5 ] ? "PassPe" : "ClearRelocations" ): clearLocks[ 0 ];clearImageBase( SetImageBase ): clearRelocations[ 0 ], 0;clearTimeStamp( SetTimeStamp ): clearImageBase[ 0 ], 0; clearCheckSum( SetCheckSum ): clearTimeStamp[ 0 ], 0;output( PortableExecutableToBuffer ): clearCheckSum[ 0 ];
code( InputSharedInt ): input[ 0 ];flags( GetBits ): input[ 1 ];options( InputSharedIniReader ): input[ 2 ];pe( PortableExecutableFromBuffer ): input[ 3 ], 1;clearBinding( UnbindPortableExecutable ): pe[ 0 ];clearRelocations( PassPe / flags[ 5 ] ? "PassPe" : "ClearRelocations" ): clearBinding[ 0 ];clearImageBase( SetImageBase ): clearRelocations[ 0 ], 0;clearTimeStamp( SetTimeStamp ): clearImageBase[ 0 ], 0; clearCheckSum( SetCheckSum ): clearTimeStamp[ 0 ], 0;output( PortableExecutableToBuffer ): clearCheckSum[ 0 ];
code( InputSharedInt ): input[ 0 ];flags( InputSharedInt ): input[ 1 ];sourceBuffer( InputExclusiveBuffer ): input[ 2 ];targetBuffer( InputExclusiveBuffer ): input[ 3 ];sourceIni( InputSharedIniReader ): input[ 4 ];targetIni( InputSharedIniReader ): input[ 5 ];patchIni( InputSharedIniReader ): input[ 6 ];targetInfo( CreateEmptyPortableExecutableInfo ):;cliMap( CreateEmptyCliMap ):;cliMapRiftTable( CreateEmptyRiftTable ):;pesRiftTable( CreateEmptyRiftTable ):;basicBlockRiftTable( CreateEmptyRiftTable ):;psymsRiftTable( CreateEmptyRiftTable ):;output: targetInfo[ 0 ], pesRiftTable[ 0 ], basicBlockRiftTable[ 0 ], psymsRiftTable[ 0 ], cliMap[ 0 ], cliMapRiftTable[ 0 ];
code( InputSharedInt ): input[ 0 ];flags( InputSharedInt ): input[ 1 ];sourceBuffer( InputExclusiveBuffer ): input[ 2 ];targetBuffer( InputExclusiveBuffer ): input[ 3 ];sourceIni( InputSharedIniReader ): input[ 4 ];targetIni( InputSharedIniReader ): input[ 5 ];patchIni( InputSharedIniReader ): input[ 6 ];targetInfo( CreateEmptyPortableExecutableInfoCli4 ):;cliMap( CreateEmptyCli4Map ):;cliMapRiftTable( CreateEmptyRiftTable ):;pesRiftTable( CreateEmptyRiftTable ):;basicBlockRiftTable( CreateEmptyRiftTable ):;psymsRiftTable( CreateEmptyRiftTable ):;output: targetInfo[ 0 ], pesRiftTable[ 0 ], basicBlockRiftTable[ 0 ], psymsRiftTable[ 0 ], cliMap[ 0 ], cliMapRiftTable[ 0 ];
code( InputSharedInt ): input[ 0 ];flagsInt( InputSharedInt ): input[ 1 ];source( PassBuffer ): input[ 2 ];preProcessBuffer( InputSharedBuffer ): input[ 3 ];targetSize( InputSharedInt ): input[ 4 ];riftTable( CreateEmptyRiftTable ):;compressionRiftTable( CreateEmptyRiftTable ):;output: source[ 0 ], compressionRiftTable[ 0 ];
code( InputSharedInt ): input[ 0 ];targetCode( InputSharedInt ): input[ 1 ];flagsInt( InputSharedInt): input[ 2 ];source( PassBuffer ): input[ 3 ];target( InputSharedBuffer ): input[ 4 ];sourceIni( PassIniReader ): input[ 5 ];targetIni( PassIniReader ): input[ 6 ];patchIni( PassIniReader ): input[ 7 ];compressionRiftTable( CreateEmptyRiftTable ):;output: source[ 0 ], "", compressionRiftTable[ 0 ];
CompanyName
CompareInts
CompositeFormat
CompressionRiftTableFromCli4Map
CompressionRiftTableFromCliMap
Concat
Constant
ControlTraceW
CopyBitReader
CopyBuffer
CopyBufferList
CopyCliMap
CopyCliMetadata
CopyCompositeFormat
CopyIniReader
CopyInt
CopyPe
CopyPortableExecutableInfo
CopyRiftTable
CreateBasicBlockRiftTable
CreateBuffer
CreateCodeFlagsPatch
CreateCompressionRiftTable
CreateDefaultCompositeFormat
CreateDeltaA
CreateDeltaB
CreateDeltaW
CreateEmptyBufferList
CreateEmptyCli4Map
CreateEmptyCli4Metadata
CreateEmptyCliMap
CreateEmptyCliMetadata
CreateEmptyPortableExecutableInfo
CreateEmptyPortableExecutableInfoCli4
CreateEmptyRiftTable
CreateFileA
CreateFileW
CreateHintBuffer
CreateOptimalCompositeFormat
CreatePatch
CreatePayload
CreatePreProcessSource_AMD64
CreatePreProcessSource_CLI4_AMD64
CreatePreProcessSource_CLI4_ARM
CreatePreProcessSource_CLI4_ARM64
CreatePreProcessSource_CLI4_I386
CreatePreProcessSource_I386
CreatePreProcessSource_IA64
CreatePreProcessSource_RAW
CreatePreProcessSourcePe
CreatePreProcessSourcePeCli4
CreatePreProcessTarget
CreatePseudoLzxPatch
CreateReversePatch
CreateRiftUsageBuffer
CryptAcquireContextA
CryptCreateHash
CryptDestroyHash
CryptGetHashParam
CryptHashData
CryptReleaseContext
CustomAttribute
CustomAttributeType
D$ +D$(
D$ 0e
D$ 9\$
D$ PQ
D$ PS
D$ PV
D$ Qj
D$ t"
D$$)D$,
D$$+T$4
D$(;D$,
D$(;D$\
D$(u2
D$,;D$0u
D$,PR
D$<Q@
D$<SWP
D$0;\$0
D$0+F
D$0PQ
D$0u[
D$49|$ 
D$4PW
D$4WP
D$8;D$
D$8;D$<
D$8;D$<u
D$8;D$0uG
D$8PRh
D$8PWh
D$8Q@
D$8t/
D$TPQ
D$XPW
D7\_^[]
DebugWriteFile
DebugWriteFileCompositeFormat
DebugWriteFilePe
DebugWriteFileRiftTable
DeclSecurity
Decompress
DeleteCriticalSection
DeltaFree
DeltaNormalizeProvidedB
DestroyEmptyBufferList
DetermineFileType
DisableThreadLibraryCalls
DSVWj
e#qvj
Ehttp://crl.microsoft.com/pki/crl/products/MicRooCerAut_2010-06-23.crl0Z
Ehttp://www.microsoft.com/pkiops/certs/MicWinProPCA2011_2011-10-19.crt0
Em'F'
emptyRiftTable( CreateEmptyRiftTable ):;riftTable0( RiftTableFromHeaders ): input[ 0 ], emptyRiftTable[ 0 ], input[ 1 ], input[ 2 ], input[ 3 ];debugWriteRiftTable0( DebugWriteFileRiftTable ): "pes0.create.rift", riftTable0[ 0 ];riftTable1( RiftTableFromImports ): input[ 0 ], riftTable0[ 0 ], input[ 1 ], input[ 2 ], input[ 3 ];debugWriteRiftTable1( DebugWriteFileRiftTable ): "pes1.create.rift", riftTable1[ 0 ];riftTable2( RiftTableFromExports ): input[ 0 ], riftTable1[ 0 ], input[ 1 ], input[ 2 ], input[ 3 ];debugWriteRiftTable2( DebugWriteFileRiftTable ): "pes2.create.rift", riftTable2[ 0 ];riftTable3( RiftTableFromResources ): input[ 0 ], riftTable2[ 0 ], input[ 1 ], input[ 2 ], input[ 3 ];debugWriteRiftTable3( DebugWriteFileRiftTable ): "pes3.create.rift", riftTable3[ 0 ];riftTable4( RiftTableFromPdatas ): input[ 0 ], riftTable3[ 0 ], input[ 1 ], input[ 2 ], input[ 3 ];debugWriteRiftTable4( DebugWriteFileRiftTable ): "pes4.create.rift", riftTable4[ 0 ];output: riftTable4[ 0 ];
ENCLog
ENCMap
EnterCriticalSection
Event
EventMap
EventPtr
ExportedType
ExtendBuffer
ExtractCli4Metadata
ExtractCliMetadata
ExtractImageOffsetToRva
ExtractRvaToImageOffset
F(_^]
f9A w(
f9G v
f9G vLk
f9J vl
f9p v
f9s v
F9t$ 
F9w(w
f9X v@
fg:SM
Field
FieldLayout
FieldMarshal
FieldPtr
FieldRVA
FileDescription
fileName( InputSharedBuffer ): input[ 0 ];buffer( InputSharedBuffer ): input[ 1 ];
fileName( InputSharedBuffer ): input[ 0 ];compositeFormat( InputSharedCompositeFormat ): input[ 1 ];
fileName( InputSharedBuffer ): input[ 0 ];pe( InputSharedPe ): input[ 1 ]; 
fileName( InputSharedBuffer ): input[ 0 ];riftTable( InputSharedRiftTable ): input[ 1 ];
fileTypeSet( CopyInt ): input[ 0 ];flags( CopyInt ): input[ 1 ];options( IniReaderFromBuffer ): input[ 2 ];source( PassBuffer ): input[ 3 ];code( DetermineFileType ): fileTypeSet[ 0 ], source[ 0 ];codeMnemonic( GetFileTypeMnemonic ): code[ 0 ];normalizeCodeSourceName( Concat ): "NormalizeCodeSource_", codeMnemonic[ 0 ];normalizeCodeSource( NormalizeCodeSource_RAW / normalizeCodeSourceName[ 0 ] ): code[ 0 ], flags[ 0 ], options[ 0 ], source[ 0 ];output: normalizeCodeSource[ 0 ];
FileVersion
FL+F0
flags( GetBits ): input[ 0 ];output( PassBuffer / flags[ 0 ] ? "PostProcessI386E8" : "PassBuffer" ): input[ 1 ];
flags( GetBits ): input[ 0 ];output( PassBuffer / flags[ 0 ] ? "PreProcessI386E8" : "PassBuffer" ): input[ 1 ];
flags( GetBits ): input[ 0 ];riftTransformed0( RiftTransform / flags[ 1 ] ? "MarkNonExe" : "RiftTransform" ): input[ 1 ] , input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ], input[ 7 ], input[ 8 ];debugWriteTransformed0( DebugWriteFilePe ): "riftTransformed0.image", riftTransformed0[ 0 ];riftTransformed1( RiftTransform / flags[ 2 ] ? "RiftTransformImports" : "RiftTransform" ): riftTransformed0[ 0 ], riftTransformed0[ 1 ], input[ 3 ], riftTransformed0[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed0[ 3 ];debugWriteTransformed1( DebugWriteFilePe ): "riftTransformed1.image", riftTransformed1[ 0 ];riftTransformed2( RiftTransform / flags[ 3 ] ? "RiftTransformExports" : "RiftTransform" ): riftTransformed1[ 0 ], riftTransformed1[ 1 ], input[ 3 ], riftTransformed1[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed1[ 3 ];debugWriteTransformed2( DebugWriteFilePe ): "riftTransformed2.image", riftTransformed2[ 0 ];riftTransformed3( RiftTransform / flags[ 4 ] ? "RiftTransformResources" : "RiftTransform" ): riftTransformed2[ 0 ], riftTransformed2[ 1 ], input[ 3 ], riftTransformed2[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed2[ 3 ];debugWriteTransformed3( DebugWriteFilePe ): "riftTransformed3.image", riftTransformed3[ 0 ];riftTransformed4( RiftTransform / flags[ 5 ] ? "RiftTransformRelocationsI386" : "RiftTransform" ): riftTransformed3[ 0 ], riftTransformed3[ 1 ], input[ 3 ], riftTransformed3[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed3[ 3 ];debugWriteTransformed4( DebugWriteFilePe ): "riftTransformed4.image", riftTransformed4[ 0 ];riftTransformed6( RiftTransform / flags[ 14 ] ? "RiftTransformCliDisasm" : "RiftTransform" ): riftTransformed4[ 0 ], riftTransformed4[ 1 ], input[ 3 ], riftTransformed4[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed4[ 3 ];debugWriteTransformed6( DebugWriteFilePe ): "riftTransformed6.image", riftTransformed6[ 0 ];riftTransformed7( RiftTransform / flags[ 15 ] ? "RiftTransformCliMetadata" : "RiftTransform" ) : riftTransformed6[ 0 ], riftTransformed6[ 1 ], input[ 3 ], riftTransformed6[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed6[ 3 ];debugWriteTransformed7( DebugWriteFilePe ): "riftTransformed7.image", riftTransformed7[ 0 ];smashed( PassPe / flags[ 6 ] ?  "SmashLockPrefixesI386" : "PassPe" ): riftTransformed7[ 0 ];debugWriteSmashed( DebugWriteFilePe ): "smashed.image", smashed[ 0 ];riftTransformed8( RiftTransform / flags[ 7 ] ? "RiftTransformRelativeJmpsI386" : "RiftTransform" ): smashed[ 0 ], riftTransformed7[ 1 ], input[ 3 ], riftTransformed7[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed7[ 3 ];debugWriteTransformed8( DebugWriteFilePe ): "riftTransformed8.image", riftTransformed8[ 0 ];riftTransformed9( RiftTransform / flags[ 8 ] ? "RiftTransformRelativeCallsI386" : "RiftTransform" ): riftTransformed8[ 0 ], riftTransformed8[ 1 ], input[ 3 ], riftTransformed8[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed8[ 3 ];debugWriteTransformed9( DebugWriteFilePe ): "riftTransformed9.image", riftTransformed9[ 0 ];output: riftTransformed9[ 0 ], riftTransformed9[ 1 ], riftTransformed9[ 2 ], riftTransformed9[ 3 ];
flags( GetBits ): input[ 0 ];riftTransformed0( RiftTransform / flags[ 1 ] ? "MarkNonExe" : "RiftTransform" ): input[ 1 ], input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ], input[ 7 ], input[ 8 ];riftTransformed1( RiftTransform / flags[ 2 ] ? "RiftTransformImports" : "RiftTransform" ): riftTransformed0[ 0 ], riftTransformed0[ 1 ], input[ 3 ], riftTransformed0[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed0[ 3 ];riftTransformed2( RiftTransform / flags[ 3 ] ? "RiftTransformExports" : "RiftTransform" ): riftTransformed1[ 0 ], riftTransformed1[ 1 ], input[ 3 ], riftTransformed1[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed1[ 3 ];riftTransformed3( RiftTransform / flags[ 4 ] ? "RiftTransformResources" : "RiftTransform" ): riftTransformed2[ 0 ], riftTransformed2[ 1 ], input[ 3 ], riftTransformed2[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed2[ 3 ];riftTransformed4( RiftTransform / flags[ 5 ] ? "RiftTransformRelocations" : "RiftTransform" ): riftTransformed3[ 0 ], riftTransformed3[ 1 ], input[ 3 ], riftTransformed3[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed3[ 3 ];riftTransformed6( RiftTransform / flags[ 14 ] ? "RiftTransformCliDisasm" : "RiftTransform" ): riftTransformed4[ 0 ], riftTransformed4[ 1 ], input[ 3 ], riftTransformed4[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed4[ 3 ];riftTransformed7( RiftTransform / flags[ 15 ] ? "RiftTransformCliMetadata" : "RiftTransform" ) : riftTransformed6[ 0 ], riftTransformed6[ 1 ], input[ 3 ], riftTransformed6[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed6[ 3 ];riftTransformed8( RiftTransform / flags[ 11 ] ? "RiftTransformDisasmIa64" : "RiftTransform" ): riftTransformed7[ 0 ], riftTransformed7[ 1 ], input[ 3 ], riftTransformed7[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed7[ 3 ];riftTransformed9( RiftTransform / flags[ 12 ] ? "RiftTransformPdataIa64" : "RiftTransform" ): riftTransformed8[ 0 ], riftTransformed8[ 1 ], input[ 3 ], riftTransformed8[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed8[ 3 ];output: riftTransformed9[ 0 ], riftTransformed9[ 1 ], riftTransformed9[ 2 ], riftTransformed9[ 3 ];
flags( GetBits ): input[ 0 ];riftTransformed0( RiftTransform / flags[ 1 ] ? "MarkNonExe" : "RiftTransform" ): input[ 1 ], input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ], input[ 7 ], input[ 8 ];riftTransformed1( RiftTransform / flags[ 2 ] ? "RiftTransformImports" : "RiftTransform" ): riftTransformed0[ 0 ], riftTransformed0[ 1 ], input[ 3 ], riftTransformed0[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed0[ 3 ];riftTransformed2( RiftTransform / flags[ 3 ] ? "RiftTransformExports" : "RiftTransform" ): riftTransformed1[ 0 ], riftTransformed1[ 1 ], input[ 3 ], riftTransformed1[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed1[ 3 ];riftTransformed3( RiftTransform / flags[ 4 ] ? "RiftTransformResources" : "RiftTransform" ): riftTransformed2[ 0 ], riftTransformed2[ 1 ], input[ 3 ], riftTransformed2[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed2[ 3 ];riftTransformed4( RiftTransform / flags[ 5 ] ? "RiftTransformRelocations" : "RiftTransform" ): riftTransformed3[ 0 ], riftTransformed3[ 1 ], input[ 3 ], riftTransformed3[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed3[ 3 ];riftTransformed6( RiftTransform / flags[ 14 ] ? "RiftTransformCliDisasm" : "RiftTransform" ): riftTransformed4[ 0 ], riftTransformed4[ 1 ], input[ 3 ], riftTransformed4[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed4[ 3 ];riftTransformed7( RiftTransform / flags[ 15 ] ? "RiftTransformCliMetadata" : "RiftTransform" ) : riftTransformed6[ 0 ], riftTransformed6[ 1 ], input[ 3 ], riftTransformed6[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed6[ 3 ];riftTransformed8( RiftTransform / flags[ 9 ] ? "RiftTransformDisasmAmd64" : "RiftTransform" ): riftTransformed7[ 0 ], riftTransformed7[ 1 ], input[ 3 ], riftTransformed7[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed7[ 3 ];riftTransformed9( RiftTransform / flags[ 10 ] ? "RiftTransformPdataAmd64" : "RiftTransform" ): riftTransformed8[ 0 ], riftTransformed8[ 1 ], input[ 3 ], riftTransformed8[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed8[ 3 ];output: riftTransformed9[ 0 ], riftTransformed9[ 1 ], riftTransformed9[ 2 ], riftTransformed9[ 3 ];
flags( GetBits ): input[ 0 ];riftTransformed0( RiftTransform / flags[ 1 ] ? "MarkNonExeCli4" : "RiftTransform" ): input[ 1 ] , input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ], input[ 7 ], input[ 8 ];debugWriteTransformed0( DebugWriteFilePe ): "riftTransformed0.image", riftTransformed0[ 0 ];riftTransformed1( RiftTransform / flags[ 2 ] ? "RiftTransformImports" : "RiftTransform" ): riftTransformed0[ 0 ], riftTransformed0[ 1 ], input[ 3 ], riftTransformed0[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed0[ 3 ];debugWriteTransformed1( DebugWriteFilePe ): "riftTransformed1.image", riftTransformed1[ 0 ];riftTransformed2( RiftTransform / flags[ 3 ] ? "RiftTransformExports" : "RiftTransform" ): riftTransformed1[ 0 ], riftTransformed1[ 1 ], input[ 3 ], riftTransformed1[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed1[ 3 ];debugWriteTransformed2( DebugWriteFilePe ): "riftTransformed2.image", riftTransformed2[ 0 ];riftTransformed3( RiftTransform / flags[ 4 ] ? "RiftTransformResources" : "RiftTransform" ): riftTransformed2[ 0 ], riftTransformed2[ 1 ], input[ 3 ], riftTransformed2[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed2[ 3 ];debugWriteTransformed3( DebugWriteFilePe ): "riftTransformed3.image", riftTransformed3[ 0 ];riftTransformed4( RiftTransform / flags[ 5 ] ? "RiftTransformRelocationsI386" : "RiftTransform" ): riftTransformed3[ 0 ], riftTransformed3[ 1 ], input[ 3 ], riftTransformed3[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed3[ 3 ];debugWriteTransformed4( DebugWriteFilePe ): "riftTransformed4.image", riftTransformed4[ 0 ];riftTransformed6( RiftTransform / flags[ 21 ] ? "RiftTransformCli4Disasm" : "RiftTransform" ): riftTransformed4[ 0 ], riftTransformed4[ 1 ], input[ 3 ], riftTransformed4[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed4[ 3 ];debugWriteTransformed6( DebugWriteFilePe ): "riftTransformed6.image", riftTransformed6[ 0 ];riftTransformed7( RiftTransform / flags[ 22 ] ? "RiftTransformCli4Metadata" : "RiftTransform" ) : riftTransformed6[ 0 ], riftTransformed6[ 1 ], input[ 3 ], riftTransformed6[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed6[ 3 ];debugWriteTransformed7( DebugWriteFilePe ): "riftTransformed7.image", riftTransformed7[ 0 ];smashed( PassPe / flags[ 6 ] ?  "SmashLockPrefixesI386" : "PassPe" ): riftTransformed7[ 0 ];debugWriteSmashed( DebugWriteFilePe ): "smashed.image", smashed[ 0 ];riftTransformed8( RiftTransform / flags[ 7 ] ? "RiftTransformRelativeJmpsI386" : "RiftTransform" ): smashed[ 0 ], riftTransformed7[ 1 ], input[ 3 ], riftTransformed7[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed7[ 3 ];debugWriteTransformed8( DebugWriteFilePe ): "riftTransformed8.image", riftTransformed8[ 0 ];riftTransformed9( RiftTransform / flags[ 8 ] ? "RiftTransformRelativeCallsI386" : "RiftTransform" ): riftTransformed8[ 0 ], riftTransformed8[ 1 ], input[ 3 ], riftTransformed8[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed8[ 3 ];debugWriteTransformed9( DebugWriteFilePe ): "riftTransformed9.image", riftTransformed9[ 0 ];output: riftTransformed9[ 0 ], riftTransformed9[ 1 ], riftTransformed9[ 2 ], riftTransformed9[ 3 ];
flags( GetBits ): input[ 0 ];riftTransformed0( RiftTransform / flags[ 1 ] ? "MarkNonExeCli4" : "RiftTransform" ): input[ 1 ], input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ], input[ 7 ], input[ 8 ];riftTransformed1( RiftTransform / flags[ 2 ] ? "RiftTransformImports" : "RiftTransform" ): riftTransformed0[ 0 ], riftTransformed0[ 1 ], input[ 3 ], riftTransformed0[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed0[ 3 ];riftTransformed2( RiftTransform / flags[ 3 ] ? "RiftTransformExports" : "RiftTransform" ): riftTransformed1[ 0 ], riftTransformed1[ 1 ], input[ 3 ], riftTransformed1[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed1[ 3 ];riftTransformed3( RiftTransform / flags[ 4 ] ? "RiftTransformResources" : "RiftTransform" ): riftTransformed2[ 0 ], riftTransformed2[ 1 ], input[ 3 ], riftTransformed2[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed2[ 3 ];riftTransformed4( RiftTransform / flags[ 5 ] ? "RiftTransformRelocations" : "RiftTransform" ): riftTransformed3[ 0 ], riftTransformed3[ 1 ], input[ 3 ], riftTransformed3[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed3[ 3 ];riftTransformed6( RiftTransform / flags[ 21 ] ? "RiftTransformCli4Disasm" : "RiftTransform" ): riftTransformed4[ 0 ], riftTransformed4[ 1 ], input[ 3 ], riftTransformed4[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed4[ 3 ];riftTransformed7( RiftTransform / flags[ 22 ] ? "RiftTransformCli4Metadata" : "RiftTransform" ) : riftTransformed6[ 0 ], riftTransformed6[ 1 ], input[ 3 ], riftTransformed6[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed6[ 3 ];riftTransformed8( RiftTransform / flags[ 19 ] ? "RiftTransformDisasmARM" : "RiftTransform" ): riftTransformed7[ 0 ], riftTransformed7[ 1 ], input[ 3 ], riftTransformed7[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed7[ 3 ];riftTransformed9( RiftTransform / flags[ 20 ] ? "RiftTransformPdataARM" : "RiftTransform" ): riftTransformed8[ 0 ], riftTransformed8[ 1 ], input[ 3 ], riftTransformed8[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed8[ 3 ];output: riftTransformed9[ 0 ], riftTransformed9[ 1 ], riftTransformed9[ 2 ], riftTransformed9[ 3 ];
flags( GetBits ): input[ 0 ];riftTransformed0( RiftTransform / flags[ 1 ] ? "MarkNonExeCli4" : "RiftTransform" ): input[ 1 ], input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ], input[ 7 ], input[ 8 ];riftTransformed1( RiftTransform / flags[ 2 ] ? "RiftTransformImports" : "RiftTransform" ): riftTransformed0[ 0 ], riftTransformed0[ 1 ], input[ 3 ], riftTransformed0[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed0[ 3 ];riftTransformed2( RiftTransform / flags[ 3 ] ? "RiftTransformExports" : "RiftTransform" ): riftTransformed1[ 0 ], riftTransformed1[ 1 ], input[ 3 ], riftTransformed1[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed1[ 3 ];riftTransformed3( RiftTransform / flags[ 4 ] ? "RiftTransformResources" : "RiftTransform" ): riftTransformed2[ 0 ], riftTransformed2[ 1 ], input[ 3 ], riftTransformed2[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed2[ 3 ];riftTransformed4( RiftTransform / flags[ 5 ] ? "RiftTransformRelocations" : "RiftTransform" ): riftTransformed3[ 0 ], riftTransformed3[ 1 ], input[ 3 ], riftTransformed3[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed3[ 3 ];riftTransformed6( RiftTransform / flags[ 21 ] ? "RiftTransformCli4Disasm" : "RiftTransform" ): riftTransformed4[ 0 ], riftTransformed4[ 1 ], input[ 3 ], riftTransformed4[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed4[ 3 ];riftTransformed7( RiftTransform / flags[ 22 ] ? "RiftTransformCli4Metadata" : "RiftTransform" ) : riftTransformed6[ 0 ], riftTransformed6[ 1 ], input[ 3 ], riftTransformed6[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed6[ 3 ];riftTransformed8( RiftTransform / flags[ 23 ] ? "RiftTransformDisasmARM64" : "RiftTransform" ): riftTransformed7[ 0 ], riftTransformed7[ 1 ], input[ 3 ], riftTransformed7[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed7[ 3 ];riftTransformed9( RiftTransform / flags[ 24 ] ? "RiftTransformPdataARM64" : "RiftTransform" ): riftTransformed8[ 0 ], riftTransformed8[ 1 ], input[ 3 ], riftTransformed8[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed8[ 3 ];output: riftTransformed9[ 0 ], riftTransformed9[ 1 ], riftTransformed9[ 2 ], riftTransformed9[ 3 ];
flags( GetBits ): input[ 0 ];riftTransformed0( RiftTransform / flags[ 1 ] ? "MarkNonExeCli4" : "RiftTransform" ): input[ 1 ], input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ], input[ 7 ], input[ 8 ];riftTransformed1( RiftTransform / flags[ 2 ] ? "RiftTransformImports" : "RiftTransform" ): riftTransformed0[ 0 ], riftTransformed0[ 1 ], input[ 3 ], riftTransformed0[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed0[ 3 ];riftTransformed2( RiftTransform / flags[ 3 ] ? "RiftTransformExports" : "RiftTransform" ): riftTransformed1[ 0 ], riftTransformed1[ 1 ], input[ 3 ], riftTransformed1[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed1[ 3 ];riftTransformed3( RiftTransform / flags[ 4 ] ? "RiftTransformResources" : "RiftTransform" ): riftTransformed2[ 0 ], riftTransformed2[ 1 ], input[ 3 ], riftTransformed2[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed2[ 3 ];riftTransformed4( RiftTransform / flags[ 5 ] ? "RiftTransformRelocations" : "RiftTransform" ): riftTransformed3[ 0 ], riftTransformed3[ 1 ], input[ 3 ], riftTransformed3[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed3[ 3 ];riftTransformed6( RiftTransform / flags[ 21 ] ? "RiftTransformCli4Disasm" : "RiftTransform" ): riftTransformed4[ 0 ], riftTransformed4[ 1 ], input[ 3 ], riftTransformed4[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed4[ 3 ];riftTransformed7( RiftTransform / flags[ 22 ] ? "RiftTransformCli4Metadata" : "RiftTransform" ) : riftTransformed6[ 0 ], riftTransformed6[ 1 ], input[ 3 ], riftTransformed6[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed6[ 3 ];riftTransformed8( RiftTransform / flags[ 9 ] ? "RiftTransformDisasmAmd64" : "RiftTransform" ): riftTransformed7[ 0 ], riftTransformed7[ 1 ], input[ 3 ], riftTransformed7[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed7[ 3 ];riftTransformed9( RiftTransform / flags[ 10 ] ? "RiftTransformPdataAmd64" : "RiftTransform" ): riftTransformed8[ 0 ], riftTransformed8[ 1 ], input[ 3 ], riftTransformed8[ 2 ], input[ 5 ], input[ 6 ], input[ 7 ], riftTransformed8[ 3 ];output: riftTransformed9[ 0 ], riftTransformed9[ 1 ], riftTransformed9[ 2 ], riftTransformed9[ 3 ];
flagsInt( InputSharedInt ): input[ 0 ];output( RiftTransform ): input[ 1 ], input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ], input[ 7 ], input[ 8 ];
FreeLibrary
full( CopyBuffer ): input[ 0 ];asciiPatchSignature( TToAscii ): "PA30";asciiPatchSignatureSize( BufferSize ): asciiPatchSignature[ 0 ];signature( Unconcat ): full[ 0 ], asciiPatchSignatureSize[ 0 ];checkSignature( CheckBuffersIdentity ): signature[ 0 ], asciiPatchSignature[ 0 ], 0x044601;intFixedBuffer( IntToFixedBuffer ): 0;intFixedBufferSize( BufferSize ): intFixedBuffer[ 0 ];fileTimeBuffer( Unconcat ): signature[ 1 ], intFixedBufferSize[ 0 ];fileTime( IntFromFixedBuffer ): fileTimeBuffer[ 0 ];bitReader( BitReaderOpen ): fileTimeBuffer[ 1 ];version( BitReadInt ): bitReader[ 0 ];code( BitReadInt ): version[ 0 ];flagsInt( BitReadInt ): code[ 0 ];targetSize( BitReadInt ): flagsInt[ 0 ];hashAlgId( BitReadInt ): targetSize[ 0 ];hash( BitReadBuffer ): hashAlgId[ 0 ];output: hash[ 0 ], version[ 1 ], code[ 1 ], flagsInt[ 1 ], targetSize[ 1 ], fileTime[ 0 ], hashAlgId[ 1 ], hash[ 1 ];
G(_^]
G3Mc,
G8f9H 
G8f9H vTV
G8Ff9p w
G9|$(
GenericParam
GenericParamConstraint
GetBits
GetCheckSum
GetCurrentProcess
GetCurrentProcessId
GetCurrentThreadId
GetDeltaInfoA
GetDeltaInfoB
GetDeltaInfoW
GetDeltaSignatureA
GetDeltaSignatureB
GetDeltaSignatureW
GetFileSize
GetFileTime
GetFileTypeMnemonic
GetGlobalPointer
GetImageBase
GetLastError
GetPortableExecutableInfo
GetPortableExecutableInfoCli4
GetProcAddress
GetProcessHeap
GetSystemTime
GetSystemTimeAsFileTime
GetTimeStamp
GetTraceEnableFlags
GetTraceEnableLevel
GetTraceLoggerHandle
GlobalPointer
GuidStreamOffset
GuidStreamSize
H$+H 
HasConstant
HasCustomAttribute
HasDeclSecurity
HasFieldMarshal
HasSemantic
HeapAlloc
HeapFree
HeapReAlloc
HEX( 
hPRSMj 
I;knm
i_>iQJ
ImageBase
Implementation
ImplMap
IniReaderFromBuffer
InitializeCriticalSection
InitializeSListHead
input
InputExclusiveBitReader
InputExclusiveBitWriter
InputExclusiveBuffer
InputExclusiveBufferList
InputExclusiveCliMap
InputExclusiveCliMetadata
InputExclusiveCompositeFormat
InputExclusiveIniReader
InputExclusiveInt
InputExclusivePe
InputExclusivePortableExecutableInfo
InputExclusiveRiftTable
InputSharedBitReader
InputSharedBitWriter
InputSharedBuffer
InputSharedBufferList
InputSharedCliMap
InputSharedCliMetadata
InputSharedCompositeFormat
InputSharedIniReader
InputSharedInt
InputSharedPe
InputSharedPortableExecutableInfo
InputSharedRiftTable
InterfaceImpl
InternalName
IntFromFixedBuffer
IntToFixedBuffer
IsDebuggerPresent
IsProcessorFeaturePresent
J>f;O
j8.9_9
jKh06
jXYj@3
K$WPWV
kRY +
l#bK$AJ
L$ +K
L$ Bj
L$ tG
L$$^3
L$$9L$
L$$f;
L$$QWR
L$|_^[3
L$<^3
L3Du+;
LeaveCriticalSection
LegalCopyright
LoadLibraryExA
LongBlobStream
LongGuidStream
LongStringsStream
M0K0I
ManifestResource
MarkNonExe
MarkNonExeCli4
MemberForwarded
MemberRef
MemberRefParent
memcmp
memcpy
memmove
memset
Method
MethodDefOrRef
MethodImpl
MethodPtr
MethodSemantics
MethodSpec
Microsoft
Microsoft America Operations1&0$
Microsoft Corporation
Microsoft Corporation1
Microsoft Corporation1%0#
Microsoft Corporation1&0$
Microsoft Corporation1.0,
Microsoft Corporation1200
Microsoft Patch Engine
Microsoft Time-Stamp PCA 2010
Microsoft Time-Stamp PCA 20100
Microsoft Time-Stamp Service
Microsoft Time-Stamp Service0
Microsoft Windows0
MinBuffer
Module
ModuleRef
msdelta.dll
msdelta.pdb
mspatcha.dll
MultiplyRiftTables
N0L0J
NestedClass
Nhttp://www.microsoft.com/pkiops/crl/Microsoft%20Time-Stamp%20PCA%202010(1).crl0l
NL+N0
NormalizeCodeSource_AMD64
NormalizeCodeSource_CLI4_AMD64
NormalizeCodeSource_CLI4_ARM
NormalizeCodeSource_CLI4_ARM64
NormalizeCodeSource_CLI4_I386
NormalizeCodeSource_I386
NormalizeCodeSource_IA64
NormalizeCodeSource_RAW
NormalizeSource
O0M0K
o2n3S4 5<5
oc  t
oF!+<
OL+O0
OptimalSegments
OriginalFilename
output
OutputBitReader
OutputBitWriter
OutputBuffer
OutputBufferList
OutputCompositeFormat
OutputIniReader
OutputInt
OutputPe
OutputPortableExecutableInfo
OutputRiftTable
Param
ParamPtr
PassBitReader
PassBitWriter
PassBuffer
PassBufferList
PassCliMap
PassCliMetadata
PassCompositeFormat
PassIniReader
PassInt
PassPe
PassPortableExecutableInfo
PassRiftTable
pe( PassPe ): input[ 0 ];hintMap( PassBuffer ): input[ 1 ];riftTable( InputSharedRiftTable ): input[ 2 ];riftUsage( PassBuffer ): input[ 3 ];cliMap( InputSharedCliMap ): input[ 4 ];targetInfo( InputSharedPortableExecutableInfo ): input[ 5 ];transformFlag( InputSharedInt ): input[ 6 ];relative( PassRiftTable ): input[ 7 ];output: pe[ 0 ], hintMap[ 0 ], riftUsage[ 0 ], relative[ 0 ];
Phttp://www.microsoft.com/pkiops/certs/Microsoft%20Time-Stamp%20PCA%202010(1).crt0
PortableExecutableFromBuffer
PortableExecutableInfo
PortableExecutableInfoFromBuffer
PortableExecutableToBuffer
PostProcessI386E8
PQQSVW
PQSVW
PreProcessI386E8
ProductName
ProductVersion
Property
PropertyMap
PropertyPtr
PseudoLzxCompress
PseudoLzxCompressStatisticsOnly
q\Q17
Qkkbal
QQj Z
QQSVW
QQSVW3
QSVW3
QSVWj
QSVWj=
QueryPerformanceCounter
QVWj0
QVWj8
R!s4Z
r(+Z(
ReadFile
Redmond1
ReduceRiftTable
RegisterTraceGuidsW
RemoveUnusedRiftEntries
ResetCompositeFormatStatistics
ResolutionScope
ReverseRiftTable
RiftTable
RiftTableFromExports
RiftTableFromHeaders
RiftTableFromImports
RiftTableFromIniSection
RiftTableFromPdatas
RiftTableFromPes
RiftTableFromPsyms
RiftTableFromResources
RiftTableMap
RiftTransform
RiftTransform_AMD64
RiftTransform_CLI4_AMD64
RiftTransform_CLI4_ARM
RiftTransform_CLI4_ARM64
RiftTransform_CLI4_I386
RiftTransform_I386
RiftTransform_IA64
RiftTransformCli4Disasm
RiftTransformCli4Metadata
RiftTransformCliDisasm
RiftTransformCliMetadata
RiftTransformDisasmAmd64
RiftTransformDisasmARM
RiftTransformDisasmARM64
RiftTransformDisasmIa64
RiftTransformExports
RiftTransformHeaders
RiftTransformImports
RiftTransformPdataAmd64
RiftTransformPdataARM
RiftTransformPdataARM64
RiftTransformPdataIa64
RiftTransformRelativeCallsI386
RiftTransformRelativeJmpsI386
RiftTransformRelocations
RiftTransformRelocationsI386
RiftTransformResources
RiftTransformTemplate
RSDS5
RvaToImageOffset
Segments
SetCheckSum
SetEndOfFile
SetFilePointer
SetFileTime
SetGlobalPointer
SetImageBase
SetLastError
SetTimeStamp
SetUnhandledExceptionFilter
SkipUnused
SmashLockPrefixesI386
source( PassBuffer ): input[ 0 ];bitReader( BitReaderOpen ): input[ 1 ];target0( PassBuffer ): input[ 2 ];reverseRequested( CopyInt ): input[ 4 ];sourceSize( BufferSize ): source[ 0 ];targetSize( BufferSize ): target0[ 0 ];baseRiftTable( BitReadRiftTable ): bitReader[ 0 ];riftTable( SumRiftTables ): baseRiftTable[ 1 ], input[ 3 ], 0;format( BitReadCompositeFormat ): baseRiftTable[ 0 ];debugWriteCompositeFormat( DebugWriteFileCompositeFormat ): "compositeFormat.apply.txt", format[ 1 ];bufferList0( CreateEmptyBufferList ):;bufferList1( BufferListPushBack ): bufferList0[ 0 ], source[ 0 ];bufferList2( BufferListPushBack ): bufferList1[ 0 ], target0[ 0 ];decompress( Decompress ): format[ 0 ], format[ 1 ], bufferList2[ 0 ], riftTable[ 0 ], sourceSize[ 0 ], targetSize[ 0 ], -1, reverseRequested[ 0 ];target1( BufferListPopBack ): decompress[ 1 ];closeBitReader( BitReaderClose ): decompress[ 0 ], 1;output: target1[ 1 ], decompress[ 2 ];
source( PassBuffer ): input[ 0 ];patch( PassBuffer ): input[ 1 ];split( SplitPatchHeader ): patch[ 0 ];targetBuffer( CreateBuffer ): split[ 4 ];apply( ApplyPayload ): split[ 2 ], split[ 3 ], source[ 0 ], split[ 0 ], targetBuffer[ 0 ], 0;bitReaderClose( BitReaderClose ): apply[ 0 ], 1;hash( CalculateHash ): split[ 6 ], apply[ 1 ];checkHashIdentity( CheckBuffersIdentity ): hash[ 0 ], split[ 7 ], 0x040302;output: apply[ 1 ];
source( PassBuffer ): input[ 0 ];patch( PassBuffer ): input[ 1 ];split( SplitPatchHeader ): patch[ 0 ];targetSize( CopyInt ): split[ 4 ];targetBuffer( CreateBuffer ): split[ 4 ];reverse( ApplyReversalData ): source[ 0 ], split[ 0 ], targetSize[ 0 ];hash( CalculateHash ): split[ 6 ], reverse[ 0 ];checkHashIdentity( CheckBuffersIdentity ): hash[ 0 ], split[ 7 ], 0x040302;output: reverse[ 0 ];
source( PassBuffer ): input[ 0 ];patch( PassBuffer ): input[ 1 ];targetBuffer( PassBuffer ): input[ 2 ];split( SplitPatchHeader ): patch[ 0 ];targetBufferSize( BufferSize ): targetBuffer[ 0 ];checkTargetSize( CheckIntsIdentity ): split[ 4 ], targetBufferSize[ 0 ], 0x040303;apply( ApplyPayload ): split[ 2 ], split[ 3 ], source[ 0 ], split[ 0 ], targetBuffer[ 0 ], 0;bitReaderClose( BitReaderClose ): apply[ 0 ], 1;hash( CalculateHash ): split[ 6 ], apply[ 1 ];checkHashIdentity( CheckBuffersIdentity ): hash[ 0 ], split[ 7 ], 0x040302;output: apply[ 1 ];
source( PassBuffer ): input[ 0 ];sourceCopy( CopyBuffer ): input[ 0 ];patch( PassBuffer ): input[ 1 ];sourceFileTime( CopyInt ): input[ 2 ];hashAlgId( CopyInt ): input[ 3 ];code( CopyInt ): input[ 4 ];split( SplitPatchHeader ): patch[ 0 ];targetBuffer( CreateBuffer ): split[ 4 ];apply( ApplyPayload ): split[ 2 ], split[ 3 ], source[ 0 ], split[ 0 ], targetBuffer[ 0 ], 1;bitReaderClose( BitReaderClose ): apply[ 0 ], 1;hash( CalculateHash ): split[ 6 ], apply[ 1 ];checkHashIdentity( CheckBuffersIdentity ): hash[ 0 ], split[ 7 ], 0x040302;reversePatch( CreateReversePatch ): sourceCopy[ 0 ], apply[ 1 ], apply[ 2 ], sourceFileTime[ 0 ], hashAlgId[ 0 ], code[ 0 ], split[ 2 ], split[ 3 ];output: apply[ 1 ], reversePatch [ 0 ];
sourceSize( BufferSize ): input[ 0 ];targetSize( BufferSize ): input[ 1 ];fullBuffer( Concat ): input[ 0 ], input[ 1 ];baseRiftTable( CreateCompressionRiftTable ): fullBuffer[ 0 ], sourceSize[ 0 ], targetSize[ 0 ], input[ 2 ], input[ 3 ], input[ 4 ], input[ 5 ], input[ 6 ];riftTable( SumRiftTables ): baseRiftTable[ 0 ], input[ 6 ], 0;defaultFormat( CreateDefaultCompositeFormat ):;defaultBitWriter( BitWriterOpen ):;writeBaseRiftTableDefault( BitWriteRiftTable ): defaultBitWriter[ 0 ], baseRiftTable[ 0 ];writeDefaultFormat( BitWriteCompositeFormat ): writeBaseRiftTableDefault[ 0 ], defaultFormat[ 0 ];defaultFormatWithStatistics( ResetCompositeFormatStatistics ): defaultFormat[ 0 ], 1;defaultCompress( PseudoLzxCompress ): defaultFormatWithStatistics[ 0 ], fullBuffer[ 0 ], riftTable[ 0 ], sourceSize[ 0 ], targetSize[ 0 ], writeDefaultFormat[ 0 ];defaultBuffer( BitWriterClose ): defaultCompress[ 2 ];optimalFormat( CreateOptimalCompositeFormat ): defaultCompress[ 0 ];optimalBitWriter( BitWriterOpen ):;writeBaseRiftTableOptimal( BitWriteRiftTable ): optimalBitWriter[ 0 ], baseRiftTable[ 0 ];writeOptimalFormat( BitWriteCompositeFormat ): writeBaseRiftTableOptimal[ 0 ], optimalFormat[ 1 ];defaultBitReader( BitReaderOpen ): defaultBuffer[ 0 ];copyBaseRiftTable( BitReadRiftTable ): defaultBitReader[ 0 ];copyDefaultFormat( BitReadCompositeFormat ): copyBaseRiftTable[ 0 ];optimalTranslate( TranslateCompression ): copyDefaultFormat[ 0 ], writeOptimalFormat[ 0 ], copyDefaultFormat[ 1 ], optimalFormat[ 1 ], sourceSize[ 0 ], defaultCompress[ 1 ];closeDefaultBitReader( BitReaderClose ): optimalTranslate[ 0 ], 1;optimalBuffer( BitWriterClose ): optimalTranslate[ 1 ];output( MinBuffer ): defaultBuffer[ 0 ], optimalBuffer[ 0 ];
SplitPatchHeader
SplitPortableExecutableInfo
StandAloneSig
StartOffset
StreamHeadersOffset
StreamsNumber
StringFileInfo
StringsStreamOffset
StringsStreamSize
SumRiftTables
sX9F4rS
Symbols
SystemTimeToFileTime
t$ 9\$
T$ 9F
t$ 9p
t$$+T$(
t$(9^
T$<RP
T$0Wh
T$49P$
T$49QX
t,97u(
t@<@u<
t+j Z
t1SVH
Table0x2D
Table0x2E
Table0x2F
Table0x30
Table0x31
Table0x32
Table0x33
Table0x34
Table0x35
Table0x36
Table0x37
Table0x38
Table0x39
Table0x3A
Table0x3B
Table0x3C
Table0x3D
Table0x3E
Table0x3F
TablesStreamOffset
TablesStreamSize
TargetRealPeContainer
TargetRealPeContainerCli4
TargetStubPeContainer
TargetStubPeContainerCli4
TerminateProcess
TestApplyPatchToFileByBuffers
Thales TSS ESN:DD8C-E337-2FAE1%0#
TimeStamp
TlP0X
TraceEvent
TranslateCompression
Translation
tT9D$8vN
TToAscii
TToUnicode
TypeDef
TypeDefOrRef
TypeOrMethodDef
TypeRef
TypeSpec
tYSVj)
u(F;u
u)9Q4u$9QPu
u,9Y$tT
u/9w(
u/9Y,tW
u/9Y<tW
u/9Y4tW
u/9YDtG
u{;|$
U0S0Q
u3PhT%
u6jdY
u8jdY
uA95$
ub9Q u]9Q$uX9Q(uS9Q,uN9Q0uI9Q4uD9Q8u?9Q<u:9Q@u59QDu08QHu+8QIu&8QJu!9QPu
uD9C8
UnbindPortableExecutable
Unconcat
UnhandledExceptionFilter
UnicodeToAscii
UnicodeToT
Unknown exception
UnregisterTraceGuids
UsStreamOffset
UsStreamSize
uWPhX%
V;P(w#
VarFileInfo
vector too long
version( CopyInt ): input[ 0 ];code( CopyInt ): input[ 1 ];targetCode( CopyInt ): input[ 2 ];flagsInt( CopyInt ): input[ 3 ];source( PassBuffer ): input[ 4 ];target( PassBuffer ): input[ 5 ];sourceIni( PassIniReader ): input[ 6 ];targetIni( PassIniReader ): input[ 7 ];patchIni( PassIniReader ): input[ 8 ];fileTime( CopyInt ): input[ 9 ];hashAlgId( CopyInt ): input[ 10 ];asciiPatchSignature( TToAscii ): "PA30";fileTimeBuffer( IntToFixedBuffer ): fileTime[ 0 ];hash( CalculateHash ): hashAlgId[ 0 ], target[ 0 ];header( Concat ): asciiPatchSignature[ 0 ], fileTimeBuffer[ 0 ];bitWriter( BitWriterOpen ):;writeVersion( BitWriteInt ): bitWriter[ 0 ], version[ 0 ];writeCode( BitWriteInt ): writeVersion[ 0 ], code[ 0 ];targetSize( BufferSize ): target[ 0 ];writeFlagsInt( BitWriteInt ): writeCode[ 0 ], flagsInt[ 0 ];writeTargetSize( BitWriteInt ): writeFlagsInt[ 0 ], targetSize[ 0 ]; writeHashAlgId( BitWriteInt ): writeTargetSize[ 0 ], hashAlgId[ 0 ];writeHash( BitWriteBuffer ): writeHashAlgId[ 0 ], hash[ 0 ];create( CreatePayload ): code[ 0 ], targetCode[ 0 ], flagsInt[ 0 ], writeHash[ 0 ], source[ 0 ], target[ 0 ], sourceIni[ 0 ], targetIni[ 0 ], patchIni[ 0 ];created( BitWriterClose ): create[ 0 ];patch( Concat ): header[ 0 ], created[ 0 ];apply( ApplyPatch ): source[ 0 ], patch[ 0 ];testApply( CheckBuffersIdentity ): target[ 0 ], apply[ 0 ], 0x041B01;output: patch[ 0 ];
version( CopyInt ): input[ 0 ];hashAlgId( CopyInt ): input[ 1 ];source( PassBuffer ): input[ 2 ];flags( CopyInt ): 0;options( PassBuffer ): "";normalized( NormalizeSource ): version[ 0 ], flags[ 0 ], options[ 0 ], source[ 0 ];hash( CalculateHash ): hashAlgId[ 0 ], normalized[ 0 ];output: hash[ 0 ];
VS_VERSION_INFO
VVhl%
W,_^[
W93t3
Washington1
Wj!hD
Wj!hd*
Wj!ht.
Wj"h<'
Wj$hX-
Wj'hT>
wn>Jj
wPj@XP
wrap( ApplyPreProcessSourcePe ):;
wrap( ApplyPreProcessSourcePeCli4 ):;
wrap( AsciiToUnicode ):;
wrap( CopyBuffer ):;
wrap( CreatePreProcessSourcePe ):;
wrap( CreatePreProcessSourcePeCli4 ):;
wrap( NormalizeCodeSource_AMD64 ):;
wrap( NormalizeCodeSource_I386 ):;
wrap( UnicodeToAscii ):;
WriteFile
WWPSR
X[_^]
X0V0T
x4~8A
xSu$W
Y__^[
z, rK3
z, s(
Z9SDs
