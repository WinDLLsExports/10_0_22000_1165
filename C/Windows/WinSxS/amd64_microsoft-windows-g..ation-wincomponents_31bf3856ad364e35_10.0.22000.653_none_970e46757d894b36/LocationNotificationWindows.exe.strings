 A^_^
 A_A^_
 A_A^A]A\_
 H3E H3E
 Microsoft Corporation. All rights reserved.
 Operating System
 Windows
!((result == WAIT_OBJECT_0) || (result == WAIT_TIMEOUT))
!(wil::verify_bool(dwMessage == 0x00000000 || dwMessage == 0x00000002 || dwMessage == 0x00000001))
!(wil::verify_bool(KillTimer(_hWnd, ID_TIMER)))
!(wil::verify_bool(PostMessageW(_hWnd, 0x0012, 0, 0)))
!(wil::verify_bool(Shell_NotifyIconW((DWORD)dwMessage, &nidSystrayIcon)))
!This program cannot be run in DOS mode.
%hs!%p: 
%hs(%d) tid(%x) %08X %ws
%hs(%u)\%hs!%p: 
%systemroot%\system32\taskbarcpl.dll
(caller: %p) 
(status == WAIT_TIMEOUT) || (status == WAIT_OBJECT_0) || (status == WAIT_ABANDONED) || (bAlertable && (status == WAIT_IO_COMPLETION))
.?AVbad_alloc@std@@
.?AVbad_array_new_length@std@@
.?AVCAtlException@ATL@@
.?AVexception@std@@
.?AVResultException@wil@@
.?AVtype_info@@
.00cfg
.bss$00
.bss$dk00
.bss$pr00
.bss$zz
.CRT$XCA
.CRT$XCAA
.CRT$XCL
.CRT$XCU
.CRT$XCZ
.CRT$XIA
.CRT$XIAA
.CRT$XIAC
.CRT$XIC
.CRT$XIZ
.CRT$XLA
.CRT$XLZ
.CRT$XPA
.CRT$XPZ
.CRT$XTA
.CRT$XTZ
.data
.data$00
.data$dk00
.data$dk00$brc
.data$r$brc
.data$rs$brc
.gehcont
.gfids
.giats
.idata$2
.idata$3
.idata$4
.idata$5
.idata$6
.pdata
.rdata
.rdata$00
.rdata$00$brc
.rdata$brc
.rdata$r
.rdata$T$brc
.rdata$zETW0
.rdata$zETW1
.rdata$zETW2
.rdata$zETW9
.rdata$zz
.rdata$zzzdbg
.rsrc$01
.rsrc$02
.rtc$IAA
.rtc$IZZ
.rtc$TAA
.rtc$TZZ
.text
.text$di
.text$lp00locationnotificationwindows.exe!20_pri7
.text$mn
.text$mn$00
.text$x
.text$yd
.text$zz
.tls$
.tls$ZZZ
.xdata
.xdata$x
::CloseHandle(h)
::ReleaseMutex(h)
::ReleaseSemaphore(semaphore, 1, &expected)
::ReleaseSemaphore(semaphore, 1, &value)
?_Xlength_error@std@@YAXPEBD@Z
@.data
@.reloc
@.rsrc
@A_A^_
@A_A^A]A\_^]
@SUVWAVH
@SVWH
@USVWATAUAVAWH
@USVWATAVAWH
[%hs(%hs)]
[%hs]
\$ UH
\$ UVWAVAWH
\$ WH
__C_specific_handler
__C_specific_handler_noexcept
__current_exception
__current_exception_context
__CxxFrameHandler3
__CxxFrameHandler4
__std_terminate
_c_exit
_CxxThrowException
_initterm
_initterm_e
_LocationIconStateSubscription
_o___p__commode
_o___std_exception_copy
_o___std_exception_destroy
_o___stdio_common_vsnprintf_s
_o___stdio_common_vswprintf
_o__callnewh
_o__cexit
_o__configthreadlocale
_o__configure_narrow_argv
_o__crt_atexit
_o__errno
_o__exit
_o__get_narrow_winmain_command_line
_o__initialize_narrow_environment
_o__initialize_onexit_table
_o__invalid_parameter_noinfo
_o__invalid_parameter_noinfo_noreturn
_o__purecall
_o__register_onexit_function
_o__seh_filter_exe
_o__set_app_type
_o__set_fmode
_o__set_new_mode
_o__ultoa_s
_o_exit
_o_free
_o_malloc
_o_terminate
_o_wmemcpy_s
_register_thread_local_exe_atexit_callback
`.rdata
`p~BF
{ AVH
|$ AVH
|$ UAVAWH
=L9o<
0 == LoadString(_hInst, IDS_TOOLTIP, nidSystrayIcon.szTip, sizeof(nidSystrayIcon.szTip) / sizeof(WCHAR))
0 == LoadString(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING)
0 == RegisterClassEx(&wcex)
040904B0
0A_A^A]A\_
10.0.22000.1
10.0.22000.1 (WinBuild.160101.0800)
6D;v(t
9\$8|
9|$`t
9HuL3
9i@~.3
A^_^][
A^A]A\_^
A_A^]
A_A^_^]
A_A^A\
A_A^A\[]
A_A^A\_^[]
A_A^A]A\_^[]
A_A^A]A\_^]
ACoInitializeEx(NULL, COINIT_MULTITHREADED)
AcquireSRWLockExclusive
AcquireSRWLockShared
Action
Action to do
ADVAPI32.dll
api-ms-win-core-com-l1-1-0.dll
api-ms-win-core-errorhandling-l1-1-0.dll
api-ms-win-core-heap-l1-1-0.dll
api-ms-win-core-interlocked-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-1.dll
api-ms-win-core-profile-l1-1-0.dll
api-ms-win-core-rtlsupport-l1-1-0.dll
api-ms-win-core-synch-l1-1-0.dll
api-ms-win-core-synch-l1-2-0.dll
api-ms-win-core-sysinfo-l1-1-0.dll
api-ms-win-core-winrt-l1-1-0.dll
api-ms-win-core-winrt-string-l1-1-0.dll
api-ms-win-crt-private-l1-1-0.dll
api-ms-win-crt-runtime-l1-1-0.dll
api-ms-win-crt-string-l1-1-0.dll
api-ms-win-shcore-scaling-l1-1-1.dll
api-ms-win-shcore-scaling-l1-1-2.dll
AppIdentityHelper::GetAppName
AppIdentityHelper::GetAppName(currentClientProcessId, appName)
AppIdentityHelper::GetPackagedAppName
AppUsageCount
bad allocation
bad array new length
CallContext:[%hs] 
CallingCode
CloseHandle
CloseThreadpoolTimer
CNotificationManager::Initialize
CNotificationManager::ShowNotifyIcon
CNotificationManager::ShowNotifyIconHelper
CNotificationManager::TimerEvent
CNotificationManager::UpdateStateMachine
CoCreateInstance
CoInitializeEx
CompanyName
CoSetProxyBlanket
CoUninitialize
Count
CreateEventW
CreateMutexExW
CreateMutexW
CreateSemaphoreExW
CreateThreadpoolTimer
CreateWindowExW
Current state
CustomMessage
D$ E3
D$(E3
D$0fD9 t
D$0L;
D$8E3
D$PE3
D$Pf90t
dataAlloc
DebugBreak
DefWindowProcW
DeleteCriticalSection
DestroyIcon
DestroyMenu
Did not expect event: %ws
Did not expect state: %ws
DispatchMessageW
drivers\mobilepc\location\product\winnotification\appidentityhelper.cpp
drivers\mobilepc\location\product\winnotification\notification.cpp
drivers\mobilepc\location\product\winnotification\notificationmanager.cpp
E_UNEXPECTED
ED$`H
element.As(&package2)
EnterCriticalSection
EnumWindows
en-US
Event That Happened
EventRegister
EventSetInformation
EventUnregister
EventWriteTransfer
Exception
ExpandEnvironmentStrings( L"%systemroot%\\system32\\taskbarcpl.dll", wszResourceDll, ARRAYSIZE(wszResourceDll)) == 0
ExpandEnvironmentStringsW
expected != 0
expectedFailure || (::GetLastError() != ERROR_TOO_MANY_POSTS)
fA9,Qu
FAILED(queryResult) && (queryResult != HRESULT_FROM_NT(STATUS_BUFFER_TOO_SMALL))
FailFast
FailureLogReport
FailureLogReport_Aggregate
fD9<Gu
fD93t
FileDescription
Filename
FileVersion
FindResourceExW
FormatMessageW
FreeLibrary
Function
GenuD
GetCurrentProcess
GetCurrentProcessId
GetCurrentThreadId
GetCursorPos
GetDpiForShellUIComponent
GetLastError
GetLastError() == ERROR_ALREADY_EXISTS
GetMessageW
GetModuleFileNameA
GetModuleHandleExW
GetModuleHandleW
GetPackagedAppName(appName, packageFullName)
GetPackageFamilyName
GetPackageFamilyName(hProcess.get(), &cchFamilyName, packageFullName)
GetProcAddress
GetProcessHeap
GetStartupInfoW
GetSubMenu
GetSystemMetricsForDpi
GetSystemTimeAsFileTime
GetValueFromSemaphore(semaphoreHigh.get(), &countHigh)
GetValueFromSemaphore(semaphoreLow.get(), &countLow)
GetWindow
GetWindowLongPtrW
GetWindowLongW
GetWindowThreadProcessId
H9O(uAH
H9wHsKH
HcD$4H
HcFXH
HcL$0H
HeapAlloc
HeapDestroy
HeapFree
HeapReAlloc
HeapSize
hModule.get()
IconTaskbarCreated
IconUpdatingStateMachine
InitializeCriticalSection
InitializeCriticalSectionAndSpinCount
InitializeSListHead
InitializeSRWLock
InitInstance
InitInstance(hInstance, notificationManger)
InternalGetWindowText
InternalName
IsDebuggerPresent
IsImmersiveProcess
IsProcessorFeaturePresent
IsWindowVisible
kernel32.dll
KERNEL32.dll
kernelbase.dll
KillTimer
KillTimer(_hWnd, ID_TIMER) == 0
L$ SWH
L$@E3
L$@H3
L$`H3
L$0H3
L$0I+
L$pH3
L$XE3
L$XH+
LeaveCriticalSection
LegalCopyright
LoadCursorW
LoadIconW
LoadImageW
LoadLibraryExW
LoadMenuW
LoadResource
LoadStringW
Local\SM0:%lu:%lu:%hs
LocalFree
Location Notification
LocationHelper::CreateLocationManagerInternalOutOfProc(pFramework.GetAddressOf())
LocationNotification
LOCATIONNOTIFICATION
LOCATIONNOTIFICATION_MUTEX
LocationNotificationWindows.exe
LocationNotificationWindows.pdb
LockResource
LogHr
LogNt
M H1E
m_semaphore.create(static_cast<LONG>(lowPart), static_cast<LONG>((lowPart > 0) ? lowPart : 1), localName)
m_semaphoreHigh.create(static_cast<LONG>(highPart), static_cast<LONG>((highPart > 0) ? highPart : 1), localName)
MakeAndInitialize(name, wistd::move(mutex), data)
MaxEntriesFlushed
MaxEntriesStored
memcmp
memcpy
memmove
memset
Microsoft
Microsoft Corporation
Microsoft.Geolocation.Service
Microsoft.Geolocation.Service.PII
Microsoft.Geolocation.Triage
Microsoft.Windows.TlgAggregateInternal
MinEntriesFlushed
Msg:[%ws] 
msvcp_win.dll
Not showing the icon
NotificationState::IconShowingTimerDone
NotificationState::IconShowingTimerShouldDelete
NotificationState::IconShowingTimerShouldNotDelete
NotificationState::LocationUsageStopped
NotificationState::NotStarted
NotificationStateAction::DoNothing
NotificationStateAction::HideIcon
NotificationStateAction::ModifyIcon
NotificationStateAction::ShowIcon
NotificationStateEvent::AddIcon
NotificationStateEvent::DeleteIcon
NotificationStateEvent::TaskbarCreated
NotificationStateEvent::Timer
NotificationStateEvent::UpdateIcon
ntdll.dll
ntelA
NtQueryWnfStateData
nullptr == (_hMenu = LoadMenu(_hInst, MAKEINTRESOURCE(IDR_CONTEXTMENU)))
nullptr == (hWnd = CreateWindow( MAINWINDOW_CLASSNAME, szTitle, WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, nullptr, nullptr, hInstance, &notificationManger))
nullptr == (nidSystrayIcon.hIcon = SHLoadNativeIconSize( hModule.get(), MAKEINTRESOURCE(IDI_GEOLOCATION_WHITE), SM_CXSMICON, SM_CYSMICON, dpiTrayWindow))
nullptr == (wcex.hCursor = LoadCursor(nullptr, IDC_ARROW))
nullptr == (wcex.hIcon = LoadIcon(hModule.get(), MAKEINTRESOURCE(IDI_GEOLOCATION_WHITE)))
nullptr == (wcex.hIconSm = LoadIcon(hModule.get(), MAKEINTRESOURCE(IDI_GEOLOCATION_WHITE)))
nullptr == hMutex.m_h
NumAllocationFailures
NumBucketLimitReached
NumFlushes
NumLargeEventFailures
onecore\internal\sdk\inc\wil\opensource\wil\resource.h
onecore\internal\sdk\inc\wil\Resource.h
OpenProcess
OpenSemaphoreW
Original state
OriginalFilename
OutputDebugStringW
packageManager->FindPackagesByUserSecurityIdPackageFamilyName(nullptr, HStringReference(packageFullName).Get(), &packageInfoCollection)
page=SettingsPagePrivacyLocation
PartA_PrivTags
pCYp_
pFramework->GetLocationClientInfo(&appLocationUsageCount, &currentClientProcessId)
PostMessageW
PostQuitMessage
ProductName
ProductVersion
Provider
q0R^G'
QueryFullProcessImageNameW
QueryPerformanceCounter
RaiseException
RaiseFailFastException
RegisterClassExW
RegisterWindowMessageW
ReleaseMutex
ReleaseSemaphore
ReleaseSRWLockExclusive
ReleaseSRWLockShared
ResetEvent
result
result != WAIT_OBJECT_0
result == WAIT_FAILED
ReturnHr
ReturnNt
RoActivateInstance
RtlCaptureContext
RtlDisownModuleHeapAllocation
RtlDllShutdownInProgress
RtlLookupFunctionEntry
RtlNtStatusToDosErrorNoTeb
RtlSubscribeWnfStateChangeNotification
RtlUnsubscribeWnfNotificationWaitForCompletion
RtlVirtualUnwind
semaphoreHigh
semaphoreValue.CreateFromPointer(name, dataAlloc.get())
SemaphoreValue::TryGetPointer(name, &pointer)
SetEvent
SetForegroundWindow
SetLastError
SetProcessDpiAwareness
SetProcessDpiAwareness(PROCESS_SYSTEM_DPI_AWARE)
SetThreadpoolTimer
SetTimer
SetTimer(_hWnd, ID_TIMER, TIMER_MS, nullptr) == 0
SetUnhandledExceptionFilter
SetWindowLongPtrW
Shell_NotifyIconW
SHELL32.dll
SHLWAPI.dll
Showing the icon
ShowNotifyIconHelper
SizeofResource
SleepConditionVariableCS
stateDataSize == sizeof(*stateData)
string too long
StringFileInfo
subscriptionStateT.get()
t"@8=
T$ E3
t$ UWAVH
t$ WH
t,@8-
TaskbarCreated
TerminateProcess
TlgAggregateSummary
TotalEntriesFlushed
TrackPopupMenuEx
TranslateMessage
Translation
TryAcquireSRWLockExclusive
TryGetValue(name, &value)
TryGetValueInternal(name, (sizeof(T) > sizeof(unsigned long)), &value64, retrieved)
tx@8=G
u0HcH<H
UnhandledExceptionFilter
Unknown exception
UnregisterClassA
UnregisterClassW
Updated state
USATAVAWH
USER32.dll
UVWATAUAVAWH
UVWAVAWH
VarFileInfo
VS_VERSION_INFO
VWATAUAVH
VWAVH
WaitForSingleObject
WaitForSingleObjectEx
WaitForThreadpoolTimerCallbacks
WakeAllConditionVariable
WATAUAVAWH
WAVAWH
wil::details::CloseHandle
wil::details::make_wnf_subscription_state
wil::details::ReleaseMutex
wil::details::wnf_subscription_state<int>::InternalCallback
wil::details_abi::ProcessLocalStorageData<struct wil::details_abi::ProcessLocalData>::Acquire
wil::details_abi::ProcessLocalStorageData<struct wil::details_abi::ProcessLocalData>::MakeAndInitialize
wil::details_abi::SemaphoreValue::CreateFromValueInternal
wil::details_abi::SemaphoreValue::GetValueFromSemaphore
wil::details_abi::SemaphoreValue::TryGetPointer
wil::details_abi::SemaphoreValue::TryGetValue
wil::details_abi::SemaphoreValue::TryGetValueInternal
wil::mutex_t<class wil::details::unique_storage<struct wil::details::resource_policy<void *,void (__cdecl*)(void *) noexcept,&void __cdecl wil::details::CloseHandle(void *),struct wistd::integral_constant<unsigned __int64,0>,void *,void *,0,std::nullptr_t> >,struct wil::err_returncode_policy>::acquire
WilError_03
windows.immersivecontrolpanel_cw5n1h2txyewy!microsoft.windows.immersivecontrolpanel
Windows.Management.Deployment.PackageManager
Windows::Foundation::ActivateInstance(HStringReference(RuntimeClass_Windows_Management_Deployment_PackageManager).Get(), &packageManager)
WindowsCreateStringReference
WindowsDeleteString
WindowsGetStringRawBuffer
WinMain
x ATAVAWH
x AVH
x_;k@}ZH
