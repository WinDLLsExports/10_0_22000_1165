    ID: {%.8x-%.4x-%.4x-%.2x%.2x-%.2x%.2x%.2x%.2x%.2x%.2x}
   bootIndicator= %d
   Disk: %p
   Extended Partition Offset: %I64u
   hiddenSectors= %ld, %lX
   Is Partition: %d
   Name = %s, %S
   Offset: %I64u
   partition number: %d
   partitionId= %s, %S
   partitionType= %d
   partitionType= %s, %S
   recognizedPartition= %d
   Size: %I64u
   Type: %s
   Usable: %d
   Volume: %p
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUV
 A^_^
 A^A\_^]
 A_A^_
 A_A^A\
 A_A^A]A\_
 H3E H3E
 Microsoft Corporation. All rights reserved.
 Operating System
 Windows
!\$8H
!9Y(u
!t$0H
!t$xH
!This program cannot be run in DOS mode.
$9^lu
(A^_^[
(D$@f
(D$`f
(D$pf
(D8d$Gt!A
(t$@I
(t$PI
)D$ fH
)D$@fH
)D$@H
)D$`fH
)D$0fH
)D$0H9D$ u
)D$pfH
)D$PfH
)D$pfH
)D$PfH
*@8|$\H
.?AVbad_alloc@std@@
.?AVexception@@
.?AVlength_error@std@@
.?AVlogic_error@std@@
.?AVout_of_range@std@@
.00cfg
.CRT$XCA
.CRT$XCU
.CRT$XCZ
.CRT$XIA
.CRT$XIAA
.CRT$XIZ
.data
.data$brc
.data$r$brc
.edata
.gehcont
.gfids
.giats
.idata$2
.idata$3
.idata$4
.idata$5
.idata$6
.pdata
.rdata
.rdata$brc
.rdata$zETW0
.rdata$zETW1
.rdata$zETW2
.rdata$zETW9
.rdata$zzzdbg
.rsrc$01
.rsrc$02
.text
.text$di
.text$mn
.text$mn$00
.text$x
.text$yd
.xdata
.xdata$x
;L$dr
;SOCWM
??_FCRtlList@@QEAAXXZ
??_FCRtlMap@@QEAAXXZ
??0?$CVdsHandleImpl@$0?0@@QEAA@XZ
??0?$CVdsHandleImpl@$0A@@@QEAA@XZ
??0?$CVdsHeapPtr@E@@QEAA@XZ
??0?$CVdsHeapPtr@G@@QEAA@XZ
??0?$CVdsHeapPtr@U_AUCTION_THREAD_PARAMETER@@@@QEAA@XZ
??0?$CVdsHeapPtr@U_DRIVE_LAYOUT_INFORMATION_EX@@@@QEAA@XZ
??0?$CVdsHeapPtr@U_VDS_DRIVE_LAYOUT_INFORMATION_EX@@@@QEAA@XZ
??0?$CVdsPtr@E@@QEAA@XZ
??0?$CVdsPtr@G@@QEAA@XZ
??0?$CVdsPtr@U_AUCTION_THREAD_PARAMETER@@@@QEAA@XZ
??0?$CVdsPtr@U_DRIVE_LAYOUT_INFORMATION_EX@@@@QEAA@XZ
??0?$CVdsPtr@U_VDS_DRIVE_LAYOUT_INFORMATION_EX@@@@QEAA@XZ
??0CPrvEnumObject@@QEAA@XZ
??0CRtlList@@QEAA@P6AXPEAVCRtlEntry@@@Z@Z
??0CRtlMap@@QEAA@KP6AXPEAVCRtlEntry@@@Z1@Z
??0CRtlSharedLock@@QEAA@XZ
??0CVdsAsyncObjectBase@@QEAA@XZ
??0CVdsCallTracer@@QEAA@KPEBD@Z
??0CVdsCriticalSection@@QEAA@PEAU_RTL_CRITICAL_SECTION@@@Z
??0CVdsPnPNotificationBase@@QEAA@XZ
??0CVdsUnlockIt@@QEAA@AEAJ@Z
??0exception@@QEAA@AEBQEBD@Z
??0exception@@QEAA@AEBQEBDH@Z
??0exception@@QEAA@AEBV0@@Z
??1?$CVdsHandleImpl@$0?0@@QEAA@XZ
??1?$CVdsHandleImpl@$0A@@@QEAA@XZ
??1?$CVdsHeapPtr@E@@QEAA@XZ
??1?$CVdsHeapPtr@G@@QEAA@XZ
??1?$CVdsHeapPtr@U_AUCTION_THREAD_PARAMETER@@@@QEAA@XZ
??1?$CVdsHeapPtr@U_DRIVE_LAYOUT_INFORMATION_EX@@@@QEAA@XZ
??1?$CVdsHeapPtr@U_VDS_DRIVE_LAYOUT_INFORMATION_EX@@@@QEAA@XZ
??1?$CVdsPtr@E@@QEAA@XZ
??1?$CVdsPtr@G@@QEAA@XZ
??1?$CVdsPtr@U_AUCTION_THREAD_PARAMETER@@@@QEAA@XZ
??1?$CVdsPtr@U_DRIVE_LAYOUT_INFORMATION_EX@@@@QEAA@XZ
??1?$CVdsPtr@U_VDS_DRIVE_LAYOUT_INFORMATION_EX@@@@QEAA@XZ
??1CPrvEnumObject@@QEAA@XZ
??1CRtlList@@QEAA@XZ
??1CRtlMap@@UEAA@XZ
??1CRtlSharedLock@@QEAA@XZ
??1CVdsAsyncObjectBase@@QEAA@XZ
??1CVdsCallTracer@@QEAA@XZ
??1CVdsCriticalSection@@QEAA@XZ
??1CVdsPnPNotificationBase@@QEAA@XZ
??1CVdsUnlockIt@@QEAA@XZ
??1exception@@UEAA@XZ
??1type_info@@UEAA@XZ
??3@YAXPEAX@Z
??4?$CVdsHandleImpl@$0A@@@QEAAPEAXPEAX@Z
??4?$CVdsHeapPtr@E@@QEAAPEAEPEAE@Z
??4?$CVdsHeapPtr@G@@QEAAPEAGPEAG@Z
??4?$CVdsHeapPtr@U_AUCTION_THREAD_PARAMETER@@@@QEAAPEAU_AUCTION_THREAD_PARAMETER@@PEAU1@@Z
??4?$CVdsHeapPtr@U_VDS_DRIVE_LAYOUT_INFORMATION_EX@@@@QEAAPEAU_VDS_DRIVE_LAYOUT_INFORMATION_EX@@PEAU1@@Z
??4CRtlList@@QEAAAEAV0@AEAV0@@Z
??8?$CVdsHandleImpl@$0A@@@QEBA_NPEAX@Z
??8?$CVdsPtr@E@@QEBA_NPEAE@Z
??8?$CVdsPtr@G@@QEBA_NPEAG@Z
??8?$CVdsPtr@U_AUCTION_THREAD_PARAMETER@@@@QEBA_NPEAU_AUCTION_THREAD_PARAMETER@@@Z
??9?$CVdsPtr@E@@QEBA_NPEAE@Z
??B?$CVdsHandleImpl@$0?0@@QEAAPEAXXZ
??B?$CVdsPtr@E@@QEBAPEAEXZ
??B?$CVdsPtr@G@@QEBAPEAGXZ
??B?$CVdsPtr@U_AUCTION_THREAD_PARAMETER@@@@QEBAPEAU_AUCTION_THREAD_PARAMETER@@XZ
??B?$CVdsPtr@U_DRIVE_LAYOUT_INFORMATION_EX@@@@QEBAPEAU_DRIVE_LAYOUT_INFORMATION_EX@@XZ
??B?$CVdsPtr@U_VDS_DRIVE_LAYOUT_INFORMATION_EX@@@@QEBAPEAU_VDS_DRIVE_LAYOUT_INFORMATION_EX@@XZ
??C?$CVdsPtr@U_AUCTION_THREAD_PARAMETER@@@@QEBAPEAU_AUCTION_THREAD_PARAMETER@@XZ
??C?$CVdsPtr@U_DRIVE_LAYOUT_INFORMATION_EX@@@@QEBAPEAU_DRIVE_LAYOUT_INFORMATION_EX@@XZ
??C?$CVdsPtr@U_VDS_DRIVE_LAYOUT_INFORMATION_EX@@@@QEBAPEAU_VDS_DRIVE_LAYOUT_INFORMATION_EX@@XZ
??I?$CVdsHandleImpl@$0?0@@QEAAPEAPEAXXZ
??I?$CVdsPtr@U_DRIVE_LAYOUT_INFORMATION_EX@@@@QEAAPEAPEAU_DRIVE_LAYOUT_INFORMATION_EX@@XZ
??I?$CVdsPtr@U_VDS_DRIVE_LAYOUT_INFORMATION_EX@@@@QEAAPEAPEAU_VDS_DRIVE_LAYOUT_INFORMATION_EX@@XZ
?AcquireRead@CRtlSharedLock@@AEAAXXZ
?AcquireWrite@CRtlSharedLock@@AEAAXXZ
?AllowCancel@CVdsAsyncObjectBase@@QEAAXXZ
?Append@CPrvEnumObject@@QEAAJPEAUIUnknown@@@Z
?Attach@?$CVdsPtr@G@@QEAAXPEAG@Z
?Attach@?$CVdsPtr@U_DRIVE_LAYOUT_INFORMATION_EX@@@@QEAAXPEAU_DRIVE_LAYOUT_INFORMATION_EX@@@Z
?Attach@?$CVdsPtr@U_VDS_DRIVE_LAYOUT_INFORMATION_EX@@@@QEAAXPEAU_VDS_DRIVE_LAYOUT_INFORMATION_EX@@@Z
?Begin@CRtlList@@QEAA?AVCRtlListIter@@XZ
?Begin@CRtlMap@@QEAA?AVCRtlMapIter@@XZ
?Clone@CPrvEnumObject@@UEAAJPEAPEAUIEnumVdsObject@@@Z
?Close@?$CVdsHandleImpl@$0?0@@QEAAXXZ
?CurrentThreadIsWriter@CRtlSharedLock@@QEAAHXZ
?Detach@?$CVdsHandleImpl@$0?0@@QEAAPEAXXZ
?Detach@?$CVdsPtr@G@@QEAAPEAGXZ
?Detach@?$CVdsPtr@U_AUCTION_THREAD_PARAMETER@@@@QEAAPEAU_AUCTION_THREAD_PARAMETER@@XZ
?Detach@?$CVdsPtr@U_DRIVE_LAYOUT_INFORMATION_EX@@@@QEAAPEAU_DRIVE_LAYOUT_INFORMATION_EX@@XZ
?Detach@?$CVdsPtr@U_VDS_DRIVE_LAYOUT_INFORMATION_EX@@@@QEAAPEAU_VDS_DRIVE_LAYOUT_INFORMATION_EX@@XZ
?DisallowCancel@CVdsAsyncObjectBase@@QEAAXXZ
?Downgrade@CRtlSharedLock@@AEAAXXZ
?End@CRtlList@@QEAA?AVCRtlListIter@@XZ
?Find@CRtlMap@@QEAAHAEAVCRtlEntry@@PEAV2@@Z
?GetEntry@CRtlListIter@@QEAAPEAVCRtlEntry@@XZ
?GetEntryPointer@CRtlListIter@@QEAAPEAXXZ
?GetOutputType@CVdsAsyncObjectBase@@QEAA?AW4_VDS_ASYNC_OUTPUT_TYPE@@XZ
?Initialize@CVdsAsyncObjectBase@@SAKXZ
?Initialize@CVdsPnPNotificationBase@@QEAAKXZ
?Insert@CRtlMap@@QEAAHAEAVCRtlEntry@@0@Z
?InsertPointer@CRtlList@@QEAAHAEAVCRtlListIter@@PEAX@Z
?InsertTailPointer@CRtlList@@QEAAHPEAX@Z
?InsertUnique@CRtlMap@@QEAAHAEAVCRtlEntry@@0@Z
?IsCancelRequested@CVdsAsyncObjectBase@@QEAAHXZ
?m_ExtraLogging@CVdsTraceSettings@@QEAAHXZ
?m_NoDebuggerLogging@CVdsTraceSettings@@QEAAHXZ
?Next@CPrvEnumObject@@UEAAJKPEAPEAUIUnknown@@PEAK@Z
?Next@CRtlListIter@@QEAAAEAV1@XZ
?Next@CRtlMapIter@@QEAAAEAV1@XZ
?Prev@CRtlListIter@@QEAAAEAV1@XZ
?QueryStatus@CVdsAsyncObjectBase@@UEAAJPEAJPEAK@Z
?Register@CVdsPnPNotificationBase@@QEAAKPEAU_NotificationListeningRequest@@K@Z
?RegisterHandle@CVdsPnPNotificationBase@@QEAAKPEAXPEAPEAX@Z
?Release@CRtlSharedLock@@AEAAXXZ
?Remove@CRtlList@@QEAAXAEAVCRtlListIter@@@Z
?Remove@CRtlMap@@QEAAHAEAVCRtlEntry@@@Z
?RemoveAll@CRtlList@@QEAAXXZ
?RemoveAll@CRtlMap@@QEAAXH@Z
?Reset@CPrvEnumObject@@UEAAJXZ
?SetCompletionStatus@CVdsAsyncObjectBase@@QEAAXJK@Z
?SetOutput@CVdsAsyncObjectBase@@QEAAXU_VDS_ASYNC_OUTPUT@@@Z
?SetOutputType@CVdsAsyncObjectBase@@QEAAXW4_VDS_ASYNC_OUTPUT_TYPE@@@Z
?SetPositionToLast@CPrvEnumObject@@QEAAXXZ
?Signal@CVdsAsyncObjectBase@@QEAAXXZ
?Skip@CPrvEnumObject@@UEAAJK@Z
?terminate@@YAXXZ
?Uninitialize@CVdsAsyncObjectBase@@SAXXZ
?Uninitialize@CVdsPnPNotificationBase@@QEAAXXZ
?Unregister@CVdsPnPNotificationBase@@QEAAXPEAU_NotificationListeningRequest@@@Z
?UnregisterHandle@CVdsPnPNotificationBase@@QEAAXPEAX@Z
?Upgrade@CRtlSharedLock@@AEAAXXZ
?WaitImpl@CVdsAsyncObjectBase@@QEAAJPEAJ@Z
?what@exception@@UEBAPEBDXZ
?ZeroAsyncOut@CVdsAsyncObjectBase@@QEAAXXZ
@.data
@.reloc
@.rsrc
@8|$h@
@A^_^
@A_A\_
@A_A^_
@A_A^A\
@A_A^A]_^
@kon|
@SUVWATAUAVAWH
@UATAUAVAWH
@USVWATAUAVAWH
@USVWATAVAWH
@USVWAVH
\$ E3
\$ UH
\$ UVWATAUAVAWH
\$ UVWAVAWH
\$ UVWH
\$pE3
\\.\MountPointManager
\\?\CdRom%d
\\?\PhysicalDrive%d
\Device\CdRom%lu
\Device\Harddisk%d\Partition%d
\Device\Harddisk%lu\Partition%lu
\Device\Harddisk%lu\Partition1
\DosDevices\%c:
\pagefile.sys
__C_specific_handler
__CxxFrameHandler3
__CxxFrameHandler4
__dllonexit
_amsg_exit
_callnewh
_CxxThrowException
_initterm
_lock
_ltow
_onexit
_purecall
_unlock
_vsnwprintf
_wcsicmp
_XcptFilter
` UAVAWH
`.rdata
`A^_^
`A_A^A\_^[]
`A_A^A]A\_^]
|$ E3
|$ UATAUAVAWH
|$ UAVAWH
|$8E3
>{uMD
>=u_H
>92u@
>fE;/tGL
040904B0
0A\_^
0A^_^
0A__^
0A_A]A\_^
0A_A^_
0A_A^A\
0A_A^A\_]
0A_A^A]A\_
0A_A^A]A\_^]
0x%I64X
10.0.22000.1
10.0.22000.1 (WinBuild.160101.0800)
4.0.0.1
89Y(u
8A^_^[
8FAt.
9_$t@H
9>u?9
9A98uCA9x
9z<--
A^_^[]
A^A\]
A^A\_
A^A]A\_]
A_A\]
A_A^]
A_A^_
A_A^_^]
A_A^A\
A_A^A\_]
A_A^A\_^
A_A^A\_^[]
A_A^A]_]
A_A^A]A\]
A_A^A]A\_
A_A^A]A\_^[]
A_A^A]A\_^]
A_A^A]A\_H
A9~Pu
A9~Tu
A9v|u
A9vxu
AcquireRundownProtection
Adapter Name = %s
AddEventSource
Address = %s
address family not supported
address in use
address not available
address_family_not_supported
address_in_use
address_not_available
advapi32.dll
already connected
already_connected
api-ms-win-core-com-l1-1-0.dll
api-ms-win-core-errorhandling-l1-1-0.dll
api-ms-win-core-file-l1-1-0.dll
api-ms-win-core-handle-l1-1-0.dll
api-ms-win-core-heap-l1-1-0.dll
api-ms-win-core-io-l1-1-0.dll
api-ms-win-core-libraryloader-l1-2-0.dll
API-MS-Win-Core-LocalRegistry-L1-1-0.dll
api-ms-win-core-memory-l1-1-0.dll
api-ms-win-core-processthreads-l1-1-0.dll
api-ms-win-core-profile-l1-1-0.dll
api-ms-win-core-registry-l1-1-0.dll
api-ms-win-core-rtlsupport-l1-1-0.dll
api-ms-win-core-string-l1-1-0.dll
api-ms-win-core-string-l2-1-0.dll
api-ms-win-core-string-obsolete-l1-1-0.dll
api-ms-win-core-synch-l1-1-0.dll
api-ms-win-core-synch-l1-2-0.dll
api-ms-win-core-sysinfo-l1-1-0.dll
api-ms-win-devices-config-l1-1-1.dll
api-ms-win-eventing-provider-l1-1-0.dll
argument list too long
argument out of domain
ATAVAWH
AuctionThread()(Basic Provider)
AuctionThread(Basic Provider): failed to query service: %X
Audio CD
BacksBootVolume
bad address
bad allocation
bad file descriptor
bad message
bad_address
bad_file_descriptor
Basic data partition
BasicDiskOperation
BasicDiskProvider
BB{Qd4
Being Cleaned = %d
BootBackedByWim
BProvider.BasicProvider = s 'BasicProvider Class'
BProvider.BasicProvider.2 = s 'BasicProvider Class'
bprovider.DLL
BPS = %lu
broken pipe
BSP partition
BusType = %lu
CBasicDisk::~CBasicDisk()
CBasicDisk::AssignDriveLetter()
CBasicDisk::AutoPickRegion()
CBasicDisk::AutoPickRegion(), 1
CBasicDisk::AutoPickRegion(), 2
CBasicDisk::CanContinue()
CBasicDisk::CanContinue, 1, hr=%lX
CBasicDisk::CBasicDisk()
CBasicDisk::ChangeAttributes()
CBasicDisk::ChangeAttributes, 1, hr=%lX
CBasicDisk::ChangeGptAttributes()
CBasicDisk::ChangeGptAttributes: DeviceIoControl failed: %X
CBasicDisk::ChangeMbrAttributes()
CBasicDisk::ChangeMbrAttributes, 2, pRegion=%p
CBasicDisk::ChangeMbrAttributes, 3, type=%ld
CBasicDisk::ChangeMbrAttributes, 4, type=%ld
CBasicDisk::ChangeMbrAttributes, 5, hr=%lX
CBasicDisk::ChangeMbrAttributes, 6, error=%ld, name=%S
CBasicDisk::ChangeMbrAttributes, 7, error=%ld, name=%S
CBasicDisk::ChangePartitionType()
CBasicDisk::ChangePartitionType, 10, hr=%lX
CBasicDisk::ChangePartitionType, 11, hr=%lX
CBasicDisk::ChangePartitionType, 12, hr=%lX
CBasicDisk::ChangePartitionType, 13, hr=%lX
CBasicDisk::ChangePartitionType, 14, hr=%lX
CBasicDisk::ChangePartitionType, 15, %lX
CBasicDisk::ChangePartitionType, 2, hr=%lX
CBasicDisk::ChangePartitionType, 3, hr=%lX
CBasicDisk::ChangePartitionType, 3.5, hr=%lX
CBasicDisk::ChangePartitionType, 4, hr=%lX
CBasicDisk::ChangePartitionType, 5
CBasicDisk::ChangePartitionType, 6, hr=%lX
CBasicDisk::ChangePartitionType, 7, hr=%lX
CBasicDisk::ChangePartitionType, 8
CBasicDisk::ChangePartitionType, 9, hr=%lX
CBasicDisk::Clean()
CBasicDisk::Clean, 1, hr=%lX
CBasicDisk::Clean: CreateThread failed: %X
CBasicDisk::CleanDiskThread()
CBasicDisk::CleanDiskThread, 1
CBasicDisk::CleanDiskThread, 10
CBasicDisk::CleanDiskThread, 11, error=%ld
CBasicDisk::CleanDiskThread, 12, error=%ld
CBasicDisk::CleanDiskThread, 13, error=%ld
CBasicDisk::CleanDiskThread, 14, error=%ld
CBasicDisk::CleanDiskThread, 15, %ld
CBasicDisk::CleanDiskThread, 16, error=%ld
CBasicDisk::CleanDiskThread, 1a, error=%ld
CBasicDisk::CleanDiskThread, 2, error=%ld
CBasicDisk::CleanDiskThread, 3, %ld
CBasicDisk::CleanDiskThread, 5, %lX
CBasicDisk::CleanDiskThread, 6, %ld
CBasicDisk::CleanDiskThread, 7, %ld
CBasicDisk::CleanDiskThread, 7a, hr=%lX
CBasicDisk::CleanDiskThread, 8, %ld
CBasicDisk::CleanDiskThread, 9, error=%ld
CBasicDisk::CleanDiskThreadEntry()
CBasicDisk::ClearFlags
CBasicDisk::ClearFlags, 1 Name=%s, Number=%ld, hr=%lX
CBasicDisk::ClearFlags, 2, hr=%lX
CBasicDisk::ClearFlags, 3 Name=%s, Number=%ld, hr=%lX
CBasicDisk::ClearRegionList()
CBasicDisk::ClearRegionList, CORRUPTED regiion list!!!!! 2
CBasicDisk::ContainsOemPartition()
CBasicDisk::ConvertFromGptToMbr()
CBasicDisk::ConvertFromGptToMbr: DeviceIoControl failed: %X
CBasicDisk::ConvertFromMbrToGpt()
CBasicDisk::ConvertFromMbrToGpt: DeviceIoControl failed: %X
CBasicDisk::ConvertStyle()
CBasicDisk::ConvertStyle, 1, hr=%lX
CBasicDisk::CountDataPartition()
CBasicDisk::CountPartition()
CBasicDisk::CountRegion()
CBasicDisk::CreateAndInsertFreeRegion()
CBasicDisk::CreateAndInsertFreeRegion, 1
CBasicDisk::CreateBand()
CBasicDisk::CreateBand, 1, %lX
CBasicDisk::CreateBand, 3, create band failed, hr= %lX
CBasicDisk::CreateExtendedRegion()
CBasicDisk::CreateExtendedRegion, 1
CBasicDisk::CreateGptRegionList()
CBasicDisk::CreateLayoutUsingNewRegionList()
CBasicDisk::CreateLayoutUsingNewRegionList, 1, hr=%lX
CBasicDisk::CreateMbrRegionList()
CBasicDisk::CreateMbrRegionList, 1, hr=%X
CBasicDisk::CreateNewLayoutGpt()
CBasicDisk::CreateNewLayoutGpt, 1, hr=%X
CBasicDisk::CreateNewLayoutMbr()
CBasicDisk::CreateNewLayoutMbr, 1, hr=%X
CBasicDisk::CreateNewLayoutMbr, 2, hr=%X
CBasicDisk::CreateNewLayoutMbr, 2b, hr=%X
CBasicDisk::CreateNewLayoutMbr, 3, hr=%X
CBasicDisk::CreatePartitionEx()
CBasicDisk::CreatePartitionEx_Internal
CBasicDisk::CreatePartitionEx_Internal, 1
CBasicDisk::CreatePartitionEx_Internal, 2
CBasicDisk::CreatePartitionEx_Internal, 3, offset=%I64u, offset=0x%I64Xsize=%I64u, size=0x%I64X
CBasicDisk::CreatePartitionEx_Internal, 4
CBasicDisk::CreatePartitionEx_Internal, 5
CBasicDisk::CreatePartitionEx_Internal, 6, hr=%lX
CBasicDisk::CreatePartitionHelper()
CBasicDisk::CreatePartitionHelper, !!!!!!!!!!!!!, Offset=%I64u, Size=%I64u, DiskNumber=%ld, PartitionNumber=%ld
CBasicDisk::CreatePartitionHelper, .5, hr=%lX
CBasicDisk::CreatePartitionHelper, 1, hr=%lX
CBasicDisk::CreatePartitionHelper, 2
CBasicDisk::CreatePartitionHelper, 2, hr=%lX
CBasicDisk::CreatePartitionHelper, 3
CBasicDisk::CreatePartitionHelper, 3, hr=%lX
CBasicDisk::CreatePartitionHelper, 4, hr=%lX
CBasicDisk::CreatePartitionHelper, 4B
CBasicDisk::CreatePartitionHelper, 5, hr=%lX
CBasicDisk::CreatePartitionHelper, 5a, hr=%lX
CBasicDisk::CreatePartitionHelper, 5b, hr=%lX
CBasicDisk::CreatePartitionHelper, 6a, hr=%lX
CBasicDisk::CreatePartitionHelper, 6b, hr=%lX
CBasicDisk::CreatePartitionHelper, 7, hr=%lX
CBasicDisk::CreatePartitionHelper, 7a, hr=%lX
CBasicDisk::CreatePartitionNotificationHandler()
CBasicDisk::CreatePartitionNotificationHandler, 1, %lX
CBasicDisk::CreatePartitionNotificationHandler, 2, %ld
CBasicDisk::CreatePartitionNotificationHandler, 3, %ld
CBasicDisk::CreatePartitionNotificationHandler, 4, %ld
CBasicDisk::CreatePartitionNotificationHandler, 4.5
CBasicDisk::CreatePartitionNotificationHandler, 5, %lX
CBasicDisk::CreatePartitionNotificationHandler, 6, %lx
CBasicDisk::CreatePartitionNotificationHandlerEntry()
CBasicDisk::CreatePartLayout()
CBasicDisk::CreatePartLayout, 1, hr=%lX, para=%p, pRegion=%p, ppChangedRegion=%p, ppLayout=%p, 
CBasicDisk::CreatePartLayout, 2, hr=%lX
CBasicDisk::CreatePartLayout, 3, hr=%lX
CBasicDisk::CreatePartLayout, 3b, hr=%lX
CBasicDisk::CreatePartLayout, 4, hr=%lX
CBasicDisk::CreatePartLayout, 5, hr=%lX
CBasicDisk::CreatePartLayout, 6, hr=%lX
CBasicDisk::CreatePartLayout, Dump reg 1
CBasicDisk::CreatePartLayout, Dump reg 2
CBasicDisk::CreatePartValidate()
CBasicDisk::CreatePartValidate, 1, para=%p, pAsync=%p
CBasicDisk::CreatePartValidate, 2,
CBasicDisk::CreatePartValidate, 3, hr=%lX
CBasicDisk::CreatePartValidate, 4, hr=%lX
CBasicDisk::CreatePartValidate, 5, hr=%lX
CBasicDisk::CreatePartValidate, 6
CBasicDisk::CreatePartValidate, 7, hr=%lX
CBasicDisk::CreatePartValidate, 8, hr=%lX
CBasicDisk::CreateRegions()
CBasicDisk::CreateRegions, 1, hr=%lX, ullSize=%I64d, para=%p, ppRegion=%p
CBasicDisk::CreateRegions, 2, hr=%lX
CBasicDisk::CreateRegions, 3, hr=%lX
CBasicDisk::CreateRegions, 4, hr=%lX
CBasicDisk::CreateRegions, 5, hr=%lX
CBasicDisk::CreateRegions, 6, hr=%lX
CBasicDisk::CreateRegions, 7, hr=%lX
CBasicDisk::CreateRegions, 8, hr=%lX
CBasicDisk::CreateRegions, 9, hr=%lX
CBasicDisk::CreateVolumeForDevice()
CBasicDisk::CreateVolumeForDevice, 1
CBasicDisk::CreateVolumeForDevice, 2, Name=%S, error=%ld
CBasicDisk::CreateVolumeForDevice, 3, Name=%S, error=%ld
CBasicDisk::CreateVolumeForDevice, 4, Name=%S, error=%ld
CBasicDisk::CreateVolumeForRegion()
CBasicDisk::CreateVolumeForRegion, 0, error=%ld
CBasicDisk::CreateVolumeForRegion, 1
CBasicDisk::CreateVolumeForRegion, 2
CBasicDisk::CreateVolumeForRegion,3
CBasicDisk::CreateVolumeForRegion,4
CBasicDisk::CreateVolumesFromRegions()
CBasicDisk::CreateVolumesFromRegions, 1, error=%ld
CBasicDisk::CreateVolumesFromRegions, 2, error=%ld
CBasicDisk::CreateVolumesFromRegions, 3, error=%ld
CBasicDisk::CreateVolumesFromRegions, 4, error=%ld
CBasicDisk::Delete()
CBasicDisk::DeleteBand()
CBasicDisk::DeleteBand, 2, delete band failed, hr= %lX
CBasicDisk::DeleteBands()
CBasicDisk::DeleteBands, 1, OpenDevice failed, hr=%lX
CBasicDisk::DeleteBands, 2, Enumerate bands failed, hr=%lX
CBasicDisk::DeleteBands, 3, Enumerate bands failed, hr=%lX
CBasicDisk::DeleteBands, 5, Shrinking band failed, hr=%lX
CBasicDisk::DeleteBands, 6, Moving band failed, hr=%lX
CBasicDisk::DeleteBands, 7, Delete band failed, hr=%lX
CBasicDisk::DeleteDriveLetter()
CBasicDisk::DeletePartition()
CBasicDisk::DeletePartitionHelper()
CBasicDisk::DeletePartitionHelper, 1, hrRet=%lX
CBasicDisk::DeletePartitionHelper, 10, hr=%lX
CBasicDisk::DeletePartitionHelper, 11, hr=%lX
CBasicDisk::DeletePartitionHelper, 11b, hr=%lX
CBasicDisk::DeletePartitionHelper, 12, hr=%lX
CBasicDisk::DeletePartitionHelper, 13, hr=%lX
CBasicDisk::DeletePartitionHelper, 1b, hr=%lX
CBasicDisk::DeletePartitionHelper, 2, hr=%lX
CBasicDisk::DeletePartitionHelper, 3, hr=%lX
CBasicDisk::DeletePartitionHelper, 3a, hr=%lX
CBasicDisk::DeletePartitionHelper, 4, hr=%lX
CBasicDisk::DeletePartitionHelper, 5, hr=%lX
CBasicDisk::DeletePartitionHelper, 6, hr=%lX
CBasicDisk::DeletePartitionHelper, 7, hr=%lX
CBasicDisk::DeletePartitionHelper, 7b, hr=%lX
CBasicDisk::DeletePartitionHelper, 8, hr=%lX
CBasicDisk::DeletePartitionHelper, 9, hr=%lX
CBasicDisk::DumpRegion, 1, hr=%lX
CBasicDisk::DumpRegion, 1.1, Invalid GPT INFO
CBasicDisk::DumpRegion, 2, hr=%lX
CBasicDisk::DuplicateRegionList()
CBasicDisk::DuplicateRegionList, 1
CBasicDisk::Eject()
CBasicDisk::Eject, 1: OpenDevice failed: %X
CBasicDisk::Eject, 2: DeviceIoControl failed: %X
CBasicDisk::Eject, 3: DeviceIoControl(IOCTL_STORAGE_EJECT_MEDIA) failed: %X
CBasicDisk::Eject: DeviceIoControl(FSCTL_LOCK_VOLUME) failed: %X
CBasicDisk::ExtendVolumeHelper()
CBasicDisk::ExtendVolumeHelper, 1
CBasicDisk::ExtendVolumeHelper, 10
CBasicDisk::ExtendVolumeHelper, 11, hr=%lX
CBasicDisk::ExtendVolumeHelper, 12
CBasicDisk::ExtendVolumeHelper, 13
CBasicDisk::ExtendVolumeHelper, 14
CBasicDisk::ExtendVolumeHelper, 14.1, hr=%lX
CBasicDisk::ExtendVolumeHelper, 14.2
CBasicDisk::ExtendVolumeHelper, 15, hr=%lX
CBasicDisk::ExtendVolumeHelper, 2
CBasicDisk::ExtendVolumeHelper, 2.1
CBasicDisk::ExtendVolumeHelper, 3
CBasicDisk::ExtendVolumeHelper, 4
CBasicDisk::ExtendVolumeHelper, 4b
CBasicDisk::ExtendVolumeHelper, 5
CBasicDisk::ExtendVolumeHelper, 6
CBasicDisk::ExtendVolumeHelper, 7
CBasicDisk::ExtendVolumeHelper, 8
CBasicDisk::ExtendVolumeHelper, 9
CBasicDisk::FindAndCreateFreeRegions()
CBasicDisk::FindAndCreateFreeRegions, 1
CBasicDisk::FindAndCreateFreeRegions, 2
CBasicDisk::FindAndCreateFreeRegions, 3
CBasicDisk::FindAndCreateFreeRegions, 4
CBasicDisk::FindContainingFreeRegion()
CBasicDisk::FindFreeRegionEx()
CBasicDisk::FindFreeRegionEx, 1, hr=%lX, pullOffset=%p, pullSize=%p, ullSize=%I64d, pulAlign=%p, para=%p, ppRegion=%p
CBasicDisk::FindFreeRegionEx, 10, hr=%lX
CBasicDisk::FindFreeRegionEx, 2, hr=%lX
CBasicDisk::FindFreeRegionEx, 3, hr=%lX
CBasicDisk::FindFreeRegionEx, 4, hr=%lX
CBasicDisk::FindFreeRegionEx, 5, hr=%lX
CBasicDisk::FindFreeRegionEx, 7, hr=%lX
CBasicDisk::FindFreeRegionEx, 8, hr=%lX
CBasicDisk::FindPartitionRegion()
CBasicDisk::FindRegionAndAlign()
CBasicDisk::FindRegionAndAlign, 1, hr=%lX, pullOffset=%p, pullSize=%p
CBasicDisk::FindRegionAndAlign, 2
CBasicDisk::FinishAsyncOperation()
CBasicDisk::FinishAsyncOperation, 1, %lX
CBasicDisk::FinishAsyncOperation, 2
CBasicDisk::FormatPartition()
CBasicDisk::GetDriveLetter()
CBasicDisk::GetExtentType()
CBasicDisk::GetExtraFlagsForVolume()
CBasicDisk::GetExtraFlagsForVolume: DeviceIoControl failed: %X
CBasicDisk::GetExtraFlagsForVolume: m_pDeviceVolume not NULL
CBasicDisk::GetExtraFlagsForVolume: pRegion->pVolume not NULL
CBasicDisk::GetIdentificationData()
CBasicDisk::GetPack()
CBasicDisk::GetPartitionNumber()
CBasicDisk::GetPartitionProperties()
CBasicDisk::GetProperties()
CBasicDisk::GetProperties() (IVdsAdvancedDisk3)
CBasicDisk::GetProperties() (IVdsAdvancedDisk3), line=%ld, hr=%lX
CBasicDisk::GetProperties(), 6
CBasicDisk::GetProperties, 1
CBasicDisk::GetProperties, 10, error=%ld
CBasicDisk::GetProperties, 2
CBasicDisk::GetProperties, 3
CBasicDisk::GetProperties, 4
CBasicDisk::GetProperties, 5
CBasicDisk::GetProperties, 5.5, Disk is not convertible
CBasicDisk::GetProperties, 7, error=%ld, name=%ws
CBasicDisk::GetProperties, 8, error=%ld
CBasicDisk::GetProperties, 8.1, error=%ld
CBasicDisk::GetProperties, 8.2, error=%ld
CBasicDisk::GetProperties, 9, error=%ld
CBasicDisk::GetProperties, DISK HAS CRASHDUMP
CBasicDisk::GetProperties, DISK HAS HIBER FILE
CBasicDisk::GetProperties, DISK HAS PAGEFILE
CBasicDisk::GetProperties2()
CBasicDisk::GetProperties2(), 7
CBasicDisk::GetProperties2, 1
CBasicDisk::GetProperties2, 10, error=%ld
CBasicDisk::GetProperties2, 10.1, error=%ld
CBasicDisk::GetProperties2, 11, error=%ld
CBasicDisk::GetProperties2, 12, error=%ld
CBasicDisk::GetProperties2, 2
CBasicDisk::GetProperties2, 3
CBasicDisk::GetProperties2, 4
CBasicDisk::GetProperties2, 5
CBasicDisk::GetProperties2, 6
CBasicDisk::GetProperties2, 8, error=%ld, name=%ws
CBasicDisk::GetProperties2, 9, error=%ld
CBasicDisk::GetProperties2, DISK HAS CRASHDUMP
CBasicDisk::GetProperties2, DISK HAS HIBER FILE
CBasicDisk::GetProperties2, DISK HAS PAGEFILE
CBasicDisk::GetUniqueId()
CBasicDisk::GetUniqueId(), line=%ld, hr=%lX
CBasicDisk::GetVolumeDriveLetter()
CBasicDisk::GetVolumeId()
CBasicDisk::GetVolumePlexOffsetForRemovable()
CBasicDisk::GetVolumeSizeForRemovable()
CBasicDisk::GrowPartition()
CBasicDisk::GrowPartition(), 1, %lX
CBasicDisk::Initialize()
CBasicDisk::Initialize(), 0, path=%s
CBasicDisk::Initialize(), 20, Disk Number=%ld
CBasicDisk::Initialize, 1, hr=%lX
CBasicDisk::Initialize, 10, error=%ld
CBasicDisk::Initialize, 11, error=%ld
CBasicDisk::Initialize, 12, error=%ld
CBasicDisk::Initialize, 13, error=%ld
CBasicDisk::Initialize, 14, error=%ld
CBasicDisk::Initialize, 15, error=%ld
CBasicDisk::Initialize, 16, error=%ld
CBasicDisk::Initialize, 17, error=%ld
CBasicDisk::Initialize, 18, error=%ld
CBasicDisk::Initialize, 19, error=%ld
CBasicDisk::Initialize, 2, hr=%lX
CBasicDisk::Initialize, 21, error=%ld
CBasicDisk::Initialize, 22, error=%ld
CBasicDisk::Initialize, 23, error=%ld
CBasicDisk::Initialize, 24, error=%ld
CBasicDisk::Initialize, 24.1, error=%ld
CBasicDisk::Initialize, 25, error=%ld
CBasicDisk::Initialize, 25.1, error=%ld
CBasicDisk::Initialize, 25.25, hr=%lX
CBasicDisk::Initialize, 25.5, hr=%lX
CBasicDisk::Initialize, 25.75, hr=%lX
CBasicDisk::Initialize, 26, error=%ld
CBasicDisk::Initialize, 27, error=%ld
CBasicDisk::Initialize, 28, error=%ld
CBasicDisk::Initialize, 3, hr=%lX
CBasicDisk::Initialize, 3.5, error=%ld
CBasicDisk::Initialize, 4, error=%ld
CBasicDisk::Initialize, 5, error=%ld
CBasicDisk::Initialize, 6, error=%ld
CBasicDisk::Initialize, 7, error=%ld
CBasicDisk::Initialize, 8, error=%ld
CBasicDisk::Initialize, 8.5, error=%lX
CBasicDisk::Initialize, 9, error=%ld
CBasicDisk::Initialize, BOOT DISK: %lu
CBasicDisk::Initialize, BOOT FROM DISK:%lu
CBasicDisk::Initialize, DISK current state is READONLY
CBasicDisk::Initialize, DISK HAS CRASHDUMP
CBasicDisk::Initialize, DISK HAS HIBER FILE
CBasicDisk::Initialize, DISK HAS PAGEFILE
CBasicDisk::Initialize, Disk is band capable
CBasicDisk::Initialize, DISK IS READONLY
CBasicDisk::Initialize, DISK NUMBER: %lu
CBasicDisk::Initialize, SYSTEM DISK: %lu
CBasicDisk::InsertInRegionList()
CBasicDisk::IsAudioCD()
CBasicDisk::IsAudioCD: NtQueryVolumeInformationFile failed: %X
CBasicDisk::IsBandCapable()
CBasicDisk::IsBandCapable, 1, storage device is not band capable.
CBasicDisk::IsBandCapable, 2, query capabilites failed, hr=%lX
CBasicDisk::IsBandCapable, 3, query capabilities failed, hr=%lX
CBasicDisk::IsMediaMemoryStick()
CBasicDisk::IsNtfsNotRecommendedDevice()
CBasicDisk::IsOemPartition()
CBasicDisk::IsRegionAVolume()
CBasicDisk::IsRemovable()
CBasicDisk::IsStyleConvertible()
CBasicDisk::IsSuperFloppy()
CBasicDisk::IsSystemPartition()
CBasicDisk::IsSystemPartition: Failed to find outif %S is system volume: %X
CBasicDisk::m_GetSystemDiskNumber
CBasicDisk::m_GetSystemDiskNumber, 2, hr=%lX
CBasicDisk::m_GetSystemDiskNumber, 3, error=%ld
CBasicDisk::m_GetSystemDiskNumber, 4, hr=%lX
CBasicDisk::m_GetSystemDiskNumber, 5, hr=%lX
CBasicDisk::m_GetSystemDiskNumber, 6, hr=%lX
CBasicDisk::MarkVolumeRegions()
CBasicDisk::MarkVolumeRegions, 1, error=%ld
CBasicDisk::MarkVolumeRegions, 2, Volume Name=%S
CBasicDisk::MarkVolumeRegions, 3, Volume Name=%S
CBasicDisk::MarkVolumeRegions, 4, error=%ld, Volume Name=%S
CBasicDisk::MarkVolumeRegions, 5, Volume Name=%S
CBasicDisk::MarkVolumeRegions, 6, error=%ld, Volume Name=%S
CBasicDisk::MarkVolumeRegions, 7, error=%ld, Volume Name=%S
CBasicDisk::MarkVolumeRegions, 8, error=%ld
CBasicDisk::MarkVolumeRegions, 8, error=%ld, Volume Name=%S
CBasicDisk::MarkVolumeRegions, 9, error=%ld, Volume Name=%S
CBasicDisk::OfflineOnlineDisk, 1, disk number=%ld, hr=%lX
CBasicDisk::OfflineOnlineDisk, 2, disk number=%ld, hr=%lX
CBasicDisk::OfflineOnlineDisk, 6, disk number=%ld, hr=%lX
CBasicDisk::OnLayoutChange()
CBasicDisk::OnLayoutChange: failed to create volume object: %X
CBasicDisk::OnMediaChange()
CBasicDisk::OnVolumeArrival()
CBasicDisk::OnVolumeArrival, 1, partition not found.
CBasicDisk::OnVolumeArrival, 2, partition not primary or logical.
CBasicDisk::OnVolumeArrival, 3
CBasicDisk::OnVolumeArrival, NO NOTIFICATION sent.
CBasicDisk::OnVolumeArrival, VOLUME ALREADY INITIALIZED.
CBasicDisk::OnVolumeArrival, VOLUME CREATE FAILED.
CBasicDisk::OnVolumeArrival, VOLUME CREATED.
CBasicDisk::OnVolumeArrival, volume creation NOTIFICATION sent.
CBasicDisk::OnVolumeArrival, volume modification NOTIFICATION sent.
CBasicDisk::OnVolumeRemoval()
CBasicDisk::OnVolumeRemoval, pDbtInterface name=%S pwszDevicePath=%S
CBasicDisk::OnVolumeRemoval, Volume is not removed, open failed with an error other than file not found. Volume Name=%S
CBasicDisk::OnVolumeRemoval, Volume is not removed, open succeeded. Volume Name=%S
CBasicDisk::QueryExtents()
CBasicDisk::QueryExtents, 1, hr=%lX
CBasicDisk::QueryExtents, 2, ERROR CACHE CORRUPTION!!!! hr=%lX
CBasicDisk::QueryFreeExtents()
CBasicDisk::QueryFreeExtents, 1, ppFreeExtentArray=%p, plNumberOfFreeExtents=%p, hr=%lX
CBasicDisk::QueryFreeExtents, 2, QueryExtents(), hr=%lX
CBasicDisk::QueryFreeExtents, 3, No free extents, hr=%lX
CBasicDisk::QueryFreeExtents, 4, CoTaskMemAlloc(), hr=%lX
CBasicDisk::QueryFreeExtents, 5, hr=%1X
CBasicDisk::QueryFreeExtents, 6, hr=%1X
CBasicDisk::QueryFreeExtents, 7, No free aligned extents, hr=%lX
CBasicDisk::QueryMedia()
CBasicDisk::QueryMedia, 1: Open Device Failed: %X
CBasicDisk::QueryMedia, 2: GetDeviceAndMediaType failed: %X
CBasicDisk::QueryMedia, 3: GetMediaGeometry failed: %X
CBasicDisk::QueryPartitions()
CBasicDisk::QueryVolumesHelper, 1
CBasicDisk::QueryVolumesHelper, 2, hr=%lX
CBasicDisk::RemoveVolumeDriveLetter()
CBasicDisk::RemoveVolumeDriveLetter: CreateFile() failed: %X
CBasicDisk::RemoveVolumeDriveLetter: DeviceIoControl() failed: %X
CBasicDisk::ResetBootIndicator()
CBasicDisk::SendDiskNotification()
CBasicDisk::SendFsNotification()
CBasicDisk::SendNewPartitionAndVolumeNotification()
CBasicDisk::SendPartitionAndVolumeNotification()
CBasicDisk::SendPartitionAndVolumeNotification, volume creation NOTIFICATION sent.
CBasicDisk::SendPartitionNotification()
CBasicDisk::SendVolumeModifyNotifications()
CBasicDisk::SendVolumeNotification()
CBasicDisk::SetBandLocation()
CBasicDisk::SetBandLocation, 2, set band location failed, hr= %lX
CBasicDisk::SetClearVolumeFlags()
CBasicDisk::SetClearVolumeFlags, 0
CBasicDisk::SetClearVolumeFlags, 1
CBasicDisk::SetClearVolumeFlags, 2
CBasicDisk::SetClearVolumeFlags, 3, bSet=%ld, hr=%lX
CBasicDisk::SetClearVolumeFlags, 3, pRegion=%p, bIsPartition=%d
CBasicDisk::SetClearVolumeFlags, 4, win32 error=%ld
CBasicDisk::SetClearVolumeFlags, 5, win32 error=%ld
CBasicDisk::SetClearVolumeFlags, 6, win32 error=%ld
CBasicDisk::SetFlags
CBasicDisk::SetFlags, 1 Name=%s, Number=%ld, hr=%lX
CBasicDisk::SetFlags, 3 Name=%s, Number=%ld, hr=%lX
CBasicDisk::SetFlagsInternal
CBasicDisk::SetFlagsInternal, .5, hr=%lX
CBasicDisk::SetFlagsInternal, 1 Name=%s, Number=%ld, hr=%lX
CBasicDisk::SetFlagsInternal, 2 Name=%s, Number=%ld, hr=%lX
CBasicDisk::SetFreeExtentsUsableStatus()
CBasicDisk::SetPartitionNumber()
CBasicDisk::SetupToListen()
CBasicDisk::SetupToListen, 2, bListenNotification=%d
CBasicDisk::SetupToListen, 3, hr=%lX
CBasicDisk::SetupToListen, 4, bListenNotification=%d
CBasicDisk::SetupToListen, 5, bListenNotification=%d
CBasicDisk::SetupToListen, 5a, removing Notification object
CBasicDisk::SetupToListen, 6, hr=%lX
CBasicDisk::SetupToListen, 7, hr=%lX
CBasicDisk::ShrinkVolumeHelper()
CBasicDisk::ShrinkVolumeHelper, 1
CBasicDisk::ShrinkVolumeHelper, 1.1
CBasicDisk::ShrinkVolumeHelper, 2
CBasicDisk::ShrinkVolumeHelper, 3
CBasicDisk::ShrinkVolumeHelper, 4
CBasicDisk::ShrinkVolumeHelper, 5
CBasicDisk::ShrinkVolumeHelper, 6, hr=%lX
CBasicDisk::ShrinkVolumeHelper, 7, hr=%lX
CBasicDisk::ShrinkVolumeHelper, 7.1, hr=%lX
CBasicDisk::ShrinkVolumeHelper, 7.2, hr=%lX
CBasicDisk::ShrinkVolumeHelper, 8, hr=%lX
CBasicDisk::UpdateRegionList()
CBasicDisk::ValidateCall()
CBasicDisk::ValidateCall, 1, hr=%lX
CBasicDisk::ValidateCall, 2, hr=%lX
CBasicDisk::VerifyRegions()
CBasicDisk::VerifyRegions, Dump reg 1
CBasicDisk::VerifyRegions, Dump reg 2
CBasicDisk::VerifyRegions, Dump reg 3
CBasicDisk::VerifyRegions, Dump reg 4
CBasicDisk::WriteLayoutAndUpdateRegionList()
CBasicDisk::ZeroPartitionFirstSector()
CBasicDisk::ZeroPartitionFirstSector: failed to zero sector 0: %X
CBasicPack::~CBasicPack()
CBasicPack::ActivateBandCapability()
CBasicPack::ActivateBandCapability, 1, Device is not band capable or is already activated.
CBasicPack::ActivateBandCapability, 2, band capability activation failed, hr=%lX
CBasicPack::AddDisk()
CBasicPack::AddDisk, 1 hr=%lX
CBasicPack::AddDisk, 10 hr=%lX
CBasicPack::AddDisk, 11 hr=%lX
CBasicPack::AddDisk, 12 hr=%lX
CBasicPack::AddDisk, 13 hr=%lX
CBasicPack::AddDisk, 14 hr=%lX
CBasicPack::AddDisk, 2 error=%ld
CBasicPack::AddDisk, 3 error=%ld
CBasicPack::AddDisk, 4 hr=%lX
CBasicPack::AddDisk, 5 hr=%lX
CBasicPack::AddDisk, 6 hr=%lX
CBasicPack::AddDisk, 7 error=%ld
CBasicPack::AddDisk, 8 hr=%lX
CBasicPack::AddDisk, 9 hr=%lX
CBasicPack::AddDisk, Device activation failed, ignoring
CBasicPack::CBasicPack()
CBasicPack::CreateVolume()
CBasicPack::CreateVolume, 1, hr=%lX
CBasicPack::CreateVolume2()
CBasicPack::CreateVolume2, 1, hr=%X
CBasicPack::CreateVolume2, 10, hr=%X
CBasicPack::CreateVolume2, 11, hr=%X
CBasicPack::CreateVolume2, 2, hr=%X
CBasicPack::CreateVolume2, 3, hr=%X
CBasicPack::CreateVolume2, 4, hr=%X
CBasicPack::CreateVolume2, 5, hr=%X
CBasicPack::CreateVolume2, 7, hr=%X
CBasicPack::CreateVolume2, 8, hr=%X
CBasicPack::CreateVolume2, 9, hr=%X
CBasicPack::DiskRemoved()
CBasicPack::DumpPack
CBasicPack::DumpPack, 2, hr=%lX
CBasicPack::DumpPack, 4, hr=%lX
CBasicPack::DumpPack, 5, hr=%lX
CBasicPack::DumpPack, EMPTY PACK - no disk
CBasicPack::ExportDisks()
CBasicPack::FindDiskByDevicePath()
CBasicPack::FindDiskByNotificationHandle()
CBasicPack::FindDiskByNumber()
CBasicPack::FinishExport()
CBasicPack::FinishImport()
CBasicPack::FinishImport: out of memory (unrecoverable error)
CBasicPack::FinishImport: unrecoverable error: %X
CBasicPack::GetDiskId()
CBasicPack::GetProperties()
CBasicPack::GetProvider()
CBasicPack::GetVolumeId()
CBasicPack::ImportDisks()
CBasicPack::Initialize()
CBasicPack::InternalRelease()
CBasicPack::IsCapableMigrateFrom()
CBasicPack::IsCapableMigrateTo()
CBasicPack::MigrateDisks()
CBasicPack::OnMediaChange()
CBasicPack::PrepareToExport()
CBasicPack::PrepareToExport, 1, hr=%lX
CBasicPack::PrepareToExport, 2, hr=%lX
CBasicPack::PrepareToExport, 3, eDrives with bands can't be dynamic, hr=%lX
CBasicPack::PrepareToImport()
CBasicPack::QueryDisks()
CBasicPack::QueryVolumes()
CBasicPack::Recover()
CBasicPack::RemoveDisk()
CBasicPack::RemoveMissingDisk()
CBasicPack::ReplaceDisk()
CBasicPack::SetDisk()
CBasicProvider::~CBasicProvider
CBasicProvider::AddDiskToMap()
CBasicProvider::AddDiskToMap, 1, line=%ld result=%ld
CBasicProvider::AddObjectToMap()
CBasicProvider::AddPageFileVolumes()
CBasicProvider::AddPageFileVolumes: NtQuerySystemInformation failed: %X
CBasicProvider::AddPageFileVolumes: QueryDosDevice: %X
CBasicProvider::AddVolumeDevicePathToMap()
CBasicProvider::AddVolumeDevicePathToMap, 1, hr=%lX
CBasicProvider::AddVolumeDevicePathToMap, 2, hr=%lX
CBasicProvider::AddVolumeDevicePathToMap, 3, hr=%lX
CBasicProvider::AddVolumeDevicePathToMap, 4, hr=%lX
CBasicProvider::AddVolumeToMap()
CBasicProvider::AddVolumeWithFlag()
CBasicProvider::AuctionThread: failed to claim disk %s: %X
CBasicProvider::CBasicProvider()
CBasicProvider::ClaimDisk()
CBasicProvider::ClaimDisk, 0, disk:%S, Device: %S
CBasicProvider::ClaimDisk, 1, disk:%S, Device: %S
CBasicProvider::ClaimDisk, 3, disk:%S, Device: %S, error=%ld
CBasicProvider::ClaimDisk, 4, disk:%S, Device: %S, hr=%lX
CBasicProvider::ClaimDisk, 5, disk:%S, Device: %S, error=%ld
CBasicProvider::ClaimDisk, 6, disk:%S, Device: %S, hr=%lX
CBasicProvider::CreatePack()
CBasicProvider::CreatePack,1: failed to create pack instance: %lX
CBasicProvider::CreatePack,2: failed to initialize pack: %lX
CBasicProvider::CreatePack,3: out of memory: %lX
CBasicProvider::DiskRemoved()
CBasicProvider::DumpPacks
CBasicProvider::DumpPacks, 1
CBasicProvider::FindDiskByDevicePath()
CBasicProvider::FindFixedDiskByNumber()
CBasicProvider::FindRemoveVolumeDevicePathInMap()
CBasicProvider::GetBootVolumeName()
CBasicProvider::GetDiskId()
CBasicProvider::GetDiskObject()
CBasicProvider::GetDiskObject, 1
CBasicProvider::GetDiskObject, 2: Object not found returning VDS_E_OBJECT_NOT_FOUND
CBasicProvider::GetExtraVolumeFlags()
CBasicProvider::GetObject()
CBasicProvider::GetObject, 1
CBasicProvider::GetObject, 2
CBasicProvider::GetObject, 3: Object not found returning VDS_E_OBJECT_NOT_FOUND
CBasicProvider::GetObject, 4 Object is type %x, and we were looking for type %x
CBasicProvider::GetObjectIUnknown()
CBasicProvider::GetProperties()
CBasicProvider::GetSystemVolumeName()
CBasicProvider::GetUninstallInfo
CBasicProvider::GetUninstallInfo, 1, hr=%lX, pDiskIdArray=%p, ulDiskCount=%lu, pUninstallInfo=%p
CBasicProvider::GetUninstallInfo, 2, hr=%lX, object type=%ld
CBasicProvider::GetUninstallInfo, 3, hr=%lX
CBasicProvider::GetUninstallInfo, 4, hr=%lX, object type=%ld
CBasicProvider::GetUninstallInfo, 6, hr=%lX, object type=%ld
CBasicProvider::GetUninstallInfo, 7, hr=%lX
CBasicProvider::GetVolumeId()
CBasicProvider::IfsGetDeviceInformation()
CBasicProvider::IfsGetDeviceInformation, 1, indicates this is not a memory stick: %ld.
CBasicProvider::IfsGetDeviceInformationByHandle()
CBasicProvider::IfsGetDeviceInformationByHandle: QueryDeviceInformationByHandle failed: %X.
CBasicProvider::InitializeVolumesInformation()
CBasicProvider::InitiateSecondAuction()
CBasicProvider::InitiateSecondAuction, 1, hr=%lX, pwszDevicePath=%s, pLayout=%p, pDisk=%p
CBasicProvider::IsSystemVolume()
CBasicProvider::m_FillVolumeIdBuffer
CBasicProvider::m_FillVolumeIdBuffer, 1, hr=%lX, pInputDiskObj=%p, ppCurrent=%p
CBasicProvider::m_FillVolumeIdBuffer, 2, hr=%lX
CBasicProvider::OfflineOnlineDisk
CBasicProvider::OnDiskLayoutChange()
CBasicProvider::OnDiskLayoutChange, 1, (%s): %X
CBasicProvider::OnDiskLayoutChange, 1, hr=%lX, path=%s
CBasicProvider::OnDiskLayoutChange, 2, (%s): %ld
CBasicProvider::OnDiskLayoutChange, 3, (%s): %ld
CBasicProvider::OnDiskLayoutChange, 4, (%s): %lX
CBasicProvider::OnLoad()
CBasicProvider::OnLoad: failed to get callback interfaces from the service: %X
CBasicProvider::OnLoad: failed to load fmifs.dll: (%p,%p) %X
CBasicProvider::OnMediaChange()
CBasicProvider::OnUnload
CBasicProvider::OnVolumeArrival()
CBasicProvider::OnVolumeRemoval()
CBasicProvider::QueryClaim()
CBasicProvider::QueryClaim, 1, hr=%lX, pwszDevicePath=%s, pLayout=%p
CBasicProvider::QueryClaim, 2, pwszDevicePath=%s
CBasicProvider::QueryClaim, 3, hr=%lX, pwszDevicePath=%s
CBasicProvider::QueryClaim, 4, hr=%lX, pwszDevicePath=%s
CBasicProvider::QueryClaim, 5, hr=%lX, pwszDevicePath=%s
CBasicProvider::QueryClaim, 6, hr=%lX, pwszDevicePath=%s
CBasicProvider::QueryClaim, 7, hr=%lX, pwszDevicePath=%s
CBasicProvider::QueryClaim, 8, hr=%lX, pwszDevicePath=%s
CBasicProvider::QueryIfOwnDisk()
CBasicProvider::QueryObjects, 1
CBasicProvider::QueryObjects, 2
CBasicProvider::QueryObjects, 3
CBasicProvider::QueryObjects, 4
CBasicProvider::QueryObjects, 5
CBasicProvider::QueryPacks()
CBasicProvider::Refresh()
CBasicProvider::RemoveDiskFromMap()
CBasicProvider::RemoveDiskFromMap, 1
CBasicProvider::RemoveDiskFromMap, 2, Key=%S
CBasicProvider::RemoveFromMaps()
CBasicProvider::RemoveFromMaps,1:Pack found and deleted from the pack map
CBasicProvider::RemoveFromMaps,3:Pack found and deleted from the object map
CBasicProvider::RemoveObjectFromMap()
CBasicProvider::RemoveObjectFromMap, 1: Tried to remove an item that did not exist
CBasicProvider::RetrieveBasicVolumesIntoMap()
CBasicProvider::RetrieveBasicVolumesIntoMap, 0, hr=%lX
CBasicProvider::RetrieveBasicVolumesIntoMap, 1, error=%ld
CBasicProvider::RetrieveBasicVolumesIntoMap, 2, error=%ld
CBasicProvider::RetrieveBasicVolumesIntoMap, 3, error=%ld
CBasicProvider::RetrieveBasicVolumesIntoMap, 4, error=%ld
CBasicProvider::RetrieveBasicVolumesIntoMap, 5, error=%ld
CBasicProvider::RetrieveBasicVolumesIntoMap, 6, error=%ld
CBasicProvider::RetrieveBasicVolumesIntoMap, 7, hr=%lX
CBasicProvider::RetrieveBasicVolumesIntoMap, 8, hr=%lX
CBasicProvider::RetrieveBasicVolumesIntoMap, 9, hr=%lX
CBasicProvider::RetrivePnpBasicVolumes()
CBasicProvider::RetrivePnpBasicVolumes, 1, index=%d, hr=%lX
CBasicProvider::SendDiskNotification()
CBasicProvider::SendNotification()
CBasicProvider::SendPackNotification()
CBasicVolume::~CBasicVolume()
CBasicVolume::AddPlex()
CBasicVolume::BreakPlex
CBasicVolume::CanContinue()
CBasicVolume::CanContinue, 1, hr=%lX
CBasicVolume::CBasicVolume()
CBasicVolume::ClearFlags
CBasicVolume::ClearFlags, 1
CBasicVolume::ClearFlags, 2
CBasicVolume::ClearFlags, 3
CBasicVolume::ClearFlags, 4
CBasicVolume::ClearFlags, 5
CBasicVolume::ClearFlags, 6
CBasicVolume::ClearFlags, 7
CBasicVolume::ClearFlags, 7.5, hr=%lX
CBasicVolume::ClearFlags, 8, hr=%lX
CBasicVolume::Delete
CBasicVolume::Delete()
CBasicVolume::Extend()
CBasicVolume::Extend, 1
CBasicVolume::Extend, 2, hr=%lX
CBasicVolume::Extend, 3
CBasicVolume::Extend, 4
CBasicVolume::Extend, 5
CBasicVolume::Extend, 6
CBasicVolume::Extend, 7, hr=%lX
CBasicVolume::GetGptFlags
CBasicVolume::GetGptFlags, 1
CBasicVolume::GetGptFlags, 2, hr=%lX
CBasicVolume::GetGptFlags, 3, hr=%lX
CBasicVolume::GetGptFlags, 4, status=%lX
CBasicVolume::GetObjectIdIfMathc()
CBasicVolume::GetPack()
CBasicVolume::GetProperties()
CBasicVolume::GetProperties, 1, %lX
CBasicVolume::GetProperties, 1, expected for volumes offline disk, %lX
CBasicVolume::GetProperties, 2, %lX
CBasicVolume::GetProperties, 3, %lX
CBasicVolume::GetProperties, 4, %lX
CBasicVolume::GetProperties, 4, expected for volumes on offline disk, %lX
CBasicVolume::GetProperties, 8, %lX
CBasicVolume::GetProperties, 9, %lX
CBasicVolume::Initialize()
CBasicVolume::Initialize, 1, %S: %lX 
CBasicVolume::Initialize, 2, %S: %lX 
CBasicVolume::Initialize, 3, %S: %lX 
CBasicVolume::Initialize, 4, name=%S, error=%ld 
CBasicVolume::Initialize, 5, name=%S, error=%ld 
CBasicVolume::Initialize, 6, name=%S, error=%ld 
CBasicVolume::Online
CBasicVolume::QueryPlexes()
CBasicVolume::RemovePlex
CBasicVolume::SetDevicePath()
CBasicVolume::SetDevicePath, 1, Updated Device Path = %S
CBasicVolume::SetDevicePath, 2, Updated Device Path = %S
CBasicVolume::SetDevicePath, Current Device Path = %S Volume Name=%S
CBasicVolume::SetFlags()
CBasicVolume::SetFlags, 1
CBasicVolume::SetFlags, 10
CBasicVolume::SetFlags, 11
CBasicVolume::SetFlags, 12, hr=%lX
CBasicVolume::SetFlags, 2
CBasicVolume::SetFlags, 3
CBasicVolume::SetFlags, 4
CBasicVolume::SetFlags, 5
CBasicVolume::SetFlags, 6
CBasicVolume::SetFlags, 7, hr=%lX
CBasicVolume::SetFlags, 8
CBasicVolume::SetFlags, 9
CBasicVolume::SetVolumeName()
CBasicVolume::SetVolumeName, 3, name=%S, error=%ld 
CBasicVolume::SetVolumeName, GetDeviceName failed, 2, name=%S, error=%ld 
CBasicVolume::SetVolumeName, OpenDevice failed, 1, name=%S, error=%ld 
CBasicVolume::SetVolumeName, Volume Name is Set =%S
CBasicVolume::Shrink()
CBasicVolume::ValidateCall()
CBasicVolume::ValidateCall, 1, hr=%lX
CBasicVolume::ValidateCall, 2, hr=%lX
CBasicVolumePlex::~CBasicVolumePlex()
CBasicVolumePlex::CBasicVolumePlex()
CBasicVolumePlex::Delete()
CBasicVolumePlex::GetExtraFlags()
CBasicVolumePlex::GetExtraFlags,1: no disk object was found
CBasicVolumePlex::GetProperties()
CBasicVolumePlex::GetVolume()
CBasicVolumePlex::Initialize()
CBasicVolumePlex::Initialize: CoCreateGuid failed: %X
CBasicVolumePlex::QueryExtents()
CBasicVolumePlex::Repair()
CBsAsyncObject::~CBsAsyncObject()
CBsAsyncObject::Cancel()
CBsAsyncObject::CBsAsyncObject()
CBsAsyncObject::SetOutput() (1)
CBsAsyncObject::SetOutput() (2)
CBsAsyncObject::Wait pVolumeUnk is NULL.
CBsAsyncObject::Wait WaitImpl *pHrResult=%lX, hr=%lX
CBsAsyncObject::Wait()
CBsNotificationManager::AuxThread()
CBsNotificationManager::FindRemoveRegisteredNotification()
CBsNotificationManager::ForwardDiskNotification()
CBsNotificationManager::ForwardLayoutChangeNotification: PostThreadMessage failed: %X 
CBsNotificationManager::InitializeAuxThread()
CBsNotificationManager::InitializeAuxThread: CreateThread failed: %X
CBsNotificationManager::InitializeAuxThread: PostThreadMessage failed: %X
CBsNotificationManager::RegisterPnPNotifications()
CBsNotificationManager::RegisterPnPNotifications: RegisterDeviceNotification failed: %X
CBsNotificationManager::UnregisterPnPNotifications()
CBsNotificationManager::WindowProc, 24, hr=%1X
CBsNotificationManager::WindowProc, 25, hr=%lX
CBsNotificationManager::WindowProc, 3, hr=%1X
CBsNotificationManager::WindowProc, 5, hr=%1X
CBsNotificationManager::WindowProc, 8.5, hr=%1X
CBsNotificationManager::WindowProc, CUSTOM event received, 23
CBsNotificationManager::WindowProc, DBT_DEVICEARRIVAL, 2, Volume Name=%S
CBsNotificationManager::WindowProc, DBT_DEVICEREMOVECOMPLETE, 4, Volume Name=%S
CBsNotificationManager::WindowProc, GUID_IO_DEVICE_BECOMING_READY, 19
CBsNotificationManager::WindowProc, GUID_IO_DEVICE_EXTERNAL_REQUEST, 20
CBsNotificationManager::WindowProc, GUID_IO_DISK_LAYOUT_CHANGE, 22
CBsNotificationManager::WindowProc, GUID_IO_DISK_LAYOUT_CHANGE, 6
CBsNotificationManager::WindowProc, GUID_IO_MEDIA_ARRIVAL, 7
CBsNotificationManager::WindowProc, GUID_IO_MEDIA_EJECT_REQUEST, 21
CBsNotificationManager::WindowProc, GUID_IO_MEDIA_REMOVAL, 8
CBsNotificationManager::WindowProc, GUID_IO_VOLUME_CHANGE, 9
CBsNotificationManager::WindowProc, GUID_IO_VOLUME_DEVICE_INTERFACE, 18
CBsNotificationManager::WindowProc, GUID_IO_VOLUME_DISMOUNT, 10
CBsNotificationManager::WindowProc, GUID_IO_VOLUME_DISMOUNT_FAILED, 11
CBsNotificationManager::WindowProc, GUID_IO_VOLUME_LOCK, 13
CBsNotificationManager::WindowProc, GUID_IO_VOLUME_LOCK_FAILED, 14
CBsNotificationManager::WindowProc, GUID_IO_VOLUME_MOUNT, 12
CBsNotificationManager::WindowProc, GUID_IO_VOLUME_NAME_CHANGE, 16
CBsNotificationManager::WindowProc, GUID_IO_VOLUME_PHYSICAL_CONFIGURATION_CHANGE, 17
CBsNotificationManager::WindowProc, GUID_IO_VOLUME_UNLOCK, 15
CBsNotificationManager::WindowProc, WM_DEVICECHANGE: wParam=%lX lParam=%lX
ChangeAttributes
ChangePartitionType
CharNextW
CharPrevW
ClaimedDisk
ClaimedDiskRemovableMedia
CleanDisk
ClearFlags
ClearVolumeFlags
CloseHandle
CLSID
CLSID = s '{DE010DA1-289B-4232-8CD0-5112DCA6A7B3}'
Cluster partition
CM_Get_Parent
CoCreateGuid
CoCreateInstance
CompanyName
connection aborted
connection already in progress
connection refused
connection reset
connection_aborted
connection_already_in_progress
connection_refused
connection_reset
ConvertStyle
CoTaskMemAlloc
CoTaskMemFree
CoTaskMemRealloc
CPrvEnumObject::~CPrvEnumObject()
CPrvEnumObject::CPrvEnumObject()
CrashDumpEnabled
CreateDeviceInfoSet
CreateFileW
CreatePartition
CreateThread
cross device link
CurVer = s 'BProvider.BasicProvider.2'
CVdsCallbackObject::InitiateSecondAuction, 2, %s
CVdsCallbackObject::InitiateSecondAuction, 3, %s
CVdsCallbackObject::InitiateSecondAuction, 4, %s, error=%ld
D$ E3
d$ fD
D$(H;D$8
D$(H;D$8t
D$(H;D$8t,H
D$(H;D$8t.H
D$(H;D$8t>H
D$(H;D$8t8H
D$(H;D$8t9H
D$(H;D$8tjH
D$(H;D$8tPH
D$(H;D$8tWH
D$(H;D$H
D$(H;D$Ht\H
D$@@u=
D$@E3
D$0!t$(H!t$ E3
D$0A9>v!
D$0H;
D$8H;
D$8H;E
D$HD;|$<
D$hD9 w
D$HE3
D$HH;D$8
D$hH;D$8
D$HH;D$8twH
D$HH;D$X
D$HH;D$Xu
D$PH!\$03
D$PH;D$x
D$PL+
D$xH;D$ht\H
D$XH;D$x
D$xH;E
D$XH;E
D;|$<s3H
D;L$tu!A
D8}@t
D8}Pu
D8}Xt!
D8d$@t
D8d$Ct!A
D8d$Dt!A
D8d$Et!A
D8d$Ft A
D9{|t
D9}8t*L
D9d$0t
D9d$dv>E
D9f(t
D9gpu
D9gtu
D9N$t
D9o|u
D9oxu
D9v(t
DefWindowProcW
Delete
DeleteBand, 1, %lX
DeleteCriticalSection
DeletePartition
DeleteVolume
destination address required
destination_address_required
device or resource busy
Device Path = %s
Device Type = %ld
DeviceIoControl
DEVOBJ.dll
DevObjCreateDeviceInfoList
DevObjDestroyDeviceInfoList
DevObjEnumDeviceInterfaces
DevObjGetClassDevs
directory not empty
DisableThreadLibraryCalls
DISK DISK DISK DISK 
Disk Number = %ld
Disk removed: %S
DISK: %p
DllCanUnloadNow
DllCanUnloadNow()
DllGetClassObject
DllGetClassObject()
DllRegisterServer
DllRegisterServer()
DllRegisterServer: GetModuleHanle() failed: %X
DllUnregisterServer
DllUnregisterServer()
Dont Handle Layout Change Count = %ld
DPP partition
Dump reg 1
Dump reg 2
Dump reg 3
Dump reg 4
Dump reg 5
Dump reg 6
DWORD sig = 0x%lX
e A_A^A]A\]
E(=csm
e@A_A^A]A\]
E8=csm
EFI system partition
Eh=csm
EH=csm
EnterCriticalSection
en-US
EventRegister
EventSetInformation
EventUnregister
EventWriteTransfer
EwD9E
EwH+H
Ex=csm
EX=csm
executable format error
EXIT CBasicDisk::ClearFlags, Name=%s, Number=%ld, hr=%lX
EXIT CBasicDisk::m_GetSystemDiskNumber, hr=%lX
EXIT CBasicDisk::SetFlags, Name=%s, Number=%ld, hr=%lX
EXIT CBasicDisk::SetFlagsInternal, Name=%s, Number=%ld, status=%lX
EXIT CBasicProvider::GetUninstallInfo, hr=%lX
EXIT CBasicProvider::m_FillVolumeIdBuffer, hr=%lX
EXIT CBasicProvider::OfflineOnlineDisk, hr=%lX
EXIT CBasicVolume::GetGptFlags, hr=%lX
EXIT CBsNotificationManager::WindowProc
EXIT g_ProcessPnpNotification, dwRet=%ld
Extended
Extended Free
Extendvolume
F@H;F@
F`I9F`t
fA9LE
FAA8FAt
Fd$0I
fD;;u
fD;0t
fD9$Au
fD9$xu
fD9$Xu
fD9(t
fD9(tPE
fD9,Bu
fD9,Xu
fD9<Hu
fD91t
fD94Qu
fD94Xu
fD99t
fD9lX
fE9$_u
fE9$Nu
fE9$Vu
fE9,$u
fE9<Fu
fG9$_u
file exists
file too large
FileDescription
filename too long
filename_too_long
FileVersion
FindFirstVolumeW
FindNextVolumeW
FindResourceExW
FindVolumeClose
Flags = 0x%lX
ForceRemove
ForceRemove {DE010DA1-289B-4232-8CD0-5112DCA6A7B3} = s 'VDS Basic Provider'
FreeLibrary
function not supported
g_CriticalSection released
g_ProcessPnpNotification exiting due to shutdown
g_ProcessPnpNotification, 1, dwRet=%ld
g_ProcessPnpNotification, 11.3, Volume Name=%S, Hidden Volume on CSV disk
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 1
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 1.5 Volume Name=%S
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 10, Volume Name=%S, !FILE_DEVICE_DISK
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 11.0, Volume Name=%S
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 11.1, Volume Name=%S, dwRet=%ld
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 11.2, Volume Name=%S, dwRet=%ld
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 12, Volume Name=%S, dwRet=%ld
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 13, Volume Name=%S, disk# =%ld, Part Number=%lu, Part Offset=%I64u
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 14, Volume Name=%S, hrRet=%lX
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 15, Volume Name=%S
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 16, Volume Name=%S
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 4, Volume Name=%S, dwRet=%ld
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 5, Volume Name=%S, dwRet=%ld
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 6, Volume Name=%S, non-basic
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 7, Volume Name=%S, RAM drive
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 7.1, Volume Name=%S, CSV Volume
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 7.2, Volume Name=%S, dwRet=%ld
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 8, Volume Name=%S, dwRet=%ld
g_ProcessPnpNotification, DBT_DEVICEARRIVAL, 9, Volume Name=%S, dwRet=%ld
g_ProcessPnpNotification, DBT_DEVICEREMOVECOMPLETE, 17, Volume Name=%S
g_ProcessPnpNotification, GUID_IO_MEDIA_ARRIVAL, 18
g_ProcessPnpNotification, GUID_IO_MEDIA_REMOVAL, 19
g_ProcessPnpNotification: wParam=%lX lParam=%lX
generic
GetBootDiskNumber
GetBootFromDiskNumber
GetCurrentProcess
GetCurrentProcessId
GetCurrentThreadId
GetDefaultAlignment
GetDeviceAndMediaType
GetDeviceId
GetDeviceLocationEx
GetDeviceManufacturerInfo
GetDeviceName
GetDeviceNumber
GetDeviceRegistryPropertyByInfo
GetDeviceRegistryPropertyByInst
GetDiskFlags
GetDiskIdentifiers
GetDiskLayout
GetDiskOfflineReason
GetDiskRedundancyCount
GetFMIFSQueryDeviceInfo
GetFMIFSQueryDeviceInfoByHandle
GetInterfaceDetailData
GetLastError
GetMediaGeometry
GetMediaGeometryEx
GetMessageW
GetModuleFileNameW
GetModuleHandleW
GetPartitionInformation
GetProcAddress
GetProcessHeap
GetRegistryValue
GetStorageAccessAlignmentProperty
GetSystemDirectoryW
GetSystemInfo
GetSystemTimeAsFileTime
GetTickCount
GetVolumeDiskExtentInfo
GUID sig: {%s}
GuidToString
H UATAUAVAWH
h VWATAVAWH
H WATAUAVAWH
H!l$(
H!t$8H
H;D$(t;H
H;D$Xt
H;D$Xt-H
H;D$Xu
H;E(t
H0!KP!KTL
H9]0t
H9_Xt
H9>tsH
H9D$ u
H9D$@u
H9D$`u
H9D$0u
H9D$Hu
H9D$pu
H9D$Pu
H9D$pu
H9G(u
H9L$pu
H9O u
H9W(t
Health = %ld
HeapAlloc
HeapDestroy
HeapFree
HKEY_CLASSES_ROOT
HKEY_CURRENT_CONFIG
HKEY_CURRENT_USER
HKEY_DYN_DATA
HKEY_LOCAL_MACHINE
HKEY_PERFORMANCE_DATA
HKEY_USERS
host unreachable
host_unreachable
I!4$A!7I
identifier removed
illegal byte sequence
inappropriate io control operation
InitializeCriticalSection
InitializeRundownProtection
InprocServer32 = s '%MODULE%'
InternalName
interrupted
invalid argument
invalid seek
invalid string position
invalid_argument
io error
iostream
iostream stream error
is a directory
IsBasicVolume()
IsClientSKU
IsCsvVolume()
IsDiskClustered
IsDiskCurrentStateReadOnly
IsDiskReadOnly
IsMediaPresent
IsRamDrive
IsVdsLoggingEnabled
IsWinPE
jSOCW
KH@8q(t
L!t$ L!t$@3
L$ E3
l$ E3
L$ SVWAVH
L$ UVWATAUAVAWH
l$ VWATAUAWH
l$ VWATH
l$ VWAVH
l$ VWAWH
l$ WH
L$@H3
L$@L9|$0
L$`H3
L$0E3
L$8E3
L$HE3
L$hH3
L$PfH
L$PH3
L$xH;L$Xt
L$XH+L$H3
L9c0u
L9d$0L
L9d$x
L9fXt
L9G u
L9G u,H9W(u&L
L9O(u
L9W u
lAcquireResourceShared
LcA<E3
LDM data partition
LDM metadata partition
LeaveCriticalSection
LegalCopyright
LoadLibraryExW
LoadResource
LocalServer32
Location Path = %s
LockDismountVolume
LogError
Logical
LogWarning
lstrcmpiW
lstrcpynW
lstrlenW
m2Jess*
Main OS partition
malloc
MAX partitions = %lu
Media Type = %ld
memcmp
memcpy
memmove
memset
message size
message_size
Microsoft
Microsoft Corporation
Microsoft reserved partition
Microsoft Virtual Disk Service Basic Provider
Microsoft.Windows.Storage.VDS.BasicDisk
Migrating = %d
Module
msvcrt.dll
MultiByteToWideChar
Name = %s
network down
network reset
network unreachable
network_down
network_reset
network_unreachable
no buffer space
no child process
no link
no lock available
no message
no message available
no protocol option
no space on device
no stream resources
no such device
no such device or address
no such file or directory
no such process
no_buffer_space
no_protocol_option
NoRemove
NoRemove CLSID
not a directory
not a socket
not a stream
not connected
not enough memory
not supported
not_a_socket
not_connected
notification: registered disk %d offset %I64d
NtDeviceIoControlFile
ntdll.dll
NtPowerInformation
NtQuerySystemInformation
NtQueryVolumeInformationFile
Offline Reason = %ld
OLEAUT32.dll
OpenDevice
operation canceled
operation in progress
operation not permitted
operation not supported
operation would block
operation_in_progress
operation_not_supported
operation_would_block
OriginalFilename
OS data partition
owner dead
p AWH
p WATAUAVAWH
p WATAVH
p WATAWH
p WAVAWH
P(H;UPu
p0R^G'
PA^A\_^]
PA_A^_^]
PA_A^A\_^[]
pA_A^A]A\_^]
PA_A^A]A\_^]
pA_A^A]A\_^]
PACK PACK PACK PACK PACK
Partition Type = %lu
pcPZt
PeekMessageW
permission denied
permission_denied
PostThreadMessageW
PreInstalled partition
Primary
ProductName
ProductVersion
ProgID = s 'BProvider.BasicProvider.2'
protocol error
protocol not supported
protocol_not_supported
q"\\<
q*Z~:
q:_0#
q:U> 
Q~;6}
q0R^G'
qa_XR
qB^\Z
qbSX3
qCS0n
qr]\W'
qSVPn
QueryDosDeviceW
QueryObjects
QueryObjects()
QueryPerformanceCounter
QueryVolumesHelper()
read only file system
realloc
RegCloseKey
RegCreateKeyExW
RegDeleteKeyExW
RegDeleteKeyW
RegDeleteValueW
RegEnumKeyExW
RegEnumValueW
Region %d:
REGION REGION REGION REGION
RegisterDeviceNotificationW
RegisterProvider
REGISTRY
RegOpenKeyExW
RegQueryInfoKeyW
RegSetValueExW
ReleaseRundownProtection
RemoveEventSource
resource deadlock would occur
resource unavailable try again
result out of range
Revert On Close = %d
RtlAcquireResourceExclusive
RtlCaptureContext
RtlConvertExclusiveToShared
RtlConvertSharedToExclusive
RtlDeleteResource
RtlInitializeResource
RtlLookupFunctionEntry
RtlReleaseResource
RtlVirtualUnwind
Servicing files partition
Servicing metadata partition
Servicing reserve partition
Servicing staging root partition
SetDiskLayout
SetFilePointer
SetFilePointerEx
SetFlags
SetLastError
SetUnhandledExceptionFilter
SetVolumeFlags
ShrinkVolume
Size = %I64u
SizeofResource
Sleep
SOCW.C
SOCWE
SPT = %lu
Starting Usable Offset = %I64u
state not recoverable
Status = %ld
stream timeout
string too long
StringFileInfo
SVWAVH
system
System\CurrentControlSet\Control\CrashControl
System\Setup
SystemPartition
t#M;F
t$ E3
t$ UWATAUAVH
t$ UWAVH
t$ WAVAWH
t$ WH
T$HD8d$At
TerminateProcess
text file busy
timed out
timed_out
too many files open
too many files open in system
too many links
too many symbolic link levels
too_many_files_open
towupper
TPC = %lu
Translation
True Size = %I64u
TYPELIB
u HcA<H
u(8]@}#
u/H9x
u`H9K
u7H9S
u7L9h
u7M9u
UATAUAVAWH
uBH9Q
u'I9L$
UnhandledExceptionFilter
UNKNOWN
Unknown
unknown error
UnregisterDeviceNotification
UnregisterProvider
Usable Length= %I64u
USER32.dll
USVWATAUAVAWH
UVWATAUAVAWH
UVWATAVH
UVWAVAWH
UWATAVAWH
UWAUAVAWH
UWAVH
uX9}`tSI
val ThreadingModel = s 'Free'
value too large
VarFileInfo
VDS Basic Provider
VDS ID= %s
VDS ID= {%s}
VdsAllocateEmptyString
VdsAllocateString
vdsbas.dll
vdsbas.pdb
VdsBas::DllMain()
VdsDoesDiskHaveArcPath
VdsHeapAlloc
VdsHeapFree
VdsTraceEx
VdsTraceExW
VdsTraceW
vdsutil.dll
VersionIndependentProgID = s 'BProvider.BasicProvider'
Virtual Disk Service Basic Provider
VirtualAlloc
VirtualProtect
VirtualQuery
Volume Device = %p
VS_VERSION_INFO
VWAUAVAWH
VWAVH
VWAWH
w|H9{
WaitForRundownProtectionRelease
WaitForSingleObject
WATAUAVAWH
WAVAWH
wcscat_s
wcschr
wcscmp
wcsstr
Windows system partition
WriteBootCode
WriteFile
wrong protocol type
wrong_protocol_type
x ATAVAWH
x AVH
x UATAUAVAWH
x UATAVH
x UATAWH
x UAVAWH
xA_A^A]A\_^[]
XA_A^A]A\_^][
